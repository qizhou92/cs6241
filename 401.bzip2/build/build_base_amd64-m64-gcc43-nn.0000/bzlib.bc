; ModuleID = 'bzlib.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.bz_stream = type { i8*, i32, i32, i32, i8*, i32, i32, i32, i8*, i8* (i8*, i32, i32)*, void (i8*, i8*)*, i8* }
%struct.EState = type { %struct.bz_stream*, i32, i32, i32, i32*, i32*, i32*, i32, i32*, i8*, i16*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [256 x i8], [256 x i8], i32, i32, i32, i32, i32, i32, i32, i32, [258 x i32], [18002 x i8], [18002 x i8], [6 x [258 x i8]], [6 x [258 x i32]], [6 x [258 x i32]], [258 x [4 x i32]] }
%struct.DState = type { %struct.bz_stream*, i32, i8, i32, i8, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [256 x i32], i32, [257 x i32], [257 x i32], i32*, i16*, i8*, i32, i32, i32, i32, i32, [256 x i8], [16 x i8], [256 x i8], [4096 x i8], [16 x i32], [18002 x i8], [18002 x i8], [6 x [258 x i8]], [6 x [258 x i32]], [6 x [258 x i32]], [6 x [258 x i32]], [6 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32* }

@stderr = external global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [269 x i8] c"\0A\0Abzip2/libbzip2: internal error number %d.\0AThis may be a bug in bzip2/libbzip2, %s.\0AIt may also be a bug in your compiler.  Please do not bother the\0Aoriginal author of bzip2 with a bug report for this.  He\0Adoesn't know anything about bzip2 as it appears in CPU2006.\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [1057 x i8] c"\0A*** A special note about internal error number 1007 ***\0A\0AExperience suggests that a common cause of i.e. 1007\0Ais unreliable memory or other hardware.  The 1007 assertion\0Ajust happens to cross-check the results of huge numbers of\0Amemory reads/writes, and so acts (unintendedly) as a stress\0Atest of your memory system.\0A\0AI suggest the following: try compressing the file again,\0Apossibly monitoring progress in detail with the -vv flag.\0A\0A* If the error cannot be reproduced, and/or happens at different\0A  points in compression, you may have a flaky memory system.\0A  Try a memory-test program.  I have used Memtest86\0A  (www.memtest86.com).  At the time of writing it is free (GPLd).\0A  Memtest86 tests memory much more thorougly than your BIOSs\0A  power-on test, and may find failures that the BIOS doesn't.\0A\0A* If the error can be repeatably reproduced, this is a bug in\0A  bzip2, and I would very much like to hear about it.  Please\0A  let me know, and, ideally, save a copy of the file causing the\0A  problem -- without which I will be unable to investigate it.\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c" {0x%08x, 0x%08x}\00", align 1
@.str.4 = private unnamed_addr constant [55 x i8] c"\0A    combined CRCs: stored = 0x%08x, computed = 0x%08x\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"1.0.3, 15-Feb-2005\00", align 1
@bzerrorstrings = internal unnamed_addr constant [16 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0)], align 16
@BZ2_crc32Table = external global [256 x i32], align 16
@BZ2_rNums = external global [512 x i32], align 16
@.str.10 = private unnamed_addr constant [3 x i8] c"OK\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"SEQUENCE_ERROR\00", align 1
@.str.12 = private unnamed_addr constant [12 x i8] c"PARAM_ERROR\00", align 1
@.str.13 = private unnamed_addr constant [10 x i8] c"MEM_ERROR\00", align 1
@.str.14 = private unnamed_addr constant [11 x i8] c"DATA_ERROR\00", align 1
@.str.15 = private unnamed_addr constant [17 x i8] c"DATA_ERROR_MAGIC\00", align 1
@.str.16 = private unnamed_addr constant [9 x i8] c"IO_ERROR\00", align 1
@.str.17 = private unnamed_addr constant [15 x i8] c"UNEXPECTED_EOF\00", align 1
@.str.18 = private unnamed_addr constant [13 x i8] c"OUTBUFF_FULL\00", align 1
@.str.19 = private unnamed_addr constant [13 x i8] c"CONFIG_ERROR\00", align 1
@.str.20 = private unnamed_addr constant [4 x i8] c"???\00", align 1

; Function Attrs: noreturn nounwind uwtable
define void @BZ2_bz__AssertH__fail(i32 %errcode) #0 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call1 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([269 x i8], [269 x i8]* @.str, i64 0, i64 0), i32 %errcode, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0)) #12
  %cmp = icmp eq i32 %errcode, 1007
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %2 = tail call i64 @fwrite(i8* nonnull getelementptr inbounds ([1057 x i8], [1057 x i8]* @.str.1, i64 0, i64 0), i64 1056, i64 1, %struct._IO_FILE* %1) #12
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  tail call void @exit(i32 0) #13
  unreachable
}

; Function Attrs: nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) #1

; Function Attrs: norecurse nounwind readnone uwtable
define i8* @BZ2_bzlibVersion() #2 {
entry:
  ret i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0)
}

; Function Attrs: noreturn nounwind
declare void @exit(i32) #3

; Function Attrs: nounwind uwtable
define i32 @BZ2_bzCompressInit(%struct.bz_stream* %strm, i32 %blockSize100k, i32 %verbosity, i32 %workFactor) #4 {
entry:
  %cmp = icmp eq %struct.bz_stream* %strm, null
  %blockSize100k.off = add i32 %blockSize100k, -1
  %0 = icmp ugt i32 %blockSize100k.off, 8
  %1 = or i1 %cmp, %0
  %2 = icmp ugt i32 %workFactor, 250
  %3 = or i1 %2, %1
  br i1 %3, label %cleanup, label %if.end9

if.end9:                                          ; preds = %entry
  %cmp10 = icmp eq i32 %workFactor, 0
  %.workFactor = select i1 %cmp10, i32 30, i32 %workFactor
  %bzalloc = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 9
  %4 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %bzalloc, align 8
  %cmp13 = icmp eq i8* (i8*, i32, i32)* %4, null
  br i1 %cmp13, label %if.then14, label %if.end16

if.then14:                                        ; preds = %if.end9
  store i8* (i8*, i32, i32)* @default_bzalloc, i8* (i8*, i32, i32)** %bzalloc, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then14, %if.end9
  %5 = phi i8* (i8*, i32, i32)* [ @default_bzalloc, %if.then14 ], [ %4, %if.end9 ]
  %bzfree = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 10
  %6 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %cmp17 = icmp eq void (i8*, i8*)* %6, null
  br i1 %cmp17, label %if.then18, label %if.end20

if.then18:                                        ; preds = %if.end16
  store void (i8*, i8*)* @default_bzfree, void (i8*, i8*)** %bzfree, align 8
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %opaque = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 11
  %7 = load i8*, i8** %opaque, align 8
  %call22 = tail call i8* %5(i8* %7, i32 55768, i32 1) #10
  %cmp23 = icmp eq i8* %call22, null
  br i1 %cmp23, label %cleanup, label %if.end25

if.end25:                                         ; preds = %if.end20
  %strm26 = bitcast i8* %call22 to %struct.bz_stream**
  store %struct.bz_stream* %strm, %struct.bz_stream** %strm26, align 8
  %arr1 = getelementptr inbounds i8, i8* %call22, i64 24
  %8 = bitcast i8* %arr1 to i32**
  %arr2 = getelementptr inbounds i8, i8* %call22, i64 32
  %9 = bitcast i8* %arr2 to i32**
  %ftab = getelementptr inbounds i8, i8* %call22, i64 40
  %10 = bitcast i8* %ftab to i32**
  %mul = mul nsw i32 %blockSize100k, 100000
  call void @llvm.memset.p0i8.i64(i8* %arr1, i8 0, i64 24, i32 8, i1 false)
  %11 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %bzalloc, align 8
  %12 = load i8*, i8** %opaque, align 8
  %mul29 = mul i32 %blockSize100k, 400000
  %call31 = tail call i8* %11(i8* %12, i32 %mul29, i32 1) #10
  %13 = bitcast i8* %arr1 to i8**
  store i8* %call31, i8** %13, align 8
  %14 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %bzalloc, align 8
  %15 = load i8*, i8** %opaque, align 8
  %mul36 = add i32 %mul29, 136
  %call38 = tail call i8* %14(i8* %15, i32 %mul36, i32 1) #10
  %16 = bitcast i8* %arr2 to i8**
  store i8* %call38, i8** %16, align 8
  %17 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %bzalloc, align 8
  %18 = load i8*, i8** %opaque, align 8
  %call42 = tail call i8* %17(i8* %18, i32 262148, i32 1) #10
  %19 = bitcast i8* %ftab to i8**
  store i8* %call42, i8** %19, align 8
  %20 = load i32*, i32** %8, align 8
  %cmp45 = icmp eq i32* %20, null
  %21 = ptrtoint i32* %20 to i64
  br i1 %cmp45, label %if.end63, label %lor.lhs.false47

lor.lhs.false47:                                  ; preds = %if.end25
  %22 = load i32*, i32** %9, align 8
  %cmp49 = icmp eq i32* %22, null
  %cmp53 = icmp eq i8* %call42, null
  %or.cond = or i1 %cmp53, %cmp49
  br i1 %or.cond, label %if.then59, label %if.end86

if.then59:                                        ; preds = %lor.lhs.false47
  %23 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %24 = load i8*, i8** %opaque, align 8
  %25 = bitcast i32* %20 to i8*
  tail call void %23(i8* %24, i8* %25) #10
  br label %if.end63

if.end63:                                         ; preds = %if.end25, %if.then59
  %26 = load i32*, i32** %9, align 8
  %cmp65 = icmp eq i32* %26, null
  br i1 %cmp65, label %if.end71, label %if.then67

if.then67:                                        ; preds = %if.end63
  %27 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %28 = load i8*, i8** %opaque, align 8
  %29 = bitcast i32* %26 to i8*
  tail call void %27(i8* %28, i8* %29) #10
  br label %if.end71

if.end71:                                         ; preds = %if.end63, %if.then67
  %30 = load i32*, i32** %10, align 8
  %cmp73 = icmp eq i32* %30, null
  br i1 %cmp73, label %if.then82, label %if.then75

if.then75:                                        ; preds = %if.end71
  %31 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %32 = load i8*, i8** %opaque, align 8
  %33 = bitcast i32* %30 to i8*
  tail call void %31(i8* %32, i8* %33) #10
  br label %if.then82

if.then82:                                        ; preds = %if.then75, %if.end71
  %34 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %35 = load i8*, i8** %opaque, align 8
  tail call void %34(i8* %35, i8* nonnull %call22) #10
  br label %cleanup

if.end86:                                         ; preds = %lor.lhs.false47
  %36 = ptrtoint i32* %22 to i64
  %blockNo = getelementptr inbounds i8, i8* %call22, i64 660
  %37 = bitcast i8* %blockNo to i32*
  store i32 0, i32* %37, align 4
  %state = getelementptr inbounds i8, i8* %call22, i64 12
  %38 = bitcast i8* %state to i32*
  store i32 2, i32* %38, align 4
  %mode = getelementptr inbounds i8, i8* %call22, i64 8
  %39 = bitcast i8* %mode to i32*
  store i32 2, i32* %39, align 8
  %combinedCRC = getelementptr inbounds i8, i8* %call22, i64 652
  %40 = bitcast i8* %combinedCRC to i32*
  store i32 0, i32* %40, align 4
  %blockSize100k87 = getelementptr inbounds i8, i8* %call22, i64 664
  %41 = bitcast i8* %blockSize100k87 to i32*
  store i32 %blockSize100k, i32* %41, align 8
  %sub = add nsw i32 %mul, -19
  %nblockMAX = getelementptr inbounds i8, i8* %call22, i64 112
  %42 = bitcast i8* %nblockMAX to i32*
  store i32 %sub, i32* %42, align 8
  %verbosity89 = getelementptr inbounds i8, i8* %call22, i64 656
  %43 = bitcast i8* %verbosity89 to i32*
  store i32 %verbosity, i32* %43, align 8
  %workFactor90 = getelementptr inbounds i8, i8* %call22, i64 88
  %44 = bitcast i8* %workFactor90 to i32*
  store i32 %.workFactor, i32* %44, align 8
  %block = getelementptr inbounds i8, i8* %call22, i64 64
  %45 = bitcast i8* %block to i64*
  store i64 %36, i64* %45, align 8
  %mtfv = getelementptr inbounds i8, i8* %call22, i64 72
  %46 = bitcast i8* %mtfv to i64*
  store i64 %21, i64* %46, align 8
  %zbits = getelementptr inbounds i8, i8* %call22, i64 80
  %47 = bitcast i8* %zbits to i8**
  store i8* null, i8** %47, align 8
  %ptr = getelementptr inbounds i8, i8* %call22, i64 56
  %48 = bitcast i8* %ptr to i64*
  store i64 %21, i64* %48, align 8
  %state94 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 8
  store i8* %call22, i8** %state94, align 8
  %total_in_lo32 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 2
  store i32 0, i32* %total_in_lo32, align 4
  %total_in_hi32 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 3
  store i32 0, i32* %total_in_hi32, align 8
  %total_out_lo32 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 6
  store i32 0, i32* %total_out_lo32, align 4
  %total_out_hi32 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 7
  store i32 0, i32* %total_out_hi32, align 8
  %state_in_ch.i = getelementptr inbounds i8, i8* %call22, i64 92
  %49 = bitcast i8* %state_in_ch.i to i32*
  store i32 256, i32* %49, align 4
  %state_in_len.i = getelementptr inbounds i8, i8* %call22, i64 96
  %50 = bitcast i8* %state_in_len.i to i32*
  store i32 0, i32* %50, align 8
  %nblock.i = getelementptr inbounds i8, i8* %call22, i64 108
  %51 = bitcast i8* %nblock.i to i32*
  store i32 0, i32* %51, align 4
  %numZ.i = getelementptr inbounds i8, i8* %call22, i64 116
  %52 = bitcast i8* %numZ.i to i32*
  store i32 0, i32* %52, align 4
  %state_out_pos.i = getelementptr inbounds i8, i8* %call22, i64 120
  %53 = bitcast i8* %state_out_pos.i to i32*
  store i32 0, i32* %53, align 8
  %blockCRC.i = getelementptr inbounds i8, i8* %call22, i64 648
  %54 = bitcast i8* %blockCRC.i to i32*
  store i32 -1, i32* %54, align 8
  %55 = getelementptr i8, i8* %call22, i64 128
  tail call void @llvm.memset.p0i8.i64(i8* %55, i8 0, i64 256, i32 1, i1 false) #10
  %56 = load i32, i32* %37, align 4
  %inc1.i = add nsw i32 %56, 1
  store i32 %inc1.i, i32* %37, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.then82, %if.end20, %entry, %if.end86
  %retval.0 = phi i32 [ 0, %if.end86 ], [ -2, %entry ], [ -3, %if.end20 ], [ -3, %if.then82 ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #5

; Function Attrs: nounwind uwtable
define internal noalias i8* @default_bzalloc(i8* nocapture readnone %opaque, i32 %items, i32 %size) #4 {
entry:
  %mul = mul nsw i32 %size, %items
  %conv = sext i32 %mul to i64
  %call = tail call noalias i8* @malloc(i64 %conv) #10
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define internal void @default_bzfree(i8* nocapture readnone %opaque, i8* %addr) #4 {
entry:
  %cmp = icmp eq i8* %addr, null
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @free(i8* nonnull %addr) #10
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #5

; Function Attrs: nounwind uwtable
define i32 @BZ2_bzCompress(%struct.bz_stream* readonly %strm, i32 %action) #4 {
entry:
  %cmp = icmp eq %struct.bz_stream* %strm, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %state = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 8
  %0 = bitcast i8** %state to %struct.EState**
  %1 = load %struct.EState*, %struct.EState** %0, align 8
  %cmp1 = icmp eq %struct.EState* %1, null
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %strm4 = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 0
  %2 = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  %cmp5 = icmp eq %struct.bz_stream* %2, %strm
  br i1 %cmp5, label %preswitch.preheader, label %cleanup

preswitch.preheader:                              ; preds = %if.end3
  %mode = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 1
  %avail_in = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 1
  %avail_in_expect = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 3
  %.pre = load i32, i32* %mode, align 8
  br label %preswitch

preswitch:                                        ; preds = %preswitch.backedge, %preswitch.preheader
  %3 = phi i32 [ %storemerge, %preswitch.backedge ], [ %.pre, %preswitch.preheader ]
  switch i32 %3, label %cleanup.loopexit127 [
    i32 1, label %cleanup
    i32 2, label %sw.bb8
    i32 3, label %sw.bb23
    i32 4, label %sw.bb47
  ]

sw.bb8:                                           ; preds = %preswitch
  switch i32 %action, label %cleanup [
    i32 0, label %if.then10
    i32 1, label %preswitch.backedge
    i32 2, label %if.then18
  ]

if.then10:                                        ; preds = %sw.bb8
  %call = tail call fastcc zeroext i8 @handle_compress(%struct.bz_stream* nonnull %strm)
  %tobool = icmp ne i8 %call, 0
  %cond = select i1 %tobool, i32 1, i32 -2
  br label %cleanup

preswitch.backedge:                               ; preds = %sw.bb8, %if.then18
  %storemerge = phi i32 [ 4, %if.then18 ], [ 3, %sw.bb8 ]
  %storemerge126 = load i32, i32* %avail_in, align 8
  store i32 %storemerge126, i32* %avail_in_expect, align 8
  store i32 %storemerge, i32* %mode, align 8
  br label %preswitch

if.then18:                                        ; preds = %sw.bb8
  br label %preswitch.backedge

sw.bb23:                                          ; preds = %preswitch
  %cmp24 = icmp eq i32 %action, 1
  br i1 %cmp24, label %if.end27, label %cleanup

if.end27:                                         ; preds = %sw.bb23
  %4 = load i32, i32* %avail_in_expect, align 8
  %5 = load i32, i32* %avail_in, align 8
  %cmp31 = icmp eq i32 %4, %5
  br i1 %cmp31, label %if.end34, label %cleanup

if.end34:                                         ; preds = %if.end27
  %call35 = tail call fastcc zeroext i8 @handle_compress(%struct.bz_stream* nonnull %strm)
  %6 = load i32, i32* %avail_in_expect, align 8
  %cmp37 = icmp eq i32 %6, 0
  br i1 %cmp37, label %lor.lhs.false, label %cleanup

lor.lhs.false:                                    ; preds = %if.end34
  %state_in_ch.i = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 13
  %7 = load i32, i32* %state_in_ch.i, align 4
  %cmp.i = icmp ult i32 %7, 256
  br i1 %cmp.i, label %land.lhs.true.i, label %lor.lhs.false41

land.lhs.true.i:                                  ; preds = %lor.lhs.false
  %state_in_len.i = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 14
  %8 = load i32, i32* %state_in_len.i, align 8
  %cmp1.i = icmp sgt i32 %8, 0
  br i1 %cmp1.i, label %cleanup, label %lor.lhs.false41

lor.lhs.false41:                                  ; preds = %land.lhs.true.i, %lor.lhs.false
  %state_out_pos = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 20
  %9 = load i32, i32* %state_out_pos, align 8
  %numZ = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 19
  %10 = load i32, i32* %numZ, align 4
  %cmp42 = icmp slt i32 %9, %10
  br i1 %cmp42, label %cleanup, label %if.end45

if.end45:                                         ; preds = %lor.lhs.false41
  store i32 2, i32* %mode, align 8
  br label %cleanup

sw.bb47:                                          ; preds = %preswitch
  %cmp48 = icmp eq i32 %action, 2
  br i1 %cmp48, label %if.end51, label %cleanup

if.end51:                                         ; preds = %sw.bb47
  %11 = load i32, i32* %avail_in_expect, align 8
  %12 = load i32, i32* %avail_in, align 8
  %cmp55 = icmp eq i32 %11, %12
  br i1 %cmp55, label %if.end58, label %cleanup

if.end58:                                         ; preds = %if.end51
  %call59 = tail call fastcc zeroext i8 @handle_compress(%struct.bz_stream* nonnull %strm)
  %tobool60 = icmp eq i8 %call59, 0
  br i1 %tobool60, label %cleanup, label %if.end62

if.end62:                                         ; preds = %if.end58
  %13 = load i32, i32* %avail_in_expect, align 8
  %cmp64 = icmp eq i32 %13, 0
  br i1 %cmp64, label %lor.lhs.false66, label %cleanup

lor.lhs.false66:                                  ; preds = %if.end62
  %state_in_ch.i111 = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 13
  %14 = load i32, i32* %state_in_ch.i111, align 4
  %cmp.i112 = icmp ult i32 %14, 256
  br i1 %cmp.i112, label %land.lhs.true.i115, label %lor.lhs.false69

land.lhs.true.i115:                               ; preds = %lor.lhs.false66
  %state_in_len.i113 = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 14
  %15 = load i32, i32* %state_in_len.i113, align 8
  %cmp1.i114 = icmp sgt i32 %15, 0
  br i1 %cmp1.i114, label %cleanup, label %lor.lhs.false69

lor.lhs.false69:                                  ; preds = %land.lhs.true.i115, %lor.lhs.false66
  %state_out_pos70 = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 20
  %16 = load i32, i32* %state_out_pos70, align 8
  %numZ71 = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 19
  %17 = load i32, i32* %numZ71, align 4
  %cmp72 = icmp slt i32 %16, %17
  br i1 %cmp72, label %cleanup, label %if.end75

if.end75:                                         ; preds = %lor.lhs.false69
  store i32 1, i32* %mode, align 8
  br label %cleanup

cleanup.loopexit127:                              ; preds = %preswitch
  br label %cleanup

cleanup:                                          ; preds = %sw.bb8, %preswitch, %cleanup.loopexit127, %land.lhs.true.i115, %land.lhs.true.i, %lor.lhs.false69, %if.end62, %if.end58, %if.end51, %sw.bb47, %lor.lhs.false41, %if.end34, %if.end27, %sw.bb23, %if.end3, %if.end, %entry, %if.end75, %if.end45, %if.then10
  %retval.0 = phi i32 [ 4, %if.end75 ], [ 1, %if.end45 ], [ %cond, %if.then10 ], [ -2, %entry ], [ -2, %if.end ], [ -2, %if.end3 ], [ -1, %sw.bb23 ], [ -1, %if.end27 ], [ 2, %if.end34 ], [ 2, %lor.lhs.false41 ], [ -1, %sw.bb47 ], [ -1, %if.end51 ], [ -1, %if.end58 ], [ 3, %if.end62 ], [ 3, %lor.lhs.false69 ], [ 2, %land.lhs.true.i ], [ 3, %land.lhs.true.i115 ], [ 0, %cleanup.loopexit127 ], [ -1, %preswitch ], [ -2, %sw.bb8 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @handle_compress(%struct.bz_stream* nocapture readonly %strm) unnamed_addr #4 {
entry:
  %state = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 8
  %0 = bitcast i8** %state to %struct.EState**
  %1 = load %struct.EState*, %struct.EState** %0, align 8
  %state1 = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 2
  %state_out_pos.i = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 20
  %strm.i = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 0
  %numZ = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 19
  %mode = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 1
  %avail_in_expect = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 3
  %state_in_ch.i101 = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 13
  %state_in_len.i = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 14
  %nblock.i117 = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 17
  %blockCRC.i120 = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 26
  %scevgep.i = getelementptr %struct.EState, %struct.EState* %1, i64 0, i32 22, i64 0
  %blockNo.i = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 29
  %zbits.i = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 11
  %nblockMAX.i = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 18
  %block.i = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 9
  %2 = bitcast i32* %mode to i64*
  br label %while.body.outer

while.body.outer:                                 ; preds = %if.else57, %if.then55, %flush_RL.exit, %entry
  %progress_out.0.ph = phi i8 [ 0, %entry ], [ %progress_out.1132, %flush_RL.exit ], [ %progress_out.1132, %if.then55 ], [ %progress_out.1132, %if.else57 ]
  %progress_in.0.ph = phi i8 [ 0, %entry ], [ %or3897, %flush_RL.exit ], [ %or3897, %if.then55 ], [ %or3897, %if.else57 ]
  %.pre = load i32, i32* %state1, align 4
  switch i32 %.pre, label %infloop [
    i32 1, label %if.then
    i32 2, label %if.end30.if.then34_crit_edge
  ]

if.then:                                          ; preds = %while.body.outer
  %3 = load %struct.bz_stream*, %struct.bz_stream** %strm.i, align 8
  %avail_out31.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3, i64 0, i32 5
  %4 = load i32, i32* %avail_out31.i, align 8
  %cmp32.i = icmp eq i32 %4, 0
  br i1 %cmp32.i, label %copy_output_until_stop.exit, label %if.end.i

if.end.i:                                         ; preds = %if.then, %while.body.backedge.i
  %5 = phi %struct.bz_stream* [ %21, %while.body.backedge.i ], [ %3, %if.then ]
  %progress_out.033.i = phi i8 [ 1, %while.body.backedge.i ], [ 0, %if.then ]
  %6 = load i32, i32* %state_out_pos.i, align 8
  %7 = load i32, i32* %numZ, align 4
  %cmp1.i = icmp slt i32 %6, %7
  br i1 %cmp1.i, label %if.end3.i, label %copy_output_until_stop.exit

if.end3.i:                                        ; preds = %if.end.i
  %idxprom.i = sext i32 %6 to i64
  %8 = load i8*, i8** %zbits.i, align 8
  %arrayidx.i = getelementptr inbounds i8, i8* %8, i64 %idxprom.i
  %9 = load i8, i8* %arrayidx.i, align 1
  %next_out.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %5, i64 0, i32 4
  %10 = load i8*, i8** %next_out.i, align 8
  store i8 %9, i8* %10, align 1
  %11 = load i32, i32* %state_out_pos.i, align 8
  %inc.i = add nsw i32 %11, 1
  store i32 %inc.i, i32* %state_out_pos.i, align 8
  %12 = load %struct.bz_stream*, %struct.bz_stream** %strm.i, align 8
  %avail_out8.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %12, i64 0, i32 5
  %13 = load i32, i32* %avail_out8.i, align 8
  %dec.i = add i32 %13, -1
  store i32 %dec.i, i32* %avail_out8.i, align 8
  %14 = load %struct.bz_stream*, %struct.bz_stream** %strm.i, align 8
  %next_out10.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %14, i64 0, i32 4
  %15 = load i8*, i8** %next_out10.i, align 8
  %incdec.ptr.i = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %incdec.ptr.i, i8** %next_out10.i, align 8
  %16 = load %struct.bz_stream*, %struct.bz_stream** %strm.i, align 8
  %total_out_lo32.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %16, i64 0, i32 6
  %17 = load i32, i32* %total_out_lo32.i, align 4
  %inc12.i = add i32 %17, 1
  store i32 %inc12.i, i32* %total_out_lo32.i, align 4
  %18 = load %struct.bz_stream*, %struct.bz_stream** %strm.i, align 8
  %total_out_lo3214.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %18, i64 0, i32 6
  %19 = load i32, i32* %total_out_lo3214.i, align 4
  %cmp15.i = icmp eq i32 %19, 0
  br i1 %cmp15.i, label %if.then16.i, label %while.body.backedge.i

if.then16.i:                                      ; preds = %if.end3.i
  %total_out_hi32.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %18, i64 0, i32 7
  %20 = load i32, i32* %total_out_hi32.i, align 8
  %inc18.i = add i32 %20, 1
  store i32 %inc18.i, i32* %total_out_hi32.i, align 8
  %.pre.i = load %struct.bz_stream*, %struct.bz_stream** %strm.i, align 8
  br label %while.body.backedge.i

while.body.backedge.i:                            ; preds = %if.then16.i, %if.end3.i
  %21 = phi %struct.bz_stream* [ %.pre.i, %if.then16.i ], [ %18, %if.end3.i ]
  %avail_out.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %21, i64 0, i32 5
  %22 = load i32, i32* %avail_out.i, align 8
  %cmp.i = icmp eq i32 %22, 0
  br i1 %cmp.i, label %copy_output_until_stop.exit, label %if.end.i

copy_output_until_stop.exit:                      ; preds = %if.end.i, %while.body.backedge.i, %if.then
  %progress_out.0.lcssa.i = phi i8 [ 0, %if.then ], [ %progress_out.033.i, %if.end.i ], [ 1, %while.body.backedge.i ]
  %or98 = or i8 %progress_out.0.lcssa.i, %progress_out.0.ph
  %23 = load i32, i32* %state_out_pos.i, align 8
  %24 = load i32, i32* %numZ, align 4
  %cmp4 = icmp slt i32 %23, %24
  br i1 %cmp4, label %while.end, label %if.end

if.end:                                           ; preds = %copy_output_until_stop.exit
  %25 = load i32, i32* %mode, align 8
  %cmp7 = icmp eq i32 %25, 4
  br i1 %cmp7, label %land.lhs.true, label %if.end15

land.lhs.true:                                    ; preds = %if.end
  %26 = load i32, i32* %avail_in_expect, align 8
  %cmp9 = icmp eq i32 %26, 0
  br i1 %cmp9, label %land.lhs.true11, label %if.end15

land.lhs.true11:                                  ; preds = %land.lhs.true
  %27 = load i32, i32* %state_in_ch.i101, align 4
  %cmp.i102 = icmp ult i32 %27, 256
  br i1 %cmp.i102, label %land.lhs.true.i, label %while.end

land.lhs.true.i:                                  ; preds = %land.lhs.true11
  %28 = load i32, i32* %state_in_len.i, align 8
  %cmp1.i103 = icmp sgt i32 %28, 0
  br i1 %cmp1.i103, label %if.end15, label %while.end

if.end15:                                         ; preds = %land.lhs.true.i, %land.lhs.true, %if.end
  store i32 0, i32* %nblock.i117, align 4
  store i32 0, i32* %numZ, align 4
  store i32 0, i32* %state_out_pos.i, align 8
  store i32 -1, i32* %blockCRC.i120, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull %scevgep.i, i8 0, i64 256, i32 1, i1 false) #10
  %29 = load i32, i32* %blockNo.i, align 4
  %inc1.i = add nsw i32 %29, 1
  store i32 %inc1.i, i32* %blockNo.i, align 4
  store i32 2, i32* %state1, align 4
  %cmp18 = icmp eq i32 %25, 3
  br i1 %cmp18, label %land.lhs.true20, label %if.then34

land.lhs.true20:                                  ; preds = %if.end15
  %30 = load i32, i32* %avail_in_expect, align 8
  %cmp22 = icmp eq i32 %30, 0
  br i1 %cmp22, label %land.lhs.true24, label %if.end30.if.then34_crit_edge

land.lhs.true24:                                  ; preds = %land.lhs.true20
  %31 = load i32, i32* %state_in_ch.i101, align 4
  %cmp.i122 = icmp ult i32 %31, 256
  br i1 %cmp.i122, label %land.lhs.true.i125, label %while.end

land.lhs.true.i125:                               ; preds = %land.lhs.true24
  %32 = load i32, i32* %state_in_len.i, align 8
  %cmp1.i124 = icmp sgt i32 %32, 0
  br i1 %cmp1.i124, label %if.end30.if.then34_crit_edge, label %while.end

if.end30.if.then34_crit_edge:                     ; preds = %while.body.outer, %land.lhs.true20, %land.lhs.true.i125
  %progress_out.1145 = phi i8 [ %or98, %land.lhs.true.i125 ], [ %or98, %land.lhs.true20 ], [ %progress_out.0.ph, %while.body.outer ]
  %.pre142 = load i32, i32* %mode, align 8
  br label %if.then34

if.then34:                                        ; preds = %if.end30.if.then34_crit_edge, %if.end15
  %33 = phi i32 [ %.pre142, %if.end30.if.then34_crit_edge ], [ %25, %if.end15 ]
  %progress_out.1132 = phi i8 [ %progress_out.1145, %if.end30.if.then34_crit_edge ], [ %or98, %if.end15 ]
  %cmp.i104 = icmp eq i32 %33, 2
  %34 = load i32, i32* %nblock.i117, align 4
  %35 = load i32, i32* %nblockMAX.i, align 8
  %cmp1227.i = icmp slt i32 %34, %35
  br i1 %cmp.i104, label %while.body.preheader.i, label %while.body61.preheader.i

while.body61.preheader.i:                         ; preds = %if.then34
  br i1 %cmp1227.i, label %if.end67.i, label %copy_input_until_stop.exit

while.body.preheader.i:                           ; preds = %if.then34
  br i1 %cmp1227.i, label %if.end.i108, label %copy_input_until_stop.exit

if.end.i108:                                      ; preds = %while.body.preheader.i, %while.body.backedge.i116
  %36 = phi i32 [ %58, %while.body.backedge.i116 ], [ %35, %while.body.preheader.i ]
  %37 = phi i32 [ %57, %while.body.backedge.i116 ], [ %34, %while.body.preheader.i ]
  %progress_in.0228.i = phi i8 [ 1, %while.body.backedge.i116 ], [ 0, %while.body.preheader.i ]
  %38 = load %struct.bz_stream*, %struct.bz_stream** %strm.i, align 8
  %avail_in.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %38, i64 0, i32 1
  %39 = load i32, i32* %avail_in.i, align 8
  %cmp3.i = icmp eq i32 %39, 0
  br i1 %cmp3.i, label %copy_input_until_stop.exit, label %if.end5.i

if.end5.i:                                        ; preds = %if.end.i108
  %next_in.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %38, i64 0, i32 0
  %40 = load i8*, i8** %next_in.i, align 8
  %41 = load i8, i8* %40, align 1
  %conv.i = zext i8 %41 to i32
  %42 = load i32, i32* %state_in_ch.i101, align 4
  %cmp7.i = icmp eq i32 %conv.i, %42
  %43 = load i32, i32* %state_in_len.i, align 8
  br i1 %cmp7.i, label %lor.lhs.false.i, label %land.lhs.true.i109

land.lhs.true.i109:                               ; preds = %if.end5.i
  %cmp9.i = icmp eq i32 %43, 1
  br i1 %cmp9.i, label %if.then11.i, label %if.then32.i

if.then11.i:                                      ; preds = %land.lhs.true.i109
  %conv13.i = trunc i32 %42 to i8
  %44 = load i32, i32* %blockCRC.i120, align 8
  %shl.i = shl i32 %44, 8
  %shr.i = lshr i32 %44, 24
  %conv15.i = and i32 %42, 255
  %xor.i = xor i32 %shr.i, %conv15.i
  %idxprom.i110 = zext i32 %xor.i to i64
  %arrayidx.i111 = getelementptr inbounds [256 x i32], [256 x i32]* @BZ2_crc32Table, i64 0, i64 %idxprom.i110
  %45 = load i32, i32* %arrayidx.i111, align 4
  %xor16.i = xor i32 %shl.i, %45
  store i32 %xor16.i, i32* %blockCRC.i120, align 8
  %idxprom19.i = zext i32 %42 to i64
  %arrayidx20.i = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 22, i64 %idxprom19.i
  store i8 1, i8* %arrayidx20.i, align 1
  %idxprom22.i = sext i32 %37 to i64
  %46 = load i8*, i8** %block.i, align 8
  %arrayidx23.i = getelementptr inbounds i8, i8* %46, i64 %idxprom22.i
  store i8 %conv13.i, i8* %arrayidx23.i, align 1
  %47 = load i32, i32* %nblock.i117, align 4
  %inc.i112 = add nsw i32 %47, 1
  store i32 %inc.i112, i32* %nblock.i117, align 4
  store i32 %conv.i, i32* %state_in_ch.i101, align 4
  br label %if.end44.i

lor.lhs.false.i:                                  ; preds = %if.end5.i
  %cmp30.i = icmp eq i32 %43, 255
  br i1 %cmp30.i, label %if.then32.i, label %if.else40.i

if.then32.i:                                      ; preds = %lor.lhs.false.i, %land.lhs.true.i109
  %cmp34.i = icmp ult i32 %42, 256
  br i1 %cmp34.i, label %if.then36.i, label %if.end37.i

if.then36.i:                                      ; preds = %if.then32.i
  tail call fastcc void @add_pair_to_block(%struct.EState* nonnull %1) #10
  br label %if.end37.i

if.end37.i:                                       ; preds = %if.then36.i, %if.then32.i
  store i32 %conv.i, i32* %state_in_ch.i101, align 4
  store i32 1, i32* %state_in_len.i, align 8
  br label %if.end44.i

if.else40.i:                                      ; preds = %lor.lhs.false.i
  %inc42.i = add nsw i32 %43, 1
  store i32 %inc42.i, i32* %state_in_len.i, align 8
  br label %if.end44.i

if.end44.i:                                       ; preds = %if.else40.i, %if.end37.i, %if.then11.i
  %48 = load %struct.bz_stream*, %struct.bz_stream** %strm.i, align 8
  %next_in46.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %48, i64 0, i32 0
  %49 = load i8*, i8** %next_in46.i, align 8
  %incdec.ptr.i113 = getelementptr inbounds i8, i8* %49, i64 1
  store i8* %incdec.ptr.i113, i8** %next_in46.i, align 8
  %50 = load %struct.bz_stream*, %struct.bz_stream** %strm.i, align 8
  %avail_in48.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %50, i64 0, i32 1
  %51 = load i32, i32* %avail_in48.i, align 8
  %dec.i114 = add i32 %51, -1
  store i32 %dec.i114, i32* %avail_in48.i, align 8
  %52 = load %struct.bz_stream*, %struct.bz_stream** %strm.i, align 8
  %total_in_lo32.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %52, i64 0, i32 2
  %53 = load i32, i32* %total_in_lo32.i, align 4
  %inc50.i = add i32 %53, 1
  store i32 %inc50.i, i32* %total_in_lo32.i, align 4
  %54 = load %struct.bz_stream*, %struct.bz_stream** %strm.i, align 8
  %total_in_lo3252.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %54, i64 0, i32 2
  %55 = load i32, i32* %total_in_lo3252.i, align 4
  %cmp53.i = icmp eq i32 %55, 0
  br i1 %cmp53.i, label %if.then55.i, label %while.body.backedge.i116

if.then55.i:                                      ; preds = %if.end44.i
  %total_in_hi32.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %54, i64 0, i32 3
  %56 = load i32, i32* %total_in_hi32.i, align 8
  %inc57.i = add i32 %56, 1
  store i32 %inc57.i, i32* %total_in_hi32.i, align 8
  br label %while.body.backedge.i116

while.body.backedge.i116:                         ; preds = %if.then55.i, %if.end44.i
  %57 = load i32, i32* %nblock.i117, align 4
  %58 = load i32, i32* %nblockMAX.i, align 8
  %cmp1.i115 = icmp slt i32 %57, %58
  br i1 %cmp1.i115, label %if.end.i108, label %copy_input_until_stop.exit

if.end67.i:                                       ; preds = %while.body61.preheader.i, %if.end152.i
  %59 = phi i32 [ %83, %if.end152.i ], [ %35, %while.body61.preheader.i ]
  %60 = phi i32 [ %82, %if.end152.i ], [ %34, %while.body61.preheader.i ]
  %progress_in.1231.i = phi i8 [ 1, %if.end152.i ], [ 0, %while.body61.preheader.i ]
  %61 = load %struct.bz_stream*, %struct.bz_stream** %strm.i, align 8
  %avail_in69.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %61, i64 0, i32 1
  %62 = load i32, i32* %avail_in69.i, align 8
  %cmp70.i = icmp eq i32 %62, 0
  br i1 %cmp70.i, label %copy_input_until_stop.exit, label %if.end73.i

if.end73.i:                                       ; preds = %if.end67.i
  %63 = load i32, i32* %avail_in_expect, align 8
  %cmp74.i = icmp eq i32 %63, 0
  br i1 %cmp74.i, label %copy_input_until_stop.exit, label %if.end77.i

if.end77.i:                                       ; preds = %if.end73.i
  %next_in80.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %61, i64 0, i32 0
  %64 = load i8*, i8** %next_in80.i, align 8
  %65 = load i8, i8* %64, align 1
  %conv81.i = zext i8 %65 to i32
  %66 = load i32, i32* %state_in_ch.i101, align 4
  %cmp83.i = icmp eq i32 %conv81.i, %66
  %67 = load i32, i32* %state_in_len.i, align 8
  br i1 %cmp83.i, label %lor.lhs.false118.i, label %land.lhs.true85.i

land.lhs.true85.i:                                ; preds = %if.end77.i
  %cmp87.i = icmp eq i32 %67, 1
  br i1 %cmp87.i, label %if.then89.i, label %if.then122.i

if.then89.i:                                      ; preds = %land.lhs.true85.i
  %conv92.i = trunc i32 %66 to i8
  %68 = load i32, i32* %blockCRC.i120, align 8
  %shl94.i = shl i32 %68, 8
  %shr96.i = lshr i32 %68, 24
  %conv97.i = and i32 %66, 255
  %xor98.i = xor i32 %shr96.i, %conv97.i
  %idxprom99.i = zext i32 %xor98.i to i64
  %arrayidx100.i = getelementptr inbounds [256 x i32], [256 x i32]* @BZ2_crc32Table, i64 0, i64 %idxprom99.i
  %69 = load i32, i32* %arrayidx100.i, align 4
  %xor101.i = xor i32 %shl94.i, %69
  store i32 %xor101.i, i32* %blockCRC.i120, align 8
  %idxprom104.i = zext i32 %66 to i64
  %arrayidx106.i = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 22, i64 %idxprom104.i
  store i8 1, i8* %arrayidx106.i, align 1
  %idxprom108.i = sext i32 %60 to i64
  %70 = load i8*, i8** %block.i, align 8
  %arrayidx110.i = getelementptr inbounds i8, i8* %70, i64 %idxprom108.i
  store i8 %conv92.i, i8* %arrayidx110.i, align 1
  %71 = load i32, i32* %nblock.i117, align 4
  %inc112.i = add nsw i32 %71, 1
  store i32 %inc112.i, i32* %nblock.i117, align 4
  store i32 %conv81.i, i32* %state_in_ch.i101, align 4
  br label %if.end134.i

lor.lhs.false118.i:                               ; preds = %if.end77.i
  %cmp120.i = icmp eq i32 %67, 255
  br i1 %cmp120.i, label %if.then122.i, label %if.else130.i

if.then122.i:                                     ; preds = %lor.lhs.false118.i, %land.lhs.true85.i
  %cmp124.i = icmp ult i32 %66, 256
  br i1 %cmp124.i, label %if.then126.i, label %if.end127.i

if.then126.i:                                     ; preds = %if.then122.i
  tail call fastcc void @add_pair_to_block(%struct.EState* nonnull %1) #10
  br label %if.end127.i

if.end127.i:                                      ; preds = %if.then126.i, %if.then122.i
  store i32 %conv81.i, i32* %state_in_ch.i101, align 4
  store i32 1, i32* %state_in_len.i, align 8
  br label %if.end134.i

if.else130.i:                                     ; preds = %lor.lhs.false118.i
  %inc132.i = add nsw i32 %67, 1
  store i32 %inc132.i, i32* %state_in_len.i, align 8
  br label %if.end134.i

if.end134.i:                                      ; preds = %if.else130.i, %if.end127.i, %if.then89.i
  %72 = load %struct.bz_stream*, %struct.bz_stream** %strm.i, align 8
  %next_in136.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %72, i64 0, i32 0
  %73 = load i8*, i8** %next_in136.i, align 8
  %incdec.ptr137.i = getelementptr inbounds i8, i8* %73, i64 1
  store i8* %incdec.ptr137.i, i8** %next_in136.i, align 8
  %74 = load %struct.bz_stream*, %struct.bz_stream** %strm.i, align 8
  %avail_in139.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %74, i64 0, i32 1
  %75 = load i32, i32* %avail_in139.i, align 8
  %dec140.i = add i32 %75, -1
  store i32 %dec140.i, i32* %avail_in139.i, align 8
  %76 = load %struct.bz_stream*, %struct.bz_stream** %strm.i, align 8
  %total_in_lo32142.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %76, i64 0, i32 2
  %77 = load i32, i32* %total_in_lo32142.i, align 4
  %inc143.i = add i32 %77, 1
  store i32 %inc143.i, i32* %total_in_lo32142.i, align 4
  %78 = load %struct.bz_stream*, %struct.bz_stream** %strm.i, align 8
  %total_in_lo32145.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %78, i64 0, i32 2
  %79 = load i32, i32* %total_in_lo32145.i, align 4
  %cmp146.i = icmp eq i32 %79, 0
  br i1 %cmp146.i, label %if.then148.i, label %if.end152.i

if.then148.i:                                     ; preds = %if.end134.i
  %total_in_hi32150.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %78, i64 0, i32 3
  %80 = load i32, i32* %total_in_hi32150.i, align 8
  %inc151.i = add i32 %80, 1
  store i32 %inc151.i, i32* %total_in_hi32150.i, align 8
  br label %if.end152.i

if.end152.i:                                      ; preds = %if.then148.i, %if.end134.i
  %81 = load i32, i32* %avail_in_expect, align 8
  %dec154.i = add i32 %81, -1
  store i32 %dec154.i, i32* %avail_in_expect, align 8
  %82 = load i32, i32* %nblock.i117, align 4
  %83 = load i32, i32* %nblockMAX.i, align 8
  %cmp64.i = icmp slt i32 %82, %83
  br i1 %cmp64.i, label %if.end67.i, label %copy_input_until_stop.exit

copy_input_until_stop.exit:                       ; preds = %if.end67.i, %if.end73.i, %if.end152.i, %if.end.i108, %while.body.backedge.i116, %while.body61.preheader.i, %while.body.preheader.i
  %84 = phi i32 [ %35, %while.body.preheader.i ], [ %35, %while.body61.preheader.i ], [ %36, %if.end.i108 ], [ %58, %while.body.backedge.i116 ], [ %59, %if.end73.i ], [ %59, %if.end67.i ], [ %83, %if.end152.i ]
  %85 = phi i32 [ %34, %while.body.preheader.i ], [ %34, %while.body61.preheader.i ], [ %37, %if.end.i108 ], [ %57, %while.body.backedge.i116 ], [ %60, %if.end73.i ], [ %60, %if.end67.i ], [ %82, %if.end152.i ]
  %progress_in.2.i = phi i8 [ 0, %while.body.preheader.i ], [ 0, %while.body61.preheader.i ], [ %progress_in.0228.i, %if.end.i108 ], [ 1, %while.body.backedge.i116 ], [ %progress_in.1231.i, %if.end73.i ], [ %progress_in.1231.i, %if.end67.i ], [ 1, %if.end152.i ]
  %or3897 = or i8 %progress_in.2.i, %progress_in.0.ph
  %86 = load i64, i64* %2, align 8
  %87 = trunc i64 %86 to i32
  %cmp41 = icmp eq i32 %87, 2
  br i1 %cmp41, label %if.else, label %land.lhs.true43

land.lhs.true43:                                  ; preds = %copy_input_until_stop.exit
  %88 = load i32, i32* %avail_in_expect, align 8
  %cmp45 = icmp eq i32 %88, 0
  br i1 %cmp45, label %if.then47, label %if.else

if.then47:                                        ; preds = %land.lhs.true43
  %89 = load i32, i32* %state_in_ch.i101, align 4
  %cmp.i99 = icmp ult i32 %89, 256
  br i1 %cmp.i99, label %if.then.i, label %flush_RL.exit

if.then.i:                                        ; preds = %if.then47
  tail call fastcc void @add_pair_to_block(%struct.EState* nonnull %1) #10
  %.pre143 = load i32, i32* %mode, align 8
  br label %flush_RL.exit

flush_RL.exit:                                    ; preds = %if.then47, %if.then.i
  %90 = phi i32 [ %87, %if.then47 ], [ %.pre143, %if.then.i ]
  store i32 256, i32* %state_in_ch.i101, align 4
  store i32 0, i32* %state_in_len.i, align 8
  %cmp49 = icmp eq i32 %90, 4
  %conv51 = zext i1 %cmp49 to i8
  tail call void @BZ2_compressBlock(%struct.EState* nonnull %1, i8 zeroext %conv51) #10
  store i32 1, i32* %state1, align 4
  br label %while.body.outer

if.else:                                          ; preds = %copy_input_until_stop.exit, %land.lhs.true43
  %cmp53 = icmp slt i32 %85, %84
  br i1 %cmp53, label %if.else57, label %if.then55

if.then55:                                        ; preds = %if.else
  tail call void @BZ2_compressBlock(%struct.EState* nonnull %1, i8 zeroext 0) #10
  store i32 1, i32* %state1, align 4
  br label %while.body.outer

if.else57:                                        ; preds = %if.else
  %91 = load %struct.bz_stream*, %struct.bz_stream** %strm.i, align 8
  %avail_in = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %91, i64 0, i32 1
  %92 = load i32, i32* %avail_in, align 8
  %cmp59 = icmp eq i32 %92, 0
  br i1 %cmp59, label %while.end, label %while.body.outer

while.end:                                        ; preds = %if.else57, %land.lhs.true.i125, %land.lhs.true24, %land.lhs.true.i, %land.lhs.true11, %copy_output_until_stop.exit
  %progress_out.2 = phi i8 [ %or98, %copy_output_until_stop.exit ], [ %or98, %land.lhs.true11 ], [ %or98, %land.lhs.true.i ], [ %or98, %land.lhs.true24 ], [ %or98, %land.lhs.true.i125 ], [ %progress_out.1132, %if.else57 ]
  %progress_in.1 = phi i8 [ %progress_in.0.ph, %copy_output_until_stop.exit ], [ %progress_in.0.ph, %land.lhs.true11 ], [ %progress_in.0.ph, %land.lhs.true.i ], [ %progress_in.0.ph, %land.lhs.true24 ], [ %progress_in.0.ph, %land.lhs.true.i125 ], [ %or3897, %if.else57 ]
  %93 = or i8 %progress_in.1, %progress_out.2
  %94 = icmp ne i8 %93, 0
  %conv70 = zext i1 %94 to i8
  ret i8 %conv70

infloop:                                          ; preds = %while.body.outer, %infloop
  br label %infloop
}

; Function Attrs: nounwind uwtable
define i32 @BZ2_bzCompressEnd(%struct.bz_stream* %strm) #4 {
entry:
  %cmp = icmp eq %struct.bz_stream* %strm, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %state = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 8
  %0 = bitcast i8** %state to %struct.EState**
  %1 = load %struct.EState*, %struct.EState** %0, align 8
  %cmp1 = icmp eq %struct.EState* %1, null
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %strm4 = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 0
  %2 = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  %cmp5 = icmp eq %struct.bz_stream* %2, %strm
  br i1 %cmp5, label %if.end7, label %cleanup

if.end7:                                          ; preds = %if.end3
  %arr1 = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 4
  %3 = load i32*, i32** %arr1, align 8
  %cmp8 = icmp eq i32* %3, null
  br i1 %cmp8, label %if.end11, label %if.then9

if.then9:                                         ; preds = %if.end7
  %bzfree = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 10
  %4 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %opaque = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 11
  %5 = load i8*, i8** %opaque, align 8
  %6 = bitcast i32* %3 to i8*
  tail call void %4(i8* %5, i8* %6) #10
  br label %if.end11

if.end11:                                         ; preds = %if.end7, %if.then9
  %arr2 = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 5
  %7 = load i32*, i32** %arr2, align 8
  %cmp12 = icmp eq i32* %7, null
  br i1 %cmp12, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.end11
  %bzfree14 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 10
  %8 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree14, align 8
  %opaque15 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 11
  %9 = load i8*, i8** %opaque15, align 8
  %10 = bitcast i32* %7 to i8*
  tail call void %8(i8* %9, i8* %10) #10
  br label %if.end17

if.end17:                                         ; preds = %if.end11, %if.then13
  %ftab = getelementptr inbounds %struct.EState, %struct.EState* %1, i64 0, i32 6
  %11 = load i32*, i32** %ftab, align 8
  %cmp18 = icmp eq i32* %11, null
  %.pre = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 10
  br i1 %cmp18, label %if.end17.if.end23_crit_edge, label %if.then19

if.end17.if.end23_crit_edge:                      ; preds = %if.end17
  %.pre48 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 11
  br label %if.end23

if.then19:                                        ; preds = %if.end17
  %12 = load void (i8*, i8*)*, void (i8*, i8*)** %.pre, align 8
  %opaque21 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 11
  %13 = load i8*, i8** %opaque21, align 8
  %14 = bitcast i32* %11 to i8*
  tail call void %12(i8* %13, i8* %14) #10
  br label %if.end23

if.end23:                                         ; preds = %if.end17.if.end23_crit_edge, %if.then19
  %opaque25.pre-phi = phi i8** [ %.pre48, %if.end17.if.end23_crit_edge ], [ %opaque21, %if.then19 ]
  %15 = load void (i8*, i8*)*, void (i8*, i8*)** %.pre, align 8
  %16 = load i8*, i8** %opaque25.pre-phi, align 8
  %17 = load i8*, i8** %state, align 8
  tail call void %15(i8* %16, i8* %17) #10
  store i8* null, i8** %state, align 8
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %entry, %if.end23
  %retval.0 = phi i32 [ 0, %if.end23 ], [ -2, %entry ], [ -2, %if.end ], [ -2, %if.end3 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @BZ2_bzDecompressInit(%struct.bz_stream* %strm, i32 %verbosity, i32 %small) #4 {
entry:
  %cmp = icmp eq %struct.bz_stream* %strm, null
  %small.cmp = icmp ugt i32 %small, 1
  %or.cond = or i1 %cmp, %small.cmp
  %0 = icmp ugt i32 %verbosity, 4
  %or.cond57 = or i1 %0, %or.cond
  br i1 %or.cond57, label %cleanup, label %if.end10

if.end10:                                         ; preds = %entry
  %bzalloc = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 9
  %1 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %bzalloc, align 8
  %cmp11 = icmp eq i8* (i8*, i32, i32)* %1, null
  br i1 %cmp11, label %if.then12, label %if.end14

if.then12:                                        ; preds = %if.end10
  store i8* (i8*, i32, i32)* @default_bzalloc, i8* (i8*, i32, i32)** %bzalloc, align 8
  br label %if.end14

if.end14:                                         ; preds = %if.then12, %if.end10
  %2 = phi i8* (i8*, i32, i32)* [ @default_bzalloc, %if.then12 ], [ %1, %if.end10 ]
  %bzfree = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 10
  %3 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %cmp15 = icmp eq void (i8*, i8*)* %3, null
  br i1 %cmp15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end14
  store void (i8*, i8*)* @default_bzfree, void (i8*, i8*)** %bzfree, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %if.end14
  %opaque = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 11
  %4 = load i8*, i8** %opaque, align 8
  %call20 = tail call i8* %2(i8* %4, i32 64144, i32 1) #10
  %cmp21 = icmp eq i8* %call20, null
  br i1 %cmp21, label %cleanup, label %if.end23

if.end23:                                         ; preds = %if.end18
  %strm24 = bitcast i8* %call20 to %struct.bz_stream**
  store %struct.bz_stream* %strm, %struct.bz_stream** %strm24, align 8
  %state = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 8
  store i8* %call20, i8** %state, align 8
  %state25 = getelementptr inbounds i8, i8* %call20, i64 8
  %5 = bitcast i8* %state25 to i32*
  store i32 10, i32* %5, align 8
  %bsLive = getelementptr inbounds i8, i8* %call20, i64 36
  %6 = bitcast i8* %bsLive to i32*
  store i32 0, i32* %6, align 4
  %bsBuff = getelementptr inbounds i8, i8* %call20, i64 32
  %7 = bitcast i8* %bsBuff to i32*
  store i32 0, i32* %7, align 8
  %calculatedCombinedCRC = getelementptr inbounds i8, i8* %call20, i64 3188
  %8 = bitcast i8* %calculatedCombinedCRC to i32*
  store i32 0, i32* %8, align 4
  %total_in_lo32 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 2
  store i32 0, i32* %total_in_lo32, align 4
  %total_in_hi32 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 3
  store i32 0, i32* %total_in_hi32, align 8
  %total_out_lo32 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 6
  store i32 0, i32* %total_out_lo32, align 4
  %total_out_hi32 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 7
  store i32 0, i32* %total_out_hi32, align 8
  %conv = trunc i32 %small to i8
  %9 = getelementptr inbounds i8, i8* %call20, i64 44
  store i8 %conv, i8* %9, align 4
  %tt = getelementptr inbounds i8, i8* %call20, i64 3152
  %currBlockNo = getelementptr inbounds i8, i8* %call20, i64 48
  %10 = bitcast i8* %currBlockNo to i32*
  store i32 0, i32* %10, align 8
  %verbosity26 = getelementptr inbounds i8, i8* %call20, i64 52
  %11 = bitcast i8* %verbosity26 to i32*
  call void @llvm.memset.p0i8.i64(i8* %tt, i8 0, i64 24, i32 8, i1 false)
  store i32 %verbosity, i32* %11, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end18, %entry, %if.end23
  %retval.0 = phi i32 [ 0, %if.end23 ], [ -2, %entry ], [ -3, %if.end18 ]
  ret i32 %retval.0
}

; Function Attrs: norecurse nounwind readonly uwtable
define i32 @BZ2_indexIntoF(i32 %indx, i32* nocapture readonly %cftab) #6 {
entry:
  br label %do.body

do.body:                                          ; preds = %do.body, %entry
  %na.0 = phi i32 [ 256, %entry ], [ %shr.na.0, %do.body ]
  %nb.0 = phi i32 [ 0, %entry ], [ %nb.0.shr, %do.body ]
  %add = add nsw i32 %nb.0, %na.0
  %shr = ashr i32 %add, 1
  %idxprom = sext i32 %shr to i64
  %arrayidx = getelementptr inbounds i32, i32* %cftab, i64 %idxprom
  %0 = load i32, i32* %arrayidx, align 4
  %cmp = icmp sgt i32 %0, %indx
  %shr.na.0 = select i1 %cmp, i32 %shr, i32 %na.0
  %nb.0.shr = select i1 %cmp, i32 %nb.0, i32 %shr
  %sub = sub nsw i32 %shr.na.0, %nb.0.shr
  %cmp1 = icmp eq i32 %sub, 1
  br i1 %cmp1, label %do.end, label %do.body

do.end:                                           ; preds = %do.body
  ret i32 %nb.0.shr
}

; Function Attrs: nounwind uwtable
define i32 @BZ2_bzDecompress(%struct.bz_stream* readonly %strm) #4 {
entry:
  %cmp = icmp eq %struct.bz_stream* %strm, null
  br i1 %cmp, label %cleanup71, label %if.end

if.end:                                           ; preds = %entry
  %state = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 8
  %0 = bitcast i8** %state to %struct.DState**
  %1 = load %struct.DState*, %struct.DState** %0, align 8
  %cmp1 = icmp eq %struct.DState* %1, null
  br i1 %cmp1, label %cleanup71, label %if.end3

if.end3:                                          ; preds = %if.end
  %strm4 = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 0
  %2 = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  %cmp5 = icmp eq %struct.bz_stream* %2, %strm
  br i1 %cmp5, label %while.body.preheader, label %cleanup71

while.body.preheader:                             ; preds = %if.end3
  %state8 = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 1
  %smallDecompress = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 10
  %blockRandomised.i108 = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 4
  %calculatedBlockCRC276.i = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 25
  %state_out_ch277.i = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 2
  %state_out_len278.i = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 3
  %nblock_used279.i = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 17
  %k0280.i = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 15
  %tt281.i = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 20
  %tPos282.i = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 14
  %save_nblock287.i = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 51
  %rNToGo.i116 = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 5
  %rTPos.i117 = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 6
  %3 = bitcast i32* %rNToGo.i116 to i64*
  %verbosity = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 12
  %storedBlockCRC = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 23
  %calculatedCombinedCRC = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 26
  %ll16414.i = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 21
  %ll4420.i = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 22
  %4 = bitcast i32* %state8 to i64*
  %.pre = load i64, i64* %4, align 8
  %5 = trunc i64 %.pre to i32
  %6 = bitcast i32* %calculatedBlockCRC276.i to i64*
  br label %while.body.outer

while.body.outer:                                 ; preds = %while.body.preheader, %cleanup
  %.in.in = phi i64 [ %.pre, %while.body.preheader ], [ %204, %cleanup ]
  %7 = phi i32 [ %5, %while.body.preheader ], [ 2, %cleanup ]
  %.in = lshr i64 %.in.in, 32
  %8 = trunc i64 %.in to i8
  %cmp49 = icmp sgt i32 %7, 9
  switch i32 %7, label %if.end47 [
    i32 1, label %cleanup71
    i32 2, label %if.then14
  ]

if.then14:                                        ; preds = %while.body.outer
  %9 = load i8, i8* %smallDecompress, align 4
  %tobool = icmp eq i8 %9, 0
  %10 = load i8, i8* %blockRandomised.i108, align 4
  %tobool.i109 = icmp eq i8 %10, 0
  br i1 %tobool, label %if.else, label %if.then15

if.then15:                                        ; preds = %if.then14
  %11 = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  %avail_out344926.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %11, i64 0, i32 5
  %12 = load i32, i32* %avail_out344926.i, align 8
  %cmp345927.i = icmp eq i32 %12, 0
  br i1 %tobool.i109, label %while.body342.preheader.i, label %while.body2.preheader.i

while.body2.preheader.i:                          ; preds = %if.then15
  br i1 %cmp345927.i, label %if.end20, label %if.end.i

while.body342.preheader.i:                        ; preds = %if.then15
  br i1 %cmp345927.i, label %if.end20, label %if.end348.i

if.end.i:                                         ; preds = %while.body2.preheader.i, %while.body2.backedge.i
  %13 = phi %struct.bz_stream* [ %69, %while.body2.backedge.i ], [ %11, %while.body2.preheader.i ]
  %14 = load i32, i32* %state_out_len278.i, align 8
  %cmp4.i = icmp eq i32 %14, 0
  br i1 %cmp4.i, label %while.end.i, label %if.end6.i

if.end6.i:                                        ; preds = %if.end.i
  %15 = load i8, i8* %state_out_ch277.i, align 4
  %next_out.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %13, i64 0, i32 4
  %16 = load i8*, i8** %next_out.i, align 8
  store i8 %15, i8* %16, align 1
  %17 = load i32, i32* %calculatedBlockCRC276.i, align 8
  %shl.i = shl i32 %17, 8
  %shr.i = lshr i32 %17, 24
  %18 = load i8, i8* %state_out_ch277.i, align 4
  %conv.i = zext i8 %18 to i32
  %xor.i = xor i32 %conv.i, %shr.i
  %idxprom.i = zext i32 %xor.i to i64
  %arrayidx.i = getelementptr inbounds [256 x i32], [256 x i32]* @BZ2_crc32Table, i64 0, i64 %idxprom.i
  %19 = load i32, i32* %arrayidx.i, align 4
  %xor10.i = xor i32 %19, %shl.i
  store i32 %xor10.i, i32* %calculatedBlockCRC276.i, align 8
  %20 = load i32, i32* %state_out_len278.i, align 8
  %dec.i = add nsw i32 %20, -1
  store i32 %dec.i, i32* %state_out_len278.i, align 8
  %21 = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  %next_out14.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %21, i64 0, i32 4
  %22 = load i8*, i8** %next_out14.i, align 8
  %incdec.ptr.i = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %incdec.ptr.i, i8** %next_out14.i, align 8
  %23 = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  %avail_out16.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %23, i64 0, i32 5
  %24 = load i32, i32* %avail_out16.i, align 8
  %dec17.i = add i32 %24, -1
  store i32 %dec17.i, i32* %avail_out16.i, align 8
  %25 = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  %total_out_lo32.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %25, i64 0, i32 6
  %26 = load i32, i32* %total_out_lo32.i, align 4
  %inc.i = add i32 %26, 1
  store i32 %inc.i, i32* %total_out_lo32.i, align 4
  %27 = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  %total_out_lo3220.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %27, i64 0, i32 6
  %28 = load i32, i32* %total_out_lo3220.i, align 4
  %cmp21.i = icmp eq i32 %28, 0
  br i1 %cmp21.i, label %if.then23.i, label %while.body2.backedge.i

if.then23.i:                                      ; preds = %if.end6.i
  %total_out_hi32.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %27, i64 0, i32 7
  %29 = load i32, i32* %total_out_hi32.i, align 8
  %inc25.i = add i32 %29, 1
  store i32 %inc25.i, i32* %total_out_hi32.i, align 8
  %.pre.i = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  br label %while.body2.backedge.i

while.end.i:                                      ; preds = %if.end.i
  %30 = load i32, i32* %nblock_used279.i, align 4
  %31 = load i32, i32* %save_nblock287.i, align 8
  %add.i = add nsw i32 %31, 1
  %cmp27.i = icmp eq i32 %30, %add.i
  br i1 %cmp27.i, label %if.end20, label %if.end30.i

if.end30.i:                                       ; preds = %while.end.i
  %cmp34.i = icmp sgt i32 %30, %add.i
  br i1 %cmp34.i, label %cleanup71, label %if.end37.i

if.end37.i:                                       ; preds = %if.end30.i
  store i32 1, i32* %state_out_len278.i, align 8
  %32 = load i32, i32* %k0280.i, align 8
  %conv39.i = trunc i32 %32 to i8
  store i8 %conv39.i, i8* %state_out_ch277.i, align 4
  %33 = load i32, i32* %tPos282.i, align 4
  br label %do.body.i.i

do.body.i.i:                                      ; preds = %do.body.i.i, %if.end37.i
  %na.0.i.i = phi i32 [ 256, %if.end37.i ], [ %shr.na.0.i.i, %do.body.i.i ]
  %nb.0.i.i = phi i32 [ 0, %if.end37.i ], [ %nb.0.shr.i.i, %do.body.i.i ]
  %add.i.i = add nsw i32 %nb.0.i.i, %na.0.i.i
  %shr.i.i = ashr i32 %add.i.i, 1
  %idxprom.i.i = sext i32 %shr.i.i to i64
  %arrayidx.i.i = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 18, i64 %idxprom.i.i
  %34 = load i32, i32* %arrayidx.i.i, align 4
  %cmp.i.i = icmp sgt i32 %34, %33
  %shr.na.0.i.i = select i1 %cmp.i.i, i32 %shr.i.i, i32 %na.0.i.i
  %nb.0.shr.i.i = select i1 %cmp.i.i, i32 %nb.0.i.i, i32 %shr.i.i
  %sub.i.i = sub nsw i32 %shr.na.0.i.i, %nb.0.shr.i.i
  %cmp1.i.i = icmp eq i32 %sub.i.i, 1
  br i1 %cmp1.i.i, label %BZ2_indexIntoF.exit.i, label %do.body.i.i

BZ2_indexIntoF.exit.i:                            ; preds = %do.body.i.i
  %idxprom43.i = zext i32 %33 to i64
  %35 = load i16*, i16** %ll16414.i, align 8
  %arrayidx44.i = getelementptr inbounds i16, i16* %35, i64 %idxprom43.i
  %36 = load i16, i16* %arrayidx44.i, align 2
  %conv45.i = zext i16 %36 to i32
  %shr47.i = lshr i32 %33, 1
  %idxprom48.i = zext i32 %shr47.i to i64
  %37 = load i8*, i8** %ll4420.i, align 8
  %arrayidx49.i = getelementptr inbounds i8, i8* %37, i64 %idxprom48.i
  %38 = load i8, i8* %arrayidx49.i, align 1
  %conv50.i = zext i8 %38 to i32
  %shl52.i = shl i32 %33, 2
  %and.i = and i32 %shl52.i, 4
  %shr53.i = lshr i32 %conv50.i, %and.i
  %and54.i = shl nuw nsw i32 %shr53.i, 16
  %shl55.i = and i32 %and54.i, 983040
  %or.i = or i32 %shl55.i, %conv45.i
  store i32 %or.i, i32* %tPos282.i, align 4
  %39 = load i64, i64* %3, align 8
  %40 = trunc i64 %39 to i32
  %cmp57.i = icmp eq i32 %40, 0
  %41 = lshr i64 %39, 32
  %42 = trunc i64 %41 to i32
  br i1 %cmp57.i, label %if.then59.i, label %if.end71.i

if.then59.i:                                      ; preds = %BZ2_indexIntoF.exit.i
  %idxprom60.i = ashr i64 %39, 32
  %arrayidx61.i = getelementptr inbounds [512 x i32], [512 x i32]* @BZ2_rNums, i64 0, i64 %idxprom60.i
  %43 = load i32, i32* %arrayidx61.i, align 4
  store i32 %43, i32* %rNToGo.i116, align 8
  %inc64.i = add nsw i32 %42, 1
  %cmp66.i = icmp eq i32 %inc64.i, 512
  %.inc64.i = select i1 %cmp66.i, i32 0, i32 %inc64.i
  store i32 %.inc64.i, i32* %rTPos.i117, align 4
  br label %if.end71.i

if.end71.i:                                       ; preds = %if.then59.i, %BZ2_indexIntoF.exit.i
  %44 = phi i32 [ %.inc64.i, %if.then59.i ], [ %42, %BZ2_indexIntoF.exit.i ]
  %45 = phi i32 [ %43, %if.then59.i ], [ %40, %BZ2_indexIntoF.exit.i ]
  %dec73.i = add nsw i32 %45, -1
  store i32 %dec73.i, i32* %rNToGo.i116, align 8
  %inc81.i = add nsw i32 %30, 1
  store i32 %inc81.i, i32* %nblock_used279.i, align 4
  %cmp85.i = icmp eq i32 %30, %31
  br i1 %cmp85.i, label %while.body2.backedge.i, label %if.end88.i

if.end88.i:                                       ; preds = %if.end71.i
  %cmp75.i = icmp eq i32 %dec73.i, 1
  %cond.i = zext i1 %cmp75.i to i32
  %call.masked.i = and i32 %nb.0.shr.i.i, 255
  %conv89.i = xor i32 %cond.i, %call.masked.i
  %cmp91.i = icmp eq i32 %conv89.i, %32
  br i1 %cmp91.i, label %if.end96.i, label %if.then93.i

if.then93.i:                                      ; preds = %if.end88.i
  store i32 %conv89.i, i32* %k0280.i, align 8
  br label %while.body2.backedge.i

if.end96.i:                                       ; preds = %if.end88.i
  store i32 2, i32* %state_out_len278.i, align 8
  br label %do.body.i922.i

do.body.i922.i:                                   ; preds = %do.body.i922.i, %if.end96.i
  %na.0.i911.i = phi i32 [ 256, %if.end96.i ], [ %shr.na.0.i918.i, %do.body.i922.i ]
  %nb.0.i912.i = phi i32 [ 0, %if.end96.i ], [ %nb.0.shr.i919.i, %do.body.i922.i ]
  %add.i913.i = add nsw i32 %nb.0.i912.i, %na.0.i911.i
  %shr.i914.i = ashr i32 %add.i913.i, 1
  %idxprom.i915.i = sext i32 %shr.i914.i to i64
  %arrayidx.i916.i = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 18, i64 %idxprom.i915.i
  %46 = load i32, i32* %arrayidx.i916.i, align 4
  %cmp.i917.i = icmp sgt i32 %46, %or.i
  %shr.na.0.i918.i = select i1 %cmp.i917.i, i32 %shr.i914.i, i32 %na.0.i911.i
  %nb.0.shr.i919.i = select i1 %cmp.i917.i, i32 %nb.0.i912.i, i32 %shr.i914.i
  %sub.i920.i = sub nsw i32 %shr.na.0.i918.i, %nb.0.shr.i919.i
  %cmp1.i921.i = icmp eq i32 %sub.i920.i, 1
  br i1 %cmp1.i921.i, label %BZ2_indexIntoF.exit923.i, label %do.body.i922.i

BZ2_indexIntoF.exit923.i:                         ; preds = %do.body.i922.i
  %idxprom104.i = zext i32 %or.i to i64
  %arrayidx106.i = getelementptr inbounds i16, i16* %35, i64 %idxprom104.i
  %47 = load i16, i16* %arrayidx106.i, align 2
  %conv107.i = zext i16 %47 to i32
  %shr109.i = lshr i32 %or.i, 1
  %idxprom110.i = zext i32 %shr109.i to i64
  %arrayidx112.i = getelementptr inbounds i8, i8* %37, i64 %idxprom110.i
  %48 = load i8, i8* %arrayidx112.i, align 1
  %conv113.i = zext i8 %48 to i32
  %shl115.i = shl nuw nsw i32 %conv45.i, 2
  %and116.i = and i32 %shl115.i, 4
  %shr117.i = lshr i32 %conv113.i, %and116.i
  %and118.i = shl nuw nsw i32 %shr117.i, 16
  %shl119.i = and i32 %and118.i, 983040
  %or120.i = or i32 %shl119.i, %conv107.i
  store i32 %or120.i, i32* %tPos282.i, align 4
  %cmp123.i = icmp eq i32 %dec73.i, 0
  br i1 %cmp123.i, label %if.then125.i, label %if.end138.i

if.then125.i:                                     ; preds = %BZ2_indexIntoF.exit923.i
  %idxprom127.i = sext i32 %44 to i64
  %arrayidx128.i = getelementptr inbounds [512 x i32], [512 x i32]* @BZ2_rNums, i64 0, i64 %idxprom127.i
  %49 = load i32, i32* %arrayidx128.i, align 4
  store i32 %49, i32* %rNToGo.i116, align 8
  %inc131.i = add nsw i32 %44, 1
  %cmp133.i = icmp eq i32 %inc131.i, 512
  %.inc131.i = select i1 %cmp133.i, i32 0, i32 %inc131.i
  store i32 %.inc131.i, i32* %rTPos.i117, align 4
  br label %if.end138.i

if.end138.i:                                      ; preds = %if.then125.i, %BZ2_indexIntoF.exit923.i
  %50 = phi i32 [ %.inc131.i, %if.then125.i ], [ %44, %BZ2_indexIntoF.exit923.i ]
  %51 = phi i32 [ %49, %if.then125.i ], [ %dec73.i, %BZ2_indexIntoF.exit923.i ]
  %dec140.i = add nsw i32 %51, -1
  store i32 %dec140.i, i32* %rNToGo.i116, align 8
  %inc149.i = add nsw i32 %30, 2
  store i32 %inc149.i, i32* %nblock_used279.i, align 4
  %cmp153.i = icmp eq i32 %inc81.i, %31
  br i1 %cmp153.i, label %while.body2.backedge.i, label %if.end156.i

if.end156.i:                                      ; preds = %if.end138.i
  %cmp142.i = icmp eq i32 %dec140.i, 1
  %cond144.i = zext i1 %cmp142.i to i32
  %call101.masked.i = and i32 %nb.0.shr.i919.i, 255
  %conv157.i = xor i32 %cond144.i, %call101.masked.i
  %cmp159.i = icmp eq i32 %conv157.i, %32
  br i1 %cmp159.i, label %if.end164.i, label %if.then161.i

if.then161.i:                                     ; preds = %if.end156.i
  store i32 %conv157.i, i32* %k0280.i, align 8
  br label %while.body2.backedge.i

if.end164.i:                                      ; preds = %if.end156.i
  store i32 3, i32* %state_out_len278.i, align 8
  br label %do.body.i909.i

do.body.i909.i:                                   ; preds = %do.body.i909.i, %if.end164.i
  %na.0.i898.i = phi i32 [ 256, %if.end164.i ], [ %shr.na.0.i905.i, %do.body.i909.i ]
  %nb.0.i899.i = phi i32 [ 0, %if.end164.i ], [ %nb.0.shr.i906.i, %do.body.i909.i ]
  %add.i900.i = add nsw i32 %nb.0.i899.i, %na.0.i898.i
  %shr.i901.i = ashr i32 %add.i900.i, 1
  %idxprom.i902.i = sext i32 %shr.i901.i to i64
  %arrayidx.i903.i = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 18, i64 %idxprom.i902.i
  %52 = load i32, i32* %arrayidx.i903.i, align 4
  %cmp.i904.i = icmp sgt i32 %52, %or120.i
  %shr.na.0.i905.i = select i1 %cmp.i904.i, i32 %shr.i901.i, i32 %na.0.i898.i
  %nb.0.shr.i906.i = select i1 %cmp.i904.i, i32 %nb.0.i899.i, i32 %shr.i901.i
  %sub.i907.i = sub nsw i32 %shr.na.0.i905.i, %nb.0.shr.i906.i
  %cmp1.i908.i = icmp eq i32 %sub.i907.i, 1
  br i1 %cmp1.i908.i, label %BZ2_indexIntoF.exit910.i, label %do.body.i909.i

BZ2_indexIntoF.exit910.i:                         ; preds = %do.body.i909.i
  %idxprom172.i = zext i32 %or120.i to i64
  %arrayidx174.i = getelementptr inbounds i16, i16* %35, i64 %idxprom172.i
  %53 = load i16, i16* %arrayidx174.i, align 2
  %conv175.i = zext i16 %53 to i32
  %shr177.i = lshr i32 %or120.i, 1
  %idxprom178.i = zext i32 %shr177.i to i64
  %arrayidx180.i = getelementptr inbounds i8, i8* %37, i64 %idxprom178.i
  %54 = load i8, i8* %arrayidx180.i, align 1
  %conv181.i = zext i8 %54 to i32
  %shl183.i = shl nuw nsw i32 %conv107.i, 2
  %and184.i = and i32 %shl183.i, 4
  %shr185.i = lshr i32 %conv181.i, %and184.i
  %and186.i = shl nuw nsw i32 %shr185.i, 16
  %shl187.i = and i32 %and186.i, 983040
  %or188.i = or i32 %shl187.i, %conv175.i
  store i32 %or188.i, i32* %tPos282.i, align 4
  %cmp191.i = icmp eq i32 %dec140.i, 0
  br i1 %cmp191.i, label %if.then193.i, label %if.end206.i

if.then193.i:                                     ; preds = %BZ2_indexIntoF.exit910.i
  %idxprom195.i = sext i32 %50 to i64
  %arrayidx196.i = getelementptr inbounds [512 x i32], [512 x i32]* @BZ2_rNums, i64 0, i64 %idxprom195.i
  %55 = load i32, i32* %arrayidx196.i, align 4
  store i32 %55, i32* %rNToGo.i116, align 8
  %inc199.i = add nsw i32 %50, 1
  %cmp201.i = icmp eq i32 %inc199.i, 512
  %.inc199.i = select i1 %cmp201.i, i32 0, i32 %inc199.i
  store i32 %.inc199.i, i32* %rTPos.i117, align 4
  br label %if.end206.i

if.end206.i:                                      ; preds = %if.then193.i, %BZ2_indexIntoF.exit910.i
  %56 = phi i32 [ %.inc199.i, %if.then193.i ], [ %50, %BZ2_indexIntoF.exit910.i ]
  %57 = phi i32 [ %55, %if.then193.i ], [ %dec140.i, %BZ2_indexIntoF.exit910.i ]
  %dec208.i = add nsw i32 %57, -1
  store i32 %dec208.i, i32* %rNToGo.i116, align 8
  %inc217.i = add nsw i32 %30, 3
  store i32 %inc217.i, i32* %nblock_used279.i, align 4
  %cmp221.i = icmp eq i32 %inc149.i, %31
  br i1 %cmp221.i, label %while.body2.backedge.i, label %if.end224.i

if.end224.i:                                      ; preds = %if.end206.i
  %cmp210.i = icmp eq i32 %dec208.i, 1
  %cond212.i = zext i1 %cmp210.i to i32
  %call169.masked.i = and i32 %nb.0.shr.i906.i, 255
  %conv225.i = xor i32 %cond212.i, %call169.masked.i
  %cmp227.i = icmp eq i32 %conv225.i, %32
  br i1 %cmp227.i, label %do.body.i896.i, label %if.then229.i

if.then229.i:                                     ; preds = %if.end224.i
  store i32 %conv225.i, i32* %k0280.i, align 8
  br label %while.body2.backedge.i

do.body.i896.i:                                   ; preds = %if.end224.i, %do.body.i896.i
  %na.0.i885.i = phi i32 [ %shr.na.0.i892.i, %do.body.i896.i ], [ 256, %if.end224.i ]
  %nb.0.i886.i = phi i32 [ %nb.0.shr.i893.i, %do.body.i896.i ], [ 0, %if.end224.i ]
  %add.i887.i = add nsw i32 %nb.0.i886.i, %na.0.i885.i
  %shr.i888.i = ashr i32 %add.i887.i, 1
  %idxprom.i889.i = sext i32 %shr.i888.i to i64
  %arrayidx.i890.i = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 18, i64 %idxprom.i889.i
  %58 = load i32, i32* %arrayidx.i890.i, align 4
  %cmp.i891.i = icmp sgt i32 %58, %or188.i
  %shr.na.0.i892.i = select i1 %cmp.i891.i, i32 %shr.i888.i, i32 %na.0.i885.i
  %nb.0.shr.i893.i = select i1 %cmp.i891.i, i32 %nb.0.i886.i, i32 %shr.i888.i
  %sub.i894.i = sub nsw i32 %shr.na.0.i892.i, %nb.0.shr.i893.i
  %cmp1.i895.i = icmp eq i32 %sub.i894.i, 1
  br i1 %cmp1.i895.i, label %BZ2_indexIntoF.exit897.i, label %do.body.i896.i

BZ2_indexIntoF.exit897.i:                         ; preds = %do.body.i896.i
  %idxprom239.i = zext i32 %or188.i to i64
  %arrayidx241.i = getelementptr inbounds i16, i16* %35, i64 %idxprom239.i
  %59 = load i16, i16* %arrayidx241.i, align 2
  %conv242.i = zext i16 %59 to i32
  %shr244.i = lshr i32 %or188.i, 1
  %idxprom245.i = zext i32 %shr244.i to i64
  %arrayidx247.i = getelementptr inbounds i8, i8* %37, i64 %idxprom245.i
  %60 = load i8, i8* %arrayidx247.i, align 1
  %conv248.i = zext i8 %60 to i32
  %shl250.i = shl nuw nsw i32 %conv175.i, 2
  %and251.i = and i32 %shl250.i, 4
  %shr252.i = lshr i32 %conv248.i, %and251.i
  %and253.i = shl nuw nsw i32 %shr252.i, 16
  %shl254.i = and i32 %and253.i, 983040
  %or255.i = or i32 %shl254.i, %conv242.i
  store i32 %or255.i, i32* %tPos282.i, align 4
  %cmp258.i = icmp eq i32 %dec208.i, 0
  br i1 %cmp258.i, label %if.then260.i, label %if.end273.i

if.then260.i:                                     ; preds = %BZ2_indexIntoF.exit897.i
  %idxprom262.i = sext i32 %56 to i64
  %arrayidx263.i = getelementptr inbounds [512 x i32], [512 x i32]* @BZ2_rNums, i64 0, i64 %idxprom262.i
  %61 = load i32, i32* %arrayidx263.i, align 4
  store i32 %61, i32* %rNToGo.i116, align 8
  %inc266.i = add nsw i32 %56, 1
  %cmp268.i = icmp eq i32 %inc266.i, 512
  %.inc266.i = select i1 %cmp268.i, i32 0, i32 %inc266.i
  store i32 %.inc266.i, i32* %rTPos.i117, align 4
  br label %if.end273.i

if.end273.i:                                      ; preds = %if.then260.i, %BZ2_indexIntoF.exit897.i
  %62 = phi i32 [ %.inc266.i, %if.then260.i ], [ %56, %BZ2_indexIntoF.exit897.i ]
  %63 = phi i32 [ %61, %if.then260.i ], [ %dec208.i, %BZ2_indexIntoF.exit897.i ]
  %dec275.i = add nsw i32 %63, -1
  store i32 %dec275.i, i32* %rNToGo.i116, align 8
  %cmp277.i = icmp eq i32 %dec275.i, 1
  %cond279.i = zext i1 %cmp277.i to i32
  %inc284.i = add nsw i32 %30, 4
  store i32 %inc284.i, i32* %nblock_used279.i, align 4
  %call236.masked.i = and i32 %nb.0.shr.i893.i, 255
  %conv285.i = xor i32 %cond279.i, %call236.masked.i
  %add286.i = add nuw nsw i32 %conv285.i, 4
  store i32 %add286.i, i32* %state_out_len278.i, align 8
  br label %do.body.i883.i

do.body.i883.i:                                   ; preds = %do.body.i883.i, %if.end273.i
  %na.0.i872.i = phi i32 [ 256, %if.end273.i ], [ %shr.na.0.i879.i, %do.body.i883.i ]
  %nb.0.i873.i = phi i32 [ 0, %if.end273.i ], [ %nb.0.shr.i880.i, %do.body.i883.i ]
  %add.i874.i = add nsw i32 %nb.0.i873.i, %na.0.i872.i
  %shr.i875.i = ashr i32 %add.i874.i, 1
  %idxprom.i876.i = sext i32 %shr.i875.i to i64
  %arrayidx.i877.i = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 18, i64 %idxprom.i876.i
  %64 = load i32, i32* %arrayidx.i877.i, align 4
  %cmp.i878.i = icmp sgt i32 %64, %or255.i
  %shr.na.0.i879.i = select i1 %cmp.i878.i, i32 %shr.i875.i, i32 %na.0.i872.i
  %nb.0.shr.i880.i = select i1 %cmp.i878.i, i32 %nb.0.i873.i, i32 %shr.i875.i
  %sub.i881.i = sub nsw i32 %shr.na.0.i879.i, %nb.0.shr.i880.i
  %cmp1.i882.i = icmp eq i32 %sub.i881.i, 1
  br i1 %cmp1.i882.i, label %BZ2_indexIntoF.exit884.i, label %do.body.i883.i

BZ2_indexIntoF.exit884.i:                         ; preds = %do.body.i883.i
  store i32 %nb.0.shr.i880.i, i32* %k0280.i, align 8
  %idxprom294.i = zext i32 %or255.i to i64
  %arrayidx296.i = getelementptr inbounds i16, i16* %35, i64 %idxprom294.i
  %65 = load i16, i16* %arrayidx296.i, align 2
  %conv297.i = zext i16 %65 to i32
  %shr299.i = lshr i32 %or255.i, 1
  %idxprom300.i = zext i32 %shr299.i to i64
  %arrayidx302.i = getelementptr inbounds i8, i8* %37, i64 %idxprom300.i
  %66 = load i8, i8* %arrayidx302.i, align 1
  %conv303.i = zext i8 %66 to i32
  %shl305.i = shl nuw nsw i32 %conv242.i, 2
  %and306.i = and i32 %shl305.i, 4
  %shr307.i = lshr i32 %conv303.i, %and306.i
  %and308.i = shl nuw nsw i32 %shr307.i, 16
  %shl309.i = and i32 %and308.i, 983040
  %or310.i = or i32 %shl309.i, %conv297.i
  store i32 %or310.i, i32* %tPos282.i, align 4
  %cmp313.i = icmp eq i32 %dec275.i, 0
  br i1 %cmp313.i, label %if.then315.i, label %if.end328.i

if.then315.i:                                     ; preds = %BZ2_indexIntoF.exit884.i
  %idxprom317.i = sext i32 %62 to i64
  %arrayidx318.i = getelementptr inbounds [512 x i32], [512 x i32]* @BZ2_rNums, i64 0, i64 %idxprom317.i
  %67 = load i32, i32* %arrayidx318.i, align 4
  store i32 %67, i32* %rNToGo.i116, align 8
  %inc321.i = add nsw i32 %62, 1
  %cmp323.i = icmp eq i32 %inc321.i, 512
  %.inc321.i = select i1 %cmp323.i, i32 0, i32 %inc321.i
  store i32 %.inc321.i, i32* %rTPos.i117, align 4
  br label %if.end328.i

if.end328.i:                                      ; preds = %if.then315.i, %BZ2_indexIntoF.exit884.i
  %68 = phi i32 [ %67, %if.then315.i ], [ %dec275.i, %BZ2_indexIntoF.exit884.i ]
  %dec330.i = add nsw i32 %68, -1
  store i32 %dec330.i, i32* %rNToGo.i116, align 8
  %cmp332.i = icmp eq i32 %dec330.i, 1
  %cond334.i = zext i1 %cmp332.i to i32
  %xor336.i = xor i32 %cond334.i, %nb.0.shr.i880.i
  store i32 %xor336.i, i32* %k0280.i, align 8
  %inc338.i = add nsw i32 %30, 5
  store i32 %inc338.i, i32* %nblock_used279.i, align 4
  br label %while.body2.backedge.i

while.body2.backedge.i:                           ; preds = %if.end328.i, %if.then229.i, %if.end206.i, %if.then161.i, %if.end138.i, %if.then93.i, %if.end71.i, %if.then23.i, %if.end6.i
  %69 = phi %struct.bz_stream* [ %13, %if.end328.i ], [ %13, %if.then229.i ], [ %13, %if.then161.i ], [ %13, %if.then93.i ], [ %.pre.i, %if.then23.i ], [ %27, %if.end6.i ], [ %13, %if.end71.i ], [ %13, %if.end138.i ], [ %13, %if.end206.i ]
  %avail_out.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %69, i64 0, i32 5
  %70 = load i32, i32* %avail_out.i, align 8
  %cmp.i = icmp eq i32 %70, 0
  br i1 %cmp.i, label %if.end20, label %if.end.i

if.end348.i:                                      ; preds = %while.body342.preheader.i, %while.body342.backedge.i
  %71 = phi %struct.bz_stream* [ %109, %while.body342.backedge.i ], [ %11, %while.body342.preheader.i ]
  %72 = load i32, i32* %state_out_len278.i, align 8
  %cmp350.i = icmp eq i32 %72, 0
  br i1 %cmp350.i, label %while.end388.i, label %if.end353.i

if.end353.i:                                      ; preds = %if.end348.i
  %73 = load i8, i8* %state_out_ch277.i, align 4
  %next_out356.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %71, i64 0, i32 4
  %74 = load i8*, i8** %next_out356.i, align 8
  store i8 %73, i8* %74, align 1
  %75 = load i32, i32* %calculatedBlockCRC276.i, align 8
  %shl358.i = shl i32 %75, 8
  %shr360.i = lshr i32 %75, 24
  %76 = load i8, i8* %state_out_ch277.i, align 4
  %conv362.i = zext i8 %76 to i32
  %xor363.i = xor i32 %conv362.i, %shr360.i
  %idxprom364.i = zext i32 %xor363.i to i64
  %arrayidx365.i = getelementptr inbounds [256 x i32], [256 x i32]* @BZ2_crc32Table, i64 0, i64 %idxprom364.i
  %77 = load i32, i32* %arrayidx365.i, align 4
  %xor366.i = xor i32 %77, %shl358.i
  store i32 %xor366.i, i32* %calculatedBlockCRC276.i, align 8
  %78 = load i32, i32* %state_out_len278.i, align 8
  %dec369.i = add nsw i32 %78, -1
  store i32 %dec369.i, i32* %state_out_len278.i, align 8
  %79 = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  %next_out371.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %79, i64 0, i32 4
  %80 = load i8*, i8** %next_out371.i, align 8
  %incdec.ptr372.i = getelementptr inbounds i8, i8* %80, i64 1
  store i8* %incdec.ptr372.i, i8** %next_out371.i, align 8
  %81 = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  %avail_out374.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %81, i64 0, i32 5
  %82 = load i32, i32* %avail_out374.i, align 8
  %dec375.i = add i32 %82, -1
  store i32 %dec375.i, i32* %avail_out374.i, align 8
  %83 = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  %total_out_lo32377.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %83, i64 0, i32 6
  %84 = load i32, i32* %total_out_lo32377.i, align 4
  %inc378.i = add i32 %84, 1
  store i32 %inc378.i, i32* %total_out_lo32377.i, align 4
  %85 = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  %total_out_lo32380.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %85, i64 0, i32 6
  %86 = load i32, i32* %total_out_lo32380.i, align 4
  %cmp381.i = icmp eq i32 %86, 0
  br i1 %cmp381.i, label %if.then383.i, label %while.body342.backedge.i

if.then383.i:                                     ; preds = %if.end353.i
  %total_out_hi32385.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %85, i64 0, i32 7
  %87 = load i32, i32* %total_out_hi32385.i, align 8
  %inc386.i = add i32 %87, 1
  store i32 %inc386.i, i32* %total_out_hi32385.i, align 8
  %.pre937.i = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  br label %while.body342.backedge.i

while.end388.i:                                   ; preds = %if.end348.i
  %88 = load i32, i32* %nblock_used279.i, align 4
  %89 = load i32, i32* %save_nblock287.i, align 8
  %add391.i = add nsw i32 %89, 1
  %cmp392.i = icmp eq i32 %88, %add391.i
  br i1 %cmp392.i, label %if.end20, label %if.end395.i

if.end395.i:                                      ; preds = %while.end388.i
  %cmp399.i = icmp sgt i32 %88, %add391.i
  br i1 %cmp399.i, label %cleanup71, label %if.end402.i

if.end402.i:                                      ; preds = %if.end395.i
  store i32 1, i32* %state_out_len278.i, align 8
  %90 = load i32, i32* %k0280.i, align 8
  %conv405.i = trunc i32 %90 to i8
  store i8 %conv405.i, i8* %state_out_ch277.i, align 4
  %91 = load i32, i32* %tPos282.i, align 4
  br label %do.body.i870.i

do.body.i870.i:                                   ; preds = %do.body.i870.i, %if.end402.i
  %na.0.i859.i = phi i32 [ 256, %if.end402.i ], [ %shr.na.0.i866.i, %do.body.i870.i ]
  %nb.0.i860.i = phi i32 [ 0, %if.end402.i ], [ %nb.0.shr.i867.i, %do.body.i870.i ]
  %add.i861.i = add nsw i32 %nb.0.i860.i, %na.0.i859.i
  %shr.i862.i = ashr i32 %add.i861.i, 1
  %idxprom.i863.i = sext i32 %shr.i862.i to i64
  %arrayidx.i864.i = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 18, i64 %idxprom.i863.i
  %92 = load i32, i32* %arrayidx.i864.i, align 4
  %cmp.i865.i = icmp sgt i32 %92, %91
  %shr.na.0.i866.i = select i1 %cmp.i865.i, i32 %shr.i862.i, i32 %na.0.i859.i
  %nb.0.shr.i867.i = select i1 %cmp.i865.i, i32 %nb.0.i860.i, i32 %shr.i862.i
  %sub.i868.i = sub nsw i32 %shr.na.0.i866.i, %nb.0.shr.i867.i
  %cmp1.i869.i = icmp eq i32 %sub.i868.i, 1
  br i1 %cmp1.i869.i, label %BZ2_indexIntoF.exit871.i, label %do.body.i870.i

BZ2_indexIntoF.exit871.i:                         ; preds = %do.body.i870.i
  %idxprom413.i = zext i32 %91 to i64
  %93 = load i16*, i16** %ll16414.i, align 8
  %arrayidx415.i = getelementptr inbounds i16, i16* %93, i64 %idxprom413.i
  %94 = load i16, i16* %arrayidx415.i, align 2
  %conv416.i = zext i16 %94 to i32
  %shr418.i = lshr i32 %91, 1
  %idxprom419.i = zext i32 %shr418.i to i64
  %95 = load i8*, i8** %ll4420.i, align 8
  %arrayidx421.i = getelementptr inbounds i8, i8* %95, i64 %idxprom419.i
  %96 = load i8, i8* %arrayidx421.i, align 1
  %conv422.i = zext i8 %96 to i32
  %shl424.i = shl i32 %91, 2
  %and425.i = and i32 %shl424.i, 4
  %shr426.i = lshr i32 %conv422.i, %and425.i
  %and427.i = shl nuw nsw i32 %shr426.i, 16
  %shl428.i = and i32 %and427.i, 983040
  %or429.i = or i32 %shl428.i, %conv416.i
  store i32 %or429.i, i32* %tPos282.i, align 4
  %inc432.i = add nsw i32 %88, 1
  store i32 %inc432.i, i32* %nblock_used279.i, align 4
  %cmp436.i = icmp eq i32 %88, %89
  br i1 %cmp436.i, label %while.body342.backedge.i, label %if.end439.i

if.end439.i:                                      ; preds = %BZ2_indexIntoF.exit871.i
  %conv440.i = and i32 %nb.0.shr.i867.i, 255
  %cmp442.i = icmp eq i32 %conv440.i, %90
  br i1 %cmp442.i, label %if.end447.i, label %if.then444.i

if.then444.i:                                     ; preds = %if.end439.i
  store i32 %conv440.i, i32* %k0280.i, align 8
  br label %while.body342.backedge.i

if.end447.i:                                      ; preds = %if.end439.i
  store i32 2, i32* %state_out_len278.i, align 8
  br label %do.body.i857.i

do.body.i857.i:                                   ; preds = %do.body.i857.i, %if.end447.i
  %na.0.i846.i = phi i32 [ 256, %if.end447.i ], [ %shr.na.0.i853.i, %do.body.i857.i ]
  %nb.0.i847.i = phi i32 [ 0, %if.end447.i ], [ %nb.0.shr.i854.i, %do.body.i857.i ]
  %add.i848.i = add nsw i32 %nb.0.i847.i, %na.0.i846.i
  %shr.i849.i = ashr i32 %add.i848.i, 1
  %idxprom.i850.i = sext i32 %shr.i849.i to i64
  %arrayidx.i851.i = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 18, i64 %idxprom.i850.i
  %97 = load i32, i32* %arrayidx.i851.i, align 4
  %cmp.i852.i = icmp sgt i32 %97, %or429.i
  %shr.na.0.i853.i = select i1 %cmp.i852.i, i32 %shr.i849.i, i32 %na.0.i846.i
  %nb.0.shr.i854.i = select i1 %cmp.i852.i, i32 %nb.0.i847.i, i32 %shr.i849.i
  %sub.i855.i = sub nsw i32 %shr.na.0.i853.i, %nb.0.shr.i854.i
  %cmp1.i856.i = icmp eq i32 %sub.i855.i, 1
  br i1 %cmp1.i856.i, label %BZ2_indexIntoF.exit858.i, label %do.body.i857.i

BZ2_indexIntoF.exit858.i:                         ; preds = %do.body.i857.i
  %idxprom455.i = zext i32 %or429.i to i64
  %arrayidx457.i = getelementptr inbounds i16, i16* %93, i64 %idxprom455.i
  %98 = load i16, i16* %arrayidx457.i, align 2
  %conv458.i = zext i16 %98 to i32
  %shr460.i = lshr i32 %or429.i, 1
  %idxprom461.i = zext i32 %shr460.i to i64
  %arrayidx463.i = getelementptr inbounds i8, i8* %95, i64 %idxprom461.i
  %99 = load i8, i8* %arrayidx463.i, align 1
  %conv464.i = zext i8 %99 to i32
  %shl466.i = shl nuw nsw i32 %conv416.i, 2
  %and467.i = and i32 %shl466.i, 4
  %shr468.i = lshr i32 %conv464.i, %and467.i
  %and469.i = shl nuw nsw i32 %shr468.i, 16
  %shl470.i = and i32 %and469.i, 983040
  %or471.i = or i32 %shl470.i, %conv458.i
  store i32 %or471.i, i32* %tPos282.i, align 4
  %inc474.i = add nsw i32 %88, 2
  store i32 %inc474.i, i32* %nblock_used279.i, align 4
  %cmp478.i = icmp eq i32 %inc432.i, %89
  br i1 %cmp478.i, label %while.body342.backedge.i, label %if.end481.i

if.end481.i:                                      ; preds = %BZ2_indexIntoF.exit858.i
  %conv482.i = and i32 %nb.0.shr.i854.i, 255
  %cmp484.i = icmp eq i32 %conv482.i, %90
  br i1 %cmp484.i, label %if.end489.i, label %if.then486.i

if.then486.i:                                     ; preds = %if.end481.i
  store i32 %conv482.i, i32* %k0280.i, align 8
  br label %while.body342.backedge.i

if.end489.i:                                      ; preds = %if.end481.i
  store i32 3, i32* %state_out_len278.i, align 8
  br label %do.body.i844.i

do.body.i844.i:                                   ; preds = %do.body.i844.i, %if.end489.i
  %na.0.i833.i = phi i32 [ 256, %if.end489.i ], [ %shr.na.0.i840.i, %do.body.i844.i ]
  %nb.0.i834.i = phi i32 [ 0, %if.end489.i ], [ %nb.0.shr.i841.i, %do.body.i844.i ]
  %add.i835.i = add nsw i32 %nb.0.i834.i, %na.0.i833.i
  %shr.i836.i = ashr i32 %add.i835.i, 1
  %idxprom.i837.i = sext i32 %shr.i836.i to i64
  %arrayidx.i838.i = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 18, i64 %idxprom.i837.i
  %100 = load i32, i32* %arrayidx.i838.i, align 4
  %cmp.i839.i = icmp sgt i32 %100, %or471.i
  %shr.na.0.i840.i = select i1 %cmp.i839.i, i32 %shr.i836.i, i32 %na.0.i833.i
  %nb.0.shr.i841.i = select i1 %cmp.i839.i, i32 %nb.0.i834.i, i32 %shr.i836.i
  %sub.i842.i = sub nsw i32 %shr.na.0.i840.i, %nb.0.shr.i841.i
  %cmp1.i843.i = icmp eq i32 %sub.i842.i, 1
  br i1 %cmp1.i843.i, label %BZ2_indexIntoF.exit845.i, label %do.body.i844.i

BZ2_indexIntoF.exit845.i:                         ; preds = %do.body.i844.i
  %idxprom497.i = zext i32 %or471.i to i64
  %arrayidx499.i = getelementptr inbounds i16, i16* %93, i64 %idxprom497.i
  %101 = load i16, i16* %arrayidx499.i, align 2
  %conv500.i = zext i16 %101 to i32
  %shr502.i = lshr i32 %or471.i, 1
  %idxprom503.i = zext i32 %shr502.i to i64
  %arrayidx505.i = getelementptr inbounds i8, i8* %95, i64 %idxprom503.i
  %102 = load i8, i8* %arrayidx505.i, align 1
  %conv506.i = zext i8 %102 to i32
  %shl508.i = shl nuw nsw i32 %conv458.i, 2
  %and509.i = and i32 %shl508.i, 4
  %shr510.i = lshr i32 %conv506.i, %and509.i
  %and511.i = shl nuw nsw i32 %shr510.i, 16
  %shl512.i = and i32 %and511.i, 983040
  %or513.i = or i32 %shl512.i, %conv500.i
  store i32 %or513.i, i32* %tPos282.i, align 4
  %inc516.i = add nsw i32 %88, 3
  store i32 %inc516.i, i32* %nblock_used279.i, align 4
  %cmp520.i = icmp eq i32 %inc474.i, %89
  br i1 %cmp520.i, label %while.body342.backedge.i, label %if.end523.i

if.end523.i:                                      ; preds = %BZ2_indexIntoF.exit845.i
  %conv524.i = and i32 %nb.0.shr.i841.i, 255
  %cmp526.i = icmp eq i32 %conv524.i, %90
  br i1 %cmp526.i, label %do.body.i831.i, label %if.then528.i

if.then528.i:                                     ; preds = %if.end523.i
  store i32 %conv524.i, i32* %k0280.i, align 8
  br label %while.body342.backedge.i

do.body.i831.i:                                   ; preds = %if.end523.i, %do.body.i831.i
  %na.0.i820.i = phi i32 [ %shr.na.0.i827.i, %do.body.i831.i ], [ 256, %if.end523.i ]
  %nb.0.i821.i = phi i32 [ %nb.0.shr.i828.i, %do.body.i831.i ], [ 0, %if.end523.i ]
  %add.i822.i = add nsw i32 %nb.0.i821.i, %na.0.i820.i
  %shr.i823.i = ashr i32 %add.i822.i, 1
  %idxprom.i824.i = sext i32 %shr.i823.i to i64
  %arrayidx.i825.i = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 18, i64 %idxprom.i824.i
  %103 = load i32, i32* %arrayidx.i825.i, align 4
  %cmp.i826.i = icmp sgt i32 %103, %or513.i
  %shr.na.0.i827.i = select i1 %cmp.i826.i, i32 %shr.i823.i, i32 %na.0.i820.i
  %nb.0.shr.i828.i = select i1 %cmp.i826.i, i32 %nb.0.i821.i, i32 %shr.i823.i
  %sub.i829.i = sub nsw i32 %shr.na.0.i827.i, %nb.0.shr.i828.i
  %cmp1.i830.i = icmp eq i32 %sub.i829.i, 1
  br i1 %cmp1.i830.i, label %BZ2_indexIntoF.exit832.i, label %do.body.i831.i

BZ2_indexIntoF.exit832.i:                         ; preds = %do.body.i831.i
  %idxprom538.i = zext i32 %or513.i to i64
  %arrayidx540.i = getelementptr inbounds i16, i16* %93, i64 %idxprom538.i
  %104 = load i16, i16* %arrayidx540.i, align 2
  %conv541.i = zext i16 %104 to i32
  %shr543.i = lshr i32 %or513.i, 1
  %idxprom544.i = zext i32 %shr543.i to i64
  %arrayidx546.i = getelementptr inbounds i8, i8* %95, i64 %idxprom544.i
  %105 = load i8, i8* %arrayidx546.i, align 1
  %conv547.i = zext i8 %105 to i32
  %shl549.i = shl nuw nsw i32 %conv500.i, 2
  %and550.i = and i32 %shl549.i, 4
  %shr551.i = lshr i32 %conv547.i, %and550.i
  %and552.i = shl nuw nsw i32 %shr551.i, 16
  %shl553.i = and i32 %and552.i, 983040
  %or554.i = or i32 %shl553.i, %conv541.i
  store i32 %or554.i, i32* %tPos282.i, align 4
  %inc557.i = add nsw i32 %88, 4
  store i32 %inc557.i, i32* %nblock_used279.i, align 4
  %conv558.i = and i32 %nb.0.shr.i828.i, 255
  %add559.i = add nuw nsw i32 %conv558.i, 4
  store i32 %add559.i, i32* %state_out_len278.i, align 8
  br label %do.body.i818.i

do.body.i818.i:                                   ; preds = %do.body.i818.i, %BZ2_indexIntoF.exit832.i
  %na.0.i807.i = phi i32 [ 256, %BZ2_indexIntoF.exit832.i ], [ %shr.na.0.i814.i, %do.body.i818.i ]
  %nb.0.i808.i = phi i32 [ 0, %BZ2_indexIntoF.exit832.i ], [ %nb.0.shr.i815.i, %do.body.i818.i ]
  %add.i809.i = add nsw i32 %nb.0.i808.i, %na.0.i807.i
  %shr.i810.i = ashr i32 %add.i809.i, 1
  %idxprom.i811.i = sext i32 %shr.i810.i to i64
  %arrayidx.i812.i = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 18, i64 %idxprom.i811.i
  %106 = load i32, i32* %arrayidx.i812.i, align 4
  %cmp.i813.i = icmp sgt i32 %106, %or554.i
  %shr.na.0.i814.i = select i1 %cmp.i813.i, i32 %shr.i810.i, i32 %na.0.i807.i
  %nb.0.shr.i815.i = select i1 %cmp.i813.i, i32 %nb.0.i808.i, i32 %shr.i810.i
  %sub.i816.i = sub nsw i32 %shr.na.0.i814.i, %nb.0.shr.i815.i
  %cmp1.i817.i = icmp eq i32 %sub.i816.i, 1
  br i1 %cmp1.i817.i, label %BZ2_indexIntoF.exit819.i, label %do.body.i818.i

BZ2_indexIntoF.exit819.i:                         ; preds = %do.body.i818.i
  store i32 %nb.0.shr.i815.i, i32* %k0280.i, align 8
  %idxprom567.i = zext i32 %or554.i to i64
  %arrayidx569.i = getelementptr inbounds i16, i16* %93, i64 %idxprom567.i
  %107 = load i16, i16* %arrayidx569.i, align 2
  %conv570.i = zext i16 %107 to i32
  %shr572.i = lshr i32 %or554.i, 1
  %idxprom573.i = zext i32 %shr572.i to i64
  %arrayidx575.i = getelementptr inbounds i8, i8* %95, i64 %idxprom573.i
  %108 = load i8, i8* %arrayidx575.i, align 1
  %conv576.i = zext i8 %108 to i32
  %shl578.i = shl nuw nsw i32 %conv541.i, 2
  %and579.i = and i32 %shl578.i, 4
  %shr580.i = lshr i32 %conv576.i, %and579.i
  %and581.i = shl nuw nsw i32 %shr580.i, 16
  %shl582.i = and i32 %and581.i, 983040
  %or583.i = or i32 %shl582.i, %conv570.i
  store i32 %or583.i, i32* %tPos282.i, align 4
  %inc586.i = add nsw i32 %88, 5
  store i32 %inc586.i, i32* %nblock_used279.i, align 4
  br label %while.body342.backedge.i

while.body342.backedge.i:                         ; preds = %BZ2_indexIntoF.exit819.i, %if.then528.i, %BZ2_indexIntoF.exit845.i, %if.then486.i, %BZ2_indexIntoF.exit858.i, %if.then444.i, %BZ2_indexIntoF.exit871.i, %if.then383.i, %if.end353.i
  %109 = phi %struct.bz_stream* [ %71, %BZ2_indexIntoF.exit819.i ], [ %71, %if.then528.i ], [ %71, %if.then486.i ], [ %71, %if.then444.i ], [ %.pre937.i, %if.then383.i ], [ %85, %if.end353.i ], [ %71, %BZ2_indexIntoF.exit871.i ], [ %71, %BZ2_indexIntoF.exit858.i ], [ %71, %BZ2_indexIntoF.exit845.i ]
  %avail_out344.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %109, i64 0, i32 5
  %110 = load i32, i32* %avail_out344.i, align 8
  %cmp345.i = icmp eq i32 %110, 0
  br i1 %cmp345.i, label %if.end20, label %if.end348.i

if.else:                                          ; preds = %if.then14
  br i1 %tobool.i109, label %if.else.i, label %while.body2.preheader.i110

while.body2.preheader.i110:                       ; preds = %if.else
  %111 = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  %avail_out692.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %111, i64 0, i32 5
  %112 = load i32, i32* %avail_out692.i, align 8
  %cmp693.i = icmp eq i32 %112, 0
  br i1 %cmp693.i, label %if.end20, label %if.end.i121

if.end.i121:                                      ; preds = %while.body2.preheader.i110, %while.body2.backedge.i158
  %113 = phi %struct.bz_stream* [ %158, %while.body2.backedge.i158 ], [ %111, %while.body2.preheader.i110 ]
  %114 = load i32, i32* %state_out_len278.i, align 8
  %cmp4.i120 = icmp eq i32 %114, 0
  br i1 %cmp4.i120, label %while.end.i146, label %if.end6.i139

if.end6.i139:                                     ; preds = %if.end.i121
  %115 = load i8, i8* %state_out_ch277.i, align 4
  %next_out.i122 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %113, i64 0, i32 4
  %116 = load i8*, i8** %next_out.i122, align 8
  store i8 %115, i8* %116, align 1
  %117 = load i32, i32* %calculatedBlockCRC276.i, align 8
  %shl.i123 = shl i32 %117, 8
  %shr.i124 = lshr i32 %117, 24
  %118 = load i8, i8* %state_out_ch277.i, align 4
  %conv.i125 = zext i8 %118 to i32
  %xor.i126 = xor i32 %conv.i125, %shr.i124
  %idxprom.i127 = zext i32 %xor.i126 to i64
  %arrayidx.i128 = getelementptr inbounds [256 x i32], [256 x i32]* @BZ2_crc32Table, i64 0, i64 %idxprom.i127
  %119 = load i32, i32* %arrayidx.i128, align 4
  %xor10.i129 = xor i32 %119, %shl.i123
  store i32 %xor10.i129, i32* %calculatedBlockCRC276.i, align 8
  %120 = load i32, i32* %state_out_len278.i, align 8
  %dec.i130 = add nsw i32 %120, -1
  store i32 %dec.i130, i32* %state_out_len278.i, align 8
  %121 = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  %next_out14.i131 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %121, i64 0, i32 4
  %122 = load i8*, i8** %next_out14.i131, align 8
  %incdec.ptr.i132 = getelementptr inbounds i8, i8* %122, i64 1
  store i8* %incdec.ptr.i132, i8** %next_out14.i131, align 8
  %123 = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  %avail_out16.i133 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %123, i64 0, i32 5
  %124 = load i32, i32* %avail_out16.i133, align 8
  %dec17.i134 = add i32 %124, -1
  store i32 %dec17.i134, i32* %avail_out16.i133, align 8
  %125 = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  %total_out_lo32.i135 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %125, i64 0, i32 6
  %126 = load i32, i32* %total_out_lo32.i135, align 4
  %inc.i136 = add i32 %126, 1
  store i32 %inc.i136, i32* %total_out_lo32.i135, align 4
  %127 = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  %total_out_lo3220.i137 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %127, i64 0, i32 6
  %128 = load i32, i32* %total_out_lo3220.i137, align 4
  %cmp21.i138 = icmp eq i32 %128, 0
  br i1 %cmp21.i138, label %if.then23.i143, label %while.body2.backedge.i158

if.then23.i143:                                   ; preds = %if.end6.i139
  %total_out_hi32.i140 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %127, i64 0, i32 7
  %129 = load i32, i32* %total_out_hi32.i140, align 8
  %inc25.i141 = add i32 %129, 1
  store i32 %inc25.i141, i32* %total_out_hi32.i140, align 8
  %.pre.i142 = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  br label %while.body2.backedge.i158

while.end.i146:                                   ; preds = %if.end.i121
  %130 = load i32, i32* %nblock_used279.i, align 4
  %131 = load i32, i32* %save_nblock287.i, align 8
  %add.i144 = add nsw i32 %131, 1
  %cmp27.i145 = icmp eq i32 %130, %add.i144
  br i1 %cmp27.i145, label %if.end20, label %if.end30.i148

if.end30.i148:                                    ; preds = %while.end.i146
  %cmp34.i147 = icmp sgt i32 %130, %add.i144
  br i1 %cmp34.i147, label %cleanup71, label %if.end37.i151

if.end37.i151:                                    ; preds = %if.end30.i148
  store i32 1, i32* %state_out_len278.i, align 8
  %132 = load i32, i32* %k0280.i, align 8
  %conv39.i149 = trunc i32 %132 to i8
  store i8 %conv39.i149, i8* %state_out_ch277.i, align 4
  %133 = load i32, i32* %tPos282.i, align 4
  %idxprom41.i = zext i32 %133 to i64
  %134 = load i32*, i32** %tt281.i, align 8
  %arrayidx42.i = getelementptr inbounds i32, i32* %134, i64 %idxprom41.i
  %135 = load i32, i32* %arrayidx42.i, align 4
  %shr47.i150 = lshr i32 %135, 8
  store i32 %shr47.i150, i32* %tPos282.i, align 4
  %136 = load i64, i64* %3, align 8
  %137 = trunc i64 %136 to i32
  %cmp48.i = icmp eq i32 %137, 0
  %138 = lshr i64 %136, 32
  %139 = trunc i64 %138 to i32
  br i1 %cmp48.i, label %if.then50.i, label %if.end62.i

if.then50.i:                                      ; preds = %if.end37.i151
  %idxprom51.i = ashr i64 %136, 32
  %arrayidx52.i = getelementptr inbounds [512 x i32], [512 x i32]* @BZ2_rNums, i64 0, i64 %idxprom51.i
  %140 = load i32, i32* %arrayidx52.i, align 4
  store i32 %140, i32* %rNToGo.i116, align 8
  %inc55.i = add nsw i32 %139, 1
  %cmp57.i152 = icmp eq i32 %inc55.i, 512
  %.inc55.i = select i1 %cmp57.i152, i32 0, i32 %inc55.i
  store i32 %.inc55.i, i32* %rTPos.i117, align 4
  br label %if.end62.i

if.end62.i:                                       ; preds = %if.then50.i, %if.end37.i151
  %141 = phi i32 [ %.inc55.i, %if.then50.i ], [ %139, %if.end37.i151 ]
  %142 = phi i32 [ %140, %if.then50.i ], [ %137, %if.end37.i151 ]
  %dec64.i = add nsw i32 %142, -1
  store i32 %dec64.i, i32* %rNToGo.i116, align 8
  %inc72.i = add nsw i32 %130, 1
  store i32 %inc72.i, i32* %nblock_used279.i, align 4
  %cmp76.i = icmp eq i32 %130, %131
  br i1 %cmp76.i, label %while.body2.backedge.i158, label %if.end79.i

if.end79.i:                                       ; preds = %if.end62.i
  %cmp66.i153 = icmp eq i32 %dec64.i, 1
  %cond.i154 = zext i1 %cmp66.i153 to i32
  %.masked.i = and i32 %135, 255
  %conv80.i = xor i32 %cond.i154, %.masked.i
  %cmp82.i = icmp eq i32 %conv80.i, %132
  br i1 %cmp82.i, label %if.end87.i, label %if.then84.i

if.then84.i:                                      ; preds = %if.end79.i
  store i32 %conv80.i, i32* %k0280.i, align 8
  br label %while.body2.backedge.i158

if.end87.i:                                       ; preds = %if.end79.i
  store i32 2, i32* %state_out_len278.i, align 8
  %idxprom90.i = zext i32 %shr47.i150 to i64
  %arrayidx92.i = getelementptr inbounds i32, i32* %134, i64 %idxprom90.i
  %143 = load i32, i32* %arrayidx92.i, align 4
  %shr98.i = lshr i32 %143, 8
  store i32 %shr98.i, i32* %tPos282.i, align 4
  %cmp100.i = icmp eq i32 %dec64.i, 0
  br i1 %cmp100.i, label %if.then102.i, label %if.end115.i

if.then102.i:                                     ; preds = %if.end87.i
  %idxprom104.i155 = sext i32 %141 to i64
  %arrayidx105.i = getelementptr inbounds [512 x i32], [512 x i32]* @BZ2_rNums, i64 0, i64 %idxprom104.i155
  %144 = load i32, i32* %arrayidx105.i, align 4
  store i32 %144, i32* %rNToGo.i116, align 8
  %inc108.i = add nsw i32 %141, 1
  %cmp110.i = icmp eq i32 %inc108.i, 512
  %.inc108.i = select i1 %cmp110.i, i32 0, i32 %inc108.i
  store i32 %.inc108.i, i32* %rTPos.i117, align 4
  br label %if.end115.i

if.end115.i:                                      ; preds = %if.then102.i, %if.end87.i
  %145 = phi i32 [ %.inc108.i, %if.then102.i ], [ %141, %if.end87.i ]
  %146 = phi i32 [ %144, %if.then102.i ], [ %dec64.i, %if.end87.i ]
  %dec117.i = add nsw i32 %146, -1
  store i32 %dec117.i, i32* %rNToGo.i116, align 8
  %inc126.i = add nsw i32 %130, 2
  store i32 %inc126.i, i32* %nblock_used279.i, align 4
  %cmp130.i = icmp eq i32 %inc72.i, %131
  br i1 %cmp130.i, label %while.body2.backedge.i158, label %if.end133.i

if.end133.i:                                      ; preds = %if.end115.i
  %cmp119.i = icmp eq i32 %dec117.i, 1
  %cond121.i = zext i1 %cmp119.i to i32
  %.masked657.i = and i32 %143, 255
  %conv134.i = xor i32 %cond121.i, %.masked657.i
  %cmp136.i = icmp eq i32 %conv134.i, %132
  br i1 %cmp136.i, label %if.end141.i, label %if.then138.i

if.then138.i:                                     ; preds = %if.end133.i
  store i32 %conv134.i, i32* %k0280.i, align 8
  br label %while.body2.backedge.i158

if.end141.i:                                      ; preds = %if.end133.i
  store i32 3, i32* %state_out_len278.i, align 8
  %idxprom144.i = zext i32 %shr98.i to i64
  %arrayidx146.i = getelementptr inbounds i32, i32* %134, i64 %idxprom144.i
  %147 = load i32, i32* %arrayidx146.i, align 4
  %shr152.i = lshr i32 %147, 8
  store i32 %shr152.i, i32* %tPos282.i, align 4
  %cmp154.i = icmp eq i32 %dec117.i, 0
  br i1 %cmp154.i, label %if.then156.i, label %if.end169.i

if.then156.i:                                     ; preds = %if.end141.i
  %idxprom158.i = sext i32 %145 to i64
  %arrayidx159.i = getelementptr inbounds [512 x i32], [512 x i32]* @BZ2_rNums, i64 0, i64 %idxprom158.i
  %148 = load i32, i32* %arrayidx159.i, align 4
  store i32 %148, i32* %rNToGo.i116, align 8
  %inc162.i = add nsw i32 %145, 1
  %cmp164.i = icmp eq i32 %inc162.i, 512
  %.inc162.i = select i1 %cmp164.i, i32 0, i32 %inc162.i
  store i32 %.inc162.i, i32* %rTPos.i117, align 4
  br label %if.end169.i

if.end169.i:                                      ; preds = %if.then156.i, %if.end141.i
  %149 = phi i32 [ %.inc162.i, %if.then156.i ], [ %145, %if.end141.i ]
  %150 = phi i32 [ %148, %if.then156.i ], [ %dec117.i, %if.end141.i ]
  %dec171.i = add nsw i32 %150, -1
  store i32 %dec171.i, i32* %rNToGo.i116, align 8
  %inc180.i = add nsw i32 %130, 3
  store i32 %inc180.i, i32* %nblock_used279.i, align 4
  %cmp184.i = icmp eq i32 %inc126.i, %131
  br i1 %cmp184.i, label %while.body2.backedge.i158, label %if.end187.i

if.end187.i:                                      ; preds = %if.end169.i
  %cmp173.i = icmp eq i32 %dec171.i, 1
  %cond175.i = zext i1 %cmp173.i to i32
  %.masked658.i = and i32 %147, 255
  %conv188.i = xor i32 %cond175.i, %.masked658.i
  %cmp190.i = icmp eq i32 %conv188.i, %132
  br i1 %cmp190.i, label %if.end195.i, label %if.then192.i

if.then192.i:                                     ; preds = %if.end187.i
  store i32 %conv188.i, i32* %k0280.i, align 8
  br label %while.body2.backedge.i158

if.end195.i:                                      ; preds = %if.end187.i
  %idxprom197.i = zext i32 %shr152.i to i64
  %arrayidx199.i = getelementptr inbounds i32, i32* %134, i64 %idxprom197.i
  %151 = load i32, i32* %arrayidx199.i, align 4
  %shr205.i = lshr i32 %151, 8
  store i32 %shr205.i, i32* %tPos282.i, align 4
  %cmp207.i = icmp eq i32 %dec171.i, 0
  br i1 %cmp207.i, label %if.then209.i, label %if.end222.i

if.then209.i:                                     ; preds = %if.end195.i
  %idxprom211.i = sext i32 %149 to i64
  %arrayidx212.i = getelementptr inbounds [512 x i32], [512 x i32]* @BZ2_rNums, i64 0, i64 %idxprom211.i
  %152 = load i32, i32* %arrayidx212.i, align 4
  store i32 %152, i32* %rNToGo.i116, align 8
  %inc215.i = add nsw i32 %149, 1
  %cmp217.i = icmp eq i32 %inc215.i, 512
  %.inc215.i = select i1 %cmp217.i, i32 0, i32 %inc215.i
  store i32 %.inc215.i, i32* %rTPos.i117, align 4
  br label %if.end222.i

if.end222.i:                                      ; preds = %if.then209.i, %if.end195.i
  %153 = phi i32 [ %.inc215.i, %if.then209.i ], [ %149, %if.end195.i ]
  %154 = phi i32 [ %152, %if.then209.i ], [ %dec171.i, %if.end195.i ]
  %dec224.i = add nsw i32 %154, -1
  store i32 %dec224.i, i32* %rNToGo.i116, align 8
  %cmp226.i = icmp eq i32 %dec224.i, 1
  %cond228.i = zext i1 %cmp226.i to i32
  %inc233.i = add nsw i32 %130, 4
  store i32 %inc233.i, i32* %nblock_used279.i, align 4
  %.masked659.i = and i32 %151, 255
  %conv234.i = xor i32 %cond228.i, %.masked659.i
  %add235.i = add nuw nsw i32 %conv234.i, 4
  store i32 %add235.i, i32* %state_out_len278.i, align 8
  %idxprom238.i = zext i32 %shr205.i to i64
  %arrayidx240.i = getelementptr inbounds i32, i32* %134, i64 %idxprom238.i
  %155 = load i32, i32* %arrayidx240.i, align 4
  %conv245.i = and i32 %155, 255
  store i32 %conv245.i, i32* %k0280.i, align 8
  %shr248.i = lshr i32 %155, 8
  store i32 %shr248.i, i32* %tPos282.i, align 4
  %cmp250.i = icmp eq i32 %dec224.i, 0
  br i1 %cmp250.i, label %if.then252.i, label %if.end265.i

if.then252.i:                                     ; preds = %if.end222.i
  %idxprom254.i = sext i32 %153 to i64
  %arrayidx255.i = getelementptr inbounds [512 x i32], [512 x i32]* @BZ2_rNums, i64 0, i64 %idxprom254.i
  %156 = load i32, i32* %arrayidx255.i, align 4
  store i32 %156, i32* %rNToGo.i116, align 8
  %inc258.i = add nsw i32 %153, 1
  %cmp260.i = icmp eq i32 %inc258.i, 512
  %.inc258.i = select i1 %cmp260.i, i32 0, i32 %inc258.i
  store i32 %.inc258.i, i32* %rTPos.i117, align 4
  br label %if.end265.i

if.end265.i:                                      ; preds = %if.then252.i, %if.end222.i
  %157 = phi i32 [ %156, %if.then252.i ], [ %dec224.i, %if.end222.i ]
  %dec267.i = add nsw i32 %157, -1
  store i32 %dec267.i, i32* %rNToGo.i116, align 8
  %cmp269.i = icmp eq i32 %dec267.i, 1
  %cond271.i = zext i1 %cmp269.i to i32
  %xor273.i = xor i32 %cond271.i, %conv245.i
  store i32 %xor273.i, i32* %k0280.i, align 8
  %inc275.i = add nsw i32 %130, 5
  store i32 %inc275.i, i32* %nblock_used279.i, align 4
  br label %while.body2.backedge.i158

while.body2.backedge.i158:                        ; preds = %if.end265.i, %if.then192.i, %if.end169.i, %if.then138.i, %if.end115.i, %if.then84.i, %if.end62.i, %if.then23.i143, %if.end6.i139
  %158 = phi %struct.bz_stream* [ %113, %if.end265.i ], [ %113, %if.then192.i ], [ %113, %if.then138.i ], [ %113, %if.then84.i ], [ %.pre.i142, %if.then23.i143 ], [ %127, %if.end6.i139 ], [ %113, %if.end62.i ], [ %113, %if.end115.i ], [ %113, %if.end169.i ]
  %avail_out.i156 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %158, i64 0, i32 5
  %159 = load i32, i32* %avail_out.i156, align 8
  %cmp.i157 = icmp eq i32 %159, 0
  br i1 %cmp.i157, label %if.end20, label %if.end.i121

if.else.i:                                        ; preds = %if.else
  %160 = load i32, i32* %calculatedBlockCRC276.i, align 8
  %161 = load i32, i32* %state_out_len278.i, align 8
  %162 = load i32, i32* %nblock_used279.i, align 4
  %163 = load i32, i32* %k0280.i, align 8
  %164 = load i32*, i32** %tt281.i, align 8
  %165 = load i32, i32* %tPos282.i, align 4
  %166 = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  %next_out284.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %166, i64 0, i32 4
  %167 = load i8*, i8** %next_out284.i, align 8
  %avail_out286.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %166, i64 0, i32 5
  %168 = load i32, i32* %avail_out286.i, align 8
  %169 = load i32, i32* %save_nblock287.i, align 8
  %add288.i = add nsw i32 %169, 1
  br label %while.body290.i

while.body290.i:                                  ; preds = %if.end385.i, %if.end379.i, %if.end369.i, %if.end363.i, %if.end353.i162, %if.else.i
  %c_state_out_ch.0.i = phi i8 [ %8, %if.else.i ], [ %conv337.i, %if.end353.i162 ], [ %conv337.i, %if.end363.i ], [ %conv337.i, %if.end369.i ], [ %conv337.i, %if.end379.i ], [ %conv337.i, %if.end385.i ]
  %c_state_out_len.0.i = phi i32 [ %161, %if.else.i ], [ 2, %if.end353.i162 ], [ 2, %if.end363.i ], [ 3, %if.end369.i ], [ 3, %if.end379.i ], [ %add393.i, %if.end385.i ]
  %c_nblock_used.0.i = phi i32 [ %162, %if.else.i ], [ %add288.i, %if.end353.i162 ], [ %inc359.i, %if.end363.i ], [ %add288.i, %if.end369.i ], [ %inc375.i, %if.end379.i ], [ %inc400.i, %if.end385.i ]
  %c_k0.0.i = phi i32 [ %163, %if.else.i ], [ %c_k0.2.i, %if.end353.i162 ], [ %conv364.i, %if.end363.i ], [ %c_k0.2.i, %if.end369.i ], [ %conv380.i, %if.end379.i ], [ %conv398.i, %if.end385.i ]
  %c_calculatedBlockCRC.0.i = phi i32 [ %160, %if.else.i ], [ %c_calculatedBlockCRC.3.i, %if.end353.i162 ], [ %c_calculatedBlockCRC.3.i, %if.end363.i ], [ %c_calculatedBlockCRC.3.i, %if.end369.i ], [ %c_calculatedBlockCRC.3.i, %if.end379.i ], [ %c_calculatedBlockCRC.3.i, %if.end385.i ]
  %c_tPos.0.i = phi i32 [ %165, %if.else.i ], [ %shr358.i, %if.end353.i162 ], [ %shr358.i, %if.end363.i ], [ %shr374.i, %if.end369.i ], [ %shr374.i, %if.end379.i ], [ %shr399.i, %if.end385.i ]
  %cs_next_out.0.i = phi i8* [ %167, %if.else.i ], [ %cs_next_out.3.i, %if.end353.i162 ], [ %cs_next_out.3.i, %if.end363.i ], [ %cs_next_out.3.i, %if.end369.i ], [ %cs_next_out.3.i, %if.end379.i ], [ %cs_next_out.3.i, %if.end385.i ]
  %cs_avail_out.0.i = phi i32 [ %168, %if.else.i ], [ %cs_avail_out.3.i, %if.end353.i162 ], [ %cs_avail_out.3.i, %if.end363.i ], [ %cs_avail_out.3.i, %if.end369.i ], [ %cs_avail_out.3.i, %if.end379.i ], [ %cs_avail_out.3.i, %if.end385.i ]
  %cmp291.i = icmp sgt i32 %c_state_out_len.0.i, 0
  br i1 %cmp291.i, label %while.body295.preheader.i, label %if.end328.i159

while.body295.preheader.i:                        ; preds = %while.body290.i
  %cmp296674.i = icmp eq i32 %cs_avail_out.0.i, 0
  br i1 %cmp296674.i, label %return_notr.i, label %if.end299.lr.ph.i

if.end299.lr.ph.i:                                ; preds = %while.body295.preheader.i
  %conv306.i = zext i8 %c_state_out_ch.0.i to i32
  br label %if.end299.i

if.end299.i:                                      ; preds = %if.end303.i, %if.end299.lr.ph.i
  %cs_avail_out.1678.i = phi i32 [ %cs_avail_out.0.i, %if.end299.lr.ph.i ], [ %dec313.i, %if.end303.i ]
  %cs_next_out.1677.i = phi i8* [ %cs_next_out.0.i, %if.end299.lr.ph.i ], [ %incdec.ptr312.i, %if.end303.i ]
  %c_calculatedBlockCRC.1676.i = phi i32 [ %c_calculatedBlockCRC.0.i, %if.end299.lr.ph.i ], [ %xor310.i, %if.end303.i ]
  %c_state_out_len.1675.i = phi i32 [ %c_state_out_len.0.i, %if.end299.lr.ph.i ], [ %dec311.i, %if.end303.i ]
  %cmp300.i = icmp eq i32 %c_state_out_len.1675.i, 1
  br i1 %cmp300.i, label %s_state_out_len_eq_one.i, label %if.end303.i

if.end303.i:                                      ; preds = %if.end299.i
  store i8 %c_state_out_ch.0.i, i8* %cs_next_out.1677.i, align 1
  %shl304.i = shl i32 %c_calculatedBlockCRC.1676.i, 8
  %shr305.i = lshr i32 %c_calculatedBlockCRC.1676.i, 24
  %xor307.i = xor i32 %shr305.i, %conv306.i
  %idxprom308.i = zext i32 %xor307.i to i64
  %arrayidx309.i = getelementptr inbounds [256 x i32], [256 x i32]* @BZ2_crc32Table, i64 0, i64 %idxprom308.i
  %170 = load i32, i32* %arrayidx309.i, align 4
  %xor310.i = xor i32 %170, %shl304.i
  %dec311.i = add nsw i32 %c_state_out_len.1675.i, -1
  %incdec.ptr312.i = getelementptr inbounds i8, i8* %cs_next_out.1677.i, i64 1
  %dec313.i = add i32 %cs_avail_out.1678.i, -1
  %cmp296.i = icmp eq i32 %dec313.i, 0
  br i1 %cmp296.i, label %return_notr.i, label %if.end299.i

s_state_out_len_eq_one.i:                         ; preds = %if.end299.i, %if.end349.i, %if.end336.i
  %c_state_out_ch.1.i = phi i8 [ %conv337.i, %if.end349.i ], [ %conv337.i, %if.end336.i ], [ %c_state_out_ch.0.i, %if.end299.i ]
  %c_nblock_used.1.i = phi i32 [ %add288.i, %if.end349.i ], [ %inc343.i, %if.end336.i ], [ %c_nblock_used.0.i, %if.end299.i ]
  %c_k0.1.i = phi i32 [ %c_k0.2.i, %if.end349.i ], [ %conv344.i, %if.end336.i ], [ %c_k0.0.i, %if.end299.i ]
  %c_calculatedBlockCRC.2.i = phi i32 [ %c_calculatedBlockCRC.3.i, %if.end349.i ], [ %c_calculatedBlockCRC.3.i, %if.end336.i ], [ %c_calculatedBlockCRC.1676.i, %if.end299.i ]
  %c_tPos.1.i = phi i32 [ %shr342.i, %if.end349.i ], [ %shr342.i, %if.end336.i ], [ %c_tPos.0.i, %if.end299.i ]
  %cs_next_out.2.i = phi i8* [ %cs_next_out.3.i, %if.end349.i ], [ %cs_next_out.3.i, %if.end336.i ], [ %cs_next_out.1677.i, %if.end299.i ]
  %cs_avail_out.2.i = phi i32 [ %cs_avail_out.3.i, %if.end349.i ], [ %cs_avail_out.3.i, %if.end336.i ], [ %cs_avail_out.1678.i, %if.end299.i ]
  %cmp315.i = icmp eq i32 %cs_avail_out.2.i, 0
  br i1 %cmp315.i, label %return_notr.i, label %if.end318.i

if.end318.i:                                      ; preds = %s_state_out_len_eq_one.i
  store i8 %c_state_out_ch.1.i, i8* %cs_next_out.2.i, align 1
  %shl319.i = shl i32 %c_calculatedBlockCRC.2.i, 8
  %shr320.i = lshr i32 %c_calculatedBlockCRC.2.i, 24
  %conv321.i = zext i8 %c_state_out_ch.1.i to i32
  %xor322.i = xor i32 %shr320.i, %conv321.i
  %idxprom323.i = zext i32 %xor322.i to i64
  %arrayidx324.i = getelementptr inbounds [256 x i32], [256 x i32]* @BZ2_crc32Table, i64 0, i64 %idxprom323.i
  %171 = load i32, i32* %arrayidx324.i, align 4
  %xor325.i = xor i32 %171, %shl319.i
  %incdec.ptr326.i = getelementptr inbounds i8, i8* %cs_next_out.2.i, i64 1
  %dec327.i = add i32 %cs_avail_out.2.i, -1
  br label %if.end328.i159

if.end328.i159:                                   ; preds = %if.end318.i, %while.body290.i
  %c_state_out_ch.2.i = phi i8 [ %c_state_out_ch.1.i, %if.end318.i ], [ %c_state_out_ch.0.i, %while.body290.i ]
  %c_nblock_used.2.i = phi i32 [ %c_nblock_used.1.i, %if.end318.i ], [ %c_nblock_used.0.i, %while.body290.i ]
  %c_k0.2.i = phi i32 [ %c_k0.1.i, %if.end318.i ], [ %c_k0.0.i, %while.body290.i ]
  %c_calculatedBlockCRC.3.i = phi i32 [ %xor325.i, %if.end318.i ], [ %c_calculatedBlockCRC.0.i, %while.body290.i ]
  %c_tPos.2.i = phi i32 [ %c_tPos.1.i, %if.end318.i ], [ %c_tPos.0.i, %while.body290.i ]
  %cs_next_out.3.i = phi i8* [ %incdec.ptr326.i, %if.end318.i ], [ %cs_next_out.0.i, %while.body290.i ]
  %cs_avail_out.3.i = phi i32 [ %dec327.i, %if.end318.i ], [ %cs_avail_out.0.i, %while.body290.i ]
  %cmp329.i = icmp sgt i32 %c_nblock_used.2.i, %add288.i
  br i1 %cmp329.i, label %cleanup71, label %if.end332.i

if.end332.i:                                      ; preds = %if.end328.i159
  %cmp333.i = icmp eq i32 %c_nblock_used.2.i, %add288.i
  br i1 %cmp333.i, label %return_notr.i, label %if.end336.i

if.end336.i:                                      ; preds = %if.end332.i
  %conv337.i = trunc i32 %c_k0.2.i to i8
  %idxprom338.i = zext i32 %c_tPos.2.i to i64
  %arrayidx339.i = getelementptr inbounds i32, i32* %164, i64 %idxprom338.i
  %172 = load i32, i32* %arrayidx339.i, align 4
  %shr342.i = lshr i32 %172, 8
  %inc343.i = add nsw i32 %c_nblock_used.2.i, 1
  %conv344.i = and i32 %172, 255
  %cmp345.i160 = icmp eq i32 %conv344.i, %c_k0.2.i
  br i1 %cmp345.i160, label %if.end349.i, label %s_state_out_len_eq_one.i

if.end349.i:                                      ; preds = %if.end336.i
  %cmp350.i161 = icmp eq i32 %inc343.i, %add288.i
  br i1 %cmp350.i161, label %s_state_out_len_eq_one.i, label %if.end353.i162

if.end353.i162:                                   ; preds = %if.end349.i
  %idxprom354.i = zext i32 %shr342.i to i64
  %arrayidx355.i = getelementptr inbounds i32, i32* %164, i64 %idxprom354.i
  %173 = load i32, i32* %arrayidx355.i, align 4
  %shr358.i = lshr i32 %173, 8
  %inc359.i = add nsw i32 %c_nblock_used.2.i, 2
  %cmp360.i = icmp eq i32 %inc359.i, %add288.i
  br i1 %cmp360.i, label %while.body290.i, label %if.end363.i

if.end363.i:                                      ; preds = %if.end353.i162
  %conv364.i = and i32 %173, 255
  %cmp365.i = icmp eq i32 %conv364.i, %c_k0.2.i
  br i1 %cmp365.i, label %if.end369.i, label %while.body290.i

if.end369.i:                                      ; preds = %if.end363.i
  %idxprom370.i = zext i32 %shr358.i to i64
  %arrayidx371.i = getelementptr inbounds i32, i32* %164, i64 %idxprom370.i
  %174 = load i32, i32* %arrayidx371.i, align 4
  %shr374.i = lshr i32 %174, 8
  %inc375.i = add nsw i32 %c_nblock_used.2.i, 3
  %cmp376.i = icmp eq i32 %inc375.i, %add288.i
  br i1 %cmp376.i, label %while.body290.i, label %if.end379.i

if.end379.i:                                      ; preds = %if.end369.i
  %conv380.i = and i32 %174, 255
  %cmp381.i163 = icmp eq i32 %conv380.i, %c_k0.2.i
  br i1 %cmp381.i163, label %if.end385.i, label %while.body290.i

if.end385.i:                                      ; preds = %if.end379.i
  %idxprom386.i = zext i32 %shr374.i to i64
  %arrayidx387.i = getelementptr inbounds i32, i32* %164, i64 %idxprom386.i
  %175 = load i32, i32* %arrayidx387.i, align 4
  %shr390.i = lshr i32 %175, 8
  %conv392.i = and i32 %175, 255
  %add393.i = add nuw nsw i32 %conv392.i, 4
  %idxprom394.i = zext i32 %shr390.i to i64
  %arrayidx395.i = getelementptr inbounds i32, i32* %164, i64 %idxprom394.i
  %176 = load i32, i32* %arrayidx395.i, align 4
  %conv398.i = and i32 %176, 255
  %shr399.i = lshr i32 %176, 8
  %inc400.i = add nsw i32 %c_nblock_used.2.i, 5
  br label %while.body290.i

return_notr.i:                                    ; preds = %if.end332.i, %s_state_out_len_eq_one.i, %while.body295.preheader.i, %if.end303.i
  %c_state_out_ch.3.i = phi i8 [ %c_state_out_ch.0.i, %if.end303.i ], [ %c_state_out_ch.0.i, %while.body295.preheader.i ], [ %c_state_out_ch.2.i, %if.end332.i ], [ %c_state_out_ch.1.i, %s_state_out_len_eq_one.i ]
  %c_state_out_len.2.i = phi i32 [ %dec311.i, %if.end303.i ], [ %c_state_out_len.0.i, %while.body295.preheader.i ], [ 0, %if.end332.i ], [ 1, %s_state_out_len_eq_one.i ]
  %c_nblock_used.3.i = phi i32 [ %c_nblock_used.0.i, %if.end303.i ], [ %c_nblock_used.0.i, %while.body295.preheader.i ], [ %add288.i, %if.end332.i ], [ %c_nblock_used.1.i, %s_state_out_len_eq_one.i ]
  %c_k0.3.i = phi i32 [ %c_k0.0.i, %if.end303.i ], [ %c_k0.0.i, %while.body295.preheader.i ], [ %c_k0.2.i, %if.end332.i ], [ %c_k0.1.i, %s_state_out_len_eq_one.i ]
  %c_calculatedBlockCRC.4.i = phi i32 [ %xor310.i, %if.end303.i ], [ %c_calculatedBlockCRC.0.i, %while.body295.preheader.i ], [ %c_calculatedBlockCRC.3.i, %if.end332.i ], [ %c_calculatedBlockCRC.2.i, %s_state_out_len_eq_one.i ]
  %c_tPos.3.i = phi i32 [ %c_tPos.0.i, %if.end303.i ], [ %c_tPos.0.i, %while.body295.preheader.i ], [ %c_tPos.2.i, %if.end332.i ], [ %c_tPos.1.i, %s_state_out_len_eq_one.i ]
  %cs_next_out.4.i = phi i8* [ %incdec.ptr312.i, %if.end303.i ], [ %cs_next_out.0.i, %while.body295.preheader.i ], [ %cs_next_out.3.i, %if.end332.i ], [ %cs_next_out.2.i, %s_state_out_len_eq_one.i ]
  %cs_avail_out.4.i = phi i32 [ 0, %if.end303.i ], [ 0, %while.body295.preheader.i ], [ %cs_avail_out.3.i, %if.end332.i ], [ 0, %s_state_out_len_eq_one.i ]
  %177 = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  %total_out_lo32402.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %177, i64 0, i32 6
  %178 = load i32, i32* %total_out_lo32402.i, align 4
  %sub.i = sub i32 %168, %cs_avail_out.4.i
  %add405.i = add i32 %sub.i, %178
  store i32 %add405.i, i32* %total_out_lo32402.i, align 4
  %179 = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  %total_out_lo32407.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %179, i64 0, i32 6
  %180 = load i32, i32* %total_out_lo32407.i, align 4
  %cmp408.i = icmp ult i32 %180, %178
  br i1 %cmp408.i, label %if.then410.i, label %182

if.then410.i:                                     ; preds = %return_notr.i
  %total_out_hi32412.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %179, i64 0, i32 7
  %181 = load i32, i32* %total_out_hi32412.i, align 8
  %inc413.i = add i32 %181, 1
  store i32 %inc413.i, i32* %total_out_hi32412.i, align 8
  %.pre710.i = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  br label %182

; <label>:182                                     ; preds = %if.then410.i, %return_notr.i
  %183 = phi %struct.bz_stream* [ %179, %return_notr.i ], [ %.pre710.i, %if.then410.i ]
  store i32 %c_calculatedBlockCRC.4.i, i32* %calculatedBlockCRC276.i, align 8
  store i8 %c_state_out_ch.3.i, i8* %state_out_ch277.i, align 4
  store i32 %c_state_out_len.2.i, i32* %state_out_len278.i, align 8
  store i32 %c_nblock_used.3.i, i32* %nblock_used279.i, align 4
  store i32 %c_k0.3.i, i32* %k0280.i, align 8
  store i32* %164, i32** %tt281.i, align 8
  store i32 %c_tPos.3.i, i32* %tPos282.i, align 4
  %next_out423.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %183, i64 0, i32 4
  store i8* %cs_next_out.4.i, i8** %next_out423.i, align 8
  %184 = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  %avail_out425.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %184, i64 0, i32 5
  store i32 %cs_avail_out.4.i, i32* %avail_out425.i, align 8
  br label %if.end20

if.end20:                                         ; preds = %while.body2.backedge.i, %while.end.i, %while.body342.backedge.i, %while.end388.i, %while.end.i146, %while.body2.backedge.i158, %while.body342.preheader.i, %while.body2.preheader.i, %182, %while.body2.preheader.i110
  %185 = load i32, i32* %nblock_used279.i, align 4
  %186 = load i32, i32* %save_nblock287.i, align 8
  %add = add nsw i32 %186, 1
  %cmp21 = icmp eq i32 %185, %add
  br i1 %cmp21, label %land.lhs.true, label %cleanup71

land.lhs.true:                                    ; preds = %if.end20
  %187 = load i32, i32* %state_out_len278.i, align 8
  %cmp22 = icmp eq i32 %187, 0
  br i1 %cmp22, label %if.then23, label %cleanup71

if.then23:                                        ; preds = %land.lhs.true
  %188 = load i32, i32* %calculatedBlockCRC276.i, align 8
  %neg = xor i32 %188, -1
  store i32 %neg, i32* %calculatedBlockCRC276.i, align 8
  %189 = load i32, i32* %verbosity, align 4
  %cmp25 = icmp sgt i32 %189, 2
  br i1 %cmp25, label %if.then26, label %if.end29

if.then26:                                        ; preds = %if.then23
  %190 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %191 = load i32, i32* %storedBlockCRC, align 8
  %call28 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %190, i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32 %191, i32 %neg) #12
  %.pr = load i32, i32* %verbosity, align 4
  br label %if.end29

if.end29:                                         ; preds = %if.then26, %if.then23
  %192 = phi i32 [ %.pr, %if.then26 ], [ %189, %if.then23 ]
  %cmp31 = icmp sgt i32 %192, 1
  br i1 %cmp31, label %if.then32, label %if.end34

if.then32:                                        ; preds = %if.end29
  %193 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %fputc = tail call i32 @fputc(i32 93, %struct._IO_FILE* %193) #12
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %if.end29
  %194 = load i64, i64* %6, align 8
  %195 = trunc i64 %194 to i32
  %196 = load i32, i32* %storedBlockCRC, align 8
  %cmp37 = icmp eq i32 %195, %196
  br i1 %cmp37, label %if.end47.thread, label %cleanup71

if.end47.thread:                                  ; preds = %if.end34
  %197 = lshr i64 %194, 32
  %shl208 = shl nuw nsw i64 %197, 1
  %shr209 = lshr i64 %194, 63
  %or210 = or i64 %shl208, %shr209
  %xor211 = xor i64 %or210, %194
  %xor = trunc i64 %xor211 to i32
  store i32 %xor, i32* %calculatedCombinedCRC, align 4
  store i32 14, i32* %state8, align 8
  br label %if.then50

if.end47:                                         ; preds = %while.body.outer, %if.end47
  br i1 %cmp49, label %if.then50, label %if.end47

if.then50:                                        ; preds = %if.end47, %if.end47.thread
  %call51 = tail call i32 @BZ2_decompress(%struct.DState* nonnull %1) #10
  %cmp52 = icmp eq i32 %call51, 4
  br i1 %cmp52, label %if.then53, label %cleanup

if.then53:                                        ; preds = %if.then50
  %198 = load i32, i32* %verbosity, align 4
  %cmp55 = icmp sgt i32 %198, 2
  br i1 %cmp55, label %if.then56, label %if.then53.cleanup.thread_crit_edge

if.then53.cleanup.thread_crit_edge:               ; preds = %if.then53
  %.pre207 = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 24
  br label %cleanup.thread

if.then56:                                        ; preds = %if.then53
  %199 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %storedCombinedCRC = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 24
  %200 = load i32, i32* %storedCombinedCRC, align 4
  %201 = load i32, i32* %calculatedCombinedCRC, align 4
  %call58 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %199, i8* nonnull getelementptr inbounds ([55 x i8], [55 x i8]* @.str.4, i64 0, i64 0), i32 %200, i32 %201) #12
  br label %cleanup.thread

cleanup.thread:                                   ; preds = %if.then53.cleanup.thread_crit_edge, %if.then56
  %storedCombinedCRC61.pre-phi = phi i32* [ %.pre207, %if.then53.cleanup.thread_crit_edge ], [ %storedCombinedCRC, %if.then56 ]
  %202 = load i32, i32* %calculatedCombinedCRC, align 4
  %203 = load i32, i32* %storedCombinedCRC61.pre-phi, align 4
  %cmp62 = icmp eq i32 %202, %203
  %call51. = select i1 %cmp62, i32 4, i32 -4
  br label %cleanup71

cleanup:                                          ; preds = %if.then50
  %204 = load i64, i64* %4, align 8
  %205 = trunc i64 %204 to i32
  %cmp67 = icmp eq i32 %205, 2
  br i1 %cmp67, label %while.body.outer, label %cleanup71

cleanup71:                                        ; preds = %while.body.outer, %if.end20, %land.lhs.true, %if.end34, %cleanup, %if.end30.i, %if.end395.i, %if.end30.i148, %if.end328.i159, %cleanup.thread, %if.end3, %if.end, %entry
  %retval.2 = phi i32 [ -2, %entry ], [ -2, %if.end ], [ -2, %if.end3 ], [ %call51., %cleanup.thread ], [ -4, %if.end328.i159 ], [ -4, %if.end30.i148 ], [ -4, %if.end395.i ], [ -4, %if.end30.i ], [ 0, %if.end20 ], [ 0, %land.lhs.true ], [ -4, %if.end34 ], [ %call51, %cleanup ], [ -1, %while.body.outer ]
  ret i32 %retval.2
}

declare i32 @BZ2_decompress(%struct.DState*) #7

; Function Attrs: nounwind uwtable
define i32 @BZ2_bzDecompressEnd(%struct.bz_stream* %strm) #4 {
entry:
  %cmp = icmp eq %struct.bz_stream* %strm, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %state = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 8
  %0 = bitcast i8** %state to %struct.DState**
  %1 = load %struct.DState*, %struct.DState** %0, align 8
  %cmp1 = icmp eq %struct.DState* %1, null
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %strm4 = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 0
  %2 = load %struct.bz_stream*, %struct.bz_stream** %strm4, align 8
  %cmp5 = icmp eq %struct.bz_stream* %2, %strm
  br i1 %cmp5, label %if.end7, label %cleanup

if.end7:                                          ; preds = %if.end3
  %tt = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 20
  %3 = load i32*, i32** %tt, align 8
  %cmp8 = icmp eq i32* %3, null
  br i1 %cmp8, label %if.end11, label %if.then9

if.then9:                                         ; preds = %if.end7
  %bzfree = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 10
  %4 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %opaque = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 11
  %5 = load i8*, i8** %opaque, align 8
  %6 = bitcast i32* %3 to i8*
  tail call void %4(i8* %5, i8* %6) #10
  br label %if.end11

if.end11:                                         ; preds = %if.end7, %if.then9
  %ll16 = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 21
  %7 = load i16*, i16** %ll16, align 8
  %cmp12 = icmp eq i16* %7, null
  br i1 %cmp12, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.end11
  %bzfree14 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 10
  %8 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree14, align 8
  %opaque15 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 11
  %9 = load i8*, i8** %opaque15, align 8
  %10 = bitcast i16* %7 to i8*
  tail call void %8(i8* %9, i8* %10) #10
  br label %if.end17

if.end17:                                         ; preds = %if.end11, %if.then13
  %ll4 = getelementptr inbounds %struct.DState, %struct.DState* %1, i64 0, i32 22
  %11 = load i8*, i8** %ll4, align 8
  %cmp18 = icmp eq i8* %11, null
  %.pre = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 10
  br i1 %cmp18, label %if.end17.if.end23_crit_edge, label %if.then19

if.end17.if.end23_crit_edge:                      ; preds = %if.end17
  %.pre48 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 11
  br label %if.end23

if.then19:                                        ; preds = %if.end17
  %12 = load void (i8*, i8*)*, void (i8*, i8*)** %.pre, align 8
  %opaque21 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 11
  %13 = load i8*, i8** %opaque21, align 8
  tail call void %12(i8* %13, i8* nonnull %11) #10
  br label %if.end23

if.end23:                                         ; preds = %if.end17.if.end23_crit_edge, %if.then19
  %opaque25.pre-phi = phi i8** [ %.pre48, %if.end17.if.end23_crit_edge ], [ %opaque21, %if.then19 ]
  %14 = load void (i8*, i8*)*, void (i8*, i8*)** %.pre, align 8
  %15 = load i8*, i8** %opaque25.pre-phi, align 8
  %16 = load i8*, i8** %state, align 8
  tail call void %14(i8* %15, i8* %16) #10
  store i8* null, i8** %state, align 8
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %entry, %if.end23
  %retval.0 = phi i32 [ 0, %if.end23 ], [ -2, %entry ], [ -2, %if.end ], [ -2, %if.end3 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i8* @BZ2_bzWriteOpen(i32* %bzerror, i32 %f, i32 %blockSize100k, i32 %verbosity, i32 %workFactor) #4 {
entry:
  %cmp = icmp ne i32* %bzerror, null
  br i1 %cmp, label %if.then, label %if.end3

if.then:                                          ; preds = %entry
  store i32 0, i32* %bzerror, align 4
  br label %if.end3

if.end3:                                          ; preds = %entry, %if.then
  %cmp4 = icmp eq i32 %f, 0
  %blockSize100k.off = add i32 %blockSize100k, -1
  %0 = icmp ugt i32 %blockSize100k.off, 8
  %1 = or i1 %cmp4, %0
  %2 = icmp ugt i32 %workFactor, 250
  %3 = or i1 %2, %1
  %4 = icmp ugt i32 %verbosity, 4
  %5 = or i1 %4, %3
  br i1 %5, label %if.then16, label %if.end24

if.then16:                                        ; preds = %if.end3
  br i1 %cmp, label %if.then18, label %cleanup

if.then18:                                        ; preds = %if.then16
  store i32 -2, i32* %bzerror, align 4
  br label %cleanup

if.end24:                                         ; preds = %if.end3
  %call = tail call noalias i8* @malloc(i64 5104) #10
  %cmp25 = icmp eq i8* %call, null
  br i1 %cmp25, label %if.then26, label %if.end34

if.then26:                                        ; preds = %if.end24
  br i1 %cmp, label %if.then28, label %cleanup

if.then28:                                        ; preds = %if.then26
  store i32 -3, i32* %bzerror, align 4
  br label %cleanup

if.end34:                                         ; preds = %if.end24
  br i1 %cmp, label %if.then36, label %if.end41

if.then36:                                        ; preds = %if.end34
  store i32 0, i32* %bzerror, align 4
  br label %if.end41

if.end41:                                         ; preds = %if.then36, %if.end34
  %lastErr40 = getelementptr inbounds i8, i8* %call, i64 5096
  %6 = bitcast i8* %lastErr40 to i32*
  store i32 0, i32* %6, align 8
  %7 = getelementptr inbounds i8, i8* %call, i64 5100
  store i8 0, i8* %7, align 4
  %bufN = getelementptr inbounds i8, i8* %call, i64 5004
  %8 = bitcast i8* %bufN to i32*
  store i32 0, i32* %8, align 4
  %handle = bitcast i8* %call to i32*
  store i32 %f, i32* %handle, align 8
  %9 = getelementptr inbounds i8, i8* %call, i64 5008
  store i8 1, i8* %9, align 8
  %strm = getelementptr inbounds i8, i8* %call, i64 5016
  %10 = bitcast i8* %strm to %struct.bz_stream*
  %bzalloc = getelementptr inbounds i8, i8* %call, i64 5072
  %cmp44 = icmp eq i32 %workFactor, 0
  %.workFactor = select i1 %cmp44, i32 30, i32 %workFactor
  call void @llvm.memset.p0i8.i64(i8* %bzalloc, i8 0, i64 24, i32 8, i1 false)
  %call48 = tail call i32 @BZ2_bzCompressInit(%struct.bz_stream* %10, i32 %blockSize100k, i32 %verbosity, i32 %.workFactor)
  %cmp49 = icmp eq i32 %call48, 0
  br i1 %cmp49, label %if.end58, label %if.then50

if.then50:                                        ; preds = %if.end41
  br i1 %cmp, label %if.then52, label %if.end57

if.then52:                                        ; preds = %if.then50
  store i32 %call48, i32* %bzerror, align 4
  br label %if.end57

if.end57:                                         ; preds = %if.then52, %if.then50
  tail call void @free(i8* nonnull %call) #10
  br label %cleanup

if.end58:                                         ; preds = %if.end41
  %avail_in = getelementptr inbounds i8, i8* %call, i64 5024
  %11 = bitcast i8* %avail_in to i32*
  store i32 0, i32* %11, align 8
  store i8 1, i8* %7, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.then26, %if.then28, %if.then18, %if.then16, %if.end58, %if.end57
  %retval.0 = phi i8* [ null, %if.end57 ], [ %call, %if.end58 ], [ null, %if.then16 ], [ null, %if.then18 ], [ null, %if.then28 ], [ null, %if.then26 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #1

; Function Attrs: nounwind
declare void @free(i8* nocapture) #1

; Function Attrs: nounwind uwtable
define void @BZ2_bzWrite(i32* %bzerror, i8* %b, i8* %buf, i32 %len) #4 {
entry:
  %cmp = icmp ne i32* %bzerror, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %bzerror, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %cmp1 = icmp ne i8* %b, null
  br i1 %cmp1, label %if.end3, label %if.then8

if.end3:                                          ; preds = %if.end
  %lastErr = getelementptr inbounds i8, i8* %b, i64 5096
  %0 = bitcast i8* %lastErr to i32*
  store i32 0, i32* %0, align 8
  %cmp5 = icmp eq i8* %buf, null
  %cmp7 = icmp slt i32 %len, 0
  %or.cond86 = or i1 %cmp5, %cmp7
  br i1 %or.cond86, label %if.then8, label %if.end16

if.then8:                                         ; preds = %if.end, %if.end3
  br i1 %cmp, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.then8
  store i32 -2, i32* %bzerror, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %if.then8
  br i1 %cmp1, label %if.then13, label %cleanup

if.then13:                                        ; preds = %if.end11
  %lastErr14 = getelementptr inbounds i8, i8* %b, i64 5096
  %1 = bitcast i8* %lastErr14 to i32*
  store i32 -2, i32* %1, align 8
  br label %cleanup

if.end16:                                         ; preds = %if.end3
  %2 = getelementptr inbounds i8, i8* %b, i64 5008
  %3 = load i8, i8* %2, align 8
  %tobool = icmp eq i8 %3, 0
  br i1 %tobool, label %if.then17, label %if.end25

if.then17:                                        ; preds = %if.end16
  br i1 %cmp, label %if.then19, label %if.then22

if.then19:                                        ; preds = %if.then17
  store i32 -1, i32* %bzerror, align 4
  br label %if.then22

if.then22:                                        ; preds = %if.then17, %if.then19
  store i32 -1, i32* %0, align 8
  br label %cleanup

if.end25:                                         ; preds = %if.end16
  %cmp26 = icmp eq i32 %len, 0
  br i1 %cmp26, label %if.then27, label %if.end35

if.then27:                                        ; preds = %if.end25
  br i1 %cmp, label %if.then29, label %if.then32

if.then29:                                        ; preds = %if.then27
  store i32 0, i32* %bzerror, align 4
  br label %if.then32

if.then32:                                        ; preds = %if.then27, %if.then29
  store i32 0, i32* %0, align 8
  br label %cleanup

if.end35:                                         ; preds = %if.end25
  %strm = getelementptr inbounds i8, i8* %b, i64 5016
  %4 = bitcast i8* %strm to %struct.bz_stream*
  %avail_in = getelementptr inbounds i8, i8* %b, i64 5024
  %5 = bitcast i8* %avail_in to i32*
  store i32 %len, i32* %5, align 8
  %next_in = bitcast i8* %strm to i8**
  store i8* %buf, i8** %next_in, align 8
  %avail_out = getelementptr inbounds i8, i8* %b, i64 5048
  %6 = bitcast i8* %avail_out to i32*
  %buf38 = getelementptr inbounds i8, i8* %b, i64 4
  %next_out = getelementptr inbounds i8, i8* %b, i64 5040
  %7 = bitcast i8* %next_out to i8**
  %state.i = getelementptr inbounds i8, i8* %b, i64 5064
  %8 = bitcast i8* %state.i to %struct.EState**
  %handle = bitcast i8* %b to i32*
  br label %while.body

while.body:                                       ; preds = %if.end70, %if.end35
  store i32 5000, i32* %6, align 8
  store i8* %buf38, i8** %7, align 8
  %9 = load %struct.EState*, %struct.EState** %8, align 8
  %cmp1.i = icmp eq %struct.EState* %9, null
  br i1 %cmp1.i, label %if.then42, label %if.end3.i

if.end3.i:                                        ; preds = %while.body
  %strm4.i = getelementptr inbounds %struct.EState, %struct.EState* %9, i64 0, i32 0
  %10 = load %struct.bz_stream*, %struct.bz_stream** %strm4.i, align 8
  %cmp5.i = icmp eq %struct.bz_stream* %10, %4
  br i1 %cmp5.i, label %preswitch.preheader.i, label %if.then42

preswitch.preheader.i:                            ; preds = %if.end3.i
  %mode.i = getelementptr inbounds %struct.EState, %struct.EState* %9, i64 0, i32 1
  %.pre.i = load i32, i32* %mode.i, align 8
  switch i32 %.pre.i, label %if.then42 [
    i32 1, label %if.then42.loopexit144
    i32 2, label %sw.bb8.i
    i32 3, label %if.then42.loopexit144
    i32 4, label %if.then42.loopexit144
  ]

sw.bb8.i:                                         ; preds = %preswitch.preheader.i
  %call.i = tail call fastcc zeroext i8 @handle_compress(%struct.bz_stream* nonnull %4) #10
  %tobool.i = icmp eq i8 %call.i, 0
  br i1 %tobool.i, label %if.then42, label %if.end50

if.then42.loopexit144:                            ; preds = %preswitch.preheader.i, %preswitch.preheader.i, %preswitch.preheader.i
  br label %if.then42

if.then42:                                        ; preds = %sw.bb8.i, %while.body, %if.end3.i, %preswitch.preheader.i, %if.then42.loopexit144
  %retval.0.i.ph = phi i32 [ -1, %if.then42.loopexit144 ], [ 0, %preswitch.preheader.i ], [ -2, %if.end3.i ], [ -2, %while.body ], [ -2, %sw.bb8.i ]
  br i1 %cmp, label %if.then44, label %if.then47

if.then44:                                        ; preds = %if.then42
  store i32 %retval.0.i.ph, i32* %bzerror, align 4
  br label %if.then47

if.then47:                                        ; preds = %if.then42, %if.then44
  store i32 %retval.0.i.ph, i32* %0, align 8
  br label %cleanup

if.end50:                                         ; preds = %sw.bb8.i
  %11 = load i32, i32* %6, align 8
  %cmp53 = icmp ult i32 %11, 5000
  br i1 %cmp53, label %if.then54, label %if.end70

if.then54:                                        ; preds = %if.end50
  %sub = sub i32 5000, %11
  %12 = load i32, i32* %handle, align 8
  %call59 = tail call i32 @spec_fwrite(i8* nonnull %buf38, i32 1, i32 %sub, i32 %12) #10
  %cmp60 = icmp eq i32 %sub, %call59
  br i1 %cmp60, label %if.end70, label %if.then61

if.then61:                                        ; preds = %if.then54
  br i1 %cmp, label %if.then63, label %if.then66

if.then63:                                        ; preds = %if.then61
  store i32 -6, i32* %bzerror, align 4
  br label %if.then66

if.then66:                                        ; preds = %if.then61, %if.then63
  store i32 -6, i32* %0, align 8
  br label %cleanup

if.end70:                                         ; preds = %if.then54, %if.end50
  %13 = load i32, i32* %5, align 8
  %cmp73 = icmp eq i32 %13, 0
  br i1 %cmp73, label %if.then74, label %while.body

if.then74:                                        ; preds = %if.end70
  br i1 %cmp, label %if.then76, label %if.then79

if.then76:                                        ; preds = %if.then74
  store i32 0, i32* %bzerror, align 4
  br label %if.then79

if.then79:                                        ; preds = %if.then74, %if.then76
  store i32 0, i32* %0, align 8
  br label %cleanup

cleanup:                                          ; preds = %if.then79, %if.then66, %if.then47, %if.then32, %if.then22, %if.end11, %if.then13
  ret void
}

declare i32 @spec_fwrite(i8*, i32, i32, i32) #7

; Function Attrs: nounwind uwtable
define void @BZ2_bzWriteClose(i32* %bzerror, i8* %b, i32 %abandon, i32* %nbytes_in, i32* %nbytes_out) #4 {
entry:
  tail call void @BZ2_bzWriteClose64(i32* %bzerror, i8* %b, i32 %abandon, i32* %nbytes_in, i32* null, i32* %nbytes_out, i32* null)
  ret void
}

; Function Attrs: nounwind uwtable
define void @BZ2_bzWriteClose64(i32* %bzerror, i8* %b, i32 %abandon, i32* %nbytes_in_lo32, i32* %nbytes_in_hi32, i32* %nbytes_out_lo32, i32* %nbytes_out_hi32) #4 {
entry:
  %cmp = icmp eq i8* %b, null
  br i1 %cmp, label %if.then, label %if.end6

if.then:                                          ; preds = %entry
  %cmp1 = icmp eq i32* %bzerror, null
  br i1 %cmp1, label %cleanup, label %if.then2

if.then2:                                         ; preds = %if.then
  store i32 0, i32* %bzerror, align 4
  br label %cleanup

if.end6:                                          ; preds = %entry
  %0 = getelementptr inbounds i8, i8* %b, i64 5008
  %1 = load i8, i8* %0, align 8
  %tobool = icmp eq i8 %1, 0
  br i1 %tobool, label %if.then7, label %if.end15

if.then7:                                         ; preds = %if.end6
  %cmp8 = icmp eq i32* %bzerror, null
  br i1 %cmp8, label %if.then12, label %if.then9

if.then9:                                         ; preds = %if.then7
  store i32 -1, i32* %bzerror, align 4
  br label %if.then12

if.then12:                                        ; preds = %if.then9, %if.then7
  %lastErr13 = getelementptr inbounds i8, i8* %b, i64 5096
  %2 = bitcast i8* %lastErr13 to i32*
  store i32 -1, i32* %2, align 8
  br label %cleanup

if.end15:                                         ; preds = %if.end6
  %cmp16 = icmp ne i32* %nbytes_in_lo32, null
  br i1 %cmp16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end15
  store i32 0, i32* %nbytes_in_lo32, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %if.end15
  %cmp19 = icmp ne i32* %nbytes_in_hi32, null
  br i1 %cmp19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end18
  store i32 0, i32* %nbytes_in_hi32, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then20, %if.end18
  %cmp22 = icmp ne i32* %nbytes_out_lo32, null
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  store i32 0, i32* %nbytes_out_lo32, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %cmp25 = icmp ne i32* %nbytes_out_hi32, null
  br i1 %cmp25, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.end24
  store i32 0, i32* %nbytes_out_hi32, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %if.end24
  %tobool28 = icmp eq i32 %abandon, 0
  br i1 %tobool28, label %land.lhs.true, label %if.end69

land.lhs.true:                                    ; preds = %if.end27
  %lastErr29 = getelementptr inbounds i8, i8* %b, i64 5096
  %3 = bitcast i8* %lastErr29 to i32*
  %4 = load i32, i32* %3, align 8
  %cmp30 = icmp eq i32 %4, 0
  br i1 %cmp30, label %while.body.preheader, label %if.end69

while.body.preheader:                             ; preds = %land.lhs.true
  %strm = getelementptr inbounds i8, i8* %b, i64 5016
  %5 = bitcast i8* %strm to %struct.bz_stream*
  %avail_out = getelementptr inbounds i8, i8* %b, i64 5048
  %6 = bitcast i8* %avail_out to i32*
  %buf = getelementptr inbounds i8, i8* %b, i64 4
  %next_out = getelementptr inbounds i8, i8* %b, i64 5040
  %7 = bitcast i8* %next_out to i8**
  %state.i = getelementptr inbounds i8, i8* %b, i64 5064
  %8 = bitcast i8* %state.i to %struct.EState**
  %avail_in.i = getelementptr inbounds i8, i8* %b, i64 5024
  %9 = bitcast i8* %avail_in.i to i32*
  %handle = bitcast i8* %b to i32*
  br label %while.body

while.body:                                       ; preds = %while.body.preheader, %if.end65
  store i32 5000, i32* %6, align 8
  store i8* %buf, i8** %7, align 8
  %10 = load %struct.EState*, %struct.EState** %8, align 8
  %cmp1.i = icmp eq %struct.EState* %10, null
  br i1 %cmp1.i, label %if.then37, label %if.end3.i

if.end3.i:                                        ; preds = %while.body
  %strm4.i = getelementptr inbounds %struct.EState, %struct.EState* %10, i64 0, i32 0
  %11 = load %struct.bz_stream*, %struct.bz_stream** %strm4.i, align 8
  %cmp5.i = icmp eq %struct.bz_stream* %11, %5
  br i1 %cmp5.i, label %preswitch.preheader.i, label %if.then37

preswitch.preheader.i:                            ; preds = %if.end3.i
  %mode.i = getelementptr inbounds %struct.EState, %struct.EState* %10, i64 0, i32 1
  %avail_in_expect.i = getelementptr inbounds %struct.EState, %struct.EState* %10, i64 0, i32 3
  %.pre.i = load i32, i32* %mode.i, align 8
  br label %preswitch.i

preswitch.i:                                      ; preds = %sw.bb8.i, %preswitch.preheader.i
  %12 = phi i32 [ 4, %sw.bb8.i ], [ %.pre.i, %preswitch.preheader.i ]
  switch i32 %12, label %if.then37 [
    i32 1, label %if.then37.loopexit181
    i32 2, label %sw.bb8.i
    i32 3, label %if.then37.loopexit181
    i32 4, label %sw.bb47.i
  ]

sw.bb8.i:                                         ; preds = %preswitch.i
  %storemerge126.i = load i32, i32* %9, align 8
  store i32 %storemerge126.i, i32* %avail_in_expect.i, align 8
  store i32 4, i32* %mode.i, align 8
  br label %preswitch.i

sw.bb47.i:                                        ; preds = %preswitch.i
  %13 = load i32, i32* %avail_in_expect.i, align 8
  %14 = load i32, i32* %9, align 8
  %cmp55.i = icmp eq i32 %13, %14
  br i1 %cmp55.i, label %if.end58.i, label %if.then37

if.end58.i:                                       ; preds = %sw.bb47.i
  %call59.i = tail call fastcc zeroext i8 @handle_compress(%struct.bz_stream* nonnull %5) #10
  %tobool60.i = icmp eq i8 %call59.i, 0
  br i1 %tobool60.i, label %if.then37, label %if.end62.i

if.end62.i:                                       ; preds = %if.end58.i
  %15 = load i32, i32* %avail_in_expect.i, align 8
  %cmp64.i = icmp eq i32 %15, 0
  br i1 %cmp64.i, label %lor.lhs.false66.i, label %if.end45

lor.lhs.false66.i:                                ; preds = %if.end62.i
  %state_in_ch.i111.i = getelementptr inbounds %struct.EState, %struct.EState* %10, i64 0, i32 13
  %16 = load i32, i32* %state_in_ch.i111.i, align 4
  %cmp.i112.i = icmp ult i32 %16, 256
  br i1 %cmp.i112.i, label %land.lhs.true.i115.i, label %lor.lhs.false69.i

land.lhs.true.i115.i:                             ; preds = %lor.lhs.false66.i
  %state_in_len.i113.i = getelementptr inbounds %struct.EState, %struct.EState* %10, i64 0, i32 14
  %17 = load i32, i32* %state_in_len.i113.i, align 8
  %cmp1.i114.i = icmp sgt i32 %17, 0
  br i1 %cmp1.i114.i, label %if.end45, label %lor.lhs.false69.i

lor.lhs.false69.i:                                ; preds = %land.lhs.true.i115.i, %lor.lhs.false66.i
  %state_out_pos70.i = getelementptr inbounds %struct.EState, %struct.EState* %10, i64 0, i32 20
  %18 = load i32, i32* %state_out_pos70.i, align 8
  %numZ71.i = getelementptr inbounds %struct.EState, %struct.EState* %10, i64 0, i32 19
  %19 = load i32, i32* %numZ71.i, align 4
  %cmp72.i = icmp slt i32 %18, %19
  br i1 %cmp72.i, label %if.end45, label %if.end75.i

if.end75.i:                                       ; preds = %lor.lhs.false69.i
  store i32 1, i32* %mode.i, align 8
  br label %if.end45

if.then37.loopexit181:                            ; preds = %preswitch.i, %preswitch.i
  br label %if.then37

if.then37:                                        ; preds = %while.body, %if.end3.i, %sw.bb47.i, %if.end58.i, %preswitch.i, %if.then37.loopexit181
  %retval.0.i.ph = phi i32 [ -1, %if.then37.loopexit181 ], [ 0, %preswitch.i ], [ -1, %if.end58.i ], [ -1, %sw.bb47.i ], [ -2, %if.end3.i ], [ -2, %while.body ]
  %cmp38 = icmp eq i32* %bzerror, null
  br i1 %cmp38, label %if.then42, label %if.then39

if.then39:                                        ; preds = %if.then37
  store i32 %retval.0.i.ph, i32* %bzerror, align 4
  br label %if.then42

if.then42:                                        ; preds = %if.then39, %if.then37
  store i32 %retval.0.i.ph, i32* %3, align 8
  br label %cleanup

if.end45:                                         ; preds = %if.end75.i, %if.end62.i, %lor.lhs.false69.i, %land.lhs.true.i115.i
  %retval.0.i.ph171 = phi i32 [ 3, %land.lhs.true.i115.i ], [ 3, %lor.lhs.false69.i ], [ 3, %if.end62.i ], [ 4, %if.end75.i ]
  %20 = load i32, i32* %6, align 8
  %cmp48 = icmp ult i32 %20, 5000
  br i1 %cmp48, label %if.then49, label %if.end65

if.then49:                                        ; preds = %if.end45
  %sub = sub i32 5000, %20
  %21 = load i32, i32* %handle, align 8
  %call54 = tail call i32 @spec_fwrite(i8* nonnull %buf, i32 1, i32 %sub, i32 %21) #10
  %cmp55 = icmp eq i32 %sub, %call54
  br i1 %cmp55, label %if.end65, label %if.then56

if.then56:                                        ; preds = %if.then49
  %cmp57 = icmp eq i32* %bzerror, null
  br i1 %cmp57, label %if.then61, label %if.then58

if.then58:                                        ; preds = %if.then56
  store i32 -6, i32* %bzerror, align 4
  br label %if.then61

if.then61:                                        ; preds = %if.then58, %if.then56
  store i32 -6, i32* %3, align 8
  br label %cleanup

if.end65:                                         ; preds = %if.then49, %if.end45
  %cmp66 = icmp eq i32 %retval.0.i.ph171, 4
  br i1 %cmp66, label %if.end69, label %while.body

if.end69:                                         ; preds = %if.end65, %if.end27, %land.lhs.true
  br i1 %cmp16, label %if.then74, label %if.end76

if.then74:                                        ; preds = %if.end69
  %total_in_lo32 = getelementptr inbounds i8, i8* %b, i64 5028
  %22 = bitcast i8* %total_in_lo32 to i32*
  %23 = load i32, i32* %22, align 4
  store i32 %23, i32* %nbytes_in_lo32, align 4
  br label %if.end76

if.end76:                                         ; preds = %if.then74, %if.end69
  br i1 %cmp19, label %if.then78, label %if.end80

if.then78:                                        ; preds = %if.end76
  %total_in_hi32 = getelementptr inbounds i8, i8* %b, i64 5032
  %24 = bitcast i8* %total_in_hi32 to i32*
  %25 = load i32, i32* %24, align 8
  store i32 %25, i32* %nbytes_in_hi32, align 4
  br label %if.end80

if.end80:                                         ; preds = %if.then78, %if.end76
  br i1 %cmp22, label %if.then82, label %if.end84

if.then82:                                        ; preds = %if.end80
  %total_out_lo32 = getelementptr inbounds i8, i8* %b, i64 5052
  %26 = bitcast i8* %total_out_lo32 to i32*
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %nbytes_out_lo32, align 4
  br label %if.end84

if.end84:                                         ; preds = %if.then82, %if.end80
  br i1 %cmp25, label %if.then86, label %if.end88

if.then86:                                        ; preds = %if.end84
  %total_out_hi32 = getelementptr inbounds i8, i8* %b, i64 5056
  %28 = bitcast i8* %total_out_hi32 to i32*
  %29 = load i32, i32* %28, align 8
  store i32 %29, i32* %nbytes_out_hi32, align 4
  br label %if.end88

if.end88:                                         ; preds = %if.then86, %if.end84
  %cmp89 = icmp eq i32* %bzerror, null
  br i1 %cmp89, label %if.end95, label %if.then90

if.then90:                                        ; preds = %if.end88
  store i32 0, i32* %bzerror, align 4
  br label %if.end95

if.end95:                                         ; preds = %if.end88, %if.then90
  %lastErr94 = getelementptr inbounds i8, i8* %b, i64 5096
  %30 = bitcast i8* %lastErr94 to i32*
  store i32 0, i32* %30, align 8
  %state.i159 = getelementptr inbounds i8, i8* %b, i64 5064
  %31 = bitcast i8* %state.i159 to i8**
  %32 = bitcast i8* %state.i159 to %struct.EState**
  %33 = load %struct.EState*, %struct.EState** %32, align 8
  %cmp1.i160 = icmp eq %struct.EState* %33, null
  br i1 %cmp1.i160, label %BZ2_bzCompressEnd.exit, label %if.end3.i164

if.end3.i164:                                     ; preds = %if.end95
  %strm96 = getelementptr inbounds i8, i8* %b, i64 5016
  %34 = bitcast i8* %strm96 to %struct.bz_stream*
  %strm4.i162 = getelementptr inbounds %struct.EState, %struct.EState* %33, i64 0, i32 0
  %35 = load %struct.bz_stream*, %struct.bz_stream** %strm4.i162, align 8
  %cmp5.i163 = icmp eq %struct.bz_stream* %35, %34
  br i1 %cmp5.i163, label %if.end7.i, label %BZ2_bzCompressEnd.exit

if.end7.i:                                        ; preds = %if.end3.i164
  %arr1.i = getelementptr inbounds %struct.EState, %struct.EState* %33, i64 0, i32 4
  %36 = load i32*, i32** %arr1.i, align 8
  %cmp8.i = icmp eq i32* %36, null
  br i1 %cmp8.i, label %if.end11.i, label %if.then9.i

if.then9.i:                                       ; preds = %if.end7.i
  %bzfree.i = getelementptr inbounds i8, i8* %b, i64 5080
  %37 = bitcast i8* %bzfree.i to void (i8*, i8*)**
  %38 = load void (i8*, i8*)*, void (i8*, i8*)** %37, align 8
  %opaque.i = getelementptr inbounds i8, i8* %b, i64 5088
  %39 = bitcast i8* %opaque.i to i8**
  %40 = load i8*, i8** %39, align 8
  %41 = bitcast i32* %36 to i8*
  tail call void %38(i8* %40, i8* %41) #10
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then9.i, %if.end7.i
  %arr2.i = getelementptr inbounds %struct.EState, %struct.EState* %33, i64 0, i32 5
  %42 = load i32*, i32** %arr2.i, align 8
  %cmp12.i = icmp eq i32* %42, null
  %.pre = getelementptr inbounds i8, i8* %b, i64 5080
  %.pre179 = bitcast i8* %.pre to void (i8*, i8*)**
  br i1 %cmp12.i, label %if.end17.i, label %if.then13.i

if.then13.i:                                      ; preds = %if.end11.i
  %43 = load void (i8*, i8*)*, void (i8*, i8*)** %.pre179, align 8
  %opaque15.i = getelementptr inbounds i8, i8* %b, i64 5088
  %44 = bitcast i8* %opaque15.i to i8**
  %45 = load i8*, i8** %44, align 8
  %46 = bitcast i32* %42 to i8*
  tail call void %43(i8* %45, i8* %46) #10
  br label %if.end17.i

if.end17.i:                                       ; preds = %if.end11.i, %if.then13.i
  %ftab.i = getelementptr inbounds %struct.EState, %struct.EState* %33, i64 0, i32 6
  %47 = load i32*, i32** %ftab.i, align 8
  %cmp18.i = icmp eq i32* %47, null
  br i1 %cmp18.i, label %if.end17.if.end23_crit_edge.i, label %if.then19.i

if.end17.if.end23_crit_edge.i:                    ; preds = %if.end17.i
  %.pre48.i = getelementptr inbounds i8, i8* %b, i64 5088
  %48 = bitcast i8* %.pre48.i to i8**
  br label %if.end23.i

if.then19.i:                                      ; preds = %if.end17.i
  %49 = load void (i8*, i8*)*, void (i8*, i8*)** %.pre179, align 8
  %opaque21.i = getelementptr inbounds i8, i8* %b, i64 5088
  %50 = bitcast i8* %opaque21.i to i8**
  %51 = load i8*, i8** %50, align 8
  %52 = bitcast i32* %47 to i8*
  tail call void %49(i8* %51, i8* %52) #10
  br label %if.end23.i

if.end23.i:                                       ; preds = %if.then19.i, %if.end17.if.end23_crit_edge.i
  %opaque25.pre-phi.i = phi i8** [ %48, %if.end17.if.end23_crit_edge.i ], [ %50, %if.then19.i ]
  %53 = load void (i8*, i8*)*, void (i8*, i8*)** %.pre179, align 8
  %54 = load i8*, i8** %opaque25.pre-phi.i, align 8
  %55 = load i8*, i8** %31, align 8
  tail call void %53(i8* %54, i8* %55) #10
  br label %BZ2_bzCompressEnd.exit

BZ2_bzCompressEnd.exit:                           ; preds = %if.end95, %if.end3.i164, %if.end23.i
  tail call void @free(i8* nonnull %b) #10
  br label %cleanup

cleanup:                                          ; preds = %if.then2, %if.then, %if.then61, %if.then42, %if.then12, %BZ2_bzCompressEnd.exit
  ret void
}

; Function Attrs: nounwind uwtable
define i8* @BZ2_bzReadOpen(i32* %bzerror, i32 %f, i32 %verbosity, i32 %small, i8* readonly %unused, i32 %nUnused) #4 {
entry:
  %cmp = icmp ne i32* %bzerror, null
  br i1 %cmp, label %if.then, label %if.end3

if.then:                                          ; preds = %entry
  store i32 0, i32* %bzerror, align 4
  br label %if.end3

if.end3:                                          ; preds = %entry, %if.then
  %cmp4 = icmp eq i32 %f, 0
  br i1 %cmp4, label %if.then21, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end3
  %small.cmp = icmp ugt i32 %small, 1
  %0 = icmp ugt i32 %verbosity, 4
  %1 = or i1 %0, %small.cmp
  br i1 %1, label %if.then21, label %lor.lhs.false11

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %cmp12 = icmp eq i8* %unused, null
  %cmp14 = icmp ne i32 %nUnused, 0
  %or.cond72 = and i1 %cmp12, %cmp14
  br i1 %or.cond72, label %if.then21, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %lor.lhs.false11
  %cmp16 = icmp ne i8* %unused, null
  %2 = icmp ugt i32 %nUnused, 5000
  %or.cond = and i1 %cmp16, %2
  br i1 %or.cond, label %if.then21, label %if.end29

if.then21:                                        ; preds = %lor.lhs.false15, %lor.lhs.false11, %lor.lhs.false, %if.end3
  br i1 %cmp, label %if.then23, label %cleanup

if.then23:                                        ; preds = %if.then21
  store i32 -2, i32* %bzerror, align 4
  br label %cleanup

if.end29:                                         ; preds = %lor.lhs.false15
  %call = tail call noalias i8* @malloc(i64 5104) #10
  %cmp30 = icmp eq i8* %call, null
  br i1 %cmp30, label %if.then31, label %if.end39

if.then31:                                        ; preds = %if.end29
  br i1 %cmp, label %if.then33, label %cleanup

if.then33:                                        ; preds = %if.then31
  store i32 -3, i32* %bzerror, align 4
  br label %cleanup

if.end39:                                         ; preds = %if.end29
  br i1 %cmp, label %if.then41, label %if.end46

if.then41:                                        ; preds = %if.end39
  store i32 0, i32* %bzerror, align 4
  br label %if.end46

if.end46:                                         ; preds = %if.then41, %if.end39
  %lastErr45 = getelementptr inbounds i8, i8* %call, i64 5096
  %3 = bitcast i8* %lastErr45 to i32*
  store i32 0, i32* %3, align 8
  %4 = getelementptr inbounds i8, i8* %call, i64 5100
  store i8 0, i8* %4, align 4
  %handle = bitcast i8* %call to i32*
  store i32 %f, i32* %handle, align 8
  %bufN = getelementptr inbounds i8, i8* %call, i64 5004
  %5 = bitcast i8* %bufN to i32*
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds i8, i8* %call, i64 5008
  store i8 0, i8* %6, align 8
  %strm = getelementptr inbounds i8, i8* %call, i64 5016
  %bzalloc = getelementptr inbounds i8, i8* %call, i64 5072
  %7 = bitcast i8* %bzalloc to i8* (i8*, i32, i32)**
  %bzfree = getelementptr inbounds i8, i8* %call, i64 5080
  %8 = bitcast i8* %bzfree to void (i8*, i8*)**
  %opaque = getelementptr inbounds i8, i8* %call, i64 5088
  %9 = bitcast i8* %opaque to i8**
  %cmp49128 = icmp sgt i32 %nUnused, 0
  call void @llvm.memset.p0i8.i64(i8* %bzalloc, i8 0, i64 24, i32 8, i1 false)
  br i1 %cmp49128, label %while.body.lr.ph, label %if.end10.i

while.body.lr.ph:                                 ; preds = %if.end46
  %buf = getelementptr inbounds i8, i8* %call, i64 4
  br label %while.body

while.body:                                       ; preds = %while.body.lr.ph, %while.body
  %10 = phi i32 [ 0, %while.body.lr.ph ], [ %inc, %while.body ]
  %nUnused.addr.0130 = phi i32 [ %nUnused, %while.body.lr.ph ], [ %dec, %while.body ]
  %unused.addr.0129 = phi i8* [ %unused, %while.body.lr.ph ], [ %add.ptr, %while.body ]
  %11 = load i8, i8* %unused.addr.0129, align 1
  %idxprom = sext i32 %10 to i64
  %arrayidx = getelementptr inbounds i8, i8* %buf, i64 %idxprom
  store i8 %11, i8* %arrayidx, align 1
  %12 = load i32, i32* %5, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %5, align 4
  %add.ptr = getelementptr inbounds i8, i8* %unused.addr.0129, i64 1
  %dec = add nsw i32 %nUnused.addr.0130, -1
  %cmp49 = icmp sgt i32 %nUnused.addr.0130, 1
  br i1 %cmp49, label %while.body, label %if.end10.i

if.end10.i:                                       ; preds = %while.body, %if.end46
  %13 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %7, align 8
  %cmp11.i = icmp eq i8* (i8*, i32, i32)* %13, null
  br i1 %cmp11.i, label %if.then12.i, label %if.end14.i

if.then12.i:                                      ; preds = %if.end10.i
  store i8* (i8*, i32, i32)* @default_bzalloc, i8* (i8*, i32, i32)** %7, align 8
  br label %if.end14.i

if.end14.i:                                       ; preds = %if.then12.i, %if.end10.i
  %14 = phi i8* (i8*, i32, i32)* [ @default_bzalloc, %if.then12.i ], [ %13, %if.end10.i ]
  %15 = load void (i8*, i8*)*, void (i8*, i8*)** %8, align 8
  %cmp15.i = icmp eq void (i8*, i8*)* %15, null
  br i1 %cmp15.i, label %if.then16.i, label %if.end18.i

if.then16.i:                                      ; preds = %if.end14.i
  store void (i8*, i8*)* @default_bzfree, void (i8*, i8*)** %8, align 8
  br label %if.end18.i

if.end18.i:                                       ; preds = %if.then16.i, %if.end14.i
  %16 = load i8*, i8** %9, align 8
  %call20.i = tail call i8* %14(i8* %16, i32 64144, i32 1) #10
  %cmp21.i = icmp eq i8* %call20.i, null
  br i1 %cmp21.i, label %if.then55, label %if.end63

if.then55:                                        ; preds = %if.end18.i
  br i1 %cmp, label %if.then57, label %if.end62

if.then57:                                        ; preds = %if.then55
  store i32 -3, i32* %bzerror, align 4
  br label %if.end62

if.end62:                                         ; preds = %if.then57, %if.then55
  tail call void @free(i8* nonnull %call) #10
  br label %cleanup

if.end63:                                         ; preds = %if.end18.i
  %17 = bitcast i8* %call20.i to i8**
  store i8* %strm, i8** %17, align 8
  %state.i = getelementptr inbounds i8, i8* %call, i64 5064
  %18 = bitcast i8* %state.i to i8**
  store i8* %call20.i, i8** %18, align 8
  %state25.i = getelementptr inbounds i8, i8* %call20.i, i64 8
  %19 = bitcast i8* %state25.i to i32*
  store i32 10, i32* %19, align 8
  %bsLive.i = getelementptr inbounds i8, i8* %call20.i, i64 36
  %20 = bitcast i8* %bsLive.i to i32*
  store i32 0, i32* %20, align 4
  %bsBuff.i = getelementptr inbounds i8, i8* %call20.i, i64 32
  %21 = bitcast i8* %bsBuff.i to i32*
  store i32 0, i32* %21, align 8
  %calculatedCombinedCRC.i = getelementptr inbounds i8, i8* %call20.i, i64 3188
  %22 = bitcast i8* %calculatedCombinedCRC.i to i32*
  store i32 0, i32* %22, align 4
  %total_in_lo32.i = getelementptr inbounds i8, i8* %call, i64 5028
  %23 = bitcast i8* %total_in_lo32.i to i32*
  store i32 0, i32* %23, align 4
  %total_in_hi32.i = getelementptr inbounds i8, i8* %call, i64 5032
  %24 = bitcast i8* %total_in_hi32.i to i32*
  store i32 0, i32* %24, align 8
  %total_out_lo32.i = getelementptr inbounds i8, i8* %call, i64 5052
  %25 = bitcast i8* %total_out_lo32.i to i32*
  store i32 0, i32* %25, align 4
  %total_out_hi32.i = getelementptr inbounds i8, i8* %call, i64 5056
  %26 = bitcast i8* %total_out_hi32.i to i32*
  store i32 0, i32* %26, align 8
  %conv.i = trunc i32 %small to i8
  %27 = getelementptr inbounds i8, i8* %call20.i, i64 44
  store i8 %conv.i, i8* %27, align 4
  %tt.i = getelementptr inbounds i8, i8* %call20.i, i64 3152
  %currBlockNo.i = getelementptr inbounds i8, i8* %call20.i, i64 48
  %28 = bitcast i8* %currBlockNo.i to i32*
  store i32 0, i32* %28, align 8
  %verbosity26.i = getelementptr inbounds i8, i8* %call20.i, i64 52
  %29 = bitcast i8* %verbosity26.i to i32*
  tail call void @llvm.memset.p0i8.i64(i8* %tt.i, i8 0, i64 24, i32 8, i1 false) #10
  store i32 %verbosity, i32* %29, align 4
  %30 = load i32, i32* %5, align 4
  %avail_in = getelementptr inbounds i8, i8* %call, i64 5024
  %31 = bitcast i8* %avail_in to i32*
  store i32 %30, i32* %31, align 8
  %buf66 = getelementptr inbounds i8, i8* %call, i64 4
  %next_in = bitcast i8* %strm to i8**
  store i8* %buf66, i8** %next_in, align 8
  store i8 1, i8* %4, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.then31, %if.then33, %if.then23, %if.then21, %if.end63, %if.end62
  %retval.0 = phi i8* [ null, %if.end62 ], [ %call, %if.end63 ], [ null, %if.then21 ], [ null, %if.then23 ], [ null, %if.then33 ], [ null, %if.then31 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind uwtable
define void @BZ2_bzReadClose(i32* %bzerror, i8* %b) #4 {
entry:
  %cmp = icmp ne i32* %bzerror, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %bzerror, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %cmp1 = icmp eq i8* %b, null
  br i1 %cmp1, label %if.then5, label %if.end13

if.then5:                                         ; preds = %if.end
  br i1 %cmp, label %if.then7, label %cleanup

if.then7:                                         ; preds = %if.then5
  store i32 0, i32* %bzerror, align 4
  br label %cleanup

if.end13:                                         ; preds = %if.end
  %lastErr = getelementptr inbounds i8, i8* %b, i64 5096
  %0 = bitcast i8* %lastErr to i32*
  store i32 0, i32* %0, align 8
  %1 = getelementptr inbounds i8, i8* %b, i64 5008
  %2 = load i8, i8* %1, align 8
  %tobool = icmp eq i8 %2, 0
  br i1 %tobool, label %if.end22, label %if.then14

if.then14:                                        ; preds = %if.end13
  br i1 %cmp, label %if.then16, label %if.then19

if.then16:                                        ; preds = %if.then14
  store i32 -1, i32* %bzerror, align 4
  br label %if.then19

if.then19:                                        ; preds = %if.then14, %if.then16
  store i32 -1, i32* %0, align 8
  br label %cleanup

if.end22:                                         ; preds = %if.end13
  %3 = getelementptr inbounds i8, i8* %b, i64 5100
  %4 = load i8, i8* %3, align 4
  %tobool23 = icmp eq i8 %4, 0
  br i1 %tobool23, label %if.end25, label %if.then24

if.then24:                                        ; preds = %if.end22
  %state.i = getelementptr inbounds i8, i8* %b, i64 5064
  %5 = bitcast i8* %state.i to i8**
  %6 = bitcast i8* %state.i to %struct.DState**
  %7 = load %struct.DState*, %struct.DState** %6, align 8
  %cmp1.i = icmp eq %struct.DState* %7, null
  br i1 %cmp1.i, label %if.end25, label %if.end3.i

if.end3.i:                                        ; preds = %if.then24
  %strm = getelementptr inbounds i8, i8* %b, i64 5016
  %8 = bitcast i8* %strm to %struct.bz_stream*
  %strm4.i = getelementptr inbounds %struct.DState, %struct.DState* %7, i64 0, i32 0
  %9 = load %struct.bz_stream*, %struct.bz_stream** %strm4.i, align 8
  %cmp5.i = icmp eq %struct.bz_stream* %9, %8
  br i1 %cmp5.i, label %if.end7.i, label %if.end25

if.end7.i:                                        ; preds = %if.end3.i
  %tt.i = getelementptr inbounds %struct.DState, %struct.DState* %7, i64 0, i32 20
  %10 = load i32*, i32** %tt.i, align 8
  %cmp8.i = icmp eq i32* %10, null
  br i1 %cmp8.i, label %if.end11.i, label %if.then9.i

if.then9.i:                                       ; preds = %if.end7.i
  %bzfree.i = getelementptr inbounds i8, i8* %b, i64 5080
  %11 = bitcast i8* %bzfree.i to void (i8*, i8*)**
  %12 = load void (i8*, i8*)*, void (i8*, i8*)** %11, align 8
  %opaque.i = getelementptr inbounds i8, i8* %b, i64 5088
  %13 = bitcast i8* %opaque.i to i8**
  %14 = load i8*, i8** %13, align 8
  %15 = bitcast i32* %10 to i8*
  tail call void %12(i8* %14, i8* %15) #10
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then9.i, %if.end7.i
  %ll16.i = getelementptr inbounds %struct.DState, %struct.DState* %7, i64 0, i32 21
  %16 = load i16*, i16** %ll16.i, align 8
  %cmp12.i = icmp eq i16* %16, null
  %.pre = getelementptr inbounds i8, i8* %b, i64 5080
  %.pre43 = bitcast i8* %.pre to void (i8*, i8*)**
  br i1 %cmp12.i, label %if.end17.i, label %if.then13.i

if.then13.i:                                      ; preds = %if.end11.i
  %17 = load void (i8*, i8*)*, void (i8*, i8*)** %.pre43, align 8
  %opaque15.i = getelementptr inbounds i8, i8* %b, i64 5088
  %18 = bitcast i8* %opaque15.i to i8**
  %19 = load i8*, i8** %18, align 8
  %20 = bitcast i16* %16 to i8*
  tail call void %17(i8* %19, i8* %20) #10
  br label %if.end17.i

if.end17.i:                                       ; preds = %if.end11.i, %if.then13.i
  %ll4.i = getelementptr inbounds %struct.DState, %struct.DState* %7, i64 0, i32 22
  %21 = load i8*, i8** %ll4.i, align 8
  %cmp18.i = icmp eq i8* %21, null
  br i1 %cmp18.i, label %if.end17.if.end23_crit_edge.i, label %if.then19.i

if.end17.if.end23_crit_edge.i:                    ; preds = %if.end17.i
  %.pre48.i = getelementptr inbounds i8, i8* %b, i64 5088
  %22 = bitcast i8* %.pre48.i to i8**
  br label %if.end23.i

if.then19.i:                                      ; preds = %if.end17.i
  %23 = load void (i8*, i8*)*, void (i8*, i8*)** %.pre43, align 8
  %opaque21.i = getelementptr inbounds i8, i8* %b, i64 5088
  %24 = bitcast i8* %opaque21.i to i8**
  %25 = load i8*, i8** %24, align 8
  tail call void %23(i8* %25, i8* nonnull %21) #10
  br label %if.end23.i

if.end23.i:                                       ; preds = %if.then19.i, %if.end17.if.end23_crit_edge.i
  %opaque25.pre-phi.i = phi i8** [ %22, %if.end17.if.end23_crit_edge.i ], [ %24, %if.then19.i ]
  %26 = load void (i8*, i8*)*, void (i8*, i8*)** %.pre43, align 8
  %27 = load i8*, i8** %opaque25.pre-phi.i, align 8
  %28 = load i8*, i8** %5, align 8
  tail call void %26(i8* %27, i8* %28) #10
  br label %if.end25

if.end25:                                         ; preds = %if.end23.i, %if.end3.i, %if.then24, %if.end22
  tail call void @free(i8* nonnull %b) #10
  br label %cleanup

cleanup:                                          ; preds = %if.then5, %if.then7, %if.then19, %if.end25
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @BZ2_bzRead(i32* %bzerror, i8* %b, i8* %buf, i32 %len) #4 {
entry:
  %cmp = icmp ne i32* %bzerror, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %bzerror, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %cmp1 = icmp ne i8* %b, null
  br i1 %cmp1, label %if.end3, label %if.then8

if.end3:                                          ; preds = %if.end
  %lastErr = getelementptr inbounds i8, i8* %b, i64 5096
  %0 = bitcast i8* %lastErr to i32*
  store i32 0, i32* %0, align 8
  %cmp5 = icmp eq i8* %buf, null
  %cmp7 = icmp slt i32 %len, 0
  %or.cond123 = or i1 %cmp5, %cmp7
  br i1 %or.cond123, label %if.then8, label %if.end16

if.then8:                                         ; preds = %if.end, %if.end3
  br i1 %cmp, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.then8
  store i32 -2, i32* %bzerror, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %if.then8
  br i1 %cmp1, label %if.then13, label %cleanup

if.then13:                                        ; preds = %if.end11
  %lastErr14 = getelementptr inbounds i8, i8* %b, i64 5096
  %1 = bitcast i8* %lastErr14 to i32*
  store i32 -2, i32* %1, align 8
  br label %cleanup

if.end16:                                         ; preds = %if.end3
  %2 = getelementptr inbounds i8, i8* %b, i64 5008
  %3 = load i8, i8* %2, align 8
  %tobool = icmp eq i8 %3, 0
  br i1 %tobool, label %if.end25, label %if.then17

if.then17:                                        ; preds = %if.end16
  br i1 %cmp, label %if.then19, label %if.then22

if.then19:                                        ; preds = %if.then17
  store i32 -1, i32* %bzerror, align 4
  br label %if.then22

if.then22:                                        ; preds = %if.then17, %if.then19
  store i32 -1, i32* %0, align 8
  br label %cleanup

if.end25:                                         ; preds = %if.end16
  %cmp26 = icmp eq i32 %len, 0
  br i1 %cmp26, label %if.then27, label %if.end35

if.then27:                                        ; preds = %if.end25
  br i1 %cmp, label %if.then29, label %if.then32

if.then29:                                        ; preds = %if.then27
  store i32 0, i32* %bzerror, align 4
  br label %if.then32

if.then32:                                        ; preds = %if.then27, %if.then29
  store i32 0, i32* %0, align 8
  br label %cleanup

if.end35:                                         ; preds = %if.end25
  %strm = getelementptr inbounds i8, i8* %b, i64 5016
  %4 = bitcast i8* %strm to %struct.bz_stream*
  %avail_out = getelementptr inbounds i8, i8* %b, i64 5048
  %5 = bitcast i8* %avail_out to i32*
  store i32 %len, i32* %5, align 8
  %next_out = getelementptr inbounds i8, i8* %b, i64 5040
  %6 = bitcast i8* %next_out to i8**
  store i8* %buf, i8** %6, align 8
  %avail_in = getelementptr inbounds i8, i8* %b, i64 5024
  %7 = bitcast i8* %avail_in to i32*
  %handle = bitcast i8* %b to i32*
  %buf41 = getelementptr inbounds i8, i8* %b, i64 4
  %bufN = getelementptr inbounds i8, i8* %b, i64 5004
  %8 = bitcast i8* %bufN to i32*
  %next_in = bitcast i8* %strm to i8**
  br label %while.body

while.body:                                       ; preds = %if.end105, %if.end35
  %9 = load i32, i32* %7, align 8
  %cmp38 = icmp eq i32 %9, 0
  br i1 %cmp38, label %land.lhs.true, label %if.end50

land.lhs.true:                                    ; preds = %while.body
  %10 = load i32, i32* %handle, align 8
  %call.i = tail call i32 @spec_getc(i32 %10) #10
  %cmp.i = icmp eq i32 %call.i, -1
  br i1 %cmp.i, label %if.end50, label %if.then40

if.then40:                                        ; preds = %land.lhs.true
  %conv.i = trunc i32 %call.i to i8
  %call1.i = tail call i32 @spec_ungetc(i8 zeroext %conv.i, i32 %10) #10
  %11 = load i32, i32* %handle, align 8
  %call43 = tail call i32 @spec_fread(i8* nonnull %buf41, i32 1, i32 5000, i32 %11) #10
  store i32 %call43, i32* %8, align 4
  store i32 %call43, i32* %7, align 8
  store i8* %buf41, i8** %next_in, align 8
  br label %if.end50

if.end50:                                         ; preds = %land.lhs.true, %if.then40, %while.body
  %call52 = tail call i32 @BZ2_bzDecompress(%struct.bz_stream* nonnull %4)
  switch i32 %call52, label %if.then56 [
    i32 0, label %land.lhs.true66
    i32 4, label %if.then93
  ]

if.then56:                                        ; preds = %if.end50
  br i1 %cmp, label %if.then58, label %if.then61

if.then58:                                        ; preds = %if.then56
  store i32 %call52, i32* %bzerror, align 4
  br label %if.then61

if.then61:                                        ; preds = %if.then56, %if.then58
  store i32 %call52, i32* %0, align 8
  br label %cleanup

land.lhs.true66:                                  ; preds = %if.end50
  %12 = load i32, i32* %handle, align 8
  %call.i187 = tail call i32 @spec_getc(i32 %12) #10
  %cmp.i188 = icmp eq i32 %call.i187, -1
  br i1 %cmp.i188, label %land.lhs.true70, label %myfeof.exit193.thread

myfeof.exit193.thread:                            ; preds = %land.lhs.true66
  %conv.i189 = trunc i32 %call.i187 to i8
  %call1.i190 = tail call i32 @spec_ungetc(i8 zeroext %conv.i189, i32 %12) #10
  br label %if.end105

land.lhs.true70:                                  ; preds = %land.lhs.true66
  %13 = load i32, i32* %7, align 8
  %cmp73 = icmp eq i32 %13, 0
  br i1 %cmp73, label %land.lhs.true75, label %if.end105

land.lhs.true75:                                  ; preds = %land.lhs.true70
  %14 = load i32, i32* %5, align 8
  %cmp78 = icmp eq i32 %14, 0
  br i1 %cmp78, label %if.then110, label %if.then80

if.then80:                                        ; preds = %land.lhs.true75
  br i1 %cmp, label %if.then83, label %if.then87

if.then83:                                        ; preds = %if.then80
  store i32 -7, i32* %bzerror, align 4
  br label %if.then87

if.then87:                                        ; preds = %if.then80, %if.then83
  store i32 -7, i32* %0, align 8
  br label %cleanup

if.then93:                                        ; preds = %if.end50
  br i1 %cmp, label %if.then96, label %if.end102

if.then96:                                        ; preds = %if.then93
  store i32 4, i32* %bzerror, align 4
  br label %if.end102

if.end102:                                        ; preds = %if.then96, %if.then93
  store i32 4, i32* %0, align 8
  %15 = load i32, i32* %5, align 8
  %sub = sub i32 %len, %15
  br label %cleanup

if.end105:                                        ; preds = %land.lhs.true70, %myfeof.exit193.thread
  %.pr = load i32, i32* %5, align 8
  %cmp108 = icmp eq i32 %.pr, 0
  br i1 %cmp108, label %if.then110, label %while.body

if.then110:                                       ; preds = %if.end105, %land.lhs.true75
  br i1 %cmp, label %if.then113, label %if.then117

if.then113:                                       ; preds = %if.then110
  store i32 0, i32* %bzerror, align 4
  br label %if.then117

if.then117:                                       ; preds = %if.then110, %if.then113
  store i32 0, i32* %0, align 8
  br label %cleanup

cleanup:                                          ; preds = %if.then117, %if.then87, %if.then61, %if.then32, %if.then22, %if.end11, %if.then13, %if.end102
  %retval.0 = phi i32 [ %sub, %if.end102 ], [ 0, %if.then13 ], [ 0, %if.end11 ], [ 0, %if.then22 ], [ 0, %if.then32 ], [ 0, %if.then61 ], [ 0, %if.then87 ], [ %len, %if.then117 ]
  ret i32 %retval.0
}

declare i32 @spec_fread(i8*, i32, i32, i32) #7

; Function Attrs: norecurse nounwind uwtable
define void @BZ2_bzReadGetUnused(i32* %bzerror, i8* %b, i8** %unused, i32* %nUnused) #8 {
entry:
  %cmp = icmp eq i8* %b, null
  br i1 %cmp, label %if.then, label %if.end6

if.then:                                          ; preds = %entry
  %cmp1 = icmp eq i32* %bzerror, null
  br i1 %cmp1, label %cleanup, label %if.then2

if.then2:                                         ; preds = %if.then
  store i32 -2, i32* %bzerror, align 4
  br label %cleanup

if.end6:                                          ; preds = %entry
  %lastErr7 = getelementptr inbounds i8, i8* %b, i64 5096
  %0 = bitcast i8* %lastErr7 to i32*
  %1 = load i32, i32* %0, align 8
  %cmp8 = icmp eq i32 %1, 4
  br i1 %cmp8, label %if.end17, label %if.then9

if.then9:                                         ; preds = %if.end6
  %cmp10 = icmp eq i32* %bzerror, null
  br i1 %cmp10, label %if.then14, label %if.then11

if.then11:                                        ; preds = %if.then9
  store i32 -1, i32* %bzerror, align 4
  br label %if.then14

if.then14:                                        ; preds = %if.then11, %if.then9
  store i32 -1, i32* %0, align 8
  br label %cleanup

if.end17:                                         ; preds = %if.end6
  %cmp18 = icmp eq i8** %unused, null
  %cmp19 = icmp eq i32* %nUnused, null
  %or.cond = or i1 %cmp18, %cmp19
  %cmp21 = icmp ne i32* %bzerror, null
  br i1 %or.cond, label %if.then20, label %if.end28

if.then20:                                        ; preds = %if.end17
  br i1 %cmp21, label %if.then22, label %if.then25

if.then22:                                        ; preds = %if.then20
  store i32 -2, i32* %bzerror, align 4
  br label %if.then25

if.then25:                                        ; preds = %if.then20, %if.then22
  store i32 -2, i32* %0, align 8
  br label %cleanup

if.end28:                                         ; preds = %if.end17
  br i1 %cmp21, label %if.then30, label %if.end35

if.then30:                                        ; preds = %if.end28
  store i32 0, i32* %bzerror, align 4
  br label %if.end35

if.end35:                                         ; preds = %if.then30, %if.end28
  store i32 0, i32* %0, align 8
  %strm = getelementptr inbounds i8, i8* %b, i64 5016
  %avail_in = getelementptr inbounds i8, i8* %b, i64 5024
  %2 = bitcast i8* %avail_in to i32*
  %3 = load i32, i32* %2, align 8
  store i32 %3, i32* %nUnused, align 4
  %4 = bitcast i8* %strm to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast i8** %unused to i64*
  store i64 %5, i64* %6, align 8
  br label %cleanup

cleanup:                                          ; preds = %if.then2, %if.then, %if.then25, %if.then14, %if.end35
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @BZ2_bzBuffToBuffCompress(i8* %dest, i32* %destLen, i8* %source, i32 %sourceLen, i32 %blockSize100k, i32 %verbosity, i32 %workFactor) #4 {
entry:
  %strm = alloca %struct.bz_stream, align 8
  %0 = bitcast %struct.bz_stream* %strm to i8*
  call void @llvm.lifetime.start(i64 80, i8* %0) #10
  %cmp = icmp eq i8* %dest, null
  %cmp1 = icmp eq i32* %destLen, null
  %or.cond = or i1 %cmp, %cmp1
  %cmp3 = icmp eq i8* %source, null
  %or.cond34 = or i1 %or.cond, %cmp3
  %blockSize100k.off = add i32 %blockSize100k, -1
  %1 = icmp ugt i32 %blockSize100k.off, 8
  %2 = or i1 %or.cond34, %1
  %3 = icmp ugt i32 %verbosity, 4
  %4 = or i1 %3, %2
  %5 = icmp ugt i32 %workFactor, 250
  %6 = or i1 %5, %4
  br i1 %6, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %cmp16 = icmp eq i32 %workFactor, 0
  %.workFactor = select i1 %cmp16, i32 30, i32 %workFactor
  %bzalloc = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 9
  %bzfree = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 10
  %opaque = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 11
  %7 = bitcast i8* (i8*, i32, i32)** %bzalloc to i8*
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 24, i32 8, i1 false)
  %call = call i32 @BZ2_bzCompressInit(%struct.bz_stream* nonnull %strm, i32 %blockSize100k, i32 %verbosity, i32 %.workFactor)
  %cmp19 = icmp eq i32 %call, 0
  br i1 %cmp19, label %if.end21, label %cleanup

if.end21:                                         ; preds = %if.end
  %next_in = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 0
  store i8* %source, i8** %next_in, align 8
  %next_out = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 4
  store i8* %dest, i8** %next_out, align 8
  %avail_in = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 1
  store i32 %sourceLen, i32* %avail_in, align 8
  %8 = load i32, i32* %destLen, align 4
  %avail_out = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 5
  store i32 %8, i32* %avail_out, align 8
  %state.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 8
  %9 = bitcast i8** %state.i to %struct.EState**
  %10 = load %struct.EState*, %struct.EState** %9, align 8
  %cmp1.i = icmp eq %struct.EState* %10, null
  br i1 %cmp1.i, label %cleanup, label %if.end3.i

if.end3.i:                                        ; preds = %if.end21
  %strm4.i = getelementptr inbounds %struct.EState, %struct.EState* %10, i64 0, i32 0
  %11 = load %struct.bz_stream*, %struct.bz_stream** %strm4.i, align 8
  %cmp5.i = icmp eq %struct.bz_stream* %11, %strm
  br i1 %cmp5.i, label %preswitch.preheader.i, label %errhandler

preswitch.preheader.i:                            ; preds = %if.end3.i
  %mode.i = getelementptr inbounds %struct.EState, %struct.EState* %10, i64 0, i32 1
  %avail_in_expect.i = getelementptr inbounds %struct.EState, %struct.EState* %10, i64 0, i32 3
  %.pre.i = load i32, i32* %mode.i, align 8
  br label %preswitch.i

preswitch.i:                                      ; preds = %sw.bb8.i, %preswitch.preheader.i
  %12 = phi i32 [ 4, %sw.bb8.i ], [ %.pre.i, %preswitch.preheader.i ]
  switch i32 %12, label %errhandler [
    i32 1, label %errhandler.loopexit128
    i32 2, label %sw.bb8.i
    i32 3, label %errhandler.loopexit128
    i32 4, label %sw.bb47.i
  ]

sw.bb8.i:                                         ; preds = %preswitch.i
  %storemerge126.i = load i32, i32* %avail_in, align 8
  store i32 %storemerge126.i, i32* %avail_in_expect.i, align 8
  store i32 4, i32* %mode.i, align 8
  br label %preswitch.i

sw.bb47.i:                                        ; preds = %preswitch.i
  %13 = load i32, i32* %avail_in_expect.i, align 8
  %14 = load i32, i32* %avail_in, align 8
  %cmp55.i = icmp eq i32 %13, %14
  br i1 %cmp55.i, label %if.end58.i, label %errhandler

if.end58.i:                                       ; preds = %sw.bb47.i
  %call59.i = call fastcc zeroext i8 @handle_compress(%struct.bz_stream* nonnull %strm) #10
  %tobool60.i = icmp eq i8 %call59.i, 0
  br i1 %tobool60.i, label %errhandler, label %if.end62.i

if.end62.i:                                       ; preds = %if.end58.i
  %15 = load i32, i32* %avail_in_expect.i, align 8
  %cmp64.i = icmp eq i32 %15, 0
  br i1 %cmp64.i, label %lor.lhs.false66.i, label %output_overflow

lor.lhs.false66.i:                                ; preds = %if.end62.i
  %state_in_ch.i111.i = getelementptr inbounds %struct.EState, %struct.EState* %10, i64 0, i32 13
  %16 = load i32, i32* %state_in_ch.i111.i, align 4
  %cmp.i112.i = icmp ult i32 %16, 256
  br i1 %cmp.i112.i, label %land.lhs.true.i115.i, label %lor.lhs.false69.i

land.lhs.true.i115.i:                             ; preds = %lor.lhs.false66.i
  %state_in_len.i113.i = getelementptr inbounds %struct.EState, %struct.EState* %10, i64 0, i32 14
  %17 = load i32, i32* %state_in_len.i113.i, align 8
  %cmp1.i114.i = icmp sgt i32 %17, 0
  br i1 %cmp1.i114.i, label %output_overflow, label %lor.lhs.false69.i

lor.lhs.false69.i:                                ; preds = %land.lhs.true.i115.i, %lor.lhs.false66.i
  %state_out_pos70.i = getelementptr inbounds %struct.EState, %struct.EState* %10, i64 0, i32 20
  %18 = load i32, i32* %state_out_pos70.i, align 8
  %numZ71.i = getelementptr inbounds %struct.EState, %struct.EState* %10, i64 0, i32 19
  %19 = load i32, i32* %numZ71.i, align 4
  %cmp72.i = icmp slt i32 %18, %19
  br i1 %cmp72.i, label %output_overflow, label %if.end28

if.end28:                                         ; preds = %lor.lhs.false69.i
  store i32 1, i32* %mode.i, align 8
  %20 = load i32, i32* %avail_out, align 8
  %21 = load i32, i32* %destLen, align 4
  %sub = sub i32 %21, %20
  store i32 %sub, i32* %destLen, align 4
  %22 = load %struct.EState*, %struct.EState** %9, align 8
  %cmp1.i58 = icmp eq %struct.EState* %22, null
  br i1 %cmp1.i58, label %cleanup, label %if.end3.i61

if.end3.i61:                                      ; preds = %if.end28
  %strm4.i59 = getelementptr inbounds %struct.EState, %struct.EState* %22, i64 0, i32 0
  %23 = load %struct.bz_stream*, %struct.bz_stream** %strm4.i59, align 8
  %cmp5.i60 = icmp eq %struct.bz_stream* %23, %strm
  br i1 %cmp5.i60, label %if.end7.i, label %cleanup

if.end7.i:                                        ; preds = %if.end3.i61
  %arr1.i = getelementptr inbounds %struct.EState, %struct.EState* %22, i64 0, i32 4
  %24 = load i32*, i32** %arr1.i, align 8
  %cmp8.i = icmp eq i32* %24, null
  br i1 %cmp8.i, label %if.end11.i, label %if.then9.i

if.then9.i:                                       ; preds = %if.end7.i
  %25 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %26 = load i8*, i8** %opaque, align 8
  %27 = bitcast i32* %24 to i8*
  call void %25(i8* %26, i8* %27) #10
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then9.i, %if.end7.i
  %arr2.i = getelementptr inbounds %struct.EState, %struct.EState* %22, i64 0, i32 5
  %28 = load i32*, i32** %arr2.i, align 8
  %cmp12.i = icmp eq i32* %28, null
  br i1 %cmp12.i, label %if.end17.i, label %if.then13.i

if.then13.i:                                      ; preds = %if.end11.i
  %29 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %30 = load i8*, i8** %opaque, align 8
  %31 = bitcast i32* %28 to i8*
  call void %29(i8* %30, i8* %31) #10
  br label %if.end17.i

if.end17.i:                                       ; preds = %if.then13.i, %if.end11.i
  %ftab.i = getelementptr inbounds %struct.EState, %struct.EState* %22, i64 0, i32 6
  %32 = load i32*, i32** %ftab.i, align 8
  %cmp18.i = icmp eq i32* %32, null
  br i1 %cmp18.i, label %if.end23.i, label %if.then19.i

if.then19.i:                                      ; preds = %if.end17.i
  %33 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %34 = load i8*, i8** %opaque, align 8
  %35 = bitcast i32* %32 to i8*
  call void %33(i8* %34, i8* %35) #10
  br label %if.end23.i

if.end23.i:                                       ; preds = %if.end17.i, %if.then19.i
  %36 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %37 = load i8*, i8** %opaque, align 8
  %38 = load i8*, i8** %state.i, align 8
  call void %36(i8* %37, i8* %38) #10
  store i8* null, i8** %state.i, align 8
  br label %cleanup

output_overflow:                                  ; preds = %if.end62.i, %lor.lhs.false69.i, %land.lhs.true.i115.i
  %39 = load %struct.EState*, %struct.EState** %9, align 8
  %cmp1.i65 = icmp eq %struct.EState* %39, null
  br i1 %cmp1.i65, label %cleanup, label %if.end3.i68

if.end3.i68:                                      ; preds = %output_overflow
  %strm4.i66 = getelementptr inbounds %struct.EState, %struct.EState* %39, i64 0, i32 0
  %40 = load %struct.bz_stream*, %struct.bz_stream** %strm4.i66, align 8
  %cmp5.i67 = icmp eq %struct.bz_stream* %40, %strm
  br i1 %cmp5.i67, label %if.end7.i71, label %cleanup

if.end7.i71:                                      ; preds = %if.end3.i68
  %arr1.i69 = getelementptr inbounds %struct.EState, %struct.EState* %39, i64 0, i32 4
  %41 = load i32*, i32** %arr1.i69, align 8
  %cmp8.i70 = icmp eq i32* %41, null
  br i1 %cmp8.i70, label %if.end11.i77, label %if.then9.i74

if.then9.i74:                                     ; preds = %if.end7.i71
  %42 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %43 = load i8*, i8** %opaque, align 8
  %44 = bitcast i32* %41 to i8*
  call void %42(i8* %43, i8* %44) #10
  br label %if.end11.i77

if.end11.i77:                                     ; preds = %if.then9.i74, %if.end7.i71
  %arr2.i75 = getelementptr inbounds %struct.EState, %struct.EState* %39, i64 0, i32 5
  %45 = load i32*, i32** %arr2.i75, align 8
  %cmp12.i76 = icmp eq i32* %45, null
  br i1 %cmp12.i76, label %if.end17.i84, label %if.then13.i80

if.then13.i80:                                    ; preds = %if.end11.i77
  %46 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %47 = load i8*, i8** %opaque, align 8
  %48 = bitcast i32* %45 to i8*
  call void %46(i8* %47, i8* %48) #10
  br label %if.end17.i84

if.end17.i84:                                     ; preds = %if.then13.i80, %if.end11.i77
  %ftab.i81 = getelementptr inbounds %struct.EState, %struct.EState* %39, i64 0, i32 6
  %49 = load i32*, i32** %ftab.i81, align 8
  %cmp18.i82 = icmp eq i32* %49, null
  br i1 %cmp18.i82, label %if.end23.i90, label %if.then19.i88

if.then19.i88:                                    ; preds = %if.end17.i84
  %50 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %51 = load i8*, i8** %opaque, align 8
  %52 = bitcast i32* %49 to i8*
  call void %50(i8* %51, i8* %52) #10
  br label %if.end23.i90

if.end23.i90:                                     ; preds = %if.end17.i84, %if.then19.i88
  %53 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %54 = load i8*, i8** %opaque, align 8
  %55 = load i8*, i8** %state.i, align 8
  call void %53(i8* %54, i8* %55) #10
  store i8* null, i8** %state.i, align 8
  br label %cleanup

errhandler.loopexit128:                           ; preds = %preswitch.i, %preswitch.i
  br label %errhandler

errhandler:                                       ; preds = %preswitch.i, %errhandler.loopexit128, %if.end3.i, %sw.bb47.i, %if.end58.i
  %retval.0.i.ph.ph = phi i32 [ -2, %if.end3.i ], [ -1, %sw.bb47.i ], [ -1, %if.end58.i ], [ -1, %errhandler.loopexit128 ], [ 0, %preswitch.i ]
  %.pr = load %struct.EState*, %struct.EState** %9, align 8
  %cmp1.i94 = icmp eq %struct.EState* %.pr, null
  br i1 %cmp1.i94, label %cleanup, label %if.end3.i97

if.end3.i97:                                      ; preds = %errhandler
  %strm4.i95 = getelementptr inbounds %struct.EState, %struct.EState* %.pr, i64 0, i32 0
  %56 = load %struct.bz_stream*, %struct.bz_stream** %strm4.i95, align 8
  %cmp5.i96 = icmp eq %struct.bz_stream* %56, %strm
  br i1 %cmp5.i96, label %if.end7.i100, label %cleanup

if.end7.i100:                                     ; preds = %if.end3.i97
  %arr1.i98 = getelementptr inbounds %struct.EState, %struct.EState* %.pr, i64 0, i32 4
  %57 = load i32*, i32** %arr1.i98, align 8
  %cmp8.i99 = icmp eq i32* %57, null
  br i1 %cmp8.i99, label %if.end11.i106, label %if.then9.i103

if.then9.i103:                                    ; preds = %if.end7.i100
  %58 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %59 = load i8*, i8** %opaque, align 8
  %60 = bitcast i32* %57 to i8*
  call void %58(i8* %59, i8* %60) #10
  br label %if.end11.i106

if.end11.i106:                                    ; preds = %if.then9.i103, %if.end7.i100
  %arr2.i104 = getelementptr inbounds %struct.EState, %struct.EState* %.pr, i64 0, i32 5
  %61 = load i32*, i32** %arr2.i104, align 8
  %cmp12.i105 = icmp eq i32* %61, null
  br i1 %cmp12.i105, label %if.end17.i113, label %if.then13.i109

if.then13.i109:                                   ; preds = %if.end11.i106
  %62 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %63 = load i8*, i8** %opaque, align 8
  %64 = bitcast i32* %61 to i8*
  call void %62(i8* %63, i8* %64) #10
  br label %if.end17.i113

if.end17.i113:                                    ; preds = %if.then13.i109, %if.end11.i106
  %ftab.i110 = getelementptr inbounds %struct.EState, %struct.EState* %.pr, i64 0, i32 6
  %65 = load i32*, i32** %ftab.i110, align 8
  %cmp18.i111 = icmp eq i32* %65, null
  br i1 %cmp18.i111, label %if.end23.i119, label %if.then19.i117

if.then19.i117:                                   ; preds = %if.end17.i113
  %66 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %67 = load i8*, i8** %opaque, align 8
  %68 = bitcast i32* %65 to i8*
  call void %66(i8* %67, i8* %68) #10
  br label %if.end23.i119

if.end23.i119:                                    ; preds = %if.end17.i113, %if.then19.i117
  %69 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %70 = load i8*, i8** %opaque, align 8
  %71 = load i8*, i8** %state.i, align 8
  call void %69(i8* %70, i8* %71) #10
  store i8* null, i8** %state.i, align 8
  br label %cleanup

cleanup:                                          ; preds = %if.end21, %if.end23.i119, %if.end3.i97, %errhandler, %if.end23.i90, %if.end3.i68, %output_overflow, %if.end23.i, %if.end3.i61, %if.end28, %if.end, %entry
  %retval.0 = phi i32 [ -2, %entry ], [ %call, %if.end ], [ 0, %if.end28 ], [ 0, %if.end3.i61 ], [ 0, %if.end23.i ], [ -8, %output_overflow ], [ -8, %if.end3.i68 ], [ -8, %if.end23.i90 ], [ %retval.0.i.ph.ph, %errhandler ], [ %retval.0.i.ph.ph, %if.end3.i97 ], [ %retval.0.i.ph.ph, %if.end23.i119 ], [ -2, %if.end21 ]
  call void @llvm.lifetime.end(i64 80, i8* %0) #10
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @BZ2_bzBuffToBuffDecompress(i8* %dest, i32* %destLen, i8* %source, i32 %sourceLen, i32 %small, i32 %verbosity) #4 {
entry:
  %strm = alloca %struct.bz_stream, align 8
  %0 = bitcast %struct.bz_stream* %strm to i8*
  call void @llvm.lifetime.start(i64 80, i8* %0) #10
  %cmp = icmp eq i8* %dest, null
  %cmp1 = icmp eq i32* %destLen, null
  %or.cond = or i1 %cmp, %cmp1
  %cmp3 = icmp eq i8* %source, null
  %or.cond30 = or i1 %or.cond, %cmp3
  br i1 %or.cond30, label %cleanup, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %entry
  %small.cmp = icmp ugt i32 %small, 1
  %1 = icmp ugt i32 %verbosity, 4
  %2 = or i1 %small.cmp, %1
  br i1 %2, label %cleanup, label %if.end18.i

if.end18.i:                                       ; preds = %lor.lhs.false4
  %bzalloc = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 9
  %bzfree = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 10
  %opaque = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 11
  %3 = bitcast i8* (i8*, i32, i32)** %bzalloc to i8*
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 24, i32 8, i1 false)
  store i8* (i8*, i32, i32)* @default_bzalloc, i8* (i8*, i32, i32)** %bzalloc, align 8
  store void (i8*, i8*)* @default_bzfree, void (i8*, i8*)** %bzfree, align 8
  %call.i = tail call noalias i8* @malloc(i64 64144) #10
  %cmp21.i = icmp eq i8* %call.i, null
  br i1 %cmp21.i, label %cleanup, label %if.end13

if.end13:                                         ; preds = %if.end18.i
  %strm24.i = bitcast i8* %call.i to %struct.bz_stream**
  store %struct.bz_stream* %strm, %struct.bz_stream** %strm24.i, align 8
  %state.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 8
  store i8* %call.i, i8** %state.i, align 8
  %state25.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %4 = bitcast i8* %state25.i to i32*
  store i32 10, i32* %4, align 8
  %bsLive.i = getelementptr inbounds i8, i8* %call.i, i64 36
  %5 = bitcast i8* %bsLive.i to i32*
  store i32 0, i32* %5, align 4
  %bsBuff.i = getelementptr inbounds i8, i8* %call.i, i64 32
  %6 = bitcast i8* %bsBuff.i to i32*
  store i32 0, i32* %6, align 8
  %calculatedCombinedCRC.i = getelementptr inbounds i8, i8* %call.i, i64 3188
  %7 = bitcast i8* %calculatedCombinedCRC.i to i32*
  store i32 0, i32* %7, align 4
  %total_in_lo32.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 2
  store i32 0, i32* %total_in_lo32.i, align 4
  %total_in_hi32.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 3
  store i32 0, i32* %total_in_hi32.i, align 8
  %total_out_lo32.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 6
  store i32 0, i32* %total_out_lo32.i, align 4
  %total_out_hi32.i = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 7
  store i32 0, i32* %total_out_hi32.i, align 8
  %conv.i = trunc i32 %small to i8
  %8 = getelementptr inbounds i8, i8* %call.i, i64 44
  store i8 %conv.i, i8* %8, align 4
  %tt.i = getelementptr inbounds i8, i8* %call.i, i64 3152
  %currBlockNo.i = getelementptr inbounds i8, i8* %call.i, i64 48
  %9 = bitcast i8* %currBlockNo.i to i32*
  store i32 0, i32* %9, align 8
  %verbosity26.i = getelementptr inbounds i8, i8* %call.i, i64 52
  %10 = bitcast i8* %verbosity26.i to i32*
  call void @llvm.memset.p0i8.i64(i8* %tt.i, i8 0, i64 24, i32 8, i1 false) #10
  store i32 %verbosity, i32* %10, align 4
  %next_in = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 0
  store i8* %source, i8** %next_in, align 8
  %next_out = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 4
  store i8* %dest, i8** %next_out, align 8
  %avail_in = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 1
  store i32 %sourceLen, i32* %avail_in, align 8
  %11 = load i32, i32* %destLen, align 4
  %avail_out = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %strm, i64 0, i32 5
  store i32 %11, i32* %avail_out, align 8
  %call14 = call i32 @BZ2_bzDecompress(%struct.bz_stream* nonnull %strm)
  switch i32 %call14, label %errhandler [
    i32 0, label %output_overflow_or_eof
    i32 4, label %if.end20
  ]

if.end20:                                         ; preds = %if.end13
  %12 = load i32, i32* %avail_out, align 8
  %13 = load i32, i32* %destLen, align 4
  %sub = sub i32 %13, %12
  store i32 %sub, i32* %destLen, align 4
  %14 = bitcast i8** %state.i to %struct.DState**
  %15 = load %struct.DState*, %struct.DState** %14, align 8
  %cmp1.i = icmp eq %struct.DState* %15, null
  br i1 %cmp1.i, label %cleanup, label %if.end3.i

if.end3.i:                                        ; preds = %if.end20
  %strm4.i = getelementptr inbounds %struct.DState, %struct.DState* %15, i64 0, i32 0
  %16 = load %struct.bz_stream*, %struct.bz_stream** %strm4.i, align 8
  %cmp5.i = icmp eq %struct.bz_stream* %16, %strm
  br i1 %cmp5.i, label %if.end7.i, label %cleanup

if.end7.i:                                        ; preds = %if.end3.i
  %tt.i48 = getelementptr inbounds %struct.DState, %struct.DState* %15, i64 0, i32 20
  %17 = load i32*, i32** %tt.i48, align 8
  %cmp8.i = icmp eq i32* %17, null
  br i1 %cmp8.i, label %if.end11.i, label %if.then9.i

if.then9.i:                                       ; preds = %if.end7.i
  %18 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %19 = load i8*, i8** %opaque, align 8
  %20 = bitcast i32* %17 to i8*
  call void %18(i8* %19, i8* %20) #10
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then9.i, %if.end7.i
  %ll16.i = getelementptr inbounds %struct.DState, %struct.DState* %15, i64 0, i32 21
  %21 = load i16*, i16** %ll16.i, align 8
  %cmp12.i = icmp eq i16* %21, null
  br i1 %cmp12.i, label %if.end17.i, label %if.then13.i

if.then13.i:                                      ; preds = %if.end11.i
  %22 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %23 = load i8*, i8** %opaque, align 8
  %24 = bitcast i16* %21 to i8*
  call void %22(i8* %23, i8* %24) #10
  br label %if.end17.i

if.end17.i:                                       ; preds = %if.then13.i, %if.end11.i
  %ll4.i = getelementptr inbounds %struct.DState, %struct.DState* %15, i64 0, i32 22
  %25 = load i8*, i8** %ll4.i, align 8
  %cmp18.i = icmp eq i8* %25, null
  br i1 %cmp18.i, label %if.end23.i51, label %if.then19.i

if.then19.i:                                      ; preds = %if.end17.i
  %26 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %27 = load i8*, i8** %opaque, align 8
  call void %26(i8* %27, i8* nonnull %25) #10
  br label %if.end23.i51

if.end23.i51:                                     ; preds = %if.end17.i, %if.then19.i
  %28 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %29 = load i8*, i8** %opaque, align 8
  %30 = load i8*, i8** %state.i, align 8
  call void %28(i8* %29, i8* %30) #10
  store i8* null, i8** %state.i, align 8
  br label %cleanup

output_overflow_or_eof:                           ; preds = %if.end13
  %31 = load i32, i32* %avail_out, align 8
  %cmp24 = icmp eq i32 %31, 0
  %32 = bitcast i8** %state.i to %struct.DState**
  %33 = load %struct.DState*, %struct.DState** %32, align 8
  %cmp1.i54 = icmp eq %struct.DState* %33, null
  br i1 %cmp1.i54, label %BZ2_bzDecompressEnd.exit81, label %if.end3.i57

if.end3.i57:                                      ; preds = %output_overflow_or_eof
  %strm4.i55 = getelementptr inbounds %struct.DState, %struct.DState* %33, i64 0, i32 0
  %34 = load %struct.bz_stream*, %struct.bz_stream** %strm4.i55, align 8
  %cmp5.i56 = icmp eq %struct.bz_stream* %34, %strm
  br i1 %cmp5.i56, label %if.end7.i60, label %BZ2_bzDecompressEnd.exit81

if.end7.i60:                                      ; preds = %if.end3.i57
  %tt.i58 = getelementptr inbounds %struct.DState, %struct.DState* %33, i64 0, i32 20
  %35 = load i32*, i32** %tt.i58, align 8
  %cmp8.i59 = icmp eq i32* %35, null
  br i1 %cmp8.i59, label %if.end11.i66, label %if.then9.i63

if.then9.i63:                                     ; preds = %if.end7.i60
  %36 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %37 = load i8*, i8** %opaque, align 8
  %38 = bitcast i32* %35 to i8*
  call void %36(i8* %37, i8* %38) #10
  br label %if.end11.i66

if.end11.i66:                                     ; preds = %if.then9.i63, %if.end7.i60
  %ll16.i64 = getelementptr inbounds %struct.DState, %struct.DState* %33, i64 0, i32 21
  %39 = load i16*, i16** %ll16.i64, align 8
  %cmp12.i65 = icmp eq i16* %39, null
  br i1 %cmp12.i65, label %if.end17.i73, label %if.then13.i69

if.then13.i69:                                    ; preds = %if.end11.i66
  %40 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %41 = load i8*, i8** %opaque, align 8
  %42 = bitcast i16* %39 to i8*
  call void %40(i8* %41, i8* %42) #10
  br label %if.end17.i73

if.end17.i73:                                     ; preds = %if.then13.i69, %if.end11.i66
  %ll4.i70 = getelementptr inbounds %struct.DState, %struct.DState* %33, i64 0, i32 22
  %43 = load i8*, i8** %ll4.i70, align 8
  %cmp18.i71 = icmp eq i8* %43, null
  br i1 %cmp18.i71, label %if.end23.i79, label %if.then19.i77

if.then19.i77:                                    ; preds = %if.end17.i73
  %44 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %45 = load i8*, i8** %opaque, align 8
  call void %44(i8* %45, i8* nonnull %43) #10
  br label %if.end23.i79

if.end23.i79:                                     ; preds = %if.end17.i73, %if.then19.i77
  %46 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %47 = load i8*, i8** %opaque, align 8
  %48 = load i8*, i8** %state.i, align 8
  call void %46(i8* %47, i8* %48) #10
  store i8* null, i8** %state.i, align 8
  br label %BZ2_bzDecompressEnd.exit81

BZ2_bzDecompressEnd.exit81:                       ; preds = %output_overflow_or_eof, %if.end3.i57, %if.end23.i79
  %. = select i1 %cmp24, i32 -8, i32 -7
  br label %cleanup

errhandler:                                       ; preds = %if.end13
  %49 = bitcast i8** %state.i to %struct.DState**
  %50 = load %struct.DState*, %struct.DState** %49, align 8
  %cmp1.i83 = icmp eq %struct.DState* %50, null
  br i1 %cmp1.i83, label %cleanup, label %if.end3.i86

if.end3.i86:                                      ; preds = %errhandler
  %strm4.i84 = getelementptr inbounds %struct.DState, %struct.DState* %50, i64 0, i32 0
  %51 = load %struct.bz_stream*, %struct.bz_stream** %strm4.i84, align 8
  %cmp5.i85 = icmp eq %struct.bz_stream* %51, %strm
  br i1 %cmp5.i85, label %if.end7.i89, label %cleanup

if.end7.i89:                                      ; preds = %if.end3.i86
  %tt.i87 = getelementptr inbounds %struct.DState, %struct.DState* %50, i64 0, i32 20
  %52 = load i32*, i32** %tt.i87, align 8
  %cmp8.i88 = icmp eq i32* %52, null
  br i1 %cmp8.i88, label %if.end11.i95, label %if.then9.i92

if.then9.i92:                                     ; preds = %if.end7.i89
  %53 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %54 = load i8*, i8** %opaque, align 8
  %55 = bitcast i32* %52 to i8*
  call void %53(i8* %54, i8* %55) #10
  br label %if.end11.i95

if.end11.i95:                                     ; preds = %if.then9.i92, %if.end7.i89
  %ll16.i93 = getelementptr inbounds %struct.DState, %struct.DState* %50, i64 0, i32 21
  %56 = load i16*, i16** %ll16.i93, align 8
  %cmp12.i94 = icmp eq i16* %56, null
  br i1 %cmp12.i94, label %if.end17.i102, label %if.then13.i98

if.then13.i98:                                    ; preds = %if.end11.i95
  %57 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %58 = load i8*, i8** %opaque, align 8
  %59 = bitcast i16* %56 to i8*
  call void %57(i8* %58, i8* %59) #10
  br label %if.end17.i102

if.end17.i102:                                    ; preds = %if.then13.i98, %if.end11.i95
  %ll4.i99 = getelementptr inbounds %struct.DState, %struct.DState* %50, i64 0, i32 22
  %60 = load i8*, i8** %ll4.i99, align 8
  %cmp18.i100 = icmp eq i8* %60, null
  br i1 %cmp18.i100, label %if.end23.i108, label %if.then19.i106

if.then19.i106:                                   ; preds = %if.end17.i102
  %61 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %62 = load i8*, i8** %opaque, align 8
  call void %61(i8* %62, i8* nonnull %60) #10
  br label %if.end23.i108

if.end23.i108:                                    ; preds = %if.end17.i102, %if.then19.i106
  %63 = load void (i8*, i8*)*, void (i8*, i8*)** %bzfree, align 8
  %64 = load i8*, i8** %opaque, align 8
  %65 = load i8*, i8** %state.i, align 8
  call void %63(i8* %64, i8* %65) #10
  store i8* null, i8** %state.i, align 8
  br label %cleanup

cleanup:                                          ; preds = %if.end23.i108, %if.end3.i86, %errhandler, %if.end23.i51, %if.end3.i, %if.end20, %if.end18.i, %BZ2_bzDecompressEnd.exit81, %entry, %lor.lhs.false4
  %retval.0 = phi i32 [ -2, %lor.lhs.false4 ], [ -2, %entry ], [ %., %BZ2_bzDecompressEnd.exit81 ], [ -3, %if.end18.i ], [ 0, %if.end20 ], [ 0, %if.end3.i ], [ 0, %if.end23.i51 ], [ %call14, %errhandler ], [ %call14, %if.end3.i86 ], [ %call14, %if.end23.i108 ]
  call void @llvm.lifetime.end(i64 80, i8* %0) #10
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i8* @BZ2_bzopen(i8* readonly %path, i8* readonly %mode) #4 {
entry:
  %call = tail call fastcc i8* @bzopen_or_bzdopen(i8* %path, i8* %mode, i32 0)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define internal fastcc i8* @bzopen_or_bzdopen(i8* readonly %path, i8* readonly %mode, i32 %open_mode) unnamed_addr #4 {
entry:
  %mode2 = alloca [10 x i8], align 1
  %0 = getelementptr inbounds [10 x i8], [10 x i8]* %mode2, i64 0, i64 0
  call void @llvm.lifetime.start(i64 10, i8* %0) #10
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 10, i32 1, i1 false)
  %cmp = icmp eq i8* %mode, null
  br i1 %cmp, label %cleanup, label %while.cond.preheader

while.cond.preheader:                             ; preds = %entry
  %1 = load i8, i8* %mode, align 1
  %tobool6 = icmp eq i8 %1, 0
  br i1 %tobool6, label %while.end, label %while.body

while.body:                                       ; preds = %while.cond.preheader, %sw.epilog
  %2 = phi i8 [ %5, %sw.epilog ], [ %1, %while.cond.preheader ]
  %mode.addr.010 = phi i8* [ %incdec.ptr, %sw.epilog ], [ %mode, %while.cond.preheader ]
  %blockSize100k.09 = phi i32 [ %blockSize100k.1, %sw.epilog ], [ 9, %while.cond.preheader ]
  %writing.08 = phi i32 [ %writing.1, %sw.epilog ], [ 0, %while.cond.preheader ]
  %conv = sext i8 %2 to i32
  switch i32 %conv, label %sw.default [
    i32 114, label %sw.epilog
    i32 119, label %sw.bb1
    i32 115, label %sw.bb2
  ]

sw.bb1:                                           ; preds = %while.body
  br label %sw.epilog

sw.bb2:                                           ; preds = %while.body
  br label %sw.epilog

sw.default:                                       ; preds = %while.body
  %idxprom = sext i8 %2 to i64
  %call = tail call i16** @__ctype_b_loc() #14
  %3 = load i16*, i16** %call, align 8
  %arrayidx = getelementptr inbounds i16, i16* %3, i64 %idxprom
  %4 = load i16, i16* %arrayidx, align 2
  %and = and i16 %4, 2048
  %tobool5 = icmp eq i16 %and, 0
  %sub = add nsw i32 %conv, -48
  %blockSize100k.0.sub = select i1 %tobool5, i32 %blockSize100k.09, i32 %sub
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %while.body, %sw.bb2, %sw.bb1
  %writing.1 = phi i32 [ %writing.08, %sw.bb2 ], [ 1, %sw.bb1 ], [ 0, %while.body ], [ %writing.08, %sw.default ]
  %blockSize100k.1 = phi i32 [ %blockSize100k.09, %sw.bb2 ], [ %blockSize100k.09, %sw.bb1 ], [ %blockSize100k.09, %while.body ], [ %blockSize100k.0.sub, %sw.default ]
  %incdec.ptr = getelementptr inbounds i8, i8* %mode.addr.010, i64 1
  %5 = load i8, i8* %incdec.ptr, align 1
  %tobool = icmp eq i8 %5, 0
  br i1 %tobool, label %while.end, label %while.body

while.end:                                        ; preds = %sw.epilog, %while.cond.preheader
  %blockSize100k.0.lcssa = phi i32 [ 9, %while.cond.preheader ], [ %blockSize100k.1, %sw.epilog ]
  %writing.0.lcssa = phi i32 [ 0, %while.cond.preheader ], [ %writing.1, %sw.epilog ]
  %tobool9 = icmp ne i32 %writing.0.lcssa, 0
  %strlen = call i64 @strlen(i8* %0)
  %endptr = getelementptr [10 x i8], [10 x i8]* %mode2, i64 0, i64 %strlen
  %6 = bitcast i8* %endptr to i16*
  %7 = select i1 %tobool9, i16 119, i16 114
  store i16 %7, i16* %6, align 1
  %strlen1 = call i64 @strlen(i8* %0)
  %endptr2 = getelementptr [10 x i8], [10 x i8]* %mode2, i64 0, i64 %strlen1
  %8 = bitcast i8* %endptr2 to i16*
  store i16 98, i16* %8, align 1
  %cmp13 = icmp eq i32 %open_mode, 0
  br i1 %cmp13, label %if.then15, label %cleanup

if.then15:                                        ; preds = %while.end
  %cmp16 = icmp eq i8* %path, null
  br i1 %cmp16, label %if.end70, label %if.end58

if.end58:                                         ; preds = %if.then15
  %9 = load i8, i8* %path, align 1
  %phitmp = icmp eq i8 %9, 0
  br i1 %phitmp, label %if.end70, label %cleanup

if.end70:                                         ; preds = %if.then15, %if.end58
  %cond67 = zext i1 %tobool9 to i32
  br i1 %tobool9, label %if.then76, label %cleanup

if.then76:                                        ; preds = %if.end70
  %cmp77 = icmp slt i32 %blockSize100k.0.lcssa, 1
  %.blockSize100k.0 = select i1 %cmp77, i32 1, i32 %blockSize100k.0.lcssa
  %cmp81 = icmp sgt i32 %.blockSize100k.0, 9
  %blockSize100k.3 = select i1 %cmp81, i32 9, i32 %.blockSize100k.0
  %blockSize100k.off.i = add i32 %blockSize100k.3, -1
  %10 = icmp ugt i32 %blockSize100k.off.i, 8
  br i1 %10, label %cleanup, label %if.end24.i

if.end24.i:                                       ; preds = %if.then76
  %call.i = tail call noalias i8* @malloc(i64 5104) #10
  %cmp25.i = icmp eq i8* %call.i, null
  br i1 %cmp25.i, label %cleanup, label %if.end34.i

if.end34.i:                                       ; preds = %if.end24.i
  %lastErr40.i = getelementptr inbounds i8, i8* %call.i, i64 5096
  %11 = bitcast i8* %lastErr40.i to i32*
  store i32 0, i32* %11, align 8
  %12 = getelementptr inbounds i8, i8* %call.i, i64 5100
  store i8 0, i8* %12, align 4
  %bufN.i = getelementptr inbounds i8, i8* %call.i, i64 5004
  %13 = bitcast i8* %bufN.i to i32*
  store i32 0, i32* %13, align 4
  %handle.i = bitcast i8* %call.i to i32*
  store i32 %cond67, i32* %handle.i, align 8
  %14 = getelementptr inbounds i8, i8* %call.i, i64 5008
  store i8 1, i8* %14, align 8
  %strm.i = getelementptr inbounds i8, i8* %call.i, i64 5016
  %15 = bitcast i8* %strm.i to %struct.bz_stream*
  %bzalloc.i = getelementptr inbounds i8, i8* %call.i, i64 5072
  tail call void @llvm.memset.p0i8.i64(i8* %bzalloc.i, i8 0, i64 24, i32 8, i1 false) #10
  %call48.i = tail call i32 @BZ2_bzCompressInit(%struct.bz_stream* %15, i32 %blockSize100k.3, i32 0, i32 30) #10
  %cmp49.i = icmp eq i32 %call48.i, 0
  br i1 %cmp49.i, label %if.end58.i, label %if.then50.i

if.then50.i:                                      ; preds = %if.end34.i
  tail call void @free(i8* nonnull %call.i) #10
  br label %cleanup

if.end58.i:                                       ; preds = %if.end34.i
  %avail_in.i = getelementptr inbounds i8, i8* %call.i, i64 5024
  %16 = bitcast i8* %avail_in.i to i32*
  store i32 0, i32* %16, align 8
  store i8 1, i8* %12, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end24.i, %if.then76, %if.then50.i, %if.end58.i, %if.end70, %while.end, %if.end58, %entry
  %retval.0 = phi i8* [ null, %entry ], [ null, %if.end70 ], [ null, %if.end58 ], [ null, %while.end ], [ null, %if.then50.i ], [ %call.i, %if.end58.i ], [ null, %if.then76 ], [ null, %if.end24.i ]
  call void @llvm.lifetime.end(i64 10, i8* %0) #10
  ret i8* %retval.0
}

; Function Attrs: nounwind uwtable
define i8* @BZ2_bzdopen(i32 %fd, i8* readonly %mode) #4 {
entry:
  %call = tail call fastcc i8* @bzopen_or_bzdopen(i8* null, i8* %mode, i32 1)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define i32 @BZ2_bzread(i8* %b, i8* %buf, i32 %len) #4 {
entry:
  %bzerr = alloca i32, align 4
  %0 = bitcast i32* %bzerr to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #10
  %lastErr = getelementptr inbounds i8, i8* %b, i64 5096
  %1 = bitcast i8* %lastErr to i32*
  %2 = load i32, i32* %1, align 8
  %cmp = icmp eq i32 %2, 4
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %call = call i32 @BZ2_bzRead(i32* nonnull %bzerr, i8* nonnull %b, i8* %buf, i32 %len)
  %3 = load i32, i32* %bzerr, align 4
  %4 = or i32 %3, 4
  %5 = icmp eq i32 %4, 4
  %call. = select i1 %5, i32 %call, i32 -1
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ %call., %if.end ]
  call void @llvm.lifetime.end(i64 4, i8* %0) #10
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @BZ2_bzwrite(i8* %b, i8* %buf, i32 %len) #4 {
entry:
  %bzerr = alloca i32, align 4
  %0 = bitcast i32* %bzerr to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #10
  call void @BZ2_bzWrite(i32* nonnull %bzerr, i8* %b, i8* %buf, i32 %len)
  %1 = load i32, i32* %bzerr, align 4
  %cmp = icmp eq i32 %1, 0
  %len. = select i1 %cmp, i32 %len, i32 -1
  call void @llvm.lifetime.end(i64 4, i8* %0) #10
  ret i32 %len.
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @BZ2_bzflush(i8* nocapture readnone %b) #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind uwtable
define void @BZ2_bzclose(i8* %b) #4 {
entry:
  %bzerr = alloca i32, align 4
  %0 = bitcast i32* %bzerr to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #10
  %cmp = icmp eq i8* %b, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %1 = getelementptr inbounds i8, i8* %b, i64 5008
  %2 = load i8, i8* %1, align 8
  %tobool = icmp eq i8 %2, 0
  br i1 %tobool, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @BZ2_bzWriteClose64(i32* nonnull %bzerr, i8* nonnull %b, i32 0, i32* null, i32* null, i32* null, i32* null) #10
  %3 = load i32, i32* %bzerr, align 4
  %cmp2 = icmp eq i32 %3, 0
  br i1 %cmp2, label %cleanup, label %if.end6.i

if.end6.i:                                        ; preds = %if.then1
  %4 = load i8, i8* %1, align 8
  %tobool.i = icmp eq i8 %4, 0
  %lastErr13.i = getelementptr inbounds i8, i8* %b, i64 5096
  %5 = bitcast i8* %lastErr13.i to i32*
  br i1 %tobool.i, label %if.then7.i, label %if.end15.i

if.then7.i:                                       ; preds = %if.end6.i
  store i32 -1, i32* %5, align 8
  br label %cleanup

if.end15.i:                                       ; preds = %if.end6.i
  store i32 0, i32* %5, align 8
  %state.i159.i = getelementptr inbounds i8, i8* %b, i64 5064
  %6 = bitcast i8* %state.i159.i to i8**
  %7 = bitcast i8* %state.i159.i to %struct.EState**
  %8 = load %struct.EState*, %struct.EState** %7, align 8
  %cmp1.i160.i = icmp eq %struct.EState* %8, null
  br i1 %cmp1.i160.i, label %BZ2_bzCompressEnd.exit.i, label %if.end3.i164.i

if.end3.i164.i:                                   ; preds = %if.end15.i
  %strm96.i = getelementptr inbounds i8, i8* %b, i64 5016
  %9 = bitcast i8* %strm96.i to %struct.bz_stream*
  %strm4.i162.i = getelementptr inbounds %struct.EState, %struct.EState* %8, i64 0, i32 0
  %10 = load %struct.bz_stream*, %struct.bz_stream** %strm4.i162.i, align 8
  %cmp5.i163.i = icmp eq %struct.bz_stream* %10, %9
  br i1 %cmp5.i163.i, label %if.end7.i.i, label %BZ2_bzCompressEnd.exit.i

if.end7.i.i:                                      ; preds = %if.end3.i164.i
  %arr1.i.i = getelementptr inbounds %struct.EState, %struct.EState* %8, i64 0, i32 4
  %11 = load i32*, i32** %arr1.i.i, align 8
  %cmp8.i.i = icmp eq i32* %11, null
  %.pre = getelementptr inbounds i8, i8* %b, i64 5080
  %.pre17 = bitcast i8* %.pre to void (i8*, i8*)**
  br i1 %cmp8.i.i, label %if.end11.i.i, label %if.then9.i.i

if.then9.i.i:                                     ; preds = %if.end7.i.i
  %12 = load void (i8*, i8*)*, void (i8*, i8*)** %.pre17, align 8
  %opaque.i.i = getelementptr inbounds i8, i8* %b, i64 5088
  %13 = bitcast i8* %opaque.i.i to i8**
  %14 = load i8*, i8** %13, align 8
  %15 = bitcast i32* %11 to i8*
  call void %12(i8* %14, i8* %15) #10
  br label %if.end11.i.i

if.end11.i.i:                                     ; preds = %if.end7.i.i, %if.then9.i.i
  %arr2.i.i = getelementptr inbounds %struct.EState, %struct.EState* %8, i64 0, i32 5
  %16 = load i32*, i32** %arr2.i.i, align 8
  %cmp12.i.i = icmp eq i32* %16, null
  br i1 %cmp12.i.i, label %if.end17.i.i, label %if.then13.i.i

if.then13.i.i:                                    ; preds = %if.end11.i.i
  %17 = load void (i8*, i8*)*, void (i8*, i8*)** %.pre17, align 8
  %opaque15.i.i = getelementptr inbounds i8, i8* %b, i64 5088
  %18 = bitcast i8* %opaque15.i.i to i8**
  %19 = load i8*, i8** %18, align 8
  %20 = bitcast i32* %16 to i8*
  call void %17(i8* %19, i8* %20) #10
  br label %if.end17.i.i

if.end17.i.i:                                     ; preds = %if.then13.i.i, %if.end11.i.i
  %ftab.i.i = getelementptr inbounds %struct.EState, %struct.EState* %8, i64 0, i32 6
  %21 = load i32*, i32** %ftab.i.i, align 8
  %cmp18.i.i = icmp eq i32* %21, null
  br i1 %cmp18.i.i, label %if.end17.if.end23_crit_edge.i.i, label %if.then19.i.i

if.end17.if.end23_crit_edge.i.i:                  ; preds = %if.end17.i.i
  %.pre48.i.i = getelementptr inbounds i8, i8* %b, i64 5088
  %22 = bitcast i8* %.pre48.i.i to i8**
  br label %if.end23.i.i

if.then19.i.i:                                    ; preds = %if.end17.i.i
  %23 = load void (i8*, i8*)*, void (i8*, i8*)** %.pre17, align 8
  %opaque21.i.i = getelementptr inbounds i8, i8* %b, i64 5088
  %24 = bitcast i8* %opaque21.i.i to i8**
  %25 = load i8*, i8** %24, align 8
  %26 = bitcast i32* %21 to i8*
  call void %23(i8* %25, i8* %26) #10
  br label %if.end23.i.i

if.end23.i.i:                                     ; preds = %if.then19.i.i, %if.end17.if.end23_crit_edge.i.i
  %opaque25.pre-phi.i.i = phi i8** [ %22, %if.end17.if.end23_crit_edge.i.i ], [ %24, %if.then19.i.i ]
  %27 = load void (i8*, i8*)*, void (i8*, i8*)** %.pre17, align 8
  %28 = load i8*, i8** %opaque25.pre-phi.i.i, align 8
  %29 = load i8*, i8** %6, align 8
  call void %27(i8* %28, i8* %29) #10
  br label %BZ2_bzCompressEnd.exit.i

BZ2_bzCompressEnd.exit.i:                         ; preds = %if.end23.i.i, %if.end3.i164.i, %if.end15.i
  call void @free(i8* nonnull %b) #10
  br label %cleanup

if.else:                                          ; preds = %if.end
  call void @BZ2_bzReadClose(i32* nonnull %bzerr, i8* nonnull %b)
  br label %cleanup

cleanup:                                          ; preds = %BZ2_bzCompressEnd.exit.i, %if.then7.i, %if.else, %if.then1, %entry
  call void @llvm.lifetime.end(i64 4, i8* %0) #10
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define i8* @BZ2_bzerror(i8* nocapture readonly %b, i32* nocapture %errnum) #8 {
entry:
  %lastErr = getelementptr inbounds i8, i8* %b, i64 5096
  %0 = bitcast i8* %lastErr to i32*
  %1 = load i32, i32* %0, align 8
  %cmp = icmp sgt i32 %1, 0
  %. = select i1 %cmp, i32 0, i32 %1
  store i32 %., i32* %errnum, align 4
  %mul = sub nsw i32 0, %.
  %idxprom = sext i32 %mul to i64
  %arrayidx = getelementptr inbounds [16 x i8*], [16 x i8*]* @bzerrorstrings, i64 0, i64 %idxprom
  %2 = load i8*, i8** %arrayidx, align 8
  ret i8* %2
}

declare void @BZ2_compressBlock(%struct.EState*, i8 zeroext) #7

; Function Attrs: norecurse nounwind uwtable
define internal fastcc void @add_pair_to_block(%struct.EState* nocapture %s) unnamed_addr #8 {
entry:
  %state_in_ch = getelementptr inbounds %struct.EState, %struct.EState* %s, i64 0, i32 13
  %0 = load i32, i32* %state_in_ch, align 4
  %conv = trunc i32 %0 to i8
  %state_in_len = getelementptr inbounds %struct.EState, %struct.EState* %s, i64 0, i32 14
  %1 = load i32, i32* %state_in_len, align 8
  %cmp137 = icmp sgt i32 %1, 0
  br i1 %cmp137, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %blockCRC = getelementptr inbounds %struct.EState, %struct.EState* %s, i64 0, i32 26
  %conv3 = and i32 %0, 255
  %.pre = load i32, i32* %blockCRC, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %2 = phi i32 [ %.pre, %for.body.lr.ph ], [ %xor4, %for.body ]
  %i.0138 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %shl = shl i32 %2, 8
  %shr = lshr i32 %2, 24
  %xor = xor i32 %shr, %conv3
  %idxprom = zext i32 %xor to i64
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @BZ2_crc32Table, i64 0, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4
  %xor4 = xor i32 %shl, %3
  store i32 %xor4, i32* %blockCRC, align 8
  %inc = add nuw nsw i32 %i.0138, 1
  %cmp = icmp slt i32 %inc, %1
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  %idxprom7 = zext i32 %0 to i64
  %arrayidx8 = getelementptr inbounds %struct.EState, %struct.EState* %s, i64 0, i32 22, i64 %idxprom7
  store i8 1, i8* %arrayidx8, align 1
  switch i32 %1, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb14
    i32 3, label %sw.bb27
  ]

sw.bb:                                            ; preds = %for.end
  %nblock = getelementptr inbounds %struct.EState, %struct.EState* %s, i64 0, i32 17
  %4 = load i32, i32* %nblock, align 4
  %idxprom10 = sext i32 %4 to i64
  %block = getelementptr inbounds %struct.EState, %struct.EState* %s, i64 0, i32 9
  %5 = load i8*, i8** %block, align 8
  %arrayidx11 = getelementptr inbounds i8, i8* %5, i64 %idxprom10
  store i8 %conv, i8* %arrayidx11, align 1
  %6 = load i32, i32* %nblock, align 4
  %inc13 = add nsw i32 %6, 1
  store i32 %inc13, i32* %nblock, align 4
  br label %sw.epilog

sw.bb14:                                          ; preds = %for.end
  %nblock15 = getelementptr inbounds %struct.EState, %struct.EState* %s, i64 0, i32 17
  %7 = load i32, i32* %nblock15, align 4
  %idxprom16 = sext i32 %7 to i64
  %block17 = getelementptr inbounds %struct.EState, %struct.EState* %s, i64 0, i32 9
  %8 = load i8*, i8** %block17, align 8
  %arrayidx18 = getelementptr inbounds i8, i8* %8, i64 %idxprom16
  store i8 %conv, i8* %arrayidx18, align 1
  %9 = load i32, i32* %nblock15, align 4
  %inc20 = add nsw i32 %9, 1
  store i32 %inc20, i32* %nblock15, align 4
  %idxprom22 = sext i32 %inc20 to i64
  %10 = load i8*, i8** %block17, align 8
  %arrayidx24 = getelementptr inbounds i8, i8* %10, i64 %idxprom22
  store i8 %conv, i8* %arrayidx24, align 1
  %11 = load i32, i32* %nblock15, align 4
  %inc26 = add nsw i32 %11, 1
  store i32 %inc26, i32* %nblock15, align 4
  br label %sw.epilog

sw.bb27:                                          ; preds = %for.end
  %nblock28 = getelementptr inbounds %struct.EState, %struct.EState* %s, i64 0, i32 17
  %12 = load i32, i32* %nblock28, align 4
  %idxprom29 = sext i32 %12 to i64
  %block30 = getelementptr inbounds %struct.EState, %struct.EState* %s, i64 0, i32 9
  %13 = load i8*, i8** %block30, align 8
  %arrayidx31 = getelementptr inbounds i8, i8* %13, i64 %idxprom29
  store i8 %conv, i8* %arrayidx31, align 1
  %14 = load i32, i32* %nblock28, align 4
  %inc33 = add nsw i32 %14, 1
  store i32 %inc33, i32* %nblock28, align 4
  %idxprom35 = sext i32 %inc33 to i64
  %15 = load i8*, i8** %block30, align 8
  %arrayidx37 = getelementptr inbounds i8, i8* %15, i64 %idxprom35
  store i8 %conv, i8* %arrayidx37, align 1
  %16 = load i32, i32* %nblock28, align 4
  %inc39 = add nsw i32 %16, 1
  store i32 %inc39, i32* %nblock28, align 4
  %idxprom41 = sext i32 %inc39 to i64
  %17 = load i8*, i8** %block30, align 8
  %arrayidx43 = getelementptr inbounds i8, i8* %17, i64 %idxprom41
  store i8 %conv, i8* %arrayidx43, align 1
  %18 = load i32, i32* %nblock28, align 4
  %inc45 = add nsw i32 %18, 1
  store i32 %inc45, i32* %nblock28, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %for.end
  %sub = add nsw i32 %1, -4
  %idxprom47 = sext i32 %sub to i64
  %arrayidx49 = getelementptr inbounds %struct.EState, %struct.EState* %s, i64 0, i32 22, i64 %idxprom47
  store i8 1, i8* %arrayidx49, align 1
  %nblock50 = getelementptr inbounds %struct.EState, %struct.EState* %s, i64 0, i32 17
  %19 = load i32, i32* %nblock50, align 4
  %idxprom51 = sext i32 %19 to i64
  %block52 = getelementptr inbounds %struct.EState, %struct.EState* %s, i64 0, i32 9
  %20 = load i8*, i8** %block52, align 8
  %arrayidx53 = getelementptr inbounds i8, i8* %20, i64 %idxprom51
  store i8 %conv, i8* %arrayidx53, align 1
  %21 = load i32, i32* %nblock50, align 4
  %inc55 = add nsw i32 %21, 1
  store i32 %inc55, i32* %nblock50, align 4
  %idxprom57 = sext i32 %inc55 to i64
  %22 = load i8*, i8** %block52, align 8
  %arrayidx59 = getelementptr inbounds i8, i8* %22, i64 %idxprom57
  store i8 %conv, i8* %arrayidx59, align 1
  %23 = load i32, i32* %nblock50, align 4
  %inc61 = add nsw i32 %23, 1
  store i32 %inc61, i32* %nblock50, align 4
  %idxprom63 = sext i32 %inc61 to i64
  %24 = load i8*, i8** %block52, align 8
  %arrayidx65 = getelementptr inbounds i8, i8* %24, i64 %idxprom63
  store i8 %conv, i8* %arrayidx65, align 1
  %25 = load i32, i32* %nblock50, align 4
  %inc67 = add nsw i32 %25, 1
  store i32 %inc67, i32* %nblock50, align 4
  %idxprom69 = sext i32 %inc67 to i64
  %26 = load i8*, i8** %block52, align 8
  %arrayidx71 = getelementptr inbounds i8, i8* %26, i64 %idxprom69
  store i8 %conv, i8* %arrayidx71, align 1
  %27 = load i32, i32* %nblock50, align 4
  %inc73 = add nsw i32 %27, 1
  store i32 %inc73, i32* %nblock50, align 4
  %28 = load i32, i32* %state_in_len, align 8
  %sub75 = add i32 %28, 252
  %conv76 = trunc i32 %sub75 to i8
  %idxprom78 = sext i32 %inc73 to i64
  %29 = load i8*, i8** %block52, align 8
  %arrayidx80 = getelementptr inbounds i8, i8* %29, i64 %idxprom78
  store i8 %conv76, i8* %arrayidx80, align 1
  %30 = load i32, i32* %nblock50, align 4
  %inc82 = add nsw i32 %30, 1
  store i32 %inc82, i32* %nblock50, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb27, %sw.bb14, %sw.bb
  ret void
}

declare i32 @spec_getc(i32) #7

declare i32 @spec_ungetc(i8 zeroext, i32) #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #5

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() #9

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #10

; Function Attrs: nounwind
declare i32 @fputc(i32, %struct._IO_FILE* nocapture) #10

; Function Attrs: nounwind readonly
declare i64 @strlen(i8* nocapture) #11

attributes #0 = { noreturn nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { norecurse nounwind readonly uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { nounwind readonly }
attributes #12 = { cold }
attributes #13 = { noreturn nounwind }
attributes #14 = { nounwind readnone }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
