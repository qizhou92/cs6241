	.text
	.file	"401.bzip2postpinoo.bc"
	.section	.rodata.cst4,"aM",@progbits,4
	.align	4
.LCPI0_0:
	.long	805306368               # float 4.65661287E-10
	.text
	.globl	ran
	.align	16, 0x90
	.type	ran,@function
ran:                                    # @ran
	.cfi_startproc
# BB#0:                                 # %entry
	movq	seedi(%rip), %rcx
	movabsq	$4730756183288445817, %rdx # imm = 0x41A705AF1FE3FB79
	movq	%rcx, %rax
	imulq	%rdx
	movq	%rdx, %rax
	shrq	$63, %rax
	sarq	$15, %rdx
	addq	%rax, %rdx
	imulq	$127773, %rdx, %rax     # imm = 0x1F31D
	subq	%rax, %rcx
	imulq	$16807, %rcx, %rax      # imm = 0x41A7
	imulq	$-2836, %rdx, %rcx      # imm = 0xFFFFFFFFFFFFF4EC
	leaq	(%rax,%rcx), %rdx
	testq	%rdx, %rdx
	leaq	2147483647(%rax,%rcx), %rax
	cmovgq	%rdx, %rax
	movq	%rax, seedi(%rip)
	cvtsi2ssq	%rax, %xmm0
	mulss	.LCPI0_0(%rip), %xmm0
	cvtss2sd	%xmm0, %xmm0
	retq
.Lfunc_end0:
	.size	ran, .Lfunc_end0-ran
	.cfi_endproc

	.globl	spec_init
	.align	16, 0x90
	.type	spec_init,@function
spec_init:                              # @spec_init
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp0:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp2:
	.cfi_def_cfa_offset 32
.Ltmp3:
	.cfi_offset %rbx, -32
.Ltmp4:
	.cfi_offset %r14, -24
.Ltmp5:
	.cfi_offset %r15, -16
	cmpl	$4, dbglvl(%rip)
	jl	.LBB1_2
# BB#1:                                 # %if.then
	movl	$.Lstr.34, %edi
	callq	puts
.LBB1_2:                                # %for.body.preheader
	movslq	spec_fd(%rip), %r14
	xorps	%xmm0, %xmm0
	movaps	%xmm0, spec_fd(%rip)
	movl	%r14d, spec_fd(%rip)
	leaq	1048576(%r14), %rdi
	callq	malloc
	movq	%rax, spec_fd+16(%rip)
	testq	%rax, %rax
	je	.LBB1_45
# BB#3:                                 # %for.cond19.preheader
	testl	%r14d, %r14d
	jle	.LBB1_16
# BB#4:                                 # %for.body22.preheader
	movb	$0, (%rax)
	cmpl	$1025, %r14d            # imm = 0x401
	jl	.LBB1_16
# BB#5:                                 # %for.body22.for.body22_crit_edge.preheader
	leaq	-1025(%r14), %r15
	movl	%r15d, %eax
	shrl	$10, %eax
	incl	%eax
	movl	$1024, %ebx             # imm = 0x400
	testb	$7, %al
	je	.LBB1_11
# BB#6:                                 # %for.body22.for.body22_crit_edge.prol.preheader
	leal	-1025(%r14), %esi
	shrl	$10, %esi
	incl	%esi
	andl	$7, %esi
	cmpl	$0, "PinFlag-5."(%rip)
	jne	.LBB1_8
# BB#7:
	decq	%rsi
	movl	$.L__unnamed_1, %edi
	movl	$1, %edx
	movl	$9, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-5."(%rip)
.LBB1_8:
	leal	-1025(%r14), %eax
	shrl	$10, %eax
	incl	%eax
	andl	$7, %eax
	negq	%rax
	movl	$1024, %ebx             # imm = 0x400
	.align	16, 0x90
.LBB1_9:                                # %for.body22.for.body22_crit_edge.prol
                                        # =>This Inner Loop Header: Depth=1
	movq	spec_fd+16(%rip), %rcx
	movb	$0, (%rcx,%rbx)
	addq	$1024, %rbx             # imm = 0x400
	incq	%rax
	jne	.LBB1_9
# BB#10:                                # %for.body22.for.body22_crit_edge.preheader.split.loopexit
	movl	$5, %edi
	callq	UnPin
	movl	$0, "PinFlag-5."(%rip)
.LBB1_11:                               # %for.body22.for.body22_crit_edge.preheader.split
	cmpq	$7168, %r15             # imm = 0x1C00
	jb	.LBB1_16
# BB#12:                                # %for.body22.for.body22_crit_edge.preheader.split.split
	leaq	8192(%rbx), %rsi
	cmpq	%r14, %rsi
	cmovlq	%r14, %rsi
	xorl	%eax, %eax
	cmpl	$0, "PinFlag-4."(%rip)
	jne	.LBB1_14
# BB#13:
	decq	%rsi
	subq	%rbx, %rsi
	shrq	$13, %rsi
	movl	$.L__unnamed_2, %edi
	movl	$8, %edx
	movl	$35, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-4."(%rip)
	xorl	%eax, %eax
	.align	16, 0x90
.LBB1_14:                               # %for.body22.for.body22_crit_edge
                                        # =>This Inner Loop Header: Depth=1
	movq	spec_fd+16(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, (%rax,%rcx)
	movq	spec_fd+16(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, 1024(%rax,%rcx)
	movq	spec_fd+16(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, 2048(%rax,%rcx)
	movq	spec_fd+16(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, 3072(%rax,%rcx)
	movq	spec_fd+16(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, 4096(%rax,%rcx)
	movq	spec_fd+16(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, 5120(%rax,%rcx)
	movq	spec_fd+16(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, 6144(%rax,%rcx)
	movq	spec_fd+16(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, 7168(%rax,%rcx)
	leaq	8192(%rbx,%rax), %rcx
	addq	$8192, %rax             # imm = 0x2000
	cmpq	%r14, %rcx
	jl	.LBB1_14
# BB#15:                                # %for.end.loopexit.unr-lcssa
	movl	$4, %edi
	callq	UnPin
	movl	$0, "PinFlag-4."(%rip)
.LBB1_16:                               # %for.end
	movslq	spec_fd+24(%rip), %r14
	xorps	%xmm0, %xmm0
	movups	%xmm0, spec_fd+24(%rip)
	movl	%r14d, spec_fd+24(%rip)
	leaq	1048576(%r14), %rdi
	callq	malloc
	movq	%rax, spec_fd+40(%rip)
	testq	%rax, %rax
	je	.LBB1_45
# BB#17:                                # %for.cond19.preheader.1
	testl	%r14d, %r14d
	jle	.LBB1_30
# BB#18:                                # %for.body22.preheader.1
	movb	$0, (%rax)
	cmpl	$1025, %r14d            # imm = 0x401
	jl	.LBB1_30
# BB#19:                                # %for.body22.1.for.body22.1_crit_edge.preheader
	leaq	-1025(%r14), %r15
	movl	%r15d, %eax
	shrl	$10, %eax
	incl	%eax
	movl	$1024, %ebx             # imm = 0x400
	testb	$7, %al
	je	.LBB1_25
# BB#20:                                # %for.body22.1.for.body22.1_crit_edge.prol.preheader
	leal	-1025(%r14), %esi
	shrl	$10, %esi
	incl	%esi
	andl	$7, %esi
	cmpl	$0, "PinFlag-3."(%rip)
	jne	.LBB1_22
# BB#21:
	decq	%rsi
	movl	$.L__unnamed_3, %edi
	movl	$1, %edx
	movl	$9, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-3."(%rip)
.LBB1_22:
	leal	-1025(%r14), %eax
	shrl	$10, %eax
	incl	%eax
	andl	$7, %eax
	negq	%rax
	movl	$1024, %ebx             # imm = 0x400
	.align	16, 0x90
.LBB1_23:                               # %for.body22.1.for.body22.1_crit_edge.prol
                                        # =>This Inner Loop Header: Depth=1
	movq	spec_fd+40(%rip), %rcx
	movb	$0, (%rcx,%rbx)
	addq	$1024, %rbx             # imm = 0x400
	incq	%rax
	jne	.LBB1_23
# BB#24:                                # %for.body22.1.for.body22.1_crit_edge.preheader.split.loopexit
	movl	$3, %edi
	callq	UnPin
	movl	$0, "PinFlag-3."(%rip)
.LBB1_25:                               # %for.body22.1.for.body22.1_crit_edge.preheader.split
	cmpq	$7168, %r15             # imm = 0x1C00
	jb	.LBB1_30
# BB#26:                                # %for.body22.1.for.body22.1_crit_edge.preheader.split.split
	leaq	8192(%rbx), %rsi
	cmpq	%r14, %rsi
	cmovlq	%r14, %rsi
	xorl	%eax, %eax
	cmpl	$0, "PinFlag-2."(%rip)
	jne	.LBB1_28
# BB#27:
	decq	%rsi
	subq	%rbx, %rsi
	shrq	$13, %rsi
	movl	$.L__unnamed_4, %edi
	movl	$8, %edx
	movl	$35, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-2."(%rip)
	xorl	%eax, %eax
	.align	16, 0x90
.LBB1_28:                               # %for.body22.1.for.body22.1_crit_edge
                                        # =>This Inner Loop Header: Depth=1
	movq	spec_fd+40(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, (%rax,%rcx)
	movq	spec_fd+40(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, 1024(%rax,%rcx)
	movq	spec_fd+40(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, 2048(%rax,%rcx)
	movq	spec_fd+40(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, 3072(%rax,%rcx)
	movq	spec_fd+40(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, 4096(%rax,%rcx)
	movq	spec_fd+40(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, 5120(%rax,%rcx)
	movq	spec_fd+40(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, 6144(%rax,%rcx)
	movq	spec_fd+40(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, 7168(%rax,%rcx)
	leaq	8192(%rbx,%rax), %rcx
	addq	$8192, %rax             # imm = 0x2000
	cmpq	%r14, %rcx
	jl	.LBB1_28
# BB#29:                                # %for.end.1.loopexit.unr-lcssa
	movl	$2, %edi
	callq	UnPin
	movl	$0, "PinFlag-2."(%rip)
.LBB1_30:                               # %for.end.1
	movslq	spec_fd+48(%rip), %r14
	xorps	%xmm0, %xmm0
	movaps	%xmm0, spec_fd+48(%rip)
	movl	%r14d, spec_fd+48(%rip)
	leaq	1048576(%r14), %rdi
	callq	malloc
	movq	%rax, spec_fd+64(%rip)
	testq	%rax, %rax
	je	.LBB1_45
# BB#31:                                # %for.cond19.preheader.2
	testl	%r14d, %r14d
	jle	.LBB1_44
# BB#32:                                # %for.body22.preheader.2
	movb	$0, (%rax)
	cmpl	$1025, %r14d            # imm = 0x401
	jl	.LBB1_44
# BB#33:                                # %for.body22.2.for.body22.2_crit_edge.preheader
	leaq	-1025(%r14), %r15
	movl	%r15d, %eax
	shrl	$10, %eax
	incl	%eax
	movl	$1024, %ebx             # imm = 0x400
	testb	$7, %al
	je	.LBB1_39
# BB#34:                                # %for.body22.2.for.body22.2_crit_edge.prol.preheader
	leal	-1025(%r14), %esi
	shrl	$10, %esi
	incl	%esi
	andl	$7, %esi
	cmpl	$0, "PinFlag-1."(%rip)
	jne	.LBB1_36
# BB#35:
	decq	%rsi
	movl	$.L__unnamed_5, %edi
	movl	$1, %edx
	movl	$9, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-1."(%rip)
.LBB1_36:
	leal	-1025(%r14), %eax
	shrl	$10, %eax
	incl	%eax
	andl	$7, %eax
	negq	%rax
	movl	$1024, %ebx             # imm = 0x400
	.align	16, 0x90
.LBB1_37:                               # %for.body22.2.for.body22.2_crit_edge.prol
                                        # =>This Inner Loop Header: Depth=1
	movq	spec_fd+64(%rip), %rcx
	movb	$0, (%rcx,%rbx)
	addq	$1024, %rbx             # imm = 0x400
	incq	%rax
	jne	.LBB1_37
# BB#38:                                # %for.body22.2.for.body22.2_crit_edge.preheader.split.loopexit
	movl	$1, %edi
	callq	UnPin
	movl	$0, "PinFlag-1."(%rip)
.LBB1_39:                               # %for.body22.2.for.body22.2_crit_edge.preheader.split
	cmpq	$7168, %r15             # imm = 0x1C00
	jb	.LBB1_44
# BB#40:                                # %for.body22.2.for.body22.2_crit_edge.preheader.split.split
	leaq	8192(%rbx), %rsi
	cmpq	%r14, %rsi
	cmovlq	%r14, %rsi
	xorl	%eax, %eax
	cmpl	$0, "PinFlag-0."(%rip)
	jne	.LBB1_42
# BB#41:
	decq	%rsi
	subq	%rbx, %rsi
	shrq	$13, %rsi
	movl	$.L__unnamed_6, %edi
	movl	$8, %edx
	movl	$35, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-0."(%rip)
	xorl	%eax, %eax
	.align	16, 0x90
.LBB1_42:                               # %for.body22.2.for.body22.2_crit_edge
                                        # =>This Inner Loop Header: Depth=1
	movq	spec_fd+64(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, (%rax,%rcx)
	movq	spec_fd+64(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, 1024(%rax,%rcx)
	movq	spec_fd+64(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, 2048(%rax,%rcx)
	movq	spec_fd+64(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, 3072(%rax,%rcx)
	movq	spec_fd+64(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, 4096(%rax,%rcx)
	movq	spec_fd+64(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, 5120(%rax,%rcx)
	movq	spec_fd+64(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, 6144(%rax,%rcx)
	movq	spec_fd+64(%rip), %rcx
	addq	%rbx, %rcx
	movb	$0, 7168(%rax,%rcx)
	leaq	8192(%rbx,%rax), %rcx
	addq	$8192, %rax             # imm = 0x2000
	cmpq	%r14, %rcx
	jl	.LBB1_42
# BB#43:                                # %for.end.2.loopexit.unr-lcssa
	xorl	%edi, %edi
	callq	UnPin
	movl	$0, "PinFlag-0."(%rip)
.LBB1_44:                               # %for.end.2
	xorl	%eax, %eax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB1_45:                               # %if.then16
	movl	$.Lstr, %edi
	callq	puts
	xorl	%edi, %edi
	callq	exit
.Lfunc_end1:
	.size	spec_init, .Lfunc_end1-spec_init
	.cfi_endproc

	.section	.rodata.cst4,"aM",@progbits,4
	.align	4
.LCPI2_0:
	.long	805306368               # float 4.65661287E-10
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI2_1:
	.quad	4629700416936869888     # double 32
.LCPI2_2:
	.quad	4643211215818981376     # double 256
	.text
	.globl	spec_random_load
	.align	16, 0x90
	.type	spec_random_load,@function
spec_random_load:                       # @spec_random_load
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp6:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp7:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp8:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp9:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp10:
	.cfi_def_cfa_offset 48
	subq	$4194304, %rsp          # imm = 0x400000
.Ltmp11:
	.cfi_def_cfa_offset 4194352
.Ltmp12:
	.cfi_offset %rbx, -48
.Ltmp13:
	.cfi_offset %r12, -40
.Ltmp14:
	.cfi_offset %r14, -32
.Ltmp15:
	.cfi_offset %r15, -24
.Ltmp16:
	.cfi_offset %rbp, -16
	movl	%edi, %r14d
	xorl	%ebp, %ebp
	cmpl	$5, dbglvl(%rip)
	jl	.LBB2_5
# BB#1:                                 # %if.then
	movl	$.Lstr.36, %edi
	callq	puts
	xorl	%ebp, %ebp
.LBB2_2:                                # %for.cond
	movl	dbglvl(%rip), %eax
	cmpl	$31, %ebp
	jg	.LBB2_8
# BB#3:                                 # %for.body
	cmpl	$6, %eax
	jl	.LBB2_5
# BB#4:                                 # %if.then3
	movl	$.L.str.3, %edi
	xorl	%eax, %eax
	movl	%ebp, %esi
	callq	printf
.LBB2_5:                                # %for.cond6.preheader
	movq	seedi(%rip), %rcx
	movslq	%ebp, %rax
	shlq	$17, %rax
	leaq	(%rsp,%rax), %rsi
	xorl	%edi, %edi
	movabsq	$4730756183288445817, %rbx # imm = 0x41A705AF1FE3FB79
	movss	.LCPI2_0(%rip), %xmm0   # xmm0 = mem[0],zero,zero,zero
	movsd	.LCPI2_2(%rip), %xmm1   # xmm1 = mem[0],zero
	.align	16, 0x90
.LBB2_6:                                # %for.body8
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %rax
	imulq	%rbx
	movq	%rdx, %rax
	shrq	$63, %rax
	sarq	$15, %rdx
	addq	%rax, %rdx
	imulq	$127773, %rdx, %rax     # imm = 0x1F31D
	subq	%rax, %rcx
	imulq	$16807, %rcx, %rax      # imm = 0x41A7
	imulq	$-2836, %rdx, %rcx      # imm = 0xFFFFFFFFFFFFF4EC
	leaq	(%rax,%rcx), %rdx
	testq	%rdx, %rdx
	leaq	2147483647(%rax,%rcx), %rcx
	cmovgq	%rdx, %rcx
	cvtsi2ssq	%rcx, %xmm2
	mulss	%xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm2
	mulsd	%xmm1, %xmm2
	cvttsd2si	%xmm2, %eax
	movb	%al, (%rsi,%rdi)
	incq	%rdi
	cmpq	$131072, %rdi           # imm = 0x20000
	jne	.LBB2_6
# BB#7:                                 # %for.inc13
	movq	%rcx, seedi(%rip)
	incl	%ebp
	jmp	.LBB2_2
.LBB2_8:                                # %for.end15
	cmpl	$5, %eax
	jl	.LBB2_10
# BB#9:                                 # %if.then18
	movl	$.Lstr.35, %edi
	callq	puts
.LBB2_10:                               # %for.cond21.preheader
	movslq	%r14d, %rax
	leaq	(%rax,%rax,2), %r14
	cmpl	$0, spec_fd(,%r14,8)
	jle	.LBB2_13
# BB#11:                                # %for.body26.lr.ph
	leaq	spec_fd(,%r14,8), %r15
	leaq	spec_fd+16(,%r14,8), %rbx
	xorl	%ebp, %ebp
	movabsq	$4730756183288445817, %r12 # imm = 0x41A705AF1FE3FB79
	.align	16, 0x90
.LBB2_12:                               # %for.body26
                                        # =>This Inner Loop Header: Depth=1
	movq	seedi(%rip), %rcx
	movq	%rcx, %rax
	imulq	%r12
	movq	%rdx, %rax
	shrq	$63, %rax
	sarq	$15, %rdx
	addq	%rax, %rdx
	imulq	$127773, %rdx, %rax     # imm = 0x1F31D
	subq	%rax, %rcx
	imulq	$16807, %rcx, %rax      # imm = 0x41A7
	imulq	$-2836, %rdx, %rcx      # imm = 0xFFFFFFFFFFFFF4EC
	leaq	(%rax,%rcx), %rdx
	testq	%rdx, %rdx
	leaq	2147483647(%rax,%rcx), %rax
	cmovgq	%rdx, %rax
	movq	(%rbx), %rdi
	addq	%rbp, %rdi
	movq	%rax, seedi(%rip)
	cvtsi2ssq	%rax, %xmm0
	mulss	.LCPI2_0(%rip), %xmm0
	cvtss2sd	%xmm0, %xmm0
	mulsd	.LCPI2_1(%rip), %xmm0
	cvttsd2si	%xmm0, %eax
	cltq
	shlq	$17, %rax
	leaq	(%rsp,%rax), %rsi
	movl	$131072, %edx           # imm = 0x20000
	callq	memcpy
	addq	$131072, %rbp           # imm = 0x20000
	movslq	(%r15), %rax
	cmpq	%rax, %rbp
	jl	.LBB2_12
.LBB2_13:                               # %for.end35
	movl	$1048576, spec_fd+4(,%r14,8) # imm = 0x100000
	xorl	%eax, %eax
	addq	$4194304, %rsp          # imm = 0x400000
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end2:
	.size	spec_random_load, .Lfunc_end2-spec_random_load
	.cfi_endproc

	.globl	spec_load
	.align	16, 0x90
	.type	spec_load,@function
spec_load:                              # @spec_load
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp17:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp18:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp19:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp20:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp21:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp22:
	.cfi_def_cfa_offset 56
	pushq	%rax
.Ltmp23:
	.cfi_def_cfa_offset 64
.Ltmp24:
	.cfi_offset %rbx, -56
.Ltmp25:
	.cfi_offset %r12, -48
.Ltmp26:
	.cfi_offset %r13, -40
.Ltmp27:
	.cfi_offset %r14, -32
.Ltmp28:
	.cfi_offset %r15, -24
.Ltmp29:
	.cfi_offset %rbp, -16
	movl	%edx, %r12d
	movq	%rsi, %rcx
	movq	%rcx, (%rsp)            # 8-byte Spill
	movl	%edi, %r15d
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	%rcx, %rdi
	callq	open
	movl	%eax, %r13d
	testl	%r13d, %r13d
	js	.LBB3_1
# BB#3:                                 # %if.end
	movslq	%r15d, %rax
	leaq	(%rax,%rax,2), %r15
	leaq	spec_fd+4(,%r15,8), %rbx
	movq	$0, spec_fd+4(,%r15,8)
	testl	%r12d, %r12d
	jle	.LBB3_9
# BB#4:                                 # %for.body.lr.ph
	leaq	spec_fd+16(,%r15,8), %rbp
	xorl	%r14d, %r14d
	.align	16, 0x90
.LBB3_5:                                # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movslq	%r14d, %rsi
	addq	(%rbp), %rsi
	movl	$131072, %edx           # imm = 0x20000
	movl	%r13d, %edi
	callq	read
	testl	%eax, %eax
	je	.LBB3_9
# BB#6:                                 # %if.end13
                                        #   in Loop: Header=BB3_5 Depth=1
	js	.LBB3_7
# BB#8:                                 # %if.end20
                                        #   in Loop: Header=BB3_5 Depth=1
	addl	%eax, (%rbx)
	addl	%eax, %r14d
	cmpl	%r12d, %r14d
	jl	.LBB3_5
.LBB3_9:                                # %for.end
	movl	%r13d, %edi
	callq	close
	movl	(%rbx), %eax
	cmpl	%r12d, %eax
	jge	.LBB3_14
# BB#10:                                # %while.body.lr.ph
	leaq	spec_fd+16(,%r15,8), %r14
	.align	16, 0x90
.LBB3_11:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movl	%r12d, %ebp
	subl	%eax, %ebp
	cmpl	%eax, %ebp
	cmovgl	%eax, %ebp
	cmpl	$4, dbglvl(%rip)
	jl	.LBB3_13
# BB#12:                                # %if.then46
                                        #   in Loop: Header=BB3_11 Depth=1
	movl	$.L.str.7, %edi
	xorl	%eax, %eax
	movl	%ebp, %esi
	callq	printf
	movl	(%rbx), %eax
.LBB3_13:                               # %if.end48
                                        #   in Loop: Header=BB3_11 Depth=1
	movq	(%r14), %rsi
	movslq	%eax, %rdi
	addq	%rsi, %rdi
	movslq	%ebp, %rdx
	callq	memcpy
	addl	(%rbx), %ebp
	movl	%ebp, (%rbx)
	cmpl	%r12d, %ebp
	movl	%ebp, %eax
	jl	.LBB3_11
.LBB3_14:                               # %while.end
	xorl	%eax, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB3_7:                                # %if.then16
	movq	stderr(%rip), %rbx
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rax, %rcx
	movl	$.L.str.6, %esi
.LBB3_2:                                # %if.then
	xorl	%eax, %eax
	movq	%rbx, %rdi
	movq	(%rsp), %rdx            # 8-byte Reload
	callq	fprintf
	xorl	%edi, %edi
	callq	exit
.LBB3_1:                                # %if.then
	movq	stderr(%rip), %rbx
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rax, %rcx
	movl	$.L.str.5, %esi
	jmp	.LBB3_2
.Lfunc_end3:
	.size	spec_load, .Lfunc_end3-spec_load
	.cfi_endproc

	.globl	spec_read
	.align	16, 0x90
	.type	spec_read,@function
spec_read:                              # @spec_read
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp30:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp31:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp32:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp33:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp34:
	.cfi_def_cfa_offset 48
.Ltmp35:
	.cfi_offset %rbx, -40
.Ltmp36:
	.cfi_offset %r12, -32
.Ltmp37:
	.cfi_offset %r14, -24
.Ltmp38:
	.cfi_offset %r15, -16
	movl	%edx, %r15d
	movq	%rsi, %r14
	movl	%edi, %ebx
	cmpl	$5, dbglvl(%rip)
	jl	.LBB4_2
# BB#1:                                 # %if.then
	movl	$.L.str.8, %edi
	xorl	%eax, %eax
	movl	%ebx, %esi
	movq	%r14, %rdx
	movl	%r15d, %ecx
	callq	printf
.LBB4_2:                                # %if.end
	cmpl	$4, %ebx
	jge	.LBB4_9
# BB#3:                                 # %if.end4
	movslq	%ebx, %rax
	leaq	(%rax,%rax,2), %rax
	movslq	spec_fd+8(,%rax,8), %rsi
	movl	spec_fd+4(,%rax,8), %ecx
	cmpl	%esi, %ecx
	jle	.LBB4_4
# BB#6:                                 # %if.end13
	leaq	spec_fd+8(,%rax,8), %r12
	movl	%ecx, %ebx
	subl	%esi, %ebx
	leal	(%rsi,%r15), %edx
	cmpl	%ecx, %edx
	cmovll	%r15d, %ebx
	addq	spec_fd+16(,%rax,8), %rsi
	movslq	%ebx, %r15
	movq	%r14, %rdi
	movq	%r15, %rdx
	callq	memcpy
	addl	%r15d, (%r12)
	cmpl	$5, dbglvl(%rip)
	jl	.LBB4_8
# BB#7:                                 # %if.then43
	movl	$.L.str.11, %edi
	xorl	%eax, %eax
	movl	%ebx, %esi
	callq	printf
	jmp	.LBB4_8
.LBB4_4:                                # %if.then8
	movl	$-1, %ebx
	cmpl	$5, dbglvl(%rip)
	jl	.LBB4_8
# BB#5:                                 # %if.then10
	movl	$.Lstr.39, %edi
	callq	puts
.LBB4_8:                                # %cleanup
	movl	%ebx, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB4_9:                                # %if.then2
	movq	stderr(%rip), %rdi
	movl	$.L.str.9, %esi
	xorl	%eax, %eax
	movl	%ebx, %edx
	callq	fprintf
	xorl	%edi, %edi
	callq	exit
.Lfunc_end4:
	.size	spec_read, .Lfunc_end4-spec_read
	.cfi_endproc

	.globl	spec_fread
	.align	16, 0x90
	.type	spec_fread,@function
spec_fread:                             # @spec_fread
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp39:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp40:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp41:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp42:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp43:
	.cfi_def_cfa_offset 48
.Ltmp44:
	.cfi_offset %rbx, -48
.Ltmp45:
	.cfi_offset %r12, -40
.Ltmp46:
	.cfi_offset %r14, -32
.Ltmp47:
	.cfi_offset %r15, -24
.Ltmp48:
	.cfi_offset %rbp, -16
	movl	%ecx, %ebp
	movl	%edx, %ebx
	movl	%esi, %r15d
	movq	%rdi, %r14
	cmpl	$5, dbglvl(%rip)
	jl	.LBB5_2
# BB#1:                                 # %if.then
	movl	$.L.str.12, %edi
	xorl	%eax, %eax
	movq	%r14, %rsi
	movl	%r15d, %edx
	movl	%ebx, %ecx
	movl	%ebp, %r8d
	callq	printf
.LBB5_2:                                # %if.end
	cmpl	$4, %ebp
	jge	.LBB5_11
# BB#3:                                 # %if.end4
	movslq	%ebp, %rax
	leaq	(%rax,%rax,2), %rcx
	movslq	spec_fd+8(,%rcx,8), %rsi
	movl	spec_fd+4(,%rcx,8), %eax
	cmpl	%esi, %eax
	jle	.LBB5_4
# BB#6:                                 # %if.end13
	leaq	spec_fd+8(,%rcx,8), %r12
	movl	%ebx, %edx
	imull	%r15d, %edx
	addl	%esi, %edx
	cmpl	%eax, %edx
	jl	.LBB5_8
# BB#7:                                 # %if.then21
	subl	%esi, %eax
	cltd
	idivl	%r15d
	movl	%eax, %ebx
.LBB5_8:                                # %if.end28
	addq	spec_fd+16(,%rcx,8), %rsi
	movslq	%ebx, %rbp
	movq	%r14, %rdi
	movq	%rbp, %rdx
	callq	memcpy
	imull	%r15d, %ebp
	addl	%ebp, (%r12)
	cmpl	$5, dbglvl(%rip)
	jl	.LBB5_10
# BB#9:                                 # %if.then44
	movl	$.L.str.11, %edi
	xorl	%eax, %eax
	movl	%ebp, %esi
	callq	printf
	jmp	.LBB5_10
.LBB5_4:                                # %if.then8
	movl	$-1, %ebx
	cmpl	$5, dbglvl(%rip)
	jl	.LBB5_10
# BB#5:                                 # %if.then10
	movl	$.Lstr.39, %edi
	callq	puts
.LBB5_10:                               # %cleanup
	movl	%ebx, %eax
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB5_11:                               # %if.then2
	movq	stderr(%rip), %rdi
	movl	$.L.str.13, %esi
	xorl	%eax, %eax
	movl	%ebp, %edx
	callq	fprintf
	xorl	%edi, %edi
	callq	exit
.Lfunc_end5:
	.size	spec_fread, .Lfunc_end5-spec_fread
	.cfi_endproc

	.globl	spec_getc
	.align	16, 0x90
	.type	spec_getc,@function
spec_getc:                              # @spec_getc
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp49:
	.cfi_def_cfa_offset 16
.Ltmp50:
	.cfi_offset %rbx, -16
	movl	%edi, %ebx
	cmpl	$5, dbglvl(%rip)
	jl	.LBB6_2
# BB#1:                                 # %if.then
	movl	$.L.str.14, %edi
	xorl	%eax, %eax
	movl	%ebx, %esi
	callq	printf
.LBB6_2:                                # %if.end
	cmpl	$4, %ebx
	jge	.LBB6_9
# BB#3:                                 # %if.end4
	movslq	%ebx, %rax
	leaq	(%rax,%rax,2), %rax
	movslq	spec_fd+8(,%rax,8), %rcx
	cmpl	spec_fd+4(,%rax,8), %ecx
	jge	.LBB6_4
# BB#6:                                 # %if.end13
	leaq	spec_fd+8(,%rax,8), %rdx
	leal	1(%rcx), %esi
	movl	%esi, (%rdx)
	movq	spec_fd+16(,%rax,8), %rax
	movzbl	(%rax,%rcx), %ebx
	cmpl	$5, dbglvl(%rip)
	jl	.LBB6_8
# BB#7:                                 # %if.then23
	movl	$.L.str.11, %edi
	xorl	%eax, %eax
	movl	%ebx, %esi
	callq	printf
	jmp	.LBB6_8
.LBB6_4:                                # %if.then8
	movl	$-1, %ebx
	cmpl	$5, dbglvl(%rip)
	jl	.LBB6_8
# BB#5:                                 # %if.then10
	movl	$.Lstr.39, %edi
	callq	puts
.LBB6_8:                                # %cleanup
	movl	%ebx, %eax
	popq	%rbx
	retq
.LBB6_9:                                # %if.then2
	movq	stderr(%rip), %rdi
	movl	$.L.str.9, %esi
	xorl	%eax, %eax
	movl	%ebx, %edx
	callq	fprintf
	xorl	%edi, %edi
	callq	exit
.Lfunc_end6:
	.size	spec_getc, .Lfunc_end6-spec_getc
	.cfi_endproc

	.globl	spec_ungetc
	.align	16, 0x90
	.type	spec_ungetc,@function
spec_ungetc:                            # @spec_ungetc
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp51:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp52:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp53:
	.cfi_def_cfa_offset 32
.Ltmp54:
	.cfi_offset %rbx, -24
.Ltmp55:
	.cfi_offset %rbp, -16
	movl	%esi, %ebp
	movl	%edi, %ebx
	cmpl	$5, dbglvl(%rip)
	jl	.LBB7_2
# BB#1:                                 # %if.then
	movl	$.L.str.15, %edi
	xorl	%eax, %eax
	movl	%ebp, %esi
	callq	printf
.LBB7_2:                                # %if.end
	cmpl	$4, %ebp
	jge	.LBB7_3
# BB#4:                                 # %if.end4
	movslq	%ebp, %rax
	leaq	(%rax,%rax,2), %rax
	movslq	spec_fd+8(,%rax,8), %rdx
	testq	%rdx, %rdx
	jle	.LBB7_5
# BB#7:                                 # %if.end11
	leaq	spec_fd+8(,%rax,8), %rcx
	leaq	-1(%rdx), %rsi
	movl	%esi, (%rcx)
	movq	spec_fd+16(,%rax,8), %rax
	movzbl	%bl, %ebx
	movzbl	-1(%rax,%rdx), %eax
	cmpl	%ebx, %eax
	jne	.LBB7_11
# BB#8:                                 # %if.end24
	cmpl	$5, dbglvl(%rip)
	jl	.LBB7_10
# BB#9:                                 # %if.then27
	movl	$.L.str.11, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	callq	printf
.LBB7_10:                               # %if.end29
	movl	%ebx, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
.LBB7_3:                                # %if.then2
	movq	stderr(%rip), %rdi
	movl	$.L.str.9, %esi
	xorl	%eax, %eax
	movl	%ebp, %edx
	jmp	.LBB7_6
.LBB7_5:                                # %if.then6
	movq	stderr(%rip), %rdi
	movl	$.L.str.16, %esi
	xorl	%eax, %eax
.LBB7_6:                                # %if.then6
	callq	fprintf
	xorl	%edi, %edi
	callq	exit
.LBB7_11:                               # %if.then22
	movq	stderr(%rip), %rcx
	movl	$.L.str.17, %edi
	movl	$71, %esi
	movl	$1, %edx
	callq	fwrite
	xorl	%edi, %edi
	callq	exit
.Lfunc_end7:
	.size	spec_ungetc, .Lfunc_end7-spec_ungetc
	.cfi_endproc

	.globl	spec_rewind
	.align	16, 0x90
	.type	spec_rewind,@function
spec_rewind:                            # @spec_rewind
	.cfi_startproc
# BB#0:                                 # %entry
	movslq	%edi, %rax
	leaq	(%rax,%rax,2), %rax
	movl	$0, spec_fd+8(,%rax,8)
	xorl	%eax, %eax
	retq
.Lfunc_end8:
	.size	spec_rewind, .Lfunc_end8-spec_rewind
	.cfi_endproc

	.globl	spec_reset
	.align	16, 0x90
	.type	spec_reset,@function
spec_reset:                             # @spec_reset
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp56:
	.cfi_def_cfa_offset 16
.Ltmp57:
	.cfi_offset %rbx, -16
	movslq	%edi, %rax
	leaq	(%rax,%rax,2), %rbx
	movq	spec_fd+16(,%rbx,8), %rdi
	movslq	spec_fd+4(,%rbx,8), %rdx
	xorl	%esi, %esi
	callq	memset
	movq	$0, spec_fd+4(,%rbx,8)
	xorl	%eax, %eax
	popq	%rbx
	retq
.Lfunc_end9:
	.size	spec_reset, .Lfunc_end9-spec_reset
	.cfi_endproc

	.globl	spec_write
	.align	16, 0x90
	.type	spec_write,@function
spec_write:                             # @spec_write
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp58:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp59:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp60:
	.cfi_def_cfa_offset 32
.Ltmp61:
	.cfi_offset %rbx, -32
.Ltmp62:
	.cfi_offset %r14, -24
.Ltmp63:
	.cfi_offset %rbp, -16
	movl	%edx, %ebx
	movq	%rsi, %r14
	movl	%edi, %ebp
	cmpl	$5, dbglvl(%rip)
	jl	.LBB10_2
# BB#1:                                 # %if.then
	movl	$.L.str.18, %edi
	xorl	%eax, %eax
	movl	%ebp, %esi
	movq	%r14, %rdx
	movl	%ebx, %ecx
	callq	printf
.LBB10_2:                               # %if.end
	cmpl	$4, %ebp
	jge	.LBB10_6
# BB#3:                                 # %if.end4
	movslq	%ebp, %rax
	leaq	(%rax,%rax,2), %rbp
	movslq	spec_fd+8(,%rbp,8), %rdi
	addq	spec_fd+16(,%rbp,8), %rdi
	movslq	%ebx, %rdx
	movq	%r14, %rsi
	callq	memcpy
	addl	%ebx, spec_fd+4(,%rbp,8)
	addl	%ebx, spec_fd+8(,%rbp,8)
	cmpl	$5, dbglvl(%rip)
	jl	.LBB10_5
# BB#4:                                 # %if.then18
	movl	$.L.str.11, %edi
	xorl	%eax, %eax
	movl	%ebx, %esi
	callq	printf
.LBB10_5:                               # %if.end20
	movl	%ebx, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.LBB10_6:                               # %if.then2
	movq	stderr(%rip), %rdi
	movl	$.L.str.19, %esi
	xorl	%eax, %eax
	movl	%ebp, %edx
	callq	fprintf
	xorl	%edi, %edi
	callq	exit
.Lfunc_end10:
	.size	spec_write, .Lfunc_end10-spec_write
	.cfi_endproc

	.globl	spec_fwrite
	.align	16, 0x90
	.type	spec_fwrite,@function
spec_fwrite:                            # @spec_fwrite
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp64:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp65:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp66:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp67:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp68:
	.cfi_def_cfa_offset 48
.Ltmp69:
	.cfi_offset %rbx, -40
.Ltmp70:
	.cfi_offset %r14, -32
.Ltmp71:
	.cfi_offset %r15, -24
.Ltmp72:
	.cfi_offset %rbp, -16
	movl	%ecx, %ebp
	movl	%edx, %r15d
	movl	%esi, %ebx
	movq	%rdi, %r14
	cmpl	$5, dbglvl(%rip)
	jl	.LBB11_2
# BB#1:                                 # %if.then
	movl	$.L.str.20, %edi
	xorl	%eax, %eax
	movq	%r14, %rsi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%ebp, %r8d
	callq	printf
.LBB11_2:                               # %if.end
	cmpl	$4, %ebp
	jge	.LBB11_6
# BB#3:                                 # %if.end4
	movslq	%ebp, %rax
	leaq	(%rax,%rax,2), %rbp
	movslq	spec_fd+8(,%rbp,8), %rdi
	addq	spec_fd+16(,%rbp,8), %rdi
	imull	%r15d, %ebx
	movslq	%ebx, %rbx
	movq	%r14, %rsi
	movq	%rbx, %rdx
	callq	memcpy
	addl	%ebx, spec_fd+4(,%rbp,8)
	addl	%ebx, spec_fd+8(,%rbp,8)
	cmpl	$5, dbglvl(%rip)
	jl	.LBB11_5
# BB#4:                                 # %if.then20
	movl	$.L.str.11, %edi
	xorl	%eax, %eax
	movl	%r15d, %esi
	callq	printf
.LBB11_5:                               # %if.end22
	movl	%r15d, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB11_6:                               # %if.then2
	movq	stderr(%rip), %rdi
	movl	$.L.str.21, %esi
	xorl	%eax, %eax
	movl	%ebp, %edx
	callq	fprintf
	xorl	%edi, %edi
	callq	exit
.Lfunc_end11:
	.size	spec_fwrite, .Lfunc_end11-spec_fwrite
	.cfi_endproc

	.globl	spec_putc
	.align	16, 0x90
	.type	spec_putc,@function
spec_putc:                              # @spec_putc
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp73:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp74:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp75:
	.cfi_def_cfa_offset 32
.Ltmp76:
	.cfi_offset %rbx, -24
.Ltmp77:
	.cfi_offset %rbp, -16
	movl	%esi, %ebx
	movl	%edi, %ebp
	cmpl	$5, dbglvl(%rip)
	jl	.LBB12_2
# BB#1:                                 # %if.then
	movzbl	%bpl, %esi
	movl	$.L.str.22, %edi
	xorl	%eax, %eax
	movl	%ebx, %edx
	callq	printf
.LBB12_2:                               # %if.end
	cmpl	$4, %ebx
	jge	.LBB12_4
# BB#3:                                 # %if.end5
	movslq	%ebx, %rax
	leaq	(%rax,%rax,2), %rax
	movslq	spec_fd+8(,%rax,8), %rcx
	leal	1(%rcx), %edx
	movl	%edx, spec_fd+8(,%rax,8)
	movq	spec_fd+16(,%rax,8), %rdx
	movb	%bpl, (%rdx,%rcx)
	incl	spec_fd+4(,%rax,8)
	movzbl	%bpl, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
.LBB12_4:                               # %if.then3
	movq	stderr(%rip), %rdi
	movl	$.L.str.19, %esi
	xorl	%eax, %eax
	movl	%ebx, %edx
	callq	fprintf
	xorl	%edi, %edi
	callq	exit
.Lfunc_end12:
	.size	spec_putc, .Lfunc_end12-spec_putc
	.cfi_endproc

	.globl	main
	.align	16, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp78:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp79:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp80:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp81:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp82:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp83:
	.cfi_def_cfa_offset 56
	pushq	%rax
.Ltmp84:
	.cfi_def_cfa_offset 64
.Ltmp85:
	.cfi_offset %rbx, -56
.Ltmp86:
	.cfi_offset %r12, -48
.Ltmp87:
	.cfi_offset %r13, -40
.Ltmp88:
	.cfi_offset %r14, -32
.Ltmp89:
	.cfi_offset %r15, -24
.Ltmp90:
	.cfi_offset %rbp, -16
	movq	%rsi, %rbp
	movl	%edi, %ebx
	movq	$10, seedi(%rip)
	callq	PinInit
	movl	$.L.str.23, %r15d
	movl	$64, %r14d
	cmpl	$2, %ebx
	jl	.LBB13_1
# BB#2:                                 # %if.end
	movq	8(%rbp), %r15
	cmpl	$3, %ebx
	jl	.LBB13_3
# BB#4:                                 # %if.end4
	movq	16(%rbp), %rdi
	xorl	%esi, %esi
	movl	$10, %edx
	callq	strtol
	movq	%rax, %r14
	cmpl	$4, %ebx
	jl	.LBB13_5
# BB#6:                                 # %if.then6
	movq	24(%rbp), %rdi
	xorl	%esi, %esi
	movl	$10, %edx
	callq	strtol
	jmp	.LBB13_7
.LBB13_1:
	movl	$64, %eax
	jmp	.LBB13_7
.LBB13_3:
	movl	$64, %eax
	jmp	.LBB13_7
.LBB13_5:
	movl	%r14d, %eax
.LBB13_7:                               # %if.end9
	movl	%r14d, %ebp
	shll	$20, %ebp
	movl	%ebp, spec_fd(%rip)
	shll	$20, %eax
	movl	%eax, spec_fd+24(%rip)
	movl	%ebp, spec_fd+48(%rip)
	callq	spec_init
	cmpl	$3, dbglvl(%rip)
	jl	.LBB13_9
# BB#8:                                 # %if.then15
	movl	$.Lstr.43, %edi
	callq	puts
.LBB13_9:                               # %if.end17
	xorl	%edi, %edi
	movq	%r15, %rsi
	movl	%ebp, %edx
	callq	spec_load
	cmpl	$4, dbglvl(%rip)
	jl	.LBB13_11
# BB#10:                                # %if.then21
	movl	spec_fd+4(%rip), %esi
	movl	$.L.str.25, %edi
	xorl	%eax, %eax
	callq	printf
.LBB13_11:                              # %if.end23
	movl	%r14d, %eax
	shll	$10, %eax
	movslq	%eax, %rdi
	callq	malloc
	movq	%rax, %r15
	testq	%r15, %r15
	je	.LBB13_14
# BB#12:                                # %for.cond.preheader
	testl	%r14d, %r14d
	jle	.LBB13_13
# BB#15:                                # %for.body.lr.ph
	movq	spec_fd+16(%rip), %rax
	movslq	%ebp, %r13
	xorl	%ecx, %ecx
	movq	%r15, %rdx
	.align	16, 0x90
.LBB13_16:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movb	(%rax,%rcx), %bl
	movb	%bl, (%rdx)
	addq	$1027, %rcx             # imm = 0x403
	incq	%rdx
	cmpq	%r13, %rcx
	jl	.LBB13_16
# BB#17:                                # %for.end
	testl	%r14d, %r14d
	movb	$0, smallMode(%rip)
	movl	$0, verbosity(%rip)
	movl	$9, blockSize100k(%rip)
	movl	$30, workFactor(%rip)
	jle	.LBB13_18
# BB#32:                                # %for.body42.us.preheader
	movl	$5, %r12d
	cmpl	$0, "PinFlag-318."(%rip)
	jne	.LBB13_34
# BB#33:
	movl	$.L__unnamed_7, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$57, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movl	$1, "PinFlag-318."(%rip)
	.align	16, 0x90
.LBB13_34:                              # %for.body42.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_49 Depth 2
	cmpl	$3, dbglvl(%rip)
	jl	.LBB13_36
# BB#35:                                # %if.then46.us
                                        #   in Loop: Header=BB13_34 Depth=1
	movl	$.L.str.27, %edi
	xorl	%eax, %eax
	movl	%r12d, %esi
	callq	printf
.LBB13_36:                              # %if.end48.us
                                        #   in Loop: Header=BB13_34 Depth=1
	movl	%r12d, blockSize100k(%rip)
	xorl	%edi, %edi
	movl	$1, %esi
	callq	compressStream
	cmpl	$4, dbglvl(%rip)
	jl	.LBB13_38
# BB#37:                                # %if.then52.us
                                        #   in Loop: Header=BB13_34 Depth=1
	movl	spec_fd+28(%rip), %esi
	movl	$.L.str.28, %edi
	xorl	%eax, %eax
	callq	printf
.LBB13_38:                              # %if.end54.us
                                        #   in Loop: Header=BB13_34 Depth=1
	movq	spec_fd+16(%rip), %rdi
	movslq	spec_fd+4(%rip), %rdx
	xorl	%esi, %esi
	callq	memset
	movq	$0, spec_fd+4(%rip)
	movl	$0, spec_fd+32(%rip)
	cmpl	$3, dbglvl(%rip)
	jl	.LBB13_40
# BB#39:                                # %if.then60.us
                                        #   in Loop: Header=BB13_34 Depth=1
	movl	$.Lstr.41, %edi
	callq	puts
.LBB13_40:                              # %if.end62.us
                                        #   in Loop: Header=BB13_34 Depth=1
	movl	$0, blockSize100k(%rip)
	movl	$1, %edi
	xorl	%esi, %esi
	callq	uncompressStream
	cmpl	$4, dbglvl(%rip)
	jl	.LBB13_42
# BB#41:                                # %if.then66.us
                                        #   in Loop: Header=BB13_34 Depth=1
	movl	spec_fd+4(%rip), %esi
	movl	$.L.str.30, %edi
	xorl	%eax, %eax
	callq	printf
.LBB13_42:                              # %for.body74.lr.ph.us
                                        #   in Loop: Header=BB13_34 Depth=1
	movq	spec_fd+16(%rip), %rbp
	xorl	%ebx, %ebx
	cmpl	$0, "PinFlag-318.0"(%rip)
	movq	%r15, %rax
	movl	$0, %ecx
	jne	.LBB13_49
# BB#43:                                #   in Loop: Header=BB13_34 Depth=1
	xorl	%ebx, %ebx
	movl	$.L__unnamed_8, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$14, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movl	$1, "PinFlag-318.0"(%rip)
	movq	%r15, %rax
	xorl	%ecx, %ecx
	.align	16, 0x90
.LBB13_49:                              # %for.body74.us
                                        #   Parent Loop BB13_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rcx, %rdx
	sarq	$32, %rdx
	movzbl	(%rbp,%rdx), %edx
	movzbl	(%rax), %esi
	cmpl	%edx, %esi
	jne	.LBB13_50
# BB#48:                                # %for.cond69.us
                                        #   in Loop: Header=BB13_49 Depth=2
	movabsq	$4410931412992, %rdx    # imm = 0x40300000000
	addq	%rdx, %rcx
	addq	$1027, %rbx             # imm = 0x403
	incq	%rax
	cmpq	%r13, %rbx
	jl	.LBB13_49
# BB#44:                                # %for.cond69.for.end89_crit_edge.us
                                        #   in Loop: Header=BB13_34 Depth=1
	cmpl	$3, dbglvl(%rip)
	jle	.LBB13_46
# BB#45:                                # %if.then93.us
                                        #   in Loop: Header=BB13_34 Depth=1
	movl	$.Lstr.40, %edi
	callq	puts
.LBB13_46:                              # %if.end95.us
                                        #   in Loop: Header=BB13_34 Depth=1
	movq	spec_fd+40(%rip), %rdi
	movslq	spec_fd+28(%rip), %rdx
	xorl	%esi, %esi
	callq	memset
	movl	$0, spec_fd+28(%rip)
	movl	$0, spec_fd+32(%rip)
	movl	$0, spec_fd+8(%rip)
	addl	$2, %r12d
	cmpl	$10, %r12d
	jl	.LBB13_34
# BB#47:                                # %for.end99.loopexit
	movl	$0, "PinFlag-171."(%rip)
	movl	$0, "PinFlag-172."(%rip)
	movl	$0, "PinFlag-14."(%rip)
	movl	$0, "PinFlag-14.0"(%rip)
	movl	$0, "PinFlag-14.00"(%rip)
	movl	$0, "PinFlag-14.000"(%rip)
	movl	$0, "PinFlag-14.0000"(%rip)
	movl	$0, "PinFlag-14.00000"(%rip)
	movl	$0, "PinFlag-14.000000"(%rip)
	movl	$0, "PinFlag-14.00001"(%rip)
	movl	$0, "PinFlag-14.000010"(%rip)
	movl	$0, "PinFlag-14.001"(%rip)
	movl	$0, "PinFlag-14.0010"(%rip)
	movl	$0, "PinFlag-14.00100"(%rip)
	movl	$0, "PinFlag-14.001000"(%rip)
	movl	$0, "PinFlag-14.00101"(%rip)
	movl	$0, "PinFlag-14.001010"(%rip)
	movl	$0, "PinFlag-14.002"(%rip)
	movl	$0, "PinFlag-14.003"(%rip)
	movl	$0, "PinFlag-14.004"(%rip)
	movl	$0, "PinFlag-14.005"(%rip)
	movl	$0, "PinFlag-14.006"(%rip)
	movl	$0, "PinFlag-14.007"(%rip)
	movl	$0, "PinFlag-14.0070"(%rip)
	movl	$0, "PinFlag-14.00700"(%rip)
	movl	$0, "PinFlag-14.00701"(%rip)
	movl	$0, "PinFlag-14.00702"(%rip)
	movl	$0, "PinFlag-14.1"(%rip)
	movl	$0, "PinFlag-14.2"(%rip)
	movl	$0, "PinFlag-14.3"(%rip)
	movl	$0, "PinFlag-14.4"(%rip)
	movl	$0, "PinFlag-14.5"(%rip)
	movl	$0, "PinFlag-14.6"(%rip)
	movl	$0, "PinFlag-15."(%rip)
	movl	$0, "PinFlag-15.0"(%rip)
	movl	$0, "PinFlag-15.00"(%rip)
	movl	$0, "PinFlag-17."(%rip)
	movl	$0, "PinFlag-18."(%rip)
	movl	$0, "PinFlag-19."(%rip)
	movl	$0, "PinFlag-20."(%rip)
	movl	$0, "PinFlag-21."(%rip)
	movl	$0, "PinFlag-22."(%rip)
	movl	$0, "PinFlag-23."(%rip)
	movl	$0, "PinFlag-173."(%rip)
	movl	$0, "PinFlag-174."(%rip)
	movl	$0, "PinFlag-175."(%rip)
	movl	$0, "PinFlag-176."(%rip)
	movl	$0, "PinFlag-24."(%rip)
	movl	$0, "PinFlag-24.0"(%rip)
	movl	$0, "PinFlag-24.1"(%rip)
	movl	$0, "PinFlag-26."(%rip)
	movl	$0, "PinFlag-26.0"(%rip)
	movl	$0, "PinFlag-26.1"(%rip)
	movl	$0, "PinFlag-26.10"(%rip)
	movl	$0, "PinFlag-26.100"(%rip)
	movl	$0, "PinFlag-26.101"(%rip)
	movl	$0, "PinFlag-26.102"(%rip)
	movl	$0, "PinFlag-26.103"(%rip)
	movl	$0, "PinFlag-26.104"(%rip)
	movl	$0, "PinFlag-26.11"(%rip)
	movl	$0, "PinFlag-26.110"(%rip)
	movl	$0, "PinFlag-26.1100"(%rip)
	movl	$0, "PinFlag-26.11000"(%rip)
	movl	$0, "PinFlag-26.1101"(%rip)
	movl	$0, "PinFlag-26.11010"(%rip)
	movl	$0, "PinFlag-26.111"(%rip)
	movl	$0, "PinFlag-26.1110"(%rip)
	movl	$0, "PinFlag-26.11100"(%rip)
	movl	$0, "PinFlag-26.1111"(%rip)
	movl	$0, "PinFlag-26.11110"(%rip)
	movl	$0, "PinFlag-26.112"(%rip)
	movl	$0, "PinFlag-26.113"(%rip)
	movl	$0, "PinFlag-26.114"(%rip)
	movl	$0, "PinFlag-26.115"(%rip)
	movl	$0, "PinFlag-26.12"(%rip)
	movl	$0, "PinFlag-27."(%rip)
	movl	$0, "PinFlag-28."(%rip)
	movl	$0, "PinFlag-29."(%rip)
	movl	$0, "PinFlag-30."(%rip)
	movl	$0, "PinFlag-31."(%rip)
	movl	$0, "PinFlag-32."(%rip)
	movl	$0, "PinFlag-177."(%rip)
	movl	$0, "PinFlag-178."(%rip)
	movl	$0, "PinFlag-179."(%rip)
	movl	$0, "PinFlag-180."(%rip)
	movl	$0, "PinFlag-181."(%rip)
	movl	$0, "PinFlag-182."(%rip)
	movl	$0, "PinFlag-33."(%rip)
	movl	$0, "PinFlag-39."(%rip)
	movl	$0, "PinFlag-39.0"(%rip)
	movl	$0, "PinFlag-39.1"(%rip)
	movl	$0, "PinFlag-39.2"(%rip)
	movl	$0, "PinFlag-39.3"(%rip)
	movl	$0, "PinFlag-183."(%rip)
	movl	$0, "PinFlag-43."(%rip)
	movl	$0, "PinFlag-43.0"(%rip)
	movl	$0, "PinFlag-43.1"(%rip)
	movl	$0, "PinFlag-43.2"(%rip)
	movl	$0, "PinFlag-184."(%rip)
	movl	$0, "PinFlag-185."(%rip)
	movl	$0, "PinFlag-186."(%rip)
	movl	$0, "PinFlag-44."(%rip)
	movl	$0, "PinFlag-187."(%rip)
	movl	$0, "PinFlag-188."(%rip)
	movl	$0, "PinFlag-45."(%rip)
	movl	$0, "PinFlag-189."(%rip)
	movl	$0, "PinFlag-47."(%rip)
	movl	$0, "PinFlag-47.0"(%rip)
	movl	$0, "PinFlag-47.00"(%rip)
	movl	$0, "PinFlag-47.01"(%rip)
	movl	$0, "PinFlag-47.02"(%rip)
	movl	$0, "PinFlag-47.03"(%rip)
	movl	$0, "PinFlag-47.04"(%rip)
	movl	$0, "PinFlag-47.1"(%rip)
	movl	$0, "PinFlag-47.10"(%rip)
	movl	$0, "PinFlag-47.11"(%rip)
	movl	$0, "PinFlag-47.12"(%rip)
	movl	$0, "PinFlag-47.13"(%rip)
	movl	$0, "PinFlag-47.14"(%rip)
	movl	$0, "PinFlag-47.2"(%rip)
	movl	$0, "PinFlag-47.3"(%rip)
	movl	$0, "PinFlag-47.30"(%rip)
	movl	$0, "PinFlag-190."(%rip)
	movl	$0, "PinFlag-48."(%rip)
	movl	$0, "PinFlag-49."(%rip)
	movl	$0, "PinFlag-49.0"(%rip)
	movl	$0, "PinFlag-50."(%rip)
	movl	$0, "PinFlag-191."(%rip)
	movl	$0, "PinFlag-192."(%rip)
	movl	$0, "PinFlag-55."(%rip)
	movl	$0, "PinFlag-56."(%rip)
	movl	$0, "PinFlag-57."(%rip)
	movl	$0, "PinFlag-58."(%rip)
	movl	$0, "PinFlag-59."(%rip)
	movl	$0, "PinFlag-60."(%rip)
	movl	$0, "PinFlag-61."(%rip)
	movl	$0, "PinFlag-62."(%rip)
	movl	$0, "PinFlag-63."(%rip)
	movl	$0, "PinFlag-63.0"(%rip)
	movl	$0, "PinFlag-63.1"(%rip)
	movl	$0, "PinFlag-67."(%rip)
	movl	$0, "PinFlag-68."(%rip)
	movl	$0, "PinFlag-69."(%rip)
	movl	$0, "PinFlag-70."(%rip)
	movl	$0, "PinFlag-71."(%rip)
	movl	$0, "PinFlag-72."(%rip)
	movl	$0, "PinFlag-73."(%rip)
	movl	$0, "PinFlag-74."(%rip)
	movl	$0, "PinFlag-75."(%rip)
	movl	$0, "PinFlag-76."(%rip)
	movl	$0, "PinFlag-77."(%rip)
	movl	$0, "PinFlag-193."(%rip)
	movl	$0, "PinFlag-194."(%rip)
	movl	$0, "PinFlag-195."(%rip)
	movl	$0, "PinFlag-196."(%rip)
	movl	$0, "PinFlag-78."(%rip)
	movl	$0, "PinFlag-79."(%rip)
	movl	$0, "PinFlag-80."(%rip)
	movl	$0, "PinFlag-81."(%rip)
	movl	$0, "PinFlag-197."(%rip)
	movl	$0, "PinFlag-198."(%rip)
	movl	$0, "PinFlag-82."(%rip)
	movl	$0, "PinFlag-82.0"(%rip)
	movl	$0, "PinFlag-82.00"(%rip)
	movl	$0, "PinFlag-82.1"(%rip)
	movl	$0, "PinFlag-82.10"(%rip)
	movl	$0, "PinFlag-82.2"(%rip)
	movl	$0, "PinFlag-82.3"(%rip)
	movl	$0, "PinFlag-82.4"(%rip)
	movl	$0, "PinFlag-82.5"(%rip)
	movl	$0, "PinFlag-82.6"(%rip)
	movl	$0, "PinFlag-82.7"(%rip)
	movl	$0, "PinFlag-82.8"(%rip)
	movl	$0, "PinFlag-82.9"(%rip)
	movl	$0, "PinFlag-83."(%rip)
	movl	$0, "PinFlag-83.0"(%rip)
	movl	$0, "PinFlag-83.00"(%rip)
	movl	$0, "PinFlag-83.01"(%rip)
	movl	$0, "PinFlag-85."(%rip)
	movl	$0, "PinFlag-85.0"(%rip)
	movl	$0, "PinFlag-87."(%rip)
	movl	$0, "PinFlag-87.0"(%rip)
	movl	$0, "PinFlag-88."(%rip)
	movl	$0, "PinFlag-89."(%rip)
	movl	$0, "PinFlag-89.0"(%rip)
	movl	$0, "PinFlag-89.1"(%rip)
	movl	$0, "PinFlag-91."(%rip)
	movl	$0, "PinFlag-91.0"(%rip)
	movl	$0, "PinFlag-91.1"(%rip)
	movl	$0, "PinFlag-92."(%rip)
	movl	$0, "PinFlag-95."(%rip)
	movl	$0, "PinFlag-95.0"(%rip)
	movl	$0, "PinFlag-95.1"(%rip)
	movl	$0, "PinFlag-95.2"(%rip)
	movl	$0, "PinFlag-95.20"(%rip)
	movl	$0, "PinFlag-95.21"(%rip)
	movl	$0, "PinFlag-95.210"(%rip)
	movl	$0, "PinFlag-95.211"(%rip)
	movl	$0, "PinFlag-95.22"(%rip)
	movl	$0, "PinFlag-95.23"(%rip)
	movl	$0, "PinFlag-95.3"(%rip)
	movl	$0, "PinFlag-95.4"(%rip)
	movl	$0, "PinFlag-96."(%rip)
	movl	$0, "PinFlag-96.0"(%rip)
	movl	$0, "PinFlag-96.1"(%rip)
	movl	$0, "PinFlag-96.2"(%rip)
	movl	$0, "PinFlag-97."(%rip)
	movl	$0, "PinFlag-97.0"(%rip)
	movl	$0, "PinFlag-199."(%rip)
	movl	$0, "PinFlag-200."(%rip)
	movl	$0, "PinFlag-201."(%rip)
	movl	$0, "PinFlag-202."(%rip)
	movl	$0, "PinFlag-203."(%rip)
	movl	$0, "PinFlag-204."(%rip)
	movl	$0, "PinFlag-205."(%rip)
	movl	$0, "PinFlag-206."(%rip)
	movl	$0, "PinFlag-207."(%rip)
	movl	$0, "PinFlag-208."(%rip)
	movl	$0, "PinFlag-209."(%rip)
	movl	$0, "PinFlag-210."(%rip)
	movl	$0, "PinFlag-211."(%rip)
	movl	$0, "PinFlag-212."(%rip)
	movl	$0, "PinFlag-213."(%rip)
	movl	$0, "PinFlag-214."(%rip)
	movl	$0, "PinFlag-215."(%rip)
	movl	$0, "PinFlag-216."(%rip)
	movl	$0, "PinFlag-217."(%rip)
	movl	$0, "PinFlag-218."(%rip)
	movl	$0, "PinFlag-219."(%rip)
	movl	$0, "PinFlag-220."(%rip)
	movl	$0, "PinFlag-221."(%rip)
	movl	$0, "PinFlag-222."(%rip)
	movl	$0, "PinFlag-223."(%rip)
	movl	$0, "PinFlag-224."(%rip)
	movl	$0, "PinFlag-225."(%rip)
	movl	$0, "PinFlag-226."(%rip)
	movl	$0, "PinFlag-227."(%rip)
	movl	$0, "PinFlag-228."(%rip)
	movl	$0, "PinFlag-229."(%rip)
	movl	$0, "PinFlag-230."(%rip)
	movl	$0, "PinFlag-231."(%rip)
	movl	$0, "PinFlag-232."(%rip)
	movl	$0, "PinFlag-233."(%rip)
	movl	$0, "PinFlag-234."(%rip)
	movl	$0, "PinFlag-235."(%rip)
	movl	$0, "PinFlag-236."(%rip)
	movl	$0, "PinFlag-237."(%rip)
	movl	$0, "PinFlag-238."(%rip)
	movl	$0, "PinFlag-239."(%rip)
	movl	$0, "PinFlag-240."(%rip)
	movl	$0, "PinFlag-241."(%rip)
	movl	$0, "PinFlag-242."(%rip)
	movl	$0, "PinFlag-243."(%rip)
	movl	$0, "PinFlag-244."(%rip)
	movl	$0, "PinFlag-245."(%rip)
	movl	$0, "PinFlag-246."(%rip)
	movl	$0, "PinFlag-247."(%rip)
	movl	$0, "PinFlag-248."(%rip)
	movl	$0, "PinFlag-249."(%rip)
	movl	$0, "PinFlag-250."(%rip)
	movl	$0, "PinFlag-251."(%rip)
	movl	$0, "PinFlag-252."(%rip)
	movl	$0, "PinFlag-253."(%rip)
	movl	$0, "PinFlag-254."(%rip)
	movl	$0, "PinFlag-255."(%rip)
	movl	$0, "PinFlag-256."(%rip)
	movl	$0, "PinFlag-257."(%rip)
	movl	$0, "PinFlag-258."(%rip)
	movl	$0, "PinFlag-259."(%rip)
	movl	$0, "PinFlag-260."(%rip)
	movl	$0, "PinFlag-261."(%rip)
	movl	$0, "PinFlag-262."(%rip)
	movl	$0, "PinFlag-263."(%rip)
	movl	$0, "PinFlag-264."(%rip)
	movl	$0, "PinFlag-265."(%rip)
	movl	$0, "PinFlag-266."(%rip)
	movl	$0, "PinFlag-267."(%rip)
	movl	$0, "PinFlag-268."(%rip)
	movl	$0, "PinFlag-269."(%rip)
	movl	$0, "PinFlag-270."(%rip)
	movl	$0, "PinFlag-271."(%rip)
	movl	$0, "PinFlag-272."(%rip)
	movl	$0, "PinFlag-273."(%rip)
	movl	$0, "PinFlag-274."(%rip)
	movl	$0, "PinFlag-275."(%rip)
	movl	$0, "PinFlag-276."(%rip)
	movl	$0, "PinFlag-277."(%rip)
	movl	$0, "PinFlag-278."(%rip)
	movl	$0, "PinFlag-279."(%rip)
	movl	$0, "PinFlag-280."(%rip)
	movl	$0, "PinFlag-281."(%rip)
	movl	$0, "PinFlag-282."(%rip)
	movl	$0, "PinFlag-283."(%rip)
	movl	$0, "PinFlag-284."(%rip)
	movl	$0, "PinFlag-285."(%rip)
	movl	$0, "PinFlag-286."(%rip)
	movl	$0, "PinFlag-287."(%rip)
	movl	$0, "PinFlag-288."(%rip)
	movl	$0, "PinFlag-289."(%rip)
	movl	$0, "PinFlag-290."(%rip)
	movl	$0, "PinFlag-291."(%rip)
	movl	$0, "PinFlag-292."(%rip)
	movl	$0, "PinFlag-293."(%rip)
	movl	$0, "PinFlag-294."(%rip)
	movl	$0, "PinFlag-295."(%rip)
	movl	$0, "PinFlag-296."(%rip)
	movl	$0, "PinFlag-297."(%rip)
	movl	$0, "PinFlag-298."(%rip)
	movl	$0, "PinFlag-299."(%rip)
	movl	$0, "PinFlag-300."(%rip)
	movl	$0, "PinFlag-301."(%rip)
	movl	$0, "PinFlag-302."(%rip)
	movl	$0, "PinFlag-303."(%rip)
	movl	$0, "PinFlag-304."(%rip)
	movl	$0, "PinFlag-305."(%rip)
	movl	$0, "PinFlag-98."(%rip)
	movl	$0, "PinFlag-306."(%rip)
	movl	$0, "PinFlag-100."(%rip)
	movl	$0, "PinFlag-101."(%rip)
	movl	$0, "PinFlag-102."(%rip)
	movl	$0, "PinFlag-103."(%rip)
	movl	$0, "PinFlag-104."(%rip)
	movl	$0, "PinFlag-105."(%rip)
	movl	$0, "PinFlag-106."(%rip)
	movl	$0, "PinFlag-107."(%rip)
	movl	$0, "PinFlag-108."(%rip)
	movl	$0, "PinFlag-109."(%rip)
	movl	$0, "PinFlag-110."(%rip)
	movl	$0, "PinFlag-110.0"(%rip)
	movl	$0, "PinFlag-111."(%rip)
	movl	$0, "PinFlag-112."(%rip)
	movl	$0, "PinFlag-113."(%rip)
	movl	$0, "PinFlag-114."(%rip)
	movl	$0, "PinFlag-115."(%rip)
	movl	$0, "PinFlag-116."(%rip)
	movl	$0, "PinFlag-117."(%rip)
	movl	$0, "PinFlag-120."(%rip)
	movl	$0, "PinFlag-122."(%rip)
	movl	$0, "PinFlag-123."(%rip)
	movl	$0, "PinFlag-124."(%rip)
	movl	$0, "PinFlag-125."(%rip)
	movl	$0, "PinFlag-126."(%rip)
	movl	$0, "PinFlag-127."(%rip)
	movl	$0, "PinFlag-128."(%rip)
	movl	$0, "PinFlag-129."(%rip)
	movl	$0, "PinFlag-130."(%rip)
	movl	$0, "PinFlag-131."(%rip)
	movl	$0, "PinFlag-132."(%rip)
	movl	$0, "PinFlag-133."(%rip)
	movl	$0, "PinFlag-134."(%rip)
	movl	$0, "PinFlag-136."(%rip)
	movl	$0, "PinFlag-136.0"(%rip)
	movl	$0, "PinFlag-136.1"(%rip)
	movl	$0, "PinFlag-138."(%rip)
	movl	$0, "PinFlag-138.0"(%rip)
	movl	$0, "PinFlag-138.1"(%rip)
	movl	$0, "PinFlag-140."(%rip)
	movl	$0, "PinFlag-141."(%rip)
	movl	$0, "PinFlag-142."(%rip)
	movl	$0, "PinFlag-143."(%rip)
	movl	$0, "PinFlag-144."(%rip)
	movl	$0, "PinFlag-145."(%rip)
	movl	$0, "PinFlag-146."(%rip)
	movl	$0, "PinFlag-147."(%rip)
	movl	$0, "PinFlag-148."(%rip)
	movl	$0, "PinFlag-149."(%rip)
	movl	$0, "PinFlag-150."(%rip)
	movl	$0, "PinFlag-151."(%rip)
	movl	$0, "PinFlag-152."(%rip)
	movl	$0, "PinFlag-153."(%rip)
	movl	$0, "PinFlag-154."(%rip)
	movl	$0, "PinFlag-155."(%rip)
	movl	$0, "PinFlag-156."(%rip)
	movl	$0, "PinFlag-157."(%rip)
	movl	$0, "PinFlag-158."(%rip)
	movl	$0, "PinFlag-159."(%rip)
	movl	$0, "PinFlag-160."(%rip)
	movl	$0, "PinFlag-99."(%rip)
	movl	$0, "PinFlag-307."(%rip)
	movl	$0, "PinFlag-308."(%rip)
	movl	$0, "PinFlag-161."(%rip)
	movl	$0, "PinFlag-161.0"(%rip)
	movl	$0, "PinFlag-161.1"(%rip)
	movl	$0, "PinFlag-161.10"(%rip)
	movl	$0, "PinFlag-161.11"(%rip)
	movl	$0, "PinFlag-161.12"(%rip)
	movl	$0, "PinFlag-161.2"(%rip)
	movl	$0, "PinFlag-161.3"(%rip)
	movl	$0, "PinFlag-161.30"(%rip)
	movl	$0, "PinFlag-161.31"(%rip)
	movl	$0, "PinFlag-161.4"(%rip)
	movl	$0, "PinFlag-161.5"(%rip)
	movl	$0, "PinFlag-309."(%rip)
	movl	$0, "PinFlag-310."(%rip)
	movl	$0, "PinFlag-311."(%rip)
	movl	$0, "PinFlag-312."(%rip)
	movl	$0, "PinFlag-313."(%rip)
	movl	$0, "PinFlag-164."(%rip)
	movl	$0, "PinFlag-164.0"(%rip)
	movl	$0, "PinFlag-314."(%rip)
	movl	$0, "PinFlag-315."(%rip)
	movl	$0, "PinFlag-316."(%rip)
	movl	$0, "PinFlag-165."(%rip)
	movl	$0, "PinFlag-166."(%rip)
	movl	$0, "PinFlag-167."(%rip)
	movl	$0, "PinFlag-168."(%rip)
	movl	$0, "PinFlag-169."(%rip)
	movl	$0, "PinFlag-169.0"(%rip)
	movl	$318, %edi              # imm = 0x13E
	callq	UnPin
	movl	$0, "PinFlag-318.0"(%rip)
	movl	$0, "PinFlag-318."(%rip)
	jmp	.LBB13_31
.LBB13_13:                              # %for.end.thread
	movb	$0, smallMode(%rip)
	movl	$0, verbosity(%rip)
	movl	$9, blockSize100k(%rip)
	movl	$30, workFactor(%rip)
.LBB13_18:                              # %for.body42.preheader
	movl	$5, %ebx
	cmpl	$0, "PinFlag-319."(%rip)
	jne	.LBB13_20
# BB#19:
	movl	$.L__unnamed_9, %edi
	movl	$2, %esi
	xorl	%edx, %edx
	movl	$48, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movl	$1, "PinFlag-319."(%rip)
	.align	16, 0x90
.LBB13_20:                              # %for.body42
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, dbglvl(%rip)
	jl	.LBB13_22
# BB#21:                                # %if.then46
                                        #   in Loop: Header=BB13_20 Depth=1
	movl	$.L.str.27, %edi
	xorl	%eax, %eax
	movl	%ebx, %esi
	callq	printf
.LBB13_22:                              # %if.end48
                                        #   in Loop: Header=BB13_20 Depth=1
	movl	%ebx, blockSize100k(%rip)
	xorl	%edi, %edi
	movl	$1, %esi
	callq	compressStream
	cmpl	$4, dbglvl(%rip)
	jl	.LBB13_24
# BB#23:                                # %if.then52
                                        #   in Loop: Header=BB13_20 Depth=1
	movl	spec_fd+28(%rip), %esi
	movl	$.L.str.28, %edi
	xorl	%eax, %eax
	callq	printf
.LBB13_24:                              # %if.end54
                                        #   in Loop: Header=BB13_20 Depth=1
	movq	spec_fd+16(%rip), %rdi
	movslq	spec_fd+4(%rip), %rdx
	xorl	%esi, %esi
	callq	memset
	movq	$0, spec_fd+4(%rip)
	movl	$0, spec_fd+32(%rip)
	cmpl	$3, dbglvl(%rip)
	jl	.LBB13_26
# BB#25:                                # %if.then60
                                        #   in Loop: Header=BB13_20 Depth=1
	movl	$.Lstr.41, %edi
	callq	puts
.LBB13_26:                              # %if.end62
                                        #   in Loop: Header=BB13_20 Depth=1
	movl	$0, blockSize100k(%rip)
	movl	$1, %edi
	xorl	%esi, %esi
	callq	uncompressStream
	cmpl	$3, dbglvl(%rip)
	jle	.LBB13_29
# BB#27:                                # %for.end89
                                        #   in Loop: Header=BB13_20 Depth=1
	movl	spec_fd+4(%rip), %esi
	movl	$.L.str.30, %edi
	xorl	%eax, %eax
	callq	printf
	cmpl	$4, dbglvl(%rip)
	jl	.LBB13_29
# BB#28:                                # %if.then93
                                        #   in Loop: Header=BB13_20 Depth=1
	movl	$.Lstr.40, %edi
	callq	puts
.LBB13_29:                              # %if.end95
                                        #   in Loop: Header=BB13_20 Depth=1
	movq	spec_fd+40(%rip), %rdi
	movslq	spec_fd+28(%rip), %rdx
	xorl	%esi, %esi
	callq	memset
	movl	$0, spec_fd+28(%rip)
	movl	$0, spec_fd+32(%rip)
	movl	$0, spec_fd+8(%rip)
	addl	$2, %ebx
	cmpl	$10, %ebx
	jl	.LBB13_20
# BB#30:                                # %for.end99.loopexit162
	movl	$0, "PinFlag-171."(%rip)
	movl	$0, "PinFlag-172."(%rip)
	movl	$0, "PinFlag-14."(%rip)
	movl	$0, "PinFlag-14.0"(%rip)
	movl	$0, "PinFlag-14.00"(%rip)
	movl	$0, "PinFlag-14.000"(%rip)
	movl	$0, "PinFlag-14.0000"(%rip)
	movl	$0, "PinFlag-14.00000"(%rip)
	movl	$0, "PinFlag-14.000000"(%rip)
	movl	$0, "PinFlag-14.00001"(%rip)
	movl	$0, "PinFlag-14.000010"(%rip)
	movl	$0, "PinFlag-14.001"(%rip)
	movl	$0, "PinFlag-14.0010"(%rip)
	movl	$0, "PinFlag-14.00100"(%rip)
	movl	$0, "PinFlag-14.001000"(%rip)
	movl	$0, "PinFlag-14.00101"(%rip)
	movl	$0, "PinFlag-14.001010"(%rip)
	movl	$0, "PinFlag-14.002"(%rip)
	movl	$0, "PinFlag-14.003"(%rip)
	movl	$0, "PinFlag-14.004"(%rip)
	movl	$0, "PinFlag-14.005"(%rip)
	movl	$0, "PinFlag-14.006"(%rip)
	movl	$0, "PinFlag-14.007"(%rip)
	movl	$0, "PinFlag-14.0070"(%rip)
	movl	$0, "PinFlag-14.00700"(%rip)
	movl	$0, "PinFlag-14.00701"(%rip)
	movl	$0, "PinFlag-14.00702"(%rip)
	movl	$0, "PinFlag-14.1"(%rip)
	movl	$0, "PinFlag-14.2"(%rip)
	movl	$0, "PinFlag-14.3"(%rip)
	movl	$0, "PinFlag-14.4"(%rip)
	movl	$0, "PinFlag-14.5"(%rip)
	movl	$0, "PinFlag-14.6"(%rip)
	movl	$0, "PinFlag-15."(%rip)
	movl	$0, "PinFlag-15.0"(%rip)
	movl	$0, "PinFlag-15.00"(%rip)
	movl	$0, "PinFlag-17."(%rip)
	movl	$0, "PinFlag-18."(%rip)
	movl	$0, "PinFlag-19."(%rip)
	movl	$0, "PinFlag-20."(%rip)
	movl	$0, "PinFlag-21."(%rip)
	movl	$0, "PinFlag-22."(%rip)
	movl	$0, "PinFlag-23."(%rip)
	movl	$0, "PinFlag-173."(%rip)
	movl	$0, "PinFlag-174."(%rip)
	movl	$0, "PinFlag-175."(%rip)
	movl	$0, "PinFlag-176."(%rip)
	movl	$0, "PinFlag-24."(%rip)
	movl	$0, "PinFlag-24.0"(%rip)
	movl	$0, "PinFlag-24.1"(%rip)
	movl	$0, "PinFlag-26."(%rip)
	movl	$0, "PinFlag-26.0"(%rip)
	movl	$0, "PinFlag-26.1"(%rip)
	movl	$0, "PinFlag-26.10"(%rip)
	movl	$0, "PinFlag-26.100"(%rip)
	movl	$0, "PinFlag-26.101"(%rip)
	movl	$0, "PinFlag-26.102"(%rip)
	movl	$0, "PinFlag-26.103"(%rip)
	movl	$0, "PinFlag-26.104"(%rip)
	movl	$0, "PinFlag-26.11"(%rip)
	movl	$0, "PinFlag-26.110"(%rip)
	movl	$0, "PinFlag-26.1100"(%rip)
	movl	$0, "PinFlag-26.11000"(%rip)
	movl	$0, "PinFlag-26.1101"(%rip)
	movl	$0, "PinFlag-26.11010"(%rip)
	movl	$0, "PinFlag-26.111"(%rip)
	movl	$0, "PinFlag-26.1110"(%rip)
	movl	$0, "PinFlag-26.11100"(%rip)
	movl	$0, "PinFlag-26.1111"(%rip)
	movl	$0, "PinFlag-26.11110"(%rip)
	movl	$0, "PinFlag-26.112"(%rip)
	movl	$0, "PinFlag-26.113"(%rip)
	movl	$0, "PinFlag-26.114"(%rip)
	movl	$0, "PinFlag-26.115"(%rip)
	movl	$0, "PinFlag-26.12"(%rip)
	movl	$0, "PinFlag-27."(%rip)
	movl	$0, "PinFlag-28."(%rip)
	movl	$0, "PinFlag-29."(%rip)
	movl	$0, "PinFlag-30."(%rip)
	movl	$0, "PinFlag-31."(%rip)
	movl	$0, "PinFlag-32."(%rip)
	movl	$0, "PinFlag-177."(%rip)
	movl	$0, "PinFlag-178."(%rip)
	movl	$0, "PinFlag-179."(%rip)
	movl	$0, "PinFlag-180."(%rip)
	movl	$0, "PinFlag-181."(%rip)
	movl	$0, "PinFlag-182."(%rip)
	movl	$0, "PinFlag-33."(%rip)
	movl	$0, "PinFlag-39."(%rip)
	movl	$0, "PinFlag-39.0"(%rip)
	movl	$0, "PinFlag-39.1"(%rip)
	movl	$0, "PinFlag-39.2"(%rip)
	movl	$0, "PinFlag-39.3"(%rip)
	movl	$0, "PinFlag-183."(%rip)
	movl	$0, "PinFlag-43."(%rip)
	movl	$0, "PinFlag-43.0"(%rip)
	movl	$0, "PinFlag-43.1"(%rip)
	movl	$0, "PinFlag-43.2"(%rip)
	movl	$0, "PinFlag-184."(%rip)
	movl	$0, "PinFlag-185."(%rip)
	movl	$0, "PinFlag-186."(%rip)
	movl	$0, "PinFlag-44."(%rip)
	movl	$0, "PinFlag-187."(%rip)
	movl	$0, "PinFlag-188."(%rip)
	movl	$0, "PinFlag-45."(%rip)
	movl	$0, "PinFlag-189."(%rip)
	movl	$0, "PinFlag-47."(%rip)
	movl	$0, "PinFlag-47.0"(%rip)
	movl	$0, "PinFlag-47.00"(%rip)
	movl	$0, "PinFlag-47.01"(%rip)
	movl	$0, "PinFlag-47.02"(%rip)
	movl	$0, "PinFlag-47.03"(%rip)
	movl	$0, "PinFlag-47.04"(%rip)
	movl	$0, "PinFlag-47.1"(%rip)
	movl	$0, "PinFlag-47.10"(%rip)
	movl	$0, "PinFlag-47.11"(%rip)
	movl	$0, "PinFlag-47.12"(%rip)
	movl	$0, "PinFlag-47.13"(%rip)
	movl	$0, "PinFlag-47.14"(%rip)
	movl	$0, "PinFlag-47.2"(%rip)
	movl	$0, "PinFlag-47.3"(%rip)
	movl	$0, "PinFlag-47.30"(%rip)
	movl	$0, "PinFlag-190."(%rip)
	movl	$0, "PinFlag-48."(%rip)
	movl	$0, "PinFlag-49."(%rip)
	movl	$0, "PinFlag-49.0"(%rip)
	movl	$0, "PinFlag-50."(%rip)
	movl	$0, "PinFlag-191."(%rip)
	movl	$0, "PinFlag-192."(%rip)
	movl	$0, "PinFlag-55."(%rip)
	movl	$0, "PinFlag-56."(%rip)
	movl	$0, "PinFlag-57."(%rip)
	movl	$0, "PinFlag-58."(%rip)
	movl	$0, "PinFlag-59."(%rip)
	movl	$0, "PinFlag-60."(%rip)
	movl	$0, "PinFlag-61."(%rip)
	movl	$0, "PinFlag-62."(%rip)
	movl	$0, "PinFlag-63."(%rip)
	movl	$0, "PinFlag-63.0"(%rip)
	movl	$0, "PinFlag-63.1"(%rip)
	movl	$0, "PinFlag-67."(%rip)
	movl	$0, "PinFlag-68."(%rip)
	movl	$0, "PinFlag-69."(%rip)
	movl	$0, "PinFlag-70."(%rip)
	movl	$0, "PinFlag-71."(%rip)
	movl	$0, "PinFlag-72."(%rip)
	movl	$0, "PinFlag-73."(%rip)
	movl	$0, "PinFlag-74."(%rip)
	movl	$0, "PinFlag-75."(%rip)
	movl	$0, "PinFlag-76."(%rip)
	movl	$0, "PinFlag-77."(%rip)
	movl	$0, "PinFlag-193."(%rip)
	movl	$0, "PinFlag-194."(%rip)
	movl	$0, "PinFlag-195."(%rip)
	movl	$0, "PinFlag-196."(%rip)
	movl	$0, "PinFlag-78."(%rip)
	movl	$0, "PinFlag-79."(%rip)
	movl	$0, "PinFlag-80."(%rip)
	movl	$0, "PinFlag-81."(%rip)
	movl	$0, "PinFlag-197."(%rip)
	movl	$0, "PinFlag-198."(%rip)
	movl	$0, "PinFlag-82."(%rip)
	movl	$0, "PinFlag-82.0"(%rip)
	movl	$0, "PinFlag-82.00"(%rip)
	movl	$0, "PinFlag-82.1"(%rip)
	movl	$0, "PinFlag-82.10"(%rip)
	movl	$0, "PinFlag-82.2"(%rip)
	movl	$0, "PinFlag-82.3"(%rip)
	movl	$0, "PinFlag-82.4"(%rip)
	movl	$0, "PinFlag-82.5"(%rip)
	movl	$0, "PinFlag-82.6"(%rip)
	movl	$0, "PinFlag-82.7"(%rip)
	movl	$0, "PinFlag-82.8"(%rip)
	movl	$0, "PinFlag-82.9"(%rip)
	movl	$0, "PinFlag-83."(%rip)
	movl	$0, "PinFlag-83.0"(%rip)
	movl	$0, "PinFlag-83.00"(%rip)
	movl	$0, "PinFlag-83.01"(%rip)
	movl	$0, "PinFlag-85."(%rip)
	movl	$0, "PinFlag-85.0"(%rip)
	movl	$0, "PinFlag-87."(%rip)
	movl	$0, "PinFlag-87.0"(%rip)
	movl	$0, "PinFlag-88."(%rip)
	movl	$0, "PinFlag-89."(%rip)
	movl	$0, "PinFlag-89.0"(%rip)
	movl	$0, "PinFlag-89.1"(%rip)
	movl	$0, "PinFlag-91."(%rip)
	movl	$0, "PinFlag-91.0"(%rip)
	movl	$0, "PinFlag-91.1"(%rip)
	movl	$0, "PinFlag-92."(%rip)
	movl	$0, "PinFlag-95."(%rip)
	movl	$0, "PinFlag-95.0"(%rip)
	movl	$0, "PinFlag-95.1"(%rip)
	movl	$0, "PinFlag-95.2"(%rip)
	movl	$0, "PinFlag-95.20"(%rip)
	movl	$0, "PinFlag-95.21"(%rip)
	movl	$0, "PinFlag-95.210"(%rip)
	movl	$0, "PinFlag-95.211"(%rip)
	movl	$0, "PinFlag-95.22"(%rip)
	movl	$0, "PinFlag-95.23"(%rip)
	movl	$0, "PinFlag-95.3"(%rip)
	movl	$0, "PinFlag-95.4"(%rip)
	movl	$0, "PinFlag-96."(%rip)
	movl	$0, "PinFlag-96.0"(%rip)
	movl	$0, "PinFlag-96.1"(%rip)
	movl	$0, "PinFlag-96.2"(%rip)
	movl	$0, "PinFlag-97."(%rip)
	movl	$0, "PinFlag-97.0"(%rip)
	movl	$0, "PinFlag-199."(%rip)
	movl	$0, "PinFlag-200."(%rip)
	movl	$0, "PinFlag-201."(%rip)
	movl	$0, "PinFlag-202."(%rip)
	movl	$0, "PinFlag-203."(%rip)
	movl	$0, "PinFlag-204."(%rip)
	movl	$0, "PinFlag-205."(%rip)
	movl	$0, "PinFlag-206."(%rip)
	movl	$0, "PinFlag-207."(%rip)
	movl	$0, "PinFlag-208."(%rip)
	movl	$0, "PinFlag-209."(%rip)
	movl	$0, "PinFlag-210."(%rip)
	movl	$0, "PinFlag-211."(%rip)
	movl	$0, "PinFlag-212."(%rip)
	movl	$0, "PinFlag-213."(%rip)
	movl	$0, "PinFlag-214."(%rip)
	movl	$0, "PinFlag-215."(%rip)
	movl	$0, "PinFlag-216."(%rip)
	movl	$0, "PinFlag-217."(%rip)
	movl	$0, "PinFlag-218."(%rip)
	movl	$0, "PinFlag-219."(%rip)
	movl	$0, "PinFlag-220."(%rip)
	movl	$0, "PinFlag-221."(%rip)
	movl	$0, "PinFlag-222."(%rip)
	movl	$0, "PinFlag-223."(%rip)
	movl	$0, "PinFlag-224."(%rip)
	movl	$0, "PinFlag-225."(%rip)
	movl	$0, "PinFlag-226."(%rip)
	movl	$0, "PinFlag-227."(%rip)
	movl	$0, "PinFlag-228."(%rip)
	movl	$0, "PinFlag-229."(%rip)
	movl	$0, "PinFlag-230."(%rip)
	movl	$0, "PinFlag-231."(%rip)
	movl	$0, "PinFlag-232."(%rip)
	movl	$0, "PinFlag-233."(%rip)
	movl	$0, "PinFlag-234."(%rip)
	movl	$0, "PinFlag-235."(%rip)
	movl	$0, "PinFlag-236."(%rip)
	movl	$0, "PinFlag-237."(%rip)
	movl	$0, "PinFlag-238."(%rip)
	movl	$0, "PinFlag-239."(%rip)
	movl	$0, "PinFlag-240."(%rip)
	movl	$0, "PinFlag-241."(%rip)
	movl	$0, "PinFlag-242."(%rip)
	movl	$0, "PinFlag-243."(%rip)
	movl	$0, "PinFlag-244."(%rip)
	movl	$0, "PinFlag-245."(%rip)
	movl	$0, "PinFlag-246."(%rip)
	movl	$0, "PinFlag-247."(%rip)
	movl	$0, "PinFlag-248."(%rip)
	movl	$0, "PinFlag-249."(%rip)
	movl	$0, "PinFlag-250."(%rip)
	movl	$0, "PinFlag-251."(%rip)
	movl	$0, "PinFlag-252."(%rip)
	movl	$0, "PinFlag-253."(%rip)
	movl	$0, "PinFlag-254."(%rip)
	movl	$0, "PinFlag-255."(%rip)
	movl	$0, "PinFlag-256."(%rip)
	movl	$0, "PinFlag-257."(%rip)
	movl	$0, "PinFlag-258."(%rip)
	movl	$0, "PinFlag-259."(%rip)
	movl	$0, "PinFlag-260."(%rip)
	movl	$0, "PinFlag-261."(%rip)
	movl	$0, "PinFlag-262."(%rip)
	movl	$0, "PinFlag-263."(%rip)
	movl	$0, "PinFlag-264."(%rip)
	movl	$0, "PinFlag-265."(%rip)
	movl	$0, "PinFlag-266."(%rip)
	movl	$0, "PinFlag-267."(%rip)
	movl	$0, "PinFlag-268."(%rip)
	movl	$0, "PinFlag-269."(%rip)
	movl	$0, "PinFlag-270."(%rip)
	movl	$0, "PinFlag-271."(%rip)
	movl	$0, "PinFlag-272."(%rip)
	movl	$0, "PinFlag-273."(%rip)
	movl	$0, "PinFlag-274."(%rip)
	movl	$0, "PinFlag-275."(%rip)
	movl	$0, "PinFlag-276."(%rip)
	movl	$0, "PinFlag-277."(%rip)
	movl	$0, "PinFlag-278."(%rip)
	movl	$0, "PinFlag-279."(%rip)
	movl	$0, "PinFlag-280."(%rip)
	movl	$0, "PinFlag-281."(%rip)
	movl	$0, "PinFlag-282."(%rip)
	movl	$0, "PinFlag-283."(%rip)
	movl	$0, "PinFlag-284."(%rip)
	movl	$0, "PinFlag-285."(%rip)
	movl	$0, "PinFlag-286."(%rip)
	movl	$0, "PinFlag-287."(%rip)
	movl	$0, "PinFlag-288."(%rip)
	movl	$0, "PinFlag-289."(%rip)
	movl	$0, "PinFlag-290."(%rip)
	movl	$0, "PinFlag-291."(%rip)
	movl	$0, "PinFlag-292."(%rip)
	movl	$0, "PinFlag-293."(%rip)
	movl	$0, "PinFlag-294."(%rip)
	movl	$0, "PinFlag-295."(%rip)
	movl	$0, "PinFlag-296."(%rip)
	movl	$0, "PinFlag-297."(%rip)
	movl	$0, "PinFlag-298."(%rip)
	movl	$0, "PinFlag-299."(%rip)
	movl	$0, "PinFlag-300."(%rip)
	movl	$0, "PinFlag-301."(%rip)
	movl	$0, "PinFlag-302."(%rip)
	movl	$0, "PinFlag-303."(%rip)
	movl	$0, "PinFlag-304."(%rip)
	movl	$0, "PinFlag-305."(%rip)
	movl	$0, "PinFlag-98."(%rip)
	movl	$0, "PinFlag-306."(%rip)
	movl	$0, "PinFlag-100."(%rip)
	movl	$0, "PinFlag-101."(%rip)
	movl	$0, "PinFlag-102."(%rip)
	movl	$0, "PinFlag-103."(%rip)
	movl	$0, "PinFlag-104."(%rip)
	movl	$0, "PinFlag-105."(%rip)
	movl	$0, "PinFlag-106."(%rip)
	movl	$0, "PinFlag-107."(%rip)
	movl	$0, "PinFlag-108."(%rip)
	movl	$0, "PinFlag-109."(%rip)
	movl	$0, "PinFlag-110."(%rip)
	movl	$0, "PinFlag-110.0"(%rip)
	movl	$0, "PinFlag-111."(%rip)
	movl	$0, "PinFlag-112."(%rip)
	movl	$0, "PinFlag-113."(%rip)
	movl	$0, "PinFlag-114."(%rip)
	movl	$0, "PinFlag-115."(%rip)
	movl	$0, "PinFlag-116."(%rip)
	movl	$0, "PinFlag-117."(%rip)
	movl	$0, "PinFlag-120."(%rip)
	movl	$0, "PinFlag-122."(%rip)
	movl	$0, "PinFlag-123."(%rip)
	movl	$0, "PinFlag-124."(%rip)
	movl	$0, "PinFlag-125."(%rip)
	movl	$0, "PinFlag-126."(%rip)
	movl	$0, "PinFlag-127."(%rip)
	movl	$0, "PinFlag-128."(%rip)
	movl	$0, "PinFlag-129."(%rip)
	movl	$0, "PinFlag-130."(%rip)
	movl	$0, "PinFlag-131."(%rip)
	movl	$0, "PinFlag-132."(%rip)
	movl	$0, "PinFlag-133."(%rip)
	movl	$0, "PinFlag-134."(%rip)
	movl	$0, "PinFlag-136."(%rip)
	movl	$0, "PinFlag-136.0"(%rip)
	movl	$0, "PinFlag-136.1"(%rip)
	movl	$0, "PinFlag-138."(%rip)
	movl	$0, "PinFlag-138.0"(%rip)
	movl	$0, "PinFlag-138.1"(%rip)
	movl	$0, "PinFlag-140."(%rip)
	movl	$0, "PinFlag-141."(%rip)
	movl	$0, "PinFlag-142."(%rip)
	movl	$0, "PinFlag-143."(%rip)
	movl	$0, "PinFlag-144."(%rip)
	movl	$0, "PinFlag-145."(%rip)
	movl	$0, "PinFlag-146."(%rip)
	movl	$0, "PinFlag-147."(%rip)
	movl	$0, "PinFlag-148."(%rip)
	movl	$0, "PinFlag-149."(%rip)
	movl	$0, "PinFlag-150."(%rip)
	movl	$0, "PinFlag-151."(%rip)
	movl	$0, "PinFlag-152."(%rip)
	movl	$0, "PinFlag-153."(%rip)
	movl	$0, "PinFlag-154."(%rip)
	movl	$0, "PinFlag-155."(%rip)
	movl	$0, "PinFlag-156."(%rip)
	movl	$0, "PinFlag-157."(%rip)
	movl	$0, "PinFlag-158."(%rip)
	movl	$0, "PinFlag-159."(%rip)
	movl	$0, "PinFlag-160."(%rip)
	movl	$0, "PinFlag-99."(%rip)
	movl	$0, "PinFlag-307."(%rip)
	movl	$0, "PinFlag-308."(%rip)
	movl	$0, "PinFlag-161."(%rip)
	movl	$0, "PinFlag-161.0"(%rip)
	movl	$0, "PinFlag-161.1"(%rip)
	movl	$0, "PinFlag-161.10"(%rip)
	movl	$0, "PinFlag-161.11"(%rip)
	movl	$0, "PinFlag-161.12"(%rip)
	movl	$0, "PinFlag-161.2"(%rip)
	movl	$0, "PinFlag-161.3"(%rip)
	movl	$0, "PinFlag-161.30"(%rip)
	movl	$0, "PinFlag-161.31"(%rip)
	movl	$0, "PinFlag-161.4"(%rip)
	movl	$0, "PinFlag-161.5"(%rip)
	movl	$0, "PinFlag-309."(%rip)
	movl	$0, "PinFlag-310."(%rip)
	movl	$0, "PinFlag-311."(%rip)
	movl	$0, "PinFlag-312."(%rip)
	movl	$0, "PinFlag-313."(%rip)
	movl	$0, "PinFlag-164."(%rip)
	movl	$0, "PinFlag-164.0"(%rip)
	movl	$0, "PinFlag-314."(%rip)
	movl	$0, "PinFlag-315."(%rip)
	movl	$0, "PinFlag-316."(%rip)
	movl	$0, "PinFlag-165."(%rip)
	movl	$0, "PinFlag-166."(%rip)
	movl	$0, "PinFlag-167."(%rip)
	movl	$0, "PinFlag-168."(%rip)
	movl	$0, "PinFlag-169."(%rip)
	movl	$0, "PinFlag-169.0"(%rip)
	movl	$319, %edi              # imm = 0x13F
	callq	UnPin
	movl	$0, "PinFlag-319."(%rip)
.LBB13_31:                              # %for.end99
	movl	$.L.str.33, %edi
	xorl	%eax, %eax
	movl	%r14d, %esi
	callq	printf
	callq	PinFree
	xorl	%eax, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB13_50:                              # %if.then84
	movl	$.L.str.31, %edi
	xorl	%eax, %eax
	movl	%r14d, %esi
	callq	printf
	xorl	%edi, %edi
	callq	exit
	movl	$0, "PinFlag-171."(%rip)
	movl	$0, "PinFlag-172."(%rip)
	movl	$0, "PinFlag-14."(%rip)
	movl	$0, "PinFlag-14.0"(%rip)
	movl	$0, "PinFlag-14.00"(%rip)
	movl	$0, "PinFlag-14.000"(%rip)
	movl	$0, "PinFlag-14.0000"(%rip)
	movl	$0, "PinFlag-14.00000"(%rip)
	movl	$0, "PinFlag-14.000000"(%rip)
	movl	$0, "PinFlag-14.00001"(%rip)
	movl	$0, "PinFlag-14.000010"(%rip)
	movl	$0, "PinFlag-14.001"(%rip)
	movl	$0, "PinFlag-14.0010"(%rip)
	movl	$0, "PinFlag-14.00100"(%rip)
	movl	$0, "PinFlag-14.001000"(%rip)
	movl	$0, "PinFlag-14.00101"(%rip)
	movl	$0, "PinFlag-14.001010"(%rip)
	movl	$0, "PinFlag-14.002"(%rip)
	movl	$0, "PinFlag-14.003"(%rip)
	movl	$0, "PinFlag-14.004"(%rip)
	movl	$0, "PinFlag-14.005"(%rip)
	movl	$0, "PinFlag-14.006"(%rip)
	movl	$0, "PinFlag-14.007"(%rip)
	movl	$0, "PinFlag-14.0070"(%rip)
	movl	$0, "PinFlag-14.00700"(%rip)
	movl	$0, "PinFlag-14.00701"(%rip)
	movl	$0, "PinFlag-14.00702"(%rip)
	movl	$0, "PinFlag-14.1"(%rip)
	movl	$0, "PinFlag-14.2"(%rip)
	movl	$0, "PinFlag-14.3"(%rip)
	movl	$0, "PinFlag-14.4"(%rip)
	movl	$0, "PinFlag-14.5"(%rip)
	movl	$0, "PinFlag-14.6"(%rip)
	movl	$0, "PinFlag-15."(%rip)
	movl	$0, "PinFlag-15.0"(%rip)
	movl	$0, "PinFlag-15.00"(%rip)
	movl	$0, "PinFlag-17."(%rip)
	movl	$0, "PinFlag-18."(%rip)
	movl	$0, "PinFlag-19."(%rip)
	movl	$0, "PinFlag-20."(%rip)
	movl	$0, "PinFlag-21."(%rip)
	movl	$0, "PinFlag-22."(%rip)
	movl	$0, "PinFlag-23."(%rip)
	movl	$0, "PinFlag-173."(%rip)
	movl	$0, "PinFlag-174."(%rip)
	movl	$0, "PinFlag-175."(%rip)
	movl	$0, "PinFlag-176."(%rip)
	movl	$0, "PinFlag-24."(%rip)
	movl	$0, "PinFlag-24.0"(%rip)
	movl	$0, "PinFlag-24.1"(%rip)
	movl	$0, "PinFlag-26."(%rip)
	movl	$0, "PinFlag-26.0"(%rip)
	movl	$0, "PinFlag-26.1"(%rip)
	movl	$0, "PinFlag-26.10"(%rip)
	movl	$0, "PinFlag-26.100"(%rip)
	movl	$0, "PinFlag-26.101"(%rip)
	movl	$0, "PinFlag-26.102"(%rip)
	movl	$0, "PinFlag-26.103"(%rip)
	movl	$0, "PinFlag-26.104"(%rip)
	movl	$0, "PinFlag-26.11"(%rip)
	movl	$0, "PinFlag-26.110"(%rip)
	movl	$0, "PinFlag-26.1100"(%rip)
	movl	$0, "PinFlag-26.11000"(%rip)
	movl	$0, "PinFlag-26.1101"(%rip)
	movl	$0, "PinFlag-26.11010"(%rip)
	movl	$0, "PinFlag-26.111"(%rip)
	movl	$0, "PinFlag-26.1110"(%rip)
	movl	$0, "PinFlag-26.11100"(%rip)
	movl	$0, "PinFlag-26.1111"(%rip)
	movl	$0, "PinFlag-26.11110"(%rip)
	movl	$0, "PinFlag-26.112"(%rip)
	movl	$0, "PinFlag-26.113"(%rip)
	movl	$0, "PinFlag-26.114"(%rip)
	movl	$0, "PinFlag-26.115"(%rip)
	movl	$0, "PinFlag-26.12"(%rip)
	movl	$0, "PinFlag-27."(%rip)
	movl	$0, "PinFlag-28."(%rip)
	movl	$0, "PinFlag-29."(%rip)
	movl	$0, "PinFlag-30."(%rip)
	movl	$0, "PinFlag-31."(%rip)
	movl	$0, "PinFlag-32."(%rip)
	movl	$0, "PinFlag-177."(%rip)
	movl	$0, "PinFlag-178."(%rip)
	movl	$0, "PinFlag-179."(%rip)
	movl	$0, "PinFlag-180."(%rip)
	movl	$0, "PinFlag-181."(%rip)
	movl	$0, "PinFlag-182."(%rip)
	movl	$0, "PinFlag-33."(%rip)
	movl	$0, "PinFlag-39."(%rip)
	movl	$0, "PinFlag-39.0"(%rip)
	movl	$0, "PinFlag-39.1"(%rip)
	movl	$0, "PinFlag-39.2"(%rip)
	movl	$0, "PinFlag-39.3"(%rip)
	movl	$0, "PinFlag-183."(%rip)
	movl	$0, "PinFlag-43."(%rip)
	movl	$0, "PinFlag-43.0"(%rip)
	movl	$0, "PinFlag-43.1"(%rip)
	movl	$0, "PinFlag-43.2"(%rip)
	movl	$0, "PinFlag-184."(%rip)
	movl	$0, "PinFlag-185."(%rip)
	movl	$0, "PinFlag-186."(%rip)
	movl	$0, "PinFlag-44."(%rip)
	movl	$0, "PinFlag-187."(%rip)
	movl	$0, "PinFlag-188."(%rip)
	movl	$0, "PinFlag-45."(%rip)
	movl	$0, "PinFlag-189."(%rip)
	movl	$0, "PinFlag-47."(%rip)
	movl	$0, "PinFlag-47.0"(%rip)
	movl	$0, "PinFlag-47.00"(%rip)
	movl	$0, "PinFlag-47.01"(%rip)
	movl	$0, "PinFlag-47.02"(%rip)
	movl	$0, "PinFlag-47.03"(%rip)
	movl	$0, "PinFlag-47.04"(%rip)
	movl	$0, "PinFlag-47.1"(%rip)
	movl	$0, "PinFlag-47.10"(%rip)
	movl	$0, "PinFlag-47.11"(%rip)
	movl	$0, "PinFlag-47.12"(%rip)
	movl	$0, "PinFlag-47.13"(%rip)
	movl	$0, "PinFlag-47.14"(%rip)
	movl	$0, "PinFlag-47.2"(%rip)
	movl	$0, "PinFlag-47.3"(%rip)
	movl	$0, "PinFlag-47.30"(%rip)
	movl	$0, "PinFlag-190."(%rip)
	movl	$0, "PinFlag-48."(%rip)
	movl	$0, "PinFlag-49."(%rip)
	movl	$0, "PinFlag-49.0"(%rip)
	movl	$0, "PinFlag-50."(%rip)
	movl	$0, "PinFlag-191."(%rip)
	movl	$0, "PinFlag-192."(%rip)
	movl	$0, "PinFlag-55."(%rip)
	movl	$0, "PinFlag-56."(%rip)
	movl	$0, "PinFlag-57."(%rip)
	movl	$0, "PinFlag-58."(%rip)
	movl	$0, "PinFlag-59."(%rip)
	movl	$0, "PinFlag-60."(%rip)
	movl	$0, "PinFlag-61."(%rip)
	movl	$0, "PinFlag-62."(%rip)
	movl	$0, "PinFlag-63."(%rip)
	movl	$0, "PinFlag-63.0"(%rip)
	movl	$0, "PinFlag-63.1"(%rip)
	movl	$0, "PinFlag-67."(%rip)
	movl	$0, "PinFlag-68."(%rip)
	movl	$0, "PinFlag-69."(%rip)
	movl	$0, "PinFlag-70."(%rip)
	movl	$0, "PinFlag-71."(%rip)
	movl	$0, "PinFlag-72."(%rip)
	movl	$0, "PinFlag-73."(%rip)
	movl	$0, "PinFlag-74."(%rip)
	movl	$0, "PinFlag-75."(%rip)
	movl	$0, "PinFlag-76."(%rip)
	movl	$0, "PinFlag-77."(%rip)
	movl	$0, "PinFlag-193."(%rip)
	movl	$0, "PinFlag-194."(%rip)
	movl	$0, "PinFlag-195."(%rip)
	movl	$0, "PinFlag-196."(%rip)
	movl	$0, "PinFlag-78."(%rip)
	movl	$0, "PinFlag-79."(%rip)
	movl	$0, "PinFlag-80."(%rip)
	movl	$0, "PinFlag-81."(%rip)
	movl	$0, "PinFlag-197."(%rip)
	movl	$0, "PinFlag-198."(%rip)
	movl	$0, "PinFlag-82."(%rip)
	movl	$0, "PinFlag-82.0"(%rip)
	movl	$0, "PinFlag-82.00"(%rip)
	movl	$0, "PinFlag-82.1"(%rip)
	movl	$0, "PinFlag-82.10"(%rip)
	movl	$0, "PinFlag-82.2"(%rip)
	movl	$0, "PinFlag-82.3"(%rip)
	movl	$0, "PinFlag-82.4"(%rip)
	movl	$0, "PinFlag-82.5"(%rip)
	movl	$0, "PinFlag-82.6"(%rip)
	movl	$0, "PinFlag-82.7"(%rip)
	movl	$0, "PinFlag-82.8"(%rip)
	movl	$0, "PinFlag-82.9"(%rip)
	movl	$0, "PinFlag-83."(%rip)
	movl	$0, "PinFlag-83.0"(%rip)
	movl	$0, "PinFlag-83.00"(%rip)
	movl	$0, "PinFlag-83.01"(%rip)
	movl	$0, "PinFlag-85."(%rip)
	movl	$0, "PinFlag-85.0"(%rip)
	movl	$0, "PinFlag-87."(%rip)
	movl	$0, "PinFlag-87.0"(%rip)
	movl	$0, "PinFlag-88."(%rip)
	movl	$0, "PinFlag-89."(%rip)
	movl	$0, "PinFlag-89.0"(%rip)
	movl	$0, "PinFlag-89.1"(%rip)
	movl	$0, "PinFlag-91."(%rip)
	movl	$0, "PinFlag-91.0"(%rip)
	movl	$0, "PinFlag-91.1"(%rip)
	movl	$0, "PinFlag-92."(%rip)
	movl	$0, "PinFlag-95."(%rip)
	movl	$0, "PinFlag-95.0"(%rip)
	movl	$0, "PinFlag-95.1"(%rip)
	movl	$0, "PinFlag-95.2"(%rip)
	movl	$0, "PinFlag-95.20"(%rip)
	movl	$0, "PinFlag-95.21"(%rip)
	movl	$0, "PinFlag-95.210"(%rip)
	movl	$0, "PinFlag-95.211"(%rip)
	movl	$0, "PinFlag-95.22"(%rip)
	movl	$0, "PinFlag-95.23"(%rip)
	movl	$0, "PinFlag-95.3"(%rip)
	movl	$0, "PinFlag-95.4"(%rip)
	movl	$0, "PinFlag-96."(%rip)
	movl	$0, "PinFlag-96.0"(%rip)
	movl	$0, "PinFlag-96.1"(%rip)
	movl	$0, "PinFlag-96.2"(%rip)
	movl	$0, "PinFlag-97."(%rip)
	movl	$0, "PinFlag-97.0"(%rip)
	movl	$0, "PinFlag-199."(%rip)
	movl	$0, "PinFlag-200."(%rip)
	movl	$0, "PinFlag-201."(%rip)
	movl	$0, "PinFlag-202."(%rip)
	movl	$0, "PinFlag-203."(%rip)
	movl	$0, "PinFlag-204."(%rip)
	movl	$0, "PinFlag-205."(%rip)
	movl	$0, "PinFlag-206."(%rip)
	movl	$0, "PinFlag-207."(%rip)
	movl	$0, "PinFlag-208."(%rip)
	movl	$0, "PinFlag-209."(%rip)
	movl	$0, "PinFlag-210."(%rip)
	movl	$0, "PinFlag-211."(%rip)
	movl	$0, "PinFlag-212."(%rip)
	movl	$0, "PinFlag-213."(%rip)
	movl	$0, "PinFlag-214."(%rip)
	movl	$0, "PinFlag-215."(%rip)
	movl	$0, "PinFlag-216."(%rip)
	movl	$0, "PinFlag-217."(%rip)
	movl	$0, "PinFlag-218."(%rip)
	movl	$0, "PinFlag-219."(%rip)
	movl	$0, "PinFlag-220."(%rip)
	movl	$0, "PinFlag-221."(%rip)
	movl	$0, "PinFlag-222."(%rip)
	movl	$0, "PinFlag-223."(%rip)
	movl	$0, "PinFlag-224."(%rip)
	movl	$0, "PinFlag-225."(%rip)
	movl	$0, "PinFlag-226."(%rip)
	movl	$0, "PinFlag-227."(%rip)
	movl	$0, "PinFlag-228."(%rip)
	movl	$0, "PinFlag-229."(%rip)
	movl	$0, "PinFlag-230."(%rip)
	movl	$0, "PinFlag-231."(%rip)
	movl	$0, "PinFlag-232."(%rip)
	movl	$0, "PinFlag-233."(%rip)
	movl	$0, "PinFlag-234."(%rip)
	movl	$0, "PinFlag-235."(%rip)
	movl	$0, "PinFlag-236."(%rip)
	movl	$0, "PinFlag-237."(%rip)
	movl	$0, "PinFlag-238."(%rip)
	movl	$0, "PinFlag-239."(%rip)
	movl	$0, "PinFlag-240."(%rip)
	movl	$0, "PinFlag-241."(%rip)
	movl	$0, "PinFlag-242."(%rip)
	movl	$0, "PinFlag-243."(%rip)
	movl	$0, "PinFlag-244."(%rip)
	movl	$0, "PinFlag-245."(%rip)
	movl	$0, "PinFlag-246."(%rip)
	movl	$0, "PinFlag-247."(%rip)
	movl	$0, "PinFlag-248."(%rip)
	movl	$0, "PinFlag-249."(%rip)
	movl	$0, "PinFlag-250."(%rip)
	movl	$0, "PinFlag-251."(%rip)
	movl	$0, "PinFlag-252."(%rip)
	movl	$0, "PinFlag-253."(%rip)
	movl	$0, "PinFlag-254."(%rip)
	movl	$0, "PinFlag-255."(%rip)
	movl	$0, "PinFlag-256."(%rip)
	movl	$0, "PinFlag-257."(%rip)
	movl	$0, "PinFlag-258."(%rip)
	movl	$0, "PinFlag-259."(%rip)
	movl	$0, "PinFlag-260."(%rip)
	movl	$0, "PinFlag-261."(%rip)
	movl	$0, "PinFlag-262."(%rip)
	movl	$0, "PinFlag-263."(%rip)
	movl	$0, "PinFlag-264."(%rip)
	movl	$0, "PinFlag-265."(%rip)
	movl	$0, "PinFlag-266."(%rip)
	movl	$0, "PinFlag-267."(%rip)
	movl	$0, "PinFlag-268."(%rip)
	movl	$0, "PinFlag-269."(%rip)
	movl	$0, "PinFlag-270."(%rip)
	movl	$0, "PinFlag-271."(%rip)
	movl	$0, "PinFlag-272."(%rip)
	movl	$0, "PinFlag-273."(%rip)
	movl	$0, "PinFlag-274."(%rip)
	movl	$0, "PinFlag-275."(%rip)
	movl	$0, "PinFlag-276."(%rip)
	movl	$0, "PinFlag-277."(%rip)
	movl	$0, "PinFlag-278."(%rip)
	movl	$0, "PinFlag-279."(%rip)
	movl	$0, "PinFlag-280."(%rip)
	movl	$0, "PinFlag-281."(%rip)
	movl	$0, "PinFlag-282."(%rip)
	movl	$0, "PinFlag-283."(%rip)
	movl	$0, "PinFlag-284."(%rip)
	movl	$0, "PinFlag-285."(%rip)
	movl	$0, "PinFlag-286."(%rip)
	movl	$0, "PinFlag-287."(%rip)
	movl	$0, "PinFlag-288."(%rip)
	movl	$0, "PinFlag-289."(%rip)
	movl	$0, "PinFlag-290."(%rip)
	movl	$0, "PinFlag-291."(%rip)
	movl	$0, "PinFlag-292."(%rip)
	movl	$0, "PinFlag-293."(%rip)
	movl	$0, "PinFlag-294."(%rip)
	movl	$0, "PinFlag-295."(%rip)
	movl	$0, "PinFlag-296."(%rip)
	movl	$0, "PinFlag-297."(%rip)
	movl	$0, "PinFlag-298."(%rip)
	movl	$0, "PinFlag-299."(%rip)
	movl	$0, "PinFlag-300."(%rip)
	movl	$0, "PinFlag-301."(%rip)
	movl	$0, "PinFlag-302."(%rip)
	movl	$0, "PinFlag-303."(%rip)
	movl	$0, "PinFlag-304."(%rip)
	movl	$0, "PinFlag-305."(%rip)
	movl	$0, "PinFlag-98."(%rip)
	movl	$0, "PinFlag-306."(%rip)
	movl	$0, "PinFlag-100."(%rip)
	movl	$0, "PinFlag-101."(%rip)
	movl	$0, "PinFlag-102."(%rip)
	movl	$0, "PinFlag-103."(%rip)
	movl	$0, "PinFlag-104."(%rip)
	movl	$0, "PinFlag-105."(%rip)
	movl	$0, "PinFlag-106."(%rip)
	movl	$0, "PinFlag-107."(%rip)
	movl	$0, "PinFlag-108."(%rip)
	movl	$0, "PinFlag-109."(%rip)
	movl	$0, "PinFlag-110."(%rip)
	movl	$0, "PinFlag-110.0"(%rip)
	movl	$0, "PinFlag-111."(%rip)
	movl	$0, "PinFlag-112."(%rip)
	movl	$0, "PinFlag-113."(%rip)
	movl	$0, "PinFlag-114."(%rip)
	movl	$0, "PinFlag-115."(%rip)
	movl	$0, "PinFlag-116."(%rip)
	movl	$0, "PinFlag-117."(%rip)
	movl	$0, "PinFlag-120."(%rip)
	movl	$0, "PinFlag-122."(%rip)
	movl	$0, "PinFlag-123."(%rip)
	movl	$0, "PinFlag-124."(%rip)
	movl	$0, "PinFlag-125."(%rip)
	movl	$0, "PinFlag-126."(%rip)
	movl	$0, "PinFlag-127."(%rip)
	movl	$0, "PinFlag-128."(%rip)
	movl	$0, "PinFlag-129."(%rip)
	movl	$0, "PinFlag-130."(%rip)
	movl	$0, "PinFlag-131."(%rip)
	movl	$0, "PinFlag-132."(%rip)
	movl	$0, "PinFlag-133."(%rip)
	movl	$0, "PinFlag-134."(%rip)
	movl	$0, "PinFlag-136."(%rip)
	movl	$0, "PinFlag-136.0"(%rip)
	movl	$0, "PinFlag-136.1"(%rip)
	movl	$0, "PinFlag-138."(%rip)
	movl	$0, "PinFlag-138.0"(%rip)
	movl	$0, "PinFlag-138.1"(%rip)
	movl	$0, "PinFlag-140."(%rip)
	movl	$0, "PinFlag-141."(%rip)
	movl	$0, "PinFlag-142."(%rip)
	movl	$0, "PinFlag-143."(%rip)
	movl	$0, "PinFlag-144."(%rip)
	movl	$0, "PinFlag-145."(%rip)
	movl	$0, "PinFlag-146."(%rip)
	movl	$0, "PinFlag-147."(%rip)
	movl	$0, "PinFlag-148."(%rip)
	movl	$0, "PinFlag-149."(%rip)
	movl	$0, "PinFlag-150."(%rip)
	movl	$0, "PinFlag-151."(%rip)
	movl	$0, "PinFlag-152."(%rip)
	movl	$0, "PinFlag-153."(%rip)
	movl	$0, "PinFlag-154."(%rip)
	movl	$0, "PinFlag-155."(%rip)
	movl	$0, "PinFlag-156."(%rip)
	movl	$0, "PinFlag-157."(%rip)
	movl	$0, "PinFlag-158."(%rip)
	movl	$0, "PinFlag-159."(%rip)
	movl	$0, "PinFlag-160."(%rip)
	movl	$0, "PinFlag-99."(%rip)
	movl	$0, "PinFlag-307."(%rip)
	movl	$0, "PinFlag-308."(%rip)
	movl	$0, "PinFlag-161."(%rip)
	movl	$0, "PinFlag-161.0"(%rip)
	movl	$0, "PinFlag-161.1"(%rip)
	movl	$0, "PinFlag-161.10"(%rip)
	movl	$0, "PinFlag-161.11"(%rip)
	movl	$0, "PinFlag-161.12"(%rip)
	movl	$0, "PinFlag-161.2"(%rip)
	movl	$0, "PinFlag-161.3"(%rip)
	movl	$0, "PinFlag-161.30"(%rip)
	movl	$0, "PinFlag-161.31"(%rip)
	movl	$0, "PinFlag-161.4"(%rip)
	movl	$0, "PinFlag-161.5"(%rip)
	movl	$0, "PinFlag-309."(%rip)
	movl	$0, "PinFlag-310."(%rip)
	movl	$0, "PinFlag-311."(%rip)
	movl	$0, "PinFlag-312."(%rip)
	movl	$0, "PinFlag-313."(%rip)
	movl	$0, "PinFlag-164."(%rip)
	movl	$0, "PinFlag-164.0"(%rip)
	movl	$0, "PinFlag-314."(%rip)
	movl	$0, "PinFlag-315."(%rip)
	movl	$0, "PinFlag-316."(%rip)
	movl	$0, "PinFlag-165."(%rip)
	movl	$0, "PinFlag-166."(%rip)
	movl	$0, "PinFlag-167."(%rip)
	movl	$0, "PinFlag-168."(%rip)
	movl	$0, "PinFlag-169."(%rip)
	movl	$0, "PinFlag-169.0"(%rip)
	movl	$318, %edi              # imm = 0x13E
	callq	UnPin
	movl	$0, "PinFlag-318.0"(%rip)
	movl	$0, "PinFlag-318."(%rip)
	callq	PinFree
.LBB13_14:                              # %if.then28
	movl	$.Lstr.42, %edi
	callq	puts
	xorl	%edi, %edi
	callq	exit
	callq	PinFree
.Lfunc_end13:
	.size	main, .Lfunc_end13-main
	.cfi_endproc

	.globl	spec_compress
	.align	16, 0x90
	.type	spec_compress,@function
spec_compress:                          # @spec_compress
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
.Ltmp91:
	.cfi_def_cfa_offset 16
	movl	%edx, blockSize100k(%rip)
	callq	compressStream
	movl	$0, "PinFlag-164."(%rip)
	movl	$0, "PinFlag-164.0"(%rip)
	movl	$0, "PinFlag-313."(%rip)
	movl	$0, "PinFlag-312."(%rip)
	movl	$0, "PinFlag-311."(%rip)
	movl	$0, "PinFlag-310."(%rip)
	movl	$0, "PinFlag-309."(%rip)
	movl	$0, "PinFlag-161."(%rip)
	movl	$0, "PinFlag-161.0"(%rip)
	movl	$0, "PinFlag-161.1"(%rip)
	movl	$0, "PinFlag-161.10"(%rip)
	movl	$0, "PinFlag-161.11"(%rip)
	movl	$0, "PinFlag-161.12"(%rip)
	movl	$0, "PinFlag-161.2"(%rip)
	movl	$0, "PinFlag-161.3"(%rip)
	movl	$0, "PinFlag-161.30"(%rip)
	movl	$0, "PinFlag-161.31"(%rip)
	movl	$0, "PinFlag-161.4"(%rip)
	movl	$0, "PinFlag-161.5"(%rip)
	movl	$0, "PinFlag-308."(%rip)
	movl	$0, "PinFlag-307."(%rip)
	movl	$0, "PinFlag-98."(%rip)
	movl	$0, "PinFlag-305."(%rip)
	movl	$0, "PinFlag-304."(%rip)
	movl	$0, "PinFlag-303."(%rip)
	movl	$0, "PinFlag-302."(%rip)
	movl	$0, "PinFlag-301."(%rip)
	movl	$0, "PinFlag-300."(%rip)
	movl	$0, "PinFlag-299."(%rip)
	movl	$0, "PinFlag-298."(%rip)
	movl	$0, "PinFlag-297."(%rip)
	movl	$0, "PinFlag-296."(%rip)
	movl	$0, "PinFlag-295."(%rip)
	movl	$0, "PinFlag-294."(%rip)
	movl	$0, "PinFlag-293."(%rip)
	movl	$0, "PinFlag-292."(%rip)
	movl	$0, "PinFlag-291."(%rip)
	movl	$0, "PinFlag-290."(%rip)
	movl	$0, "PinFlag-289."(%rip)
	movl	$0, "PinFlag-288."(%rip)
	movl	$0, "PinFlag-287."(%rip)
	movl	$0, "PinFlag-286."(%rip)
	movl	$0, "PinFlag-285."(%rip)
	movl	$0, "PinFlag-284."(%rip)
	movl	$0, "PinFlag-283."(%rip)
	movl	$0, "PinFlag-282."(%rip)
	movl	$0, "PinFlag-281."(%rip)
	movl	$0, "PinFlag-280."(%rip)
	movl	$0, "PinFlag-279."(%rip)
	movl	$0, "PinFlag-278."(%rip)
	movl	$0, "PinFlag-277."(%rip)
	movl	$0, "PinFlag-276."(%rip)
	movl	$0, "PinFlag-275."(%rip)
	movl	$0, "PinFlag-274."(%rip)
	movl	$0, "PinFlag-273."(%rip)
	movl	$0, "PinFlag-272."(%rip)
	movl	$0, "PinFlag-271."(%rip)
	movl	$0, "PinFlag-270."(%rip)
	movl	$0, "PinFlag-269."(%rip)
	movl	$0, "PinFlag-268."(%rip)
	movl	$0, "PinFlag-267."(%rip)
	movl	$0, "PinFlag-266."(%rip)
	movl	$0, "PinFlag-265."(%rip)
	movl	$0, "PinFlag-264."(%rip)
	movl	$0, "PinFlag-263."(%rip)
	movl	$0, "PinFlag-262."(%rip)
	movl	$0, "PinFlag-261."(%rip)
	movl	$0, "PinFlag-260."(%rip)
	movl	$0, "PinFlag-259."(%rip)
	movl	$0, "PinFlag-258."(%rip)
	movl	$0, "PinFlag-257."(%rip)
	movl	$0, "PinFlag-256."(%rip)
	movl	$0, "PinFlag-255."(%rip)
	movl	$0, "PinFlag-254."(%rip)
	movl	$0, "PinFlag-253."(%rip)
	movl	$0, "PinFlag-252."(%rip)
	movl	$0, "PinFlag-251."(%rip)
	movl	$0, "PinFlag-250."(%rip)
	movl	$0, "PinFlag-249."(%rip)
	movl	$0, "PinFlag-248."(%rip)
	movl	$0, "PinFlag-247."(%rip)
	movl	$0, "PinFlag-246."(%rip)
	movl	$0, "PinFlag-245."(%rip)
	movl	$0, "PinFlag-244."(%rip)
	movl	$0, "PinFlag-243."(%rip)
	movl	$0, "PinFlag-242."(%rip)
	movl	$0, "PinFlag-241."(%rip)
	movl	$0, "PinFlag-240."(%rip)
	movl	$0, "PinFlag-239."(%rip)
	movl	$0, "PinFlag-238."(%rip)
	movl	$0, "PinFlag-237."(%rip)
	movl	$0, "PinFlag-236."(%rip)
	movl	$0, "PinFlag-235."(%rip)
	movl	$0, "PinFlag-234."(%rip)
	movl	$0, "PinFlag-233."(%rip)
	movl	$0, "PinFlag-232."(%rip)
	movl	$0, "PinFlag-231."(%rip)
	movl	$0, "PinFlag-230."(%rip)
	movl	$0, "PinFlag-229."(%rip)
	movl	$0, "PinFlag-228."(%rip)
	movl	$0, "PinFlag-227."(%rip)
	movl	$0, "PinFlag-226."(%rip)
	movl	$0, "PinFlag-225."(%rip)
	movl	$0, "PinFlag-224."(%rip)
	movl	$0, "PinFlag-223."(%rip)
	movl	$0, "PinFlag-222."(%rip)
	movl	$0, "PinFlag-221."(%rip)
	movl	$0, "PinFlag-220."(%rip)
	movl	$0, "PinFlag-219."(%rip)
	movl	$0, "PinFlag-218."(%rip)
	movl	$0, "PinFlag-217."(%rip)
	movl	$0, "PinFlag-216."(%rip)
	movl	$0, "PinFlag-215."(%rip)
	movl	$0, "PinFlag-214."(%rip)
	movl	$0, "PinFlag-213."(%rip)
	movl	$0, "PinFlag-212."(%rip)
	movl	$0, "PinFlag-211."(%rip)
	movl	$0, "PinFlag-210."(%rip)
	movl	$0, "PinFlag-209."(%rip)
	movl	$0, "PinFlag-208."(%rip)
	movl	$0, "PinFlag-207."(%rip)
	movl	$0, "PinFlag-206."(%rip)
	movl	$0, "PinFlag-205."(%rip)
	movl	$0, "PinFlag-204."(%rip)
	movl	$0, "PinFlag-203."(%rip)
	movl	$0, "PinFlag-202."(%rip)
	movl	$0, "PinFlag-201."(%rip)
	movl	$0, "PinFlag-200."(%rip)
	movl	$0, "PinFlag-199."(%rip)
	movl	$0, "PinFlag-82."(%rip)
	movl	$0, "PinFlag-82.0"(%rip)
	movl	$0, "PinFlag-82.00"(%rip)
	movl	$0, "PinFlag-82.1"(%rip)
	movl	$0, "PinFlag-82.10"(%rip)
	movl	$0, "PinFlag-82.2"(%rip)
	movl	$0, "PinFlag-82.3"(%rip)
	movl	$0, "PinFlag-82.4"(%rip)
	movl	$0, "PinFlag-82.5"(%rip)
	movl	$0, "PinFlag-82.6"(%rip)
	movl	$0, "PinFlag-82.7"(%rip)
	movl	$0, "PinFlag-82.8"(%rip)
	movl	$0, "PinFlag-82.9"(%rip)
	movl	$0, "PinFlag-83."(%rip)
	movl	$0, "PinFlag-83.0"(%rip)
	movl	$0, "PinFlag-83.00"(%rip)
	movl	$0, "PinFlag-83.01"(%rip)
	movl	$0, "PinFlag-85."(%rip)
	movl	$0, "PinFlag-85.0"(%rip)
	movl	$0, "PinFlag-87."(%rip)
	movl	$0, "PinFlag-87.0"(%rip)
	movl	$0, "PinFlag-88."(%rip)
	movl	$0, "PinFlag-89."(%rip)
	movl	$0, "PinFlag-89.0"(%rip)
	movl	$0, "PinFlag-89.1"(%rip)
	movl	$0, "PinFlag-91."(%rip)
	movl	$0, "PinFlag-91.0"(%rip)
	movl	$0, "PinFlag-91.1"(%rip)
	movl	$0, "PinFlag-92."(%rip)
	movl	$0, "PinFlag-95."(%rip)
	movl	$0, "PinFlag-95.0"(%rip)
	movl	$0, "PinFlag-95.1"(%rip)
	movl	$0, "PinFlag-95.2"(%rip)
	movl	$0, "PinFlag-95.20"(%rip)
	movl	$0, "PinFlag-95.21"(%rip)
	movl	$0, "PinFlag-95.210"(%rip)
	movl	$0, "PinFlag-95.211"(%rip)
	movl	$0, "PinFlag-95.22"(%rip)
	movl	$0, "PinFlag-95.23"(%rip)
	movl	$0, "PinFlag-95.3"(%rip)
	movl	$0, "PinFlag-95.4"(%rip)
	movl	$0, "PinFlag-96."(%rip)
	movl	$0, "PinFlag-96.0"(%rip)
	movl	$0, "PinFlag-96.1"(%rip)
	movl	$0, "PinFlag-96.2"(%rip)
	movl	$0, "PinFlag-97."(%rip)
	movl	$0, "PinFlag-97.0"(%rip)
	movl	$0, "PinFlag-198."(%rip)
	movl	$0, "PinFlag-197."(%rip)
	movl	$0, "PinFlag-78."(%rip)
	movl	$0, "PinFlag-79."(%rip)
	movl	$0, "PinFlag-80."(%rip)
	movl	$0, "PinFlag-81."(%rip)
	movl	$0, "PinFlag-196."(%rip)
	movl	$0, "PinFlag-195."(%rip)
	movl	$0, "PinFlag-194."(%rip)
	movl	$0, "PinFlag-193."(%rip)
	movl	$0, "PinFlag-55."(%rip)
	movl	$0, "PinFlag-56."(%rip)
	movl	$0, "PinFlag-57."(%rip)
	movl	$0, "PinFlag-58."(%rip)
	movl	$0, "PinFlag-59."(%rip)
	movl	$0, "PinFlag-60."(%rip)
	movl	$0, "PinFlag-61."(%rip)
	movl	$0, "PinFlag-62."(%rip)
	movl	$0, "PinFlag-63."(%rip)
	movl	$0, "PinFlag-63.0"(%rip)
	movl	$0, "PinFlag-63.1"(%rip)
	movl	$0, "PinFlag-67."(%rip)
	movl	$0, "PinFlag-68."(%rip)
	movl	$0, "PinFlag-69."(%rip)
	movl	$0, "PinFlag-70."(%rip)
	movl	$0, "PinFlag-71."(%rip)
	movl	$0, "PinFlag-72."(%rip)
	movl	$0, "PinFlag-73."(%rip)
	movl	$0, "PinFlag-74."(%rip)
	movl	$0, "PinFlag-75."(%rip)
	movl	$0, "PinFlag-76."(%rip)
	movl	$0, "PinFlag-77."(%rip)
	movl	$0, "PinFlag-192."(%rip)
	movl	$0, "PinFlag-191."(%rip)
	movl	$0, "PinFlag-49."(%rip)
	movl	$0, "PinFlag-49.0"(%rip)
	movl	$0, "PinFlag-48."(%rip)
	movl	$0, "PinFlag-190."(%rip)
	movl	$0, "PinFlag-44."(%rip)
	movl	$0, "PinFlag-186."(%rip)
	movl	$0, "PinFlag-185."(%rip)
	movl	$0, "PinFlag-184."(%rip)
	movl	$0, "PinFlag-43."(%rip)
	movl	$0, "PinFlag-43.0"(%rip)
	movl	$0, "PinFlag-43.1"(%rip)
	movl	$0, "PinFlag-43.2"(%rip)
	movl	$0, "PinFlag-183."(%rip)
	movl	$0, "PinFlag-33."(%rip)
	movl	$0, "PinFlag-182."(%rip)
	movl	$0, "PinFlag-181."(%rip)
	movl	$0, "PinFlag-180."(%rip)
	movl	$0, "PinFlag-179."(%rip)
	movl	$0, "PinFlag-178."(%rip)
	movl	$0, "PinFlag-177."(%rip)
	movl	$0, "PinFlag-24."(%rip)
	movl	$0, "PinFlag-24.0"(%rip)
	movl	$0, "PinFlag-24.1"(%rip)
	movl	$0, "PinFlag-26."(%rip)
	movl	$0, "PinFlag-26.0"(%rip)
	movl	$0, "PinFlag-26.1"(%rip)
	movl	$0, "PinFlag-26.10"(%rip)
	movl	$0, "PinFlag-26.100"(%rip)
	movl	$0, "PinFlag-26.101"(%rip)
	movl	$0, "PinFlag-26.102"(%rip)
	movl	$0, "PinFlag-26.103"(%rip)
	movl	$0, "PinFlag-26.104"(%rip)
	movl	$0, "PinFlag-26.11"(%rip)
	movl	$0, "PinFlag-26.110"(%rip)
	movl	$0, "PinFlag-26.1100"(%rip)
	movl	$0, "PinFlag-26.11000"(%rip)
	movl	$0, "PinFlag-26.1101"(%rip)
	movl	$0, "PinFlag-26.11010"(%rip)
	movl	$0, "PinFlag-26.111"(%rip)
	movl	$0, "PinFlag-26.1110"(%rip)
	movl	$0, "PinFlag-26.11100"(%rip)
	movl	$0, "PinFlag-26.1111"(%rip)
	movl	$0, "PinFlag-26.11110"(%rip)
	movl	$0, "PinFlag-26.112"(%rip)
	movl	$0, "PinFlag-26.113"(%rip)
	movl	$0, "PinFlag-26.114"(%rip)
	movl	$0, "PinFlag-26.115"(%rip)
	movl	$0, "PinFlag-26.12"(%rip)
	movl	$0, "PinFlag-27."(%rip)
	movl	$0, "PinFlag-28."(%rip)
	movl	$0, "PinFlag-29."(%rip)
	movl	$0, "PinFlag-30."(%rip)
	movl	$0, "PinFlag-31."(%rip)
	movl	$0, "PinFlag-32."(%rip)
	movl	$0, "PinFlag-176."(%rip)
	movl	$0, "PinFlag-175."(%rip)
	movl	$0, "PinFlag-174."(%rip)
	movl	$0, "PinFlag-173."(%rip)
	movl	$0, "PinFlag-14."(%rip)
	movl	$0, "PinFlag-14.0"(%rip)
	movl	$0, "PinFlag-14.00"(%rip)
	movl	$0, "PinFlag-14.000"(%rip)
	movl	$0, "PinFlag-14.0000"(%rip)
	movl	$0, "PinFlag-14.00000"(%rip)
	movl	$0, "PinFlag-14.000000"(%rip)
	movl	$0, "PinFlag-14.00001"(%rip)
	movl	$0, "PinFlag-14.000010"(%rip)
	movl	$0, "PinFlag-14.001"(%rip)
	movl	$0, "PinFlag-14.0010"(%rip)
	movl	$0, "PinFlag-14.00100"(%rip)
	movl	$0, "PinFlag-14.001000"(%rip)
	movl	$0, "PinFlag-14.00101"(%rip)
	movl	$0, "PinFlag-14.001010"(%rip)
	movl	$0, "PinFlag-14.002"(%rip)
	movl	$0, "PinFlag-14.003"(%rip)
	movl	$0, "PinFlag-14.004"(%rip)
	movl	$0, "PinFlag-14.005"(%rip)
	movl	$0, "PinFlag-14.006"(%rip)
	movl	$0, "PinFlag-14.007"(%rip)
	movl	$0, "PinFlag-14.0070"(%rip)
	movl	$0, "PinFlag-14.00700"(%rip)
	movl	$0, "PinFlag-14.00701"(%rip)
	movl	$0, "PinFlag-14.00702"(%rip)
	movl	$0, "PinFlag-14.1"(%rip)
	movl	$0, "PinFlag-14.2"(%rip)
	movl	$0, "PinFlag-14.3"(%rip)
	movl	$0, "PinFlag-14.4"(%rip)
	movl	$0, "PinFlag-14.5"(%rip)
	movl	$0, "PinFlag-14.6"(%rip)
	movl	$0, "PinFlag-15."(%rip)
	movl	$0, "PinFlag-15.0"(%rip)
	movl	$0, "PinFlag-15.00"(%rip)
	movl	$0, "PinFlag-17."(%rip)
	movl	$0, "PinFlag-18."(%rip)
	movl	$0, "PinFlag-19."(%rip)
	movl	$0, "PinFlag-20."(%rip)
	movl	$0, "PinFlag-21."(%rip)
	movl	$0, "PinFlag-22."(%rip)
	movl	$0, "PinFlag-23."(%rip)
	movl	$0, "PinFlag-172."(%rip)
	movl	$0, "PinFlag-171."(%rip)
	popq	%rax
	retq
.Lfunc_end14:
	.size	spec_compress, .Lfunc_end14-spec_compress
	.cfi_endproc

	.globl	spec_uncompress
	.align	16, 0x90
	.type	spec_uncompress,@function
spec_uncompress:                        # @spec_uncompress
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
.Ltmp92:
	.cfi_def_cfa_offset 16
	movl	$0, blockSize100k(%rip)
	callq	uncompressStream
	movl	$0, "PinFlag-165."(%rip)
	movl	$0, "PinFlag-166."(%rip)
	movl	$0, "PinFlag-167."(%rip)
	movl	$0, "PinFlag-168."(%rip)
	movl	$0, "PinFlag-169."(%rip)
	movl	$0, "PinFlag-169.0"(%rip)
	movl	$0, "PinFlag-316."(%rip)
	movl	$0, "PinFlag-315."(%rip)
	movl	$0, "PinFlag-314."(%rip)
	movl	$0, "PinFlag-100."(%rip)
	movl	$0, "PinFlag-101."(%rip)
	movl	$0, "PinFlag-102."(%rip)
	movl	$0, "PinFlag-103."(%rip)
	movl	$0, "PinFlag-104."(%rip)
	movl	$0, "PinFlag-105."(%rip)
	movl	$0, "PinFlag-106."(%rip)
	movl	$0, "PinFlag-107."(%rip)
	movl	$0, "PinFlag-108."(%rip)
	movl	$0, "PinFlag-109."(%rip)
	movl	$0, "PinFlag-110."(%rip)
	movl	$0, "PinFlag-110.0"(%rip)
	movl	$0, "PinFlag-111."(%rip)
	movl	$0, "PinFlag-112."(%rip)
	movl	$0, "PinFlag-113."(%rip)
	movl	$0, "PinFlag-114."(%rip)
	movl	$0, "PinFlag-115."(%rip)
	movl	$0, "PinFlag-116."(%rip)
	movl	$0, "PinFlag-117."(%rip)
	movl	$0, "PinFlag-120."(%rip)
	movl	$0, "PinFlag-122."(%rip)
	movl	$0, "PinFlag-123."(%rip)
	movl	$0, "PinFlag-124."(%rip)
	movl	$0, "PinFlag-125."(%rip)
	movl	$0, "PinFlag-126."(%rip)
	movl	$0, "PinFlag-127."(%rip)
	movl	$0, "PinFlag-128."(%rip)
	movl	$0, "PinFlag-129."(%rip)
	movl	$0, "PinFlag-130."(%rip)
	movl	$0, "PinFlag-131."(%rip)
	movl	$0, "PinFlag-132."(%rip)
	movl	$0, "PinFlag-133."(%rip)
	movl	$0, "PinFlag-134."(%rip)
	movl	$0, "PinFlag-136."(%rip)
	movl	$0, "PinFlag-136.0"(%rip)
	movl	$0, "PinFlag-136.1"(%rip)
	movl	$0, "PinFlag-138."(%rip)
	movl	$0, "PinFlag-138.0"(%rip)
	movl	$0, "PinFlag-138.1"(%rip)
	movl	$0, "PinFlag-140."(%rip)
	movl	$0, "PinFlag-141."(%rip)
	movl	$0, "PinFlag-142."(%rip)
	movl	$0, "PinFlag-143."(%rip)
	movl	$0, "PinFlag-144."(%rip)
	movl	$0, "PinFlag-145."(%rip)
	movl	$0, "PinFlag-146."(%rip)
	movl	$0, "PinFlag-147."(%rip)
	movl	$0, "PinFlag-148."(%rip)
	movl	$0, "PinFlag-149."(%rip)
	movl	$0, "PinFlag-150."(%rip)
	movl	$0, "PinFlag-151."(%rip)
	movl	$0, "PinFlag-152."(%rip)
	movl	$0, "PinFlag-153."(%rip)
	movl	$0, "PinFlag-154."(%rip)
	movl	$0, "PinFlag-155."(%rip)
	movl	$0, "PinFlag-156."(%rip)
	movl	$0, "PinFlag-157."(%rip)
	movl	$0, "PinFlag-158."(%rip)
	movl	$0, "PinFlag-159."(%rip)
	movl	$0, "PinFlag-160."(%rip)
	movl	$0, "PinFlag-99."(%rip)
	movl	$0, "PinFlag-306."(%rip)
	movl	$0, "PinFlag-50."(%rip)
	movl	$0, "PinFlag-47."(%rip)
	movl	$0, "PinFlag-47.0"(%rip)
	movl	$0, "PinFlag-47.00"(%rip)
	movl	$0, "PinFlag-47.01"(%rip)
	movl	$0, "PinFlag-47.02"(%rip)
	movl	$0, "PinFlag-47.03"(%rip)
	movl	$0, "PinFlag-47.04"(%rip)
	movl	$0, "PinFlag-47.1"(%rip)
	movl	$0, "PinFlag-47.10"(%rip)
	movl	$0, "PinFlag-47.11"(%rip)
	movl	$0, "PinFlag-47.12"(%rip)
	movl	$0, "PinFlag-47.13"(%rip)
	movl	$0, "PinFlag-47.14"(%rip)
	movl	$0, "PinFlag-47.2"(%rip)
	movl	$0, "PinFlag-47.3"(%rip)
	movl	$0, "PinFlag-47.30"(%rip)
	movl	$0, "PinFlag-189."(%rip)
	movl	$0, "PinFlag-45."(%rip)
	movl	$0, "PinFlag-188."(%rip)
	movl	$0, "PinFlag-187."(%rip)
	movl	$0, "PinFlag-39."(%rip)
	movl	$0, "PinFlag-39.0"(%rip)
	movl	$0, "PinFlag-39.1"(%rip)
	movl	$0, "PinFlag-39.2"(%rip)
	movl	$0, "PinFlag-39.3"(%rip)
	popq	%rax
	retq
.Lfunc_end15:
	.size	spec_uncompress, .Lfunc_end15-spec_uncompress
	.cfi_endproc

	.globl	spec_initbufs
	.align	16, 0x90
	.type	spec_initbufs,@function
spec_initbufs:                          # @spec_initbufs
	.cfi_startproc
# BB#0:                                 # %entry
	movb	$0, smallMode(%rip)
	movl	$0, verbosity(%rip)
	movl	$9, blockSize100k(%rip)
	movl	$30, workFactor(%rip)
	retq
.Lfunc_end16:
	.size	spec_initbufs, .Lfunc_end16-spec_initbufs
	.cfi_endproc

	.globl	debug_time
	.align	16, 0x90
	.type	debug_time,@function
debug_time:                             # @debug_time
	.cfi_startproc
# BB#0:                                 # %entry
	xorl	%eax, %eax
	retq
.Lfunc_end17:
	.size	debug_time, .Lfunc_end17-debug_time
	.cfi_endproc

	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI18_0:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
.LCPI18_1:
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
	.section	.rodata.cst4,"aM",@progbits,4
	.align	4
.LCPI18_2:
	.long	1065353216              # float 1
	.text
	.globl	BZ2_blockSort
	.align	16, 0x90
	.type	BZ2_blockSort,@function
BZ2_blockSort:                          # @BZ2_blockSort
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp93:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp94:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp95:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp96:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp97:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp98:
	.cfi_def_cfa_offset 56
	subq	$4824, %rsp             # imm = 0x12D8
.Ltmp99:
	.cfi_def_cfa_offset 4880
.Ltmp100:
	.cfi_offset %rbx, -56
.Ltmp101:
	.cfi_offset %r12, -48
.Ltmp102:
	.cfi_offset %r13, -40
.Ltmp103:
	.cfi_offset %r14, -32
.Ltmp104:
	.cfi_offset %r15, -24
.Ltmp105:
	.cfi_offset %rbp, -16
	movq	%rdi, %rax
	movq	40(%rax), %r13
	movq	56(%rax), %r14
	movslq	108(%rax), %rcx
	cmpq	$9999, %rcx             # imm = 0x270F
	movl	656(%rax), %r8d
	jg	.LBB18_2
# BB#1:                                 # %if.then
	movq	24(%rax), %rdi
	movq	32(%rax), %rsi
	movq	%r13, %rdx
	jmp	.LBB18_301
.LBB18_2:                               # %if.else
	movq	64(%rax), %r12
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movl	88(%rax), %eax
	leal	34(%rcx), %edx
	leal	35(%rcx), %ebx
	testb	$1, %dl
	cmovel	%edx, %ebx
	testl	%eax, %eax
	movl	$1, %edx
	cmovgl	%eax, %edx
	cmpl	$100, %edx
	movl	$100, %eax
	cmovlel	%edx, %eax
	decl	%eax
	cltq
	imulq	$1431655766, %rax, %rdx # imm = 0x55555556
	movq	%rdx, %rax
	shrq	$63, %rax
	shrq	$32, %rdx
	addl	%eax, %edx
	imull	%ecx, %edx
	movq	%rdx, 16(%rsp)          # 8-byte Spill
	movl	%edx, 284(%rsp)
	cmpl	$4, %r8d
	movl	%r8d, 76(%rsp)          # 4-byte Spill
	movq	%rcx, %r15
	jge	.LBB18_3
.LBB18_4:                               # %for.body.preheader.i
	movslq	%ebx, %rax
	movq	%rax, 248(%rsp)         # 8-byte Spill
	xorl	%esi, %esi
	movl	$262148, %edx           # imm = 0x40004
	movq	%r13, %rdi
	callq	memset
	movzbl	(%r12), %ebx
	shll	$8, %ebx
	leal	-1(%r15), %ecx
	cmpl	$3, %ecx
	movq	%r15, %r11
	jl	.LBB18_5
# BB#6:                                 # %for.body6.preheader.i
	movl	%ecx, 36(%rsp)          # 4-byte Spill
	movq	%r14, 168(%rsp)         # 8-byte Spill
	leal	-4(%r11), %r15d
	movl	%r15d, %esi
	shrl	$2, %esi
	cmpl	$0, "PinFlag-23."(%rip)
	jne	.LBB18_8
# BB#7:
	movl	$.L__unnamed_10, %edi
	movl	$64, %edx
	movl	$65, %ecx
	movl	$1, %r8d
	movq	%r11, %rbp
	callq	Pin
	movq	%rbp, %r11
	movl	$1, "PinFlag-23."(%rip)
.LBB18_8:
	movq	%r11, 256(%rsp)         # 8-byte Spill
	leal	-1(%r11), %r9d
	movslq	%r9d, %rax
	leaq	(%r12,%rax), %r8
	movq	248(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, %rsi
	leaq	(%rsi,%rax,2), %r10
	addq	%r12, %r10
	leal	-4(%r11), %eax
	cltq
	movq	%r11, %rdx
	leaq	(%r12,%rax), %r11
	leaq	(%rsi,%rax,2), %r14
	addq	%r12, %r14
	leal	-3(%rdx), %eax
	cltq
	leaq	(%r12,%rax), %rbp
	leaq	(%rsi,%rax,2), %rcx
	addq	%r12, %rcx
	leal	-2(%rdx), %eax
	movslq	%eax, %rdx
	leaq	(%r12,%rdx), %rax
	leaq	(%rsi,%rdx,2), %rdx
	addq	%r12, %rdx
	xorl	%esi, %esi
	.align	16, 0x90
.LBB18_9:                               # %for.body6.i
                                        # =>This Inner Loop Header: Depth=1
	movw	$0, (%r10,%rsi,2)
	sarl	$8, %ebx
	movzbl	(%r8,%rsi), %edi
	shll	$8, %edi
	orl	%ebx, %edi
	movslq	%edi, %rdi
	incl	(%r13,%rdi,4)
	movw	$0, (%rdx,%rsi,2)
	sarl	$8, %edi
	movzbl	(%rax,%rsi), %ebx
	shll	$8, %ebx
	orl	%edi, %ebx
	movslq	%ebx, %rdi
	incl	(%r13,%rdi,4)
	movw	$0, (%rcx,%rsi,2)
	sarl	$8, %edi
	movzbl	(%rbp,%rsi), %ebx
	shll	$8, %ebx
	orl	%edi, %ebx
	movslq	%ebx, %rdi
	incl	(%r13,%rdi,4)
	movw	$0, (%r14,%rsi,2)
	sarl	$8, %edi
	movzbl	(%r11,%rsi), %ebx
	shll	$8, %ebx
	orl	%edi, %ebx
	movslq	%ebx, %rdi
	incl	(%r13,%rdi,4)
	addq	$-4, %rsi
	leal	(%r9,%rsi), %edi
	cmpl	$2, %edi
	jg	.LBB18_9
# BB#10:                                # %for.cond61.preheader.loopexit.i
	andl	$-4, %r15d
	movq	256(%rsp), %r11         # 8-byte Reload
	leal	-5(%r11), %eax
	subl	%r15d, %eax
	movq	168(%rsp), %r14         # 8-byte Reload
	jmp	.LBB18_11
.LBB18_5:
	movl	%ecx, %eax
	movl	%ecx, 36(%rsp)          # 4-byte Spill
.LBB18_11:                              # %for.cond61.preheader.i
	movq	%r14, 168(%rsp)         # 8-byte Spill
	movq	248(%rsp), %rcx         # 8-byte Reload
	leaq	(%r12,%rcx), %rcx
	testl	%eax, %eax
	movq	%r13, %r10
	movq	%rcx, %r13
	js	.LBB18_16
# BB#12:                                # %for.body64.preheader.i
	movslq	%eax, %rbp
	movq	%rbp, %rcx
	notq	%rcx
	cmpq	$-2, %rcx
	movq	$-1, %rax
	cmovgq	%rcx, %rax
	cmpl	$0, "PinFlag-22."(%rip)
	jne	.LBB18_14
# BB#13:
	leaq	1(%rax,%rbp), %rsi
	movl	$.L__unnamed_11, %edi
	movl	$4, %edx
	movl	$18, %ecx
	movl	$1, %r8d
	movq	%r10, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r10
	movl	$1, "PinFlag-22."(%rip)
.LBB18_14:
	incq	%rbp
	.align	16, 0x90
.LBB18_15:                              # %for.body64.i
                                        # =>This Inner Loop Header: Depth=1
	movw	$0, -2(%r13,%rbp,2)
	sarl	$8, %ebx
	movzbl	-1(%r12,%rbp), %eax
	shll	$8, %eax
	orl	%eax, %ebx
	movslq	%ebx, %rax
	incl	(%r10,%rax,4)
	decq	%rbp
	jg	.LBB18_15
.LBB18_16:                              # %for.body83.preheader.i
	leaq	(%r12,%r11), %r14
	leaq	33(%r12,%r11), %rcx
	movq	248(%rsp), %rax         # 8-byte Reload
	leaq	(%rax,%r11,2), %rax
	leaq	(%r12,%rax), %rsi
	leaq	66(%r12,%rax), %rdi
	leaq	33(%r12), %rbp
	cmpq	%rdi, %r14
	setbe	%r9b
	cmpq	%rcx, %rsi
	setbe	%bl
	cmpq	%rbp, %r14
	setbe	%al
	cmpq	%rcx, %r12
	setbe	%r8b
	cmpq	%rbp, %rsi
	setbe	%cl
	cmpq	%rdi, %r12
	setbe	%sil
	xorl	%ebp, %ebp
	testb	%bl, %r9b
	jne	.LBB18_20
# BB#17:                                # %for.body83.preheader.i
	andb	%r8b, %al
	jne	.LBB18_20
# BB#18:                                # %for.body83.preheader.i
	andb	%sil, %cl
	jne	.LBB18_20
# BB#19:                                # %vector.body
	movq	(%r12), %rax
	movq	%rax, (%r12,%r11)
	xorps	%xmm0, %xmm0
	movups	%xmm0, (%r13,%r11,2)
	movq	8(%r12), %rax
	movq	%rax, 8(%r12,%r11)
	movups	%xmm0, 16(%r13,%r11,2)
	movq	16(%r12), %rax
	movq	%rax, 16(%r12,%r11)
	movups	%xmm0, 32(%r13,%r11,2)
	movq	24(%r12), %rax
	movq	%rax, 24(%r12,%r11)
	movups	%xmm0, 48(%r13,%r11,2)
	movl	$32, %ebp
.LBB18_20:                              # %for.body83.i.prol.preheader
	movq	%r13, 264(%rsp)         # 8-byte Spill
	movl	$33, %r13d
	cmpl	$0, "PinFlag-21."(%rip)
	jne	.LBB18_22
# BB#21:
	movl	$.L__unnamed_12, %edi
	movl	$1, %esi
	movl	$3, %edx
	movl	$13, %ecx
	movl	$1, %r8d
	movq	%r10, %r15
	movq	%r11, %rbx
	callq	Pin
	movq	%rbx, %r11
	movq	%r15, %r10
	movl	$1, "PinFlag-21."(%rip)
.LBB18_22:
	subq	%rbp, %r13
	leaq	(%r11,%r11), %r15
	leaq	(%r15,%rbp,2), %rax
	addq	248(%rsp), %rax         # 8-byte Folded Reload
	movq	%r12, 272(%rsp)         # 8-byte Spill
	addq	%r12, %rax
	leaq	(%r12,%rbp), %rdx
	xorl	%esi, %esi
	.align	16, 0x90
.LBB18_23:                              # %for.body83.i.prol
                                        # =>This Inner Loop Header: Depth=1
	movq	%rsi, %rcx
	movb	(%rdx,%rcx), %bl
	leaq	(%rbp,%rcx), %rsi
	movb	%bl, (%r14,%rsi)
	movw	$0, (%rax,%rcx,2)
	leaq	1(%rcx), %rsi
	cmpq	$2, %rsi
	jne	.LBB18_23
# BB#24:                                # %for.body83.i.preheader.split
	cmpq	$3, %r13
	movq	168(%rsp), %r14         # 8-byte Reload
	jb	.LBB18_29
# BB#25:                                # %for.body83.i.preheader.split.split
	leaq	1(%rbp,%rcx), %rbx
	movl	$30, %esi
	cmpl	$0, "PinFlag-20."(%rip)
	jne	.LBB18_27
# BB#26:
	subq	%rbx, %rsi
	shrq	$2, %rsi
	movl	$.L__unnamed_13, %edi
	movl	$48, %edx
	movl	$35, %ecx
	movl	$1, %r8d
	movq	%r10, %rbp
	movq	%r11, %r13
	callq	Pin
	movq	%r13, %r11
	movq	%rbp, %r10
	movl	$1, "PinFlag-20."(%rip)
.LBB18_27:
	movl	$34, %eax
	subq	%rbx, %rax
	leaq	(%r15,%rbx,2), %rcx
	addq	248(%rsp), %rcx         # 8-byte Folded Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	leaq	6(%rsi,%rcx), %rcx
	leaq	(%rbx,%r11), %rdx
	leaq	3(%rsi,%rdx), %rdx
	leaq	3(%rbx,%rsi), %rsi
	xorl	%edi, %edi
	.align	16, 0x90
.LBB18_28:                              # %for.body83.i
                                        # =>This Inner Loop Header: Depth=1
	movb	-3(%rsi,%rdi), %bl
	movb	%bl, -3(%rdx,%rdi)
	movw	$0, -6(%rcx,%rdi,2)
	movb	-2(%rsi,%rdi), %bl
	movb	%bl, -2(%rdx,%rdi)
	movw	$0, -4(%rcx,%rdi,2)
	movb	-1(%rsi,%rdi), %bl
	movb	%bl, -1(%rdx,%rdi)
	movw	$0, -2(%rcx,%rdi,2)
	movb	(%rsi,%rdi), %bl
	movb	%bl, (%rdx,%rdi)
	movw	$0, (%rcx,%rdi,2)
	addq	$4, %rdi
	cmpq	%rdi, %rax
	jne	.LBB18_28
.LBB18_29:                              # %for.end93.i
	cmpl	$4, 76(%rsp)            # 4-byte Folded Reload
	jge	.LBB18_30
.LBB18_31:                              # %for.body102.preheader.i
	movq	%r11, %r12
	movl	(%r10), %ebx
	movl	$4, %ebp
	cmpl	$0, "PinFlag-19."(%rip)
	jne	.LBB18_33
# BB#32:
	movl	$4, %ebp
	movl	$.L__unnamed_14, %edi
	movl	$16383, %esi            # imm = 0x3FFF
	movl	$4, %edx
	movl	$24, %ecx
	movl	$1, %r8d
	movq	%r10, %r15
	callq	Pin
	movq	%r15, %r10
	movl	$1, "PinFlag-19."(%rip)
.LBB18_33:                              # %for.body102.i
	movq	%r12, %r11
	movl	36(%rsp), %ecx          # 4-byte Reload
	.align	16, 0x90
.LBB18_34:                              # %for.body102.i
                                        # =>This Inner Loop Header: Depth=1
	addl	-12(%r10,%rbp,4), %ebx
	movl	%ebx, -12(%r10,%rbp,4)
	addl	-8(%r10,%rbp,4), %ebx
	movl	%ebx, -8(%r10,%rbp,4)
	addl	-4(%r10,%rbp,4), %ebx
	movl	%ebx, -4(%r10,%rbp,4)
	addl	(%r10,%rbp,4), %ebx
	movl	%ebx, (%r10,%rbp,4)
	addq	$4, %rbp
	cmpq	$65540, %rbp            # imm = 0x10004
	jne	.LBB18_34
# BB#35:                                # %for.end111.i
	movq	272(%rsp), %rax         # 8-byte Reload
	movzbl	(%rax), %ebx
	shll	$8, %ebx
	cmpl	$3, %ecx
	jl	.LBB18_36
# BB#37:                                # %for.body120.preheader.i
	movl	%ecx, 36(%rsp)          # 4-byte Spill
	movq	%r10, 176(%rsp)         # 8-byte Spill
	leal	-4(%r11), %r15d
	movl	%r15d, %esi
	shrl	$2, %esi
	cmpl	$0, "PinFlag-18."(%rip)
	jne	.LBB18_39
# BB#38:
	movl	$.L__unnamed_15, %edi
	movl	$52, %edx
	movl	$67, %ecx
	movl	$1, %r8d
	movq	%r11, %rbp
	callq	Pin
	movq	%rbp, %r11
	movl	$1, "PinFlag-18."(%rip)
.LBB18_39:
	movq	%r11, 256(%rsp)         # 8-byte Spill
	leal	-1(%r11), %eax
	movslq	%eax, %r8
	movq	272(%rsp), %rdx         # 8-byte Reload
	addq	%rdx, %r8
	leal	-4(%r11), %r9d
	movslq	%r9d, %r10
	addq	%rdx, %r10
	movq	%r11, %rcx
	leal	-3(%rcx), %r11d
	movslq	%r11d, %r14
	addq	%rdx, %r14
	leal	-2(%rcx), %r12d
	movslq	%r12d, %r13
	addq	%rdx, %r13
	xorl	%esi, %esi
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	.align	16, 0x90
.LBB18_40:                              # %for.body120.i
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%r8,%rsi), %edi
	shrdw	$8, %di, %bx
	movzwl	%bx, %ebx
	movl	(%rdx,%rbx,4), %ebp
	decl	%ebp
	movl	%ebp, (%rdx,%rbx,4)
	movslq	%ebp, %rbx
	leal	(%rax,%rsi), %ebp
	movl	%ebp, (%rcx,%rbx,4)
	movzbl	(%r13,%rsi), %ebx
	movl	%ebx, %ebp
	shll	$8, %ebp
	orl	%edi, %ebp
	movzwl	%bp, %edi
	movl	(%rdx,%rdi,4), %ebp
	decl	%ebp
	movl	%ebp, (%rdx,%rdi,4)
	movslq	%ebp, %rdi
	leal	(%r12,%rsi), %ebp
	movl	%ebp, (%rcx,%rdi,4)
	movzbl	(%r14,%rsi), %edi
	movl	%edi, %ebp
	shll	$8, %ebp
	orl	%ebx, %ebp
	movzwl	%bp, %ebx
	movl	(%rdx,%rbx,4), %ebp
	decl	%ebp
	movl	%ebp, (%rdx,%rbx,4)
	movslq	%ebp, %rbx
	leal	(%r11,%rsi), %ebp
	movl	%ebp, (%rcx,%rbx,4)
	movzbl	(%r10,%rsi), %ebx
	shll	$8, %ebx
	orl	%edi, %ebx
	movzwl	%bx, %edi
	movl	(%rdx,%rdi,4), %ebp
	decl	%ebp
	movl	%ebp, (%rdx,%rdi,4)
	movslq	%ebp, %rdi
	leal	(%r9,%rsi), %ebp
	movl	%ebp, (%rcx,%rdi,4)
	addq	$-4, %rsi
	leal	(%rax,%rsi), %edi
	cmpl	$2, %edi
	jg	.LBB18_40
# BB#41:                                # %for.cond190.preheader.loopexit.i
	andl	$-4, %r15d
	movq	256(%rsp), %r11         # 8-byte Reload
	leal	-5(%r11), %r12d
	subl	%r15d, %r12d
	movq	%rcx, %r14
	movq	%rdx, %r10
	jmp	.LBB18_42
.LBB18_36:
	movl	%ecx, %r12d
	movl	%ecx, 36(%rsp)          # 4-byte Spill
.LBB18_42:                              # %for.cond190.preheader.i
	testl	%r12d, %r12d
	movq	272(%rsp), %r13         # 8-byte Reload
	js	.LBB18_47
# BB#43:                                # %for.body193.preheader.i
	movslq	%r12d, %rbp
	movq	%rbp, %rcx
	notq	%rcx
	cmpq	$-2, %rcx
	movq	$-1, %rax
	cmovgq	%rcx, %rax
	cmpl	$0, "PinFlag-17."(%rip)
	jne	.LBB18_45
# BB#44:
	leaq	1(%rax,%rbp), %rsi
	movl	$.L__unnamed_16, %edi
	movl	$4, %edx
	movl	$20, %ecx
	movl	$1, %r8d
	movq	%r10, %r15
	movq	%r11, 256(%rsp)         # 8-byte Spill
	callq	Pin
	movq	256(%rsp), %r11         # 8-byte Reload
	movq	%r15, %r10
	movl	$1, "PinFlag-17."(%rip)
.LBB18_45:
	incq	%rbp
	.align	16, 0x90
.LBB18_46:                              # %for.body193.i
                                        # =>This Inner Loop Header: Depth=1
	movzbl	-1(%r13,%rbp), %eax
	shrdw	$8, %ax, %bx
	movzwl	%bx, %eax
	movl	(%r10,%rax,4), %ecx
	decl	%ecx
	movl	%ecx, (%r10,%rax,4)
	movslq	%ecx, %rax
	movl	%r12d, (%r14,%rax,4)
	decl	%r12d
	decq	%rbp
	jg	.LBB18_46
.LBB18_47:                              # %for.body215.preheader.i
	movq	%r13, 272(%rsp)         # 8-byte Spill
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 2576(%rsp)
	movaps	%xmm0, 2560(%rsp)
	movaps	%xmm0, 2544(%rsp)
	movaps	%xmm0, 2528(%rsp)
	movaps	%xmm0, 2512(%rsp)
	movaps	%xmm0, 2496(%rsp)
	movaps	%xmm0, 2480(%rsp)
	movaps	%xmm0, 2464(%rsp)
	movaps	%xmm0, 2448(%rsp)
	movaps	%xmm0, 2432(%rsp)
	movaps	%xmm0, 2416(%rsp)
	movaps	%xmm0, 2400(%rsp)
	movaps	%xmm0, 2384(%rsp)
	movaps	%xmm0, 2368(%rsp)
	movaps	%xmm0, 2352(%rsp)
	movaps	%xmm0, 2336(%rsp)
	xorl	%eax, %eax
	movdqa	.LCPI18_0(%rip), %xmm0  # xmm0 = [0,1,2,3]
	movdqa	.LCPI18_1(%rip), %xmm1  # xmm1 = [4,5,6,7]
	.align	16, 0x90
.LBB18_48:                              # %vector.body453
                                        # =>This Inner Loop Header: Depth=1
	movd	%eax, %xmm2
	pshufd	$0, %xmm2, %xmm2        # xmm2 = xmm2[0,0,0,0]
	movdqa	%xmm2, %xmm3
	paddd	%xmm0, %xmm3
	paddd	%xmm1, %xmm2
	movdqa	%xmm3, 2592(%rsp,%rax,4)
	movdqa	%xmm2, 2608(%rsp,%rax,4)
	leal	8(%rax), %ecx
	movd	%ecx, %xmm2
	pshufd	$0, %xmm2, %xmm2        # xmm2 = xmm2[0,0,0,0]
	movdqa	%xmm2, %xmm3
	paddd	%xmm0, %xmm3
	paddd	%xmm1, %xmm2
	movdqa	%xmm3, 2624(%rsp,%rax,4)
	movdqa	%xmm2, 2640(%rsp,%rax,4)
	addq	$16, %rax
	cmpq	$256, %rax              # imm = 0x100
	jne	.LBB18_48
# BB#49:                                # %do.body226.i.preheader
	movq	%r10, %rbx
	movl	$364, %ebp              # imm = 0x16C
	cmpl	$0, "PinFlag-15."(%rip)
	je	.LBB18_51
# BB#50:
	movq	%r11, 256(%rsp)         # 8-byte Spill
	jmp	.LBB18_52
.LBB18_51:
	movq	%r11, 256(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_17, %edi
	movl	$4, %esi
	xorl	%edx, %edx
	movl	$22, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movl	$1, "PinFlag-15."(%rip)
.LBB18_52:                              # %do.body226.i
	movq	%rbx, %r10
	.align	16, 0x90
.LBB18_53:                              # %do.body226.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_56 Depth 2
                                        #       Child Loop BB18_58 Depth 3
	movl	%ebp, 248(%rsp)         # 4-byte Spill
	movslq	%ebp, %rax
	imulq	$1431655766, %rax, %rbp # imm = 0x55555556
	movq	%rbp, %rcx
	shrq	$63, %rcx
	shrq	$32, %rbp
	addl	%ecx, %ebp
	cmpl	$767, %eax              # imm = 0x2FF
	jg	.LBB18_62
# BB#54:                                # %for.body230.preheader.i
                                        #   in Loop: Header=BB18_53 Depth=1
	movslq	%ebp, %r12
	leaq	1(%r12), %rax
	cmpq	$255, %rax
	movl	$256, %esi              # imm = 0x100
	cmovgq	%rax, %rsi
	xorl	%ebx, %ebx
	cmpl	$0, "PinFlag-15.0"(%rip)
	jne	.LBB18_56
# BB#55:                                #   in Loop: Header=BB18_53 Depth=1
	decq	%rsi
	subq	%r12, %rsi
	xorl	%ebx, %ebx
	movl	$.L__unnamed_18, %edi
	movl	$62, %edx
	movl	$27, %ecx
	xorl	%r8d, %r8d
	movq	%r10, %r15
	callq	Pin
	movq	%r15, %r10
	movl	$1, "PinFlag-15.0"(%rip)
	.align	16, 0x90
.LBB18_56:                              # %for.body230.i
                                        #   Parent Loop BB18_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_58 Depth 3
	movl	2592(%rsp,%r12,4), %r13d
	movl	%r13d, %eax
	shll	$8, %eax
	leal	256(%rax), %ecx
	movslq	%ecx, %rcx
	movl	(%r10,%rcx,4), %r15d
	cltq
	subl	(%r10,%rax,4), %r15d
	cmpl	$0, "PinFlag-15.00"(%rip)
	movl	%ebx, %eax
	jne	.LBB18_58
# BB#57:                                #   in Loop: Header=BB18_56 Depth=2
	movl	$.L__unnamed_19, %edi
	movl	$1, %esi
	movl	$36, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	movq	%r10, 176(%rsp)         # 8-byte Spill
	callq	Pin
	movq	176(%rsp), %r10         # 8-byte Reload
	movl	$1, "PinFlag-15.00"(%rip)
	movl	%ebx, %eax
	.align	16, 0x90
.LBB18_58:                              # %while.cond.i
                                        #   Parent Loop BB18_53 Depth=1
                                        #     Parent Loop BB18_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	leal	(%rbp,%rax), %ecx
	movslq	%eax, %rdx
	movl	2592(%rsp,%rdx,4), %edx
	movl	%edx, %esi
	shll	$8, %esi
	leal	256(%rsi), %edi
	movslq	%edi, %rdi
	movl	(%r10,%rdi,4), %edi
	movslq	%esi, %rsi
	subl	(%r10,%rsi,4), %edi
	cmpl	%r15d, %edi
	jbe	.LBB18_61
# BB#59:                                # %while.body.i
                                        #   in Loop: Header=BB18_58 Depth=3
	movslq	%ecx, %rcx
	movl	%edx, 2592(%rsp,%rcx,4)
	subl	%ebp, %eax
	jge	.LBB18_58
# BB#60:                                # %zero.isplit
                                        #   in Loop: Header=BB18_56 Depth=2
	addl	%ebp, %eax
	movl	%eax, %ecx
.LBB18_61:                              # %zero.i
                                        #   in Loop: Header=BB18_56 Depth=2
	movslq	%ecx, %rax
	movl	%r13d, 2592(%rsp,%rax,4)
	incq	%r12
	incl	%ebx
	cmpq	$256, %r12              # imm = 0x100
	jl	.LBB18_56
.LBB18_62:                              # %do.cond273.i
                                        #   in Loop: Header=BB18_53 Depth=1
	movl	248(%rsp), %eax         # 4-byte Reload
	addl	$-3, %eax
	cmpl	$2, %eax
	ja	.LBB18_53
# BB#63:                                # %for.cond277.preheader.i
	cmpl	$0, "PinFlag-14."(%rip)
	jne	.LBB18_65
# BB#64:
	movl	$.L__unnamed_20, %edi
	movl	$1, %esi
	movl	$93, %edx
	movl	$129, %ecx
	xorl	%r8d, %r8d
	movq	%r10, %rbx
	callq	Pin
	movq	%rbx, %r10
	movl	$1, "PinFlag-14."(%rip)
.LBB18_65:
	leaq	16(%r14), %rax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	leaq	1028(%r10), %rax
	movq	%rax, 48(%rsp)          # 8-byte Spill
	leaq	3072(%r10), %rax
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movl	$-2097153, %r15d        # imm = 0xFFFFFFFFFFDFFFFF
	movq	16(%rsp), %rax          # 8-byte Reload
	movl	%eax, 160(%rsp)         # 4-byte Spill
	xorl	%eax, %eax
	movl	$0, 128(%rsp)           # 4-byte Folded Spill
	.align	16, 0x90
.LBB18_66:                              # %for.body280.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_70 Depth 2
                                        #       Child Loop BB18_79 Depth 3
                                        #         Child Loop BB18_172 Depth 4
                                        #           Child Loop BB18_181 Depth 5
                                        #             Child Loop BB18_184 Depth 6
                                        #               Child Loop BB18_187 Depth 7
                                        #             Child Loop BB18_197 Depth 6
                                        #               Child Loop BB18_195 Depth 7
                                        #         Child Loop BB18_93 Depth 4
                                        #           Child Loop BB18_102 Depth 5
                                        #             Child Loop BB18_106 Depth 6
                                        #               Child Loop BB18_109 Depth 7
                                        #             Child Loop BB18_117 Depth 6
                                        #               Child Loop BB18_120 Depth 7
                                        #         Child Loop BB18_216 Depth 4
                                        #         Child Loop BB18_222 Depth 4
                                        #         Child Loop BB18_234 Depth 4
                                        #         Child Loop BB18_240 Depth 4
                                        #         Child Loop BB18_133 Depth 4
                                        #         Child Loop BB18_139 Depth 4
                                        #           Child Loop BB18_143 Depth 5
                                        #             Child Loop BB18_146 Depth 6
                                        #             Child Loop BB18_153 Depth 6
                                        #             Child Loop BB18_160 Depth 6
                                        #     Child Loop BB18_250 Depth 2
                                        #     Child Loop BB18_257 Depth 2
                                        #     Child Loop BB18_263 Depth 2
                                        #     Child Loop BB18_272 Depth 2
                                        #     Child Loop BB18_278 Depth 2
                                        #     Child Loop BB18_283 Depth 2
	movl	2592(%rsp,%rax,4), %ebp
	movq	%rbp, 96(%rsp)          # 8-byte Spill
	movslq	%ebp, %rdi
	movq	%rdi, 80(%rsp)          # 8-byte Spill
	movl	%edi, %ecx
	shll	$8, %ecx
	movslq	%ecx, %rsi
	movq	%rsi, 88(%rsp)          # 8-byte Spill
	cmpl	$0, "PinFlag-14.0"(%rip)
	je	.LBB18_68
# BB#67:                                #   in Loop: Header=BB18_66 Depth=1
	movl	%ecx, 60(%rsp)          # 4-byte Spill
	movq	%rax, 64(%rsp)          # 8-byte Spill
	jmp	.LBB18_69
	.align	16, 0x90
.LBB18_68:                              #   in Loop: Header=BB18_66 Depth=1
	movl	%ecx, 60(%rsp)          # 4-byte Spill
	movq	%rax, 64(%rsp)          # 8-byte Spill
	movq	%rdi, %r12
	movl	$.L__unnamed_21, %edi
	movq	%rsi, %r13
	movl	$1, %esi
	movl	$126, %edx
	movl	$65, %ecx
	xorl	%r8d, %r8d
	movq	%r10, %rbx
	callq	Pin
	movq	%r13, %rsi
	movq	%r12, %rdi
	movq	%rbx, %r10
	movl	$1, "PinFlag-14.0"(%rip)
.LBB18_69:                              # %for.body286.i
                                        #   in Loop: Header=BB18_66 Depth=1
	xorl	%ebx, %ebx
	jmp	.LBB18_70
.LBB18_74:                              # %if.then308.i
                                        #   in Loop: Header=BB18_70 Depth=2
	movq	stderr(%rip), %rdi
	movl	$1, %r9d
	subl	%r12d, %r9d
	addl	%ecx, %r9d
	movl	$.L.str.7.4, %esi
	xorl	%eax, %eax
	movl	%ecx, 132(%rsp)         # 4-byte Spill
	movl	%ebp, %edx
	movl	%ebx, %ecx
	movl	128(%rsp), %r8d         # 4-byte Reload
	movq	%r10, %r15
	callq	fprintf
	movl	132(%rsp), %ecx         # 4-byte Reload
	movq	%r15, %r10
	jmp	.LBB18_75
	.align	16, 0x90
.LBB18_70:                              # %for.body286.i
                                        #   Parent Loop BB18_66 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_79 Depth 3
                                        #         Child Loop BB18_172 Depth 4
                                        #           Child Loop BB18_181 Depth 5
                                        #             Child Loop BB18_184 Depth 6
                                        #               Child Loop BB18_187 Depth 7
                                        #             Child Loop BB18_197 Depth 6
                                        #               Child Loop BB18_195 Depth 7
                                        #         Child Loop BB18_93 Depth 4
                                        #           Child Loop BB18_102 Depth 5
                                        #             Child Loop BB18_106 Depth 6
                                        #               Child Loop BB18_109 Depth 7
                                        #             Child Loop BB18_117 Depth 6
                                        #               Child Loop BB18_120 Depth 7
                                        #         Child Loop BB18_216 Depth 4
                                        #         Child Loop BB18_222 Depth 4
                                        #         Child Loop BB18_234 Depth 4
                                        #         Child Loop BB18_240 Depth 4
                                        #         Child Loop BB18_133 Depth 4
                                        #         Child Loop BB18_139 Depth 4
                                        #           Child Loop BB18_143 Depth 5
                                        #             Child Loop BB18_146 Depth 6
                                        #             Child Loop BB18_153 Depth 6
                                        #             Child Loop BB18_160 Depth 6
	cmpq	%rbp, %rbx
	je	.LBB18_244
# BB#71:                                # %if.then289.i
                                        #   in Loop: Header=BB18_70 Depth=2
	leaq	(%rbx,%rsi), %r13
	movl	(%r10,%r13,4), %eax
	testl	$2097152, %eax          # imm = 0x200000
	jne	.LBB18_243
# BB#72:                                # %if.then294.i
                                        #   in Loop: Header=BB18_70 Depth=2
	movl	%eax, %r12d
	andl	$-2097153, %r12d        # imm = 0xFFFFFFFFFFDFFFFF
	movl	4(%r10,%r13,4), %ecx
	andl	%r15d, %ecx
	decl	%ecx
	cmpl	%r12d, %ecx
	jle	.LBB18_243
# BB#73:                                # %if.then305.i
                                        #   in Loop: Header=BB18_70 Depth=2
	cmpl	$4, 76(%rsp)            # 4-byte Folded Reload
	jge	.LBB18_74
.LBB18_75:                              # %if.end312.i
                                        #   in Loop: Header=BB18_70 Depth=2
	movl	%r12d, 4416(%rsp)
	movl	%ecx, 4016(%rsp)
	movl	$2, 3616(%rsp)
	movl	$1, %ebp
	cmpl	$0, "PinFlag-14.00"(%rip)
	je	.LBB18_77
# BB#76:                                #   in Loop: Header=BB18_70 Depth=2
	movl	%ecx, 132(%rsp)         # 4-byte Spill
	movl	%r12d, 108(%rsp)        # 4-byte Spill
	movq	%r13, 112(%rsp)         # 8-byte Spill
	movq	%rbx, 120(%rsp)         # 8-byte Spill
	movq	%r10, 176(%rsp)         # 8-byte Spill
	jmp	.LBB18_78
.LBB18_77:                              #   in Loop: Header=BB18_70 Depth=2
	movl	%ecx, 132(%rsp)         # 4-byte Spill
	movl	%r12d, 108(%rsp)        # 4-byte Spill
	movq	%r13, 112(%rsp)         # 8-byte Spill
	movq	%rbx, 120(%rsp)         # 8-byte Spill
	movq	%r10, 176(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_22, %edi
	movl	$1, %esi
	movl	$10654, %edx            # imm = 0x299E
	movl	$389, %ecx              # imm = 0x185
	xorl	%r8d, %r8d
	callq	Pin
	movl	$1, "PinFlag-14.00"(%rip)
.LBB18_78:                              # %while.body.lr.ph.i.i
                                        #   in Loop: Header=BB18_70 Depth=2
	movl	160(%rsp), %edx         # 4-byte Reload
.LBB18_79:                              # %while.body.lr.ph.i.i
                                        #   Parent Loop BB18_66 Depth=1
                                        #     Parent Loop BB18_70 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB18_172 Depth 4
                                        #           Child Loop BB18_181 Depth 5
                                        #             Child Loop BB18_184 Depth 6
                                        #               Child Loop BB18_187 Depth 7
                                        #             Child Loop BB18_197 Depth 6
                                        #               Child Loop BB18_195 Depth 7
                                        #         Child Loop BB18_93 Depth 4
                                        #           Child Loop BB18_102 Depth 5
                                        #             Child Loop BB18_106 Depth 6
                                        #               Child Loop BB18_109 Depth 7
                                        #             Child Loop BB18_117 Depth 6
                                        #               Child Loop BB18_120 Depth 7
                                        #         Child Loop BB18_216 Depth 4
                                        #         Child Loop BB18_222 Depth 4
                                        #         Child Loop BB18_234 Depth 4
                                        #         Child Loop BB18_240 Depth 4
                                        #         Child Loop BB18_133 Depth 4
                                        #         Child Loop BB18_139 Depth 4
                                        #           Child Loop BB18_143 Depth 5
                                        #             Child Loop BB18_146 Depth 6
                                        #             Child Loop BB18_153 Depth 6
                                        #             Child Loop BB18_160 Depth 6
	movl	%ebp, %ecx
	movslq	%ecx, %r12
	leaq	-1(%r12), %rax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movl	4412(%rsp,%r12,4), %esi
	movq	%rsi, 192(%rsp)         # 8-byte Spill
	movl	4012(%rsp,%r12,4), %edi
	movq	%rdi, 224(%rsp)         # 8-byte Spill
	movl	%edi, %ebp
	subl	%esi, %ebp
	leal	(%rdi,%rsi), %eax
	sarl	%eax
	cmpl	$100, %ecx
	movslq	%esi, %rbx
	movq	%rbx, 184(%rsp)         # 8-byte Spill
	movslq	%edi, %rsi
	movq	%rsi, 232(%rsp)         # 8-byte Spill
	cltq
	movq	%rax, 208(%rsp)         # 8-byte Spill
	movl	3612(%rsp,%r12,4), %r15d
	jge	.LBB18_80
# BB#86:                                # %if.end.i.us.i.preheader
                                        #   in Loop: Header=BB18_79 Depth=3
	cmpl	$20, %ebp
	movq	272(%rsp), %r9          # 8-byte Reload
	jl	.LBB18_87
# BB#88:                                # %if.end.i.us.i.preheader
                                        #   in Loop: Header=BB18_79 Depth=3
	movq	%rbp, 144(%rsp)         # 8-byte Spill
	cmpl	$14, %r15d
	jg	.LBB18_89
# BB#90:                                # %if.end18.i.us.i.preheader
                                        #   in Loop: Header=BB18_79 Depth=3
	cmpl	$0, "PinFlag-14.001"(%rip)
	je	.LBB18_92
# BB#91:                                #   in Loop: Header=BB18_79 Depth=3
	movq	%r12, 136(%rsp)         # 8-byte Spill
	movl	%ecx, 156(%rsp)         # 4-byte Spill
	movl	%edx, 160(%rsp)         # 4-byte Spill
	jmp	.LBB18_93
	.align	16, 0x90
.LBB18_80:                              # %if.then.i.i.preheader
                                        #   in Loop: Header=BB18_79 Depth=3
	movl	%ecx, 156(%rsp)         # 4-byte Spill
	movl	%edx, 160(%rsp)         # 4-byte Spill
	movl	$1001, %edi             # imm = 0x3E9
	callq	BZ2_bz__AssertH__fail
	cmpl	$20, %ebp
	jl	.LBB18_81
# BB#82:                                # %if.then.i.i.preheader
                                        #   in Loop: Header=BB18_79 Depth=3
	movq	%rbp, 144(%rsp)         # 8-byte Spill
	cmpl	$14, %r15d
	movq	272(%rsp), %rbp         # 8-byte Reload
	jg	.LBB18_83
# BB#84:                                # %if.end18.i.i.preheader
                                        #   in Loop: Header=BB18_79 Depth=3
	cmpl	$0, "PinFlag-14.000"(%rip)
	je	.LBB18_171
# BB#85:                                #   in Loop: Header=BB18_79 Depth=3
	movq	%r12, 136(%rsp)         # 8-byte Spill
	jmp	.LBB18_172
.LBB18_87:                              #   in Loop: Header=BB18_79 Depth=3
	movq	%rbp, 144(%rsp)         # 8-byte Spill
.LBB18_89:                              #   in Loop: Header=BB18_79 Depth=3
	movl	%ecx, 156(%rsp)         # 4-byte Spill
	movl	%edx, 160(%rsp)         # 4-byte Spill
	movl	%r15d, %ecx
	jmp	.LBB18_128
.LBB18_81:                              #   in Loop: Header=BB18_79 Depth=3
	movq	%rbp, 144(%rsp)         # 8-byte Spill
	movl	%r15d, %ecx
	jmp	.LBB18_128
.LBB18_83:                              #   in Loop: Header=BB18_79 Depth=3
	movl	%r15d, %ecx
	jmp	.LBB18_128
.LBB18_92:                              #   in Loop: Header=BB18_79 Depth=3
	movq	%r12, 136(%rsp)         # 8-byte Spill
	movl	%ecx, 156(%rsp)         # 4-byte Spill
	movl	%edx, 160(%rsp)         # 4-byte Spill
	movl	$.L__unnamed_23, %edi
	movl	$1, %esi
	movl	$1762, %edx             # imm = 0x6E2
	movl	$56, %ecx
	xorl	%r8d, %r8d
	movq	%r9, %rbp
	callq	Pin
	movq	%rbp, %r9
	movl	$1, "PinFlag-14.001"(%rip)
	.align	16, 0x90
.LBB18_93:                              # %if.end18.i.us.i
                                        #   Parent Loop BB18_66 Depth=1
                                        #     Parent Loop BB18_70 Depth=2
                                        #       Parent Loop BB18_79 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB18_102 Depth 5
                                        #             Child Loop BB18_106 Depth 6
                                        #               Child Loop BB18_109 Depth 7
                                        #             Child Loop BB18_117 Depth 6
                                        #               Child Loop BB18_120 Depth 7
	movl	(%r14,%rbx,4), %eax
	addl	%r15d, %eax
	movzbl	(%r9,%rax), %r13d
	movq	232(%rsp), %rax         # 8-byte Reload
	movl	(%r14,%rax,4), %eax
	addl	%r15d, %eax
	movzbl	(%r9,%rax), %edx
	movq	208(%rsp), %rax         # 8-byte Reload
	movl	(%r14,%rax,4), %eax
	addl	%r15d, %eax
	movzbl	(%r9,%rax), %eax
	cmpl	%edx, %r13d
	ja	.LBB18_94
# BB#95:                                # %if.end18.i.us.i
                                        #   in Loop: Header=BB18_93 Depth=4
	movb	%dl, %cl
	jmp	.LBB18_96
	.align	16, 0x90
.LBB18_94:                              #   in Loop: Header=BB18_93 Depth=4
	movb	%r13b, %cl
	movb	%dl, %r13b
.LBB18_96:                              # %if.end18.i.us.i
                                        #   in Loop: Header=BB18_93 Depth=4
	movzbl	%cl, %edx
	movzbl	%r13b, %esi
	cmpl	%eax, %esi
	ja	.LBB18_98
# BB#97:                                # %if.end18.i.us.i
                                        #   in Loop: Header=BB18_93 Depth=4
	movb	%al, %r13b
.LBB18_98:                              # %if.end18.i.us.i
                                        #   in Loop: Header=BB18_93 Depth=4
	cmpl	%eax, %edx
	ja	.LBB18_100
# BB#99:                                # %if.end18.i.us.i
                                        #   in Loop: Header=BB18_93 Depth=4
	movb	%cl, %r13b
.LBB18_100:                             # %if.end18.i.us.i
                                        #   in Loop: Header=BB18_93 Depth=4
	cmpl	$0, "PinFlag-14.0010"(%rip)
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, %rcx
	movl	%ecx, %r8d
	movq	192(%rsp), %rax         # 8-byte Reload
	movl	%eax, %r12d
	movl	%ecx, %r11d
	movl	%eax, %r10d
	jne	.LBB18_102
# BB#101:                               #   in Loop: Header=BB18_93 Depth=4
	movl	$.L__unnamed_24, %edi
	movl	$1, %esi
	movl	$2041, %edx             # imm = 0x7F9
	movl	$48, %ecx
	xorl	%r8d, %r8d
	movq	%r9, %rbx
	callq	Pin
	movq	%rbx, %r9
	movl	$1, "PinFlag-14.0010"(%rip)
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, %rcx
	movl	%ecx, %r8d
	movq	192(%rsp), %rax         # 8-byte Reload
	movl	%eax, %r12d
	movl	%ecx, %r11d
	movl	%eax, %r10d
	jmp	.LBB18_102
	.align	16, 0x90
.LBB18_124:                             # %if.end105.i.us.i
                                        #   in Loop: Header=BB18_102 Depth=5
	movl	(%r14,%rbx,4), %edx
	movl	%ecx, (%r14,%rbx,4)
	movl	%edx, (%rax)
	incl	%r10d
	decl	%ebp
	movl	%ebp, %r11d
.LBB18_102:                             # %while.body37.outer.i.us.i
                                        #   Parent Loop BB18_66 Depth=1
                                        #     Parent Loop BB18_70 Depth=2
                                        #       Parent Loop BB18_79 Depth=3
                                        #         Parent Loop BB18_93 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB18_106 Depth 6
                                        #               Child Loop BB18_109 Depth 7
                                        #             Child Loop BB18_117 Depth 6
                                        #               Child Loop BB18_120 Depth 7
	cmpl	%r11d, %r10d
	jg	.LBB18_114
# BB#103:                               # %if.end41.lr.ph.preheader.i.us.i
                                        #   in Loop: Header=BB18_102 Depth=5
	movq	%r9, %rbp
	movslq	%r11d, %rbx
	movslq	%r12d, %r12
	cmpl	$0, "PinFlag-14.00100"(%rip)
	jne	.LBB18_105
# BB#104:                               #   in Loop: Header=BB18_102 Depth=5
	movl	$.L__unnamed_25, %edi
	movl	$1, %esi
	movl	$766, %edx              # imm = 0x2FE
	movl	$24, %ecx
	movq	%r8, 248(%rsp)          # 8-byte Spill
	xorl	%r8d, %r8d
	movq	%r12, 240(%rsp)         # 8-byte Spill
	movq	%r10, %r12
	movl	%r11d, 216(%rsp)        # 4-byte Spill
	callq	Pin
	movl	216(%rsp), %r11d        # 4-byte Reload
	movq	%r12, %r10
	movq	240(%rsp), %r12         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movl	$1, "PinFlag-14.00100"(%rip)
.LBB18_105:                             # %if.end41.lr.ph.i.us.i
                                        #   in Loop: Header=BB18_102 Depth=5
	movq	%rbp, %r9
.LBB18_106:                             # %if.end41.lr.ph.i.us.i
                                        #   Parent Loop BB18_66 Depth=1
                                        #     Parent Loop BB18_70 Depth=2
                                        #       Parent Loop BB18_79 Depth=3
                                        #         Parent Loop BB18_93 Depth=4
                                        #           Parent Loop BB18_102 Depth=5
                                        # =>          This Loop Header: Depth=6
                                        #               Child Loop BB18_109 Depth 7
	movslq	%r10d, %rbp
	cmpl	$0, "PinFlag-14.001000"(%rip)
	jne	.LBB18_108
# BB#107:                               #   in Loop: Header=BB18_106 Depth=6
	movl	$.L__unnamed_26, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$17, %ecx
	movq	%r8, 248(%rsp)          # 8-byte Spill
	movl	$1, %r8d
	movq	%r12, 240(%rsp)         # 8-byte Spill
	movl	%r11d, %r12d
	callq	Pin
	movl	%r12d, %r11d
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	272(%rsp), %r9          # 8-byte Reload
	movq	240(%rsp), %r12         # 8-byte Reload
	movl	$1, "PinFlag-14.001000"(%rip)
.LBB18_108:                             #   in Loop: Header=BB18_106 Depth=6
	leaq	(%r14,%rbp,4), %rax
	.align	16, 0x90
.LBB18_109:                             # %if.end41.i.us.i
                                        #   Parent Loop BB18_66 Depth=1
                                        #     Parent Loop BB18_70 Depth=2
                                        #       Parent Loop BB18_79 Depth=3
                                        #         Parent Loop BB18_93 Depth=4
                                        #           Parent Loop BB18_102 Depth=5
                                        #             Parent Loop BB18_106 Depth=6
                                        # =>            This Inner Loop Header: Depth=7
	movl	(%rax), %ecx
	leal	(%rcx,%r15), %edx
	movzbl	(%r9,%rdx), %edx
	movzbl	%r13b, %esi
	cmpl	%esi, %edx
	je	.LBB18_113
# BB#110:                               # %if.end62.i.us.i
                                        #   in Loop: Header=BB18_109 Depth=7
	movzbl	%dl, %ecx
	cmpl	%esi, %ecx
	ja	.LBB18_112
# BB#111:                               # %if.end66.i.us.i
                                        #   in Loop: Header=BB18_109 Depth=7
	addq	$4, %rax
	cmpq	%rbx, %rbp
	leaq	1(%rbp), %rbp
	jl	.LBB18_109
	jmp	.LBB18_112
	.align	16, 0x90
.LBB18_113:                             # %if.then51.i.us.i
                                        #   in Loop: Header=BB18_106 Depth=6
	movl	(%r14,%r12,4), %edx
	movl	%edx, (%rax)
	movl	%ecx, (%r14,%r12,4)
	incq	%r12
	leal	1(%rbp), %r10d
	cmpl	%r11d, %ebp
	jl	.LBB18_106
	jmp	.LBB18_114
	.align	16, 0x90
.LBB18_112:                             # %if.end62.i.us.i.while.body69.preheader.loopexit.i.us.i_crit_edge
                                        #   in Loop: Header=BB18_102 Depth=5
	movl	%ebp, %r10d
.LBB18_114:                             # %while.body69.preheader.i.us.i
                                        #   in Loop: Header=BB18_102 Depth=5
	cmpl	%r11d, %r10d
	jg	.LBB18_126
# BB#115:                               # %if.end73.lr.ph.preheader.i.us.i
                                        #   in Loop: Header=BB18_102 Depth=5
	movslq	%r10d, %rbx
	movslq	%r8d, %r8
	cmpl	$0, "PinFlag-14.00101"(%rip)
	jne	.LBB18_117
# BB#116:                               #   in Loop: Header=BB18_102 Depth=5
	movl	$.L__unnamed_27, %edi
	movl	$1, %esi
	movl	$766, %edx              # imm = 0x2FE
	movl	$24, %ecx
	movq	%r8, 248(%rsp)          # 8-byte Spill
	xorl	%r8d, %r8d
	movq	%r12, 240(%rsp)         # 8-byte Spill
	movq	%r10, %r12
	movl	%r11d, %ebp
	callq	Pin
	movl	%ebp, %r11d
	movq	%r12, %r10
	movq	240(%rsp), %r12         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	272(%rsp), %r9          # 8-byte Reload
	movl	$1, "PinFlag-14.00101"(%rip)
.LBB18_117:                             # %if.end73.lr.ph.i.us.i
                                        #   Parent Loop BB18_66 Depth=1
                                        #     Parent Loop BB18_70 Depth=2
                                        #       Parent Loop BB18_79 Depth=3
                                        #         Parent Loop BB18_93 Depth=4
                                        #           Parent Loop BB18_102 Depth=5
                                        # =>          This Loop Header: Depth=6
                                        #               Child Loop BB18_120 Depth 7
	movslq	%r11d, %rbp
	cmpl	$0, "PinFlag-14.001010"(%rip)
	jne	.LBB18_119
# BB#118:                               #   in Loop: Header=BB18_117 Depth=6
	movl	$.L__unnamed_28, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$16, %ecx
	movq	%r8, 248(%rsp)          # 8-byte Spill
	movl	$1, %r8d
	movq	%r12, 240(%rsp)         # 8-byte Spill
	movq	%r9, %r12
	movq	%r10, %r14
	callq	Pin
	movq	%r14, %r10
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	%r12, %r9
	movq	240(%rsp), %r12         # 8-byte Reload
	movq	168(%rsp), %r14         # 8-byte Reload
	movl	$1, "PinFlag-14.001010"(%rip)
.LBB18_119:                             #   in Loop: Header=BB18_117 Depth=6
	leaq	(%r14,%rbp,4), %rax
	.align	16, 0x90
.LBB18_120:                             # %if.end73.i.us.i
                                        #   Parent Loop BB18_66 Depth=1
                                        #     Parent Loop BB18_70 Depth=2
                                        #       Parent Loop BB18_79 Depth=3
                                        #         Parent Loop BB18_93 Depth=4
                                        #           Parent Loop BB18_102 Depth=5
                                        #             Parent Loop BB18_117 Depth=6
                                        # =>            This Inner Loop Header: Depth=7
	movl	(%rax), %ecx
	leal	(%rcx,%r15), %edx
	movzbl	(%r9,%rdx), %edx
	movzbl	%r13b, %esi
	cmpl	%esi, %edx
	je	.LBB18_125
# BB#121:                               # %if.end95.i.us.i
                                        #   in Loop: Header=BB18_120 Depth=7
	movzbl	%dl, %edx
	cmpl	%esi, %edx
	jb	.LBB18_124
# BB#122:                               # %if.end99.i.us.i
                                        #   in Loop: Header=BB18_120 Depth=7
	addq	$-4, %rax
	cmpq	%rbp, %rbx
	leaq	-1(%rbp), %rbp
	jl	.LBB18_120
	jmp	.LBB18_123
	.align	16, 0x90
.LBB18_125:                             # %if.then83.i.us.i
                                        #   in Loop: Header=BB18_117 Depth=6
	movl	(%r14,%r8,4), %edx
	movl	%edx, (%rax)
	movl	%ecx, (%r14,%r8,4)
	decq	%r8
	leal	-1(%rbp), %r11d
	cmpl	%ebp, %r10d
	jl	.LBB18_117
	jmp	.LBB18_126
	.align	16, 0x90
.LBB18_123:                             # %while.end117.loopexit.i.us.i
                                        #   in Loop: Header=BB18_93 Depth=4
	movl	%ebp, %r11d
.LBB18_126:                             # %while.end117.i.us.i
                                        #   in Loop: Header=BB18_93 Depth=4
	cmpl	%r12d, %r8d
	jge	.LBB18_205
# BB#127:                               # %if.then120.i.us.i
                                        #   in Loop: Header=BB18_93 Depth=4
	leal	1(%r15), %ecx
	movq	200(%rsp), %rax         # 8-byte Reload
	movl	%ecx, 3616(%rsp,%rax,4)
	cmpl	$14, %r15d
	movl	%ecx, %r15d
	movq	184(%rsp), %rbx         # 8-byte Reload
	jl	.LBB18_93
	jmp	.LBB18_128
.LBB18_171:                             #   in Loop: Header=BB18_79 Depth=3
	movq	%r12, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_29, %edi
	movl	$1, %esi
	movl	$1762, %edx             # imm = 0x6E2
	movl	$57, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movl	$1, "PinFlag-14.000"(%rip)
	.align	16, 0x90
.LBB18_172:                             # %if.end18.i.i
                                        #   Parent Loop BB18_66 Depth=1
                                        #     Parent Loop BB18_70 Depth=2
                                        #       Parent Loop BB18_79 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB18_181 Depth 5
                                        #             Child Loop BB18_184 Depth 6
                                        #               Child Loop BB18_187 Depth 7
                                        #             Child Loop BB18_197 Depth 6
                                        #               Child Loop BB18_195 Depth 7
	movl	(%r14,%rbx,4), %eax
	addl	%r15d, %eax
	movzbl	(%rbp,%rax), %r12d
	movq	232(%rsp), %rax         # 8-byte Reload
	movl	(%r14,%rax,4), %eax
	addl	%r15d, %eax
	movzbl	(%rbp,%rax), %edx
	movq	208(%rsp), %rax         # 8-byte Reload
	movl	(%r14,%rax,4), %eax
	addl	%r15d, %eax
	movzbl	(%rbp,%rax), %eax
	cmpl	%edx, %r12d
	ja	.LBB18_173
# BB#174:                               # %if.end18.i.i
                                        #   in Loop: Header=BB18_172 Depth=4
	movb	%dl, %cl
	jmp	.LBB18_175
	.align	16, 0x90
.LBB18_173:                             #   in Loop: Header=BB18_172 Depth=4
	movb	%r12b, %cl
	movb	%dl, %r12b
.LBB18_175:                             # %if.end18.i.i
                                        #   in Loop: Header=BB18_172 Depth=4
	movzbl	%cl, %edx
	movzbl	%r12b, %esi
	cmpl	%eax, %esi
	ja	.LBB18_177
# BB#176:                               # %if.end18.i.i
                                        #   in Loop: Header=BB18_172 Depth=4
	movb	%al, %r12b
.LBB18_177:                             # %if.end18.i.i
                                        #   in Loop: Header=BB18_172 Depth=4
	cmpl	%eax, %edx
	ja	.LBB18_179
# BB#178:                               # %if.end18.i.i
                                        #   in Loop: Header=BB18_172 Depth=4
	movb	%cl, %r12b
.LBB18_179:                             # %if.end18.i.i
                                        #   in Loop: Header=BB18_172 Depth=4
	cmpl	$0, "PinFlag-14.0000"(%rip)
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, %rcx
	movl	%ecx, %r8d
	movq	192(%rsp), %rax         # 8-byte Reload
	movl	%eax, %edx
	movq	%rdx, 240(%rsp)         # 8-byte Spill
	movl	%ecx, %r11d
	movl	%eax, %r10d
	jne	.LBB18_181
# BB#180:                               #   in Loop: Header=BB18_172 Depth=4
	movl	$.L__unnamed_30, %edi
	movl	$1, %esi
	movl	$2041, %edx             # imm = 0x7F9
	movl	$48, %ecx
	xorl	%r8d, %r8d
	movq	%rbp, %rbx
	callq	Pin
	movq	%rbx, %rbp
	movl	$1, "PinFlag-14.0000"(%rip)
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, %rcx
	movl	%ecx, %r8d
	movq	192(%rsp), %rax         # 8-byte Reload
	movl	%eax, %edx
	movq	%rdx, 240(%rsp)         # 8-byte Spill
	movl	%ecx, %r11d
	movl	%eax, %r10d
	jmp	.LBB18_181
	.align	16, 0x90
.LBB18_309:                             # %if.end105.i.i
                                        #   in Loop: Header=BB18_181 Depth=5
	movl	(%r14,%rbx,4), %edx
	movl	%ecx, (%r14,%rbx,4)
	movl	%edx, (%rax)
	incl	%r10d
	decl	%r13d
	movl	%r13d, %r11d
.LBB18_181:                             # %while.body37.outer.i.i
                                        #   Parent Loop BB18_66 Depth=1
                                        #     Parent Loop BB18_70 Depth=2
                                        #       Parent Loop BB18_79 Depth=3
                                        #         Parent Loop BB18_172 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB18_184 Depth 6
                                        #               Child Loop BB18_187 Depth 7
                                        #             Child Loop BB18_197 Depth 6
                                        #               Child Loop BB18_195 Depth 7
	cmpl	%r11d, %r10d
	jg	.LBB18_190
# BB#182:                               # %if.end41.lr.ph.preheader.i.i
                                        #   in Loop: Header=BB18_181 Depth=5
	movslq	%r11d, %r13
	movq	240(%rsp), %rax         # 8-byte Reload
	cltq
	movq	%rax, 240(%rsp)         # 8-byte Spill
	cmpl	$0, "PinFlag-14.00000"(%rip)
	jne	.LBB18_184
# BB#183:                               #   in Loop: Header=BB18_181 Depth=5
	movl	$.L__unnamed_31, %edi
	movl	$1, %esi
	movl	$766, %edx              # imm = 0x2FE
	movl	$24, %ecx
	movq	%r8, 248(%rsp)          # 8-byte Spill
	xorl	%r8d, %r8d
	movq	%rbp, %rbx
	movq	%r10, %rbp
	movl	%r11d, 216(%rsp)        # 4-byte Spill
	callq	Pin
	movl	216(%rsp), %r11d        # 4-byte Reload
	movq	%rbp, %r10
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	%rbx, %rbp
	movl	$1, "PinFlag-14.00000"(%rip)
.LBB18_184:                             # %if.end41.lr.ph.i.i
                                        #   Parent Loop BB18_66 Depth=1
                                        #     Parent Loop BB18_70 Depth=2
                                        #       Parent Loop BB18_79 Depth=3
                                        #         Parent Loop BB18_172 Depth=4
                                        #           Parent Loop BB18_181 Depth=5
                                        # =>          This Loop Header: Depth=6
                                        #               Child Loop BB18_187 Depth 7
	movslq	%r10d, %rbx
	cmpl	$0, "PinFlag-14.000000"(%rip)
	jne	.LBB18_186
# BB#185:                               #   in Loop: Header=BB18_184 Depth=6
	movl	$.L__unnamed_32, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$17, %ecx
	movq	%r8, 248(%rsp)          # 8-byte Spill
	movl	$1, %r8d
	movl	%r11d, %ebp
	callq	Pin
	movl	%ebp, %r11d
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	272(%rsp), %rbp         # 8-byte Reload
	movl	$1, "PinFlag-14.000000"(%rip)
.LBB18_186:                             #   in Loop: Header=BB18_184 Depth=6
	leaq	(%r14,%rbx,4), %rax
	.align	16, 0x90
.LBB18_187:                             # %if.end41.i.i
                                        #   Parent Loop BB18_66 Depth=1
                                        #     Parent Loop BB18_70 Depth=2
                                        #       Parent Loop BB18_79 Depth=3
                                        #         Parent Loop BB18_172 Depth=4
                                        #           Parent Loop BB18_181 Depth=5
                                        #             Parent Loop BB18_184 Depth=6
                                        # =>            This Inner Loop Header: Depth=7
	movl	(%rax), %ecx
	leal	(%rcx,%r15), %edx
	movzbl	(%rbp,%rdx), %edx
	movzbl	%r12b, %esi
	cmpl	%esi, %edx
	je	.LBB18_188
# BB#193:                               # %if.end62.i.i
                                        #   in Loop: Header=BB18_187 Depth=7
	movzbl	%dl, %ecx
	cmpl	%esi, %ecx
	ja	.LBB18_189
# BB#194:                               # %if.end66.i.i
                                        #   in Loop: Header=BB18_187 Depth=7
	addq	$4, %rax
	cmpq	%r13, %rbx
	leaq	1(%rbx), %rbx
	jl	.LBB18_187
	jmp	.LBB18_189
	.align	16, 0x90
.LBB18_188:                             # %if.then51.i.i
                                        #   in Loop: Header=BB18_184 Depth=6
	movq	240(%rsp), %rsi         # 8-byte Reload
	movl	(%r14,%rsi,4), %edx
	movl	%edx, (%rax)
	movl	%ecx, (%r14,%rsi,4)
	incq	%rsi
	movq	%rsi, 240(%rsp)         # 8-byte Spill
	leal	1(%rbx), %r10d
	cmpl	%r11d, %ebx
	jl	.LBB18_184
	jmp	.LBB18_190
	.align	16, 0x90
.LBB18_189:                             # %if.end62.i.i.while.body69.preheader.loopexit.i.i_crit_edge
                                        #   in Loop: Header=BB18_181 Depth=5
	movl	%ebx, %r10d
.LBB18_190:                             # %while.body69.preheader.i.i
                                        #   in Loop: Header=BB18_181 Depth=5
	cmpl	%r11d, %r10d
	jg	.LBB18_203
# BB#191:                               # %if.end73.lr.ph.preheader.i.i
                                        #   in Loop: Header=BB18_181 Depth=5
	movslq	%r10d, %rbx
	movslq	%r8d, %r8
	cmpl	$0, "PinFlag-14.00001"(%rip)
	jne	.LBB18_197
# BB#192:                               #   in Loop: Header=BB18_181 Depth=5
	movl	$.L__unnamed_33, %edi
	movl	$1, %esi
	movl	$766, %edx              # imm = 0x2FE
	movl	$24, %ecx
	movq	%r8, 248(%rsp)          # 8-byte Spill
	xorl	%r8d, %r8d
	movq	%r10, %r13
	movl	%r11d, 216(%rsp)        # 4-byte Spill
	callq	Pin
	movl	216(%rsp), %r11d        # 4-byte Reload
	movq	%r13, %r10
	movq	248(%rsp), %r8          # 8-byte Reload
	movl	$1, "PinFlag-14.00001"(%rip)
.LBB18_197:                             # %if.end73.lr.ph.i.i
                                        #   Parent Loop BB18_66 Depth=1
                                        #     Parent Loop BB18_70 Depth=2
                                        #       Parent Loop BB18_79 Depth=3
                                        #         Parent Loop BB18_172 Depth=4
                                        #           Parent Loop BB18_181 Depth=5
                                        # =>          This Loop Header: Depth=6
                                        #               Child Loop BB18_195 Depth 7
	movslq	%r11d, %r13
	cmpl	$0, "PinFlag-14.000010"(%rip)
	jne	.LBB18_199
# BB#198:                               #   in Loop: Header=BB18_197 Depth=6
	movl	$.L__unnamed_34, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$16, %ecx
	movq	%r8, 248(%rsp)          # 8-byte Spill
	movl	$1, %r8d
	movq	%r10, %rbp
	callq	Pin
	movq	%rbp, %r10
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	272(%rsp), %rbp         # 8-byte Reload
	movl	$1, "PinFlag-14.000010"(%rip)
.LBB18_199:                             #   in Loop: Header=BB18_197 Depth=6
	leaq	(%r14,%r13,4), %rax
	.align	16, 0x90
.LBB18_195:                             # %if.end73.i.i
                                        #   Parent Loop BB18_66 Depth=1
                                        #     Parent Loop BB18_70 Depth=2
                                        #       Parent Loop BB18_79 Depth=3
                                        #         Parent Loop BB18_172 Depth=4
                                        #           Parent Loop BB18_181 Depth=5
                                        #             Parent Loop BB18_197 Depth=6
                                        # =>            This Inner Loop Header: Depth=7
	movl	(%rax), %ecx
	leal	(%rcx,%r15), %edx
	movzbl	(%rbp,%rdx), %edx
	movzbl	%r12b, %esi
	cmpl	%esi, %edx
	je	.LBB18_196
# BB#200:                               # %if.end95.i.i
                                        #   in Loop: Header=BB18_195 Depth=7
	movzbl	%dl, %edx
	cmpl	%esi, %edx
	jb	.LBB18_309
# BB#201:                               # %if.end99.i.i
                                        #   in Loop: Header=BB18_195 Depth=7
	addq	$-4, %rax
	cmpq	%r13, %rbx
	leaq	-1(%r13), %r13
	jl	.LBB18_195
	jmp	.LBB18_202
	.align	16, 0x90
.LBB18_196:                             # %if.then83.i.i
                                        #   in Loop: Header=BB18_197 Depth=6
	movl	(%r14,%r8,4), %edx
	movl	%edx, (%rax)
	movl	%ecx, (%r14,%r8,4)
	decq	%r8
	leal	-1(%r13), %r11d
	cmpl	%r13d, %r10d
	jl	.LBB18_197
	jmp	.LBB18_203
	.align	16, 0x90
.LBB18_202:                             # %while.end117.loopexit.i.i
                                        #   in Loop: Header=BB18_172 Depth=4
	movl	%r13d, %r11d
.LBB18_203:                             # %while.end117.i.i
                                        #   in Loop: Header=BB18_172 Depth=4
	movq	%rbp, %rbx
	movq	240(%rsp), %r12         # 8-byte Reload
	cmpl	%r12d, %r8d
	jge	.LBB18_205
# BB#204:                               # %if.then120.i.i
                                        #   in Loop: Header=BB18_172 Depth=4
	leal	1(%r15), %ebp
	movq	200(%rsp), %rax         # 8-byte Reload
	movl	%ebp, 3616(%rsp,%rax,4)
	movl	$1001, %edi             # imm = 0x3E9
	callq	BZ2_bz__AssertH__fail
	movq	%rbp, %rcx
	cmpl	$13, %r15d
	movl	%ecx, %r15d
	movq	%rbx, %rbp
	movq	184(%rsp), %rbx         # 8-byte Reload
	jle	.LBB18_172
	.align	16, 0x90
.LBB18_128:                             # %if.then14.i.i
                                        #   in Loop: Header=BB18_79 Depth=3
	movq	144(%rsp), %rbx         # 8-byte Reload
	leal	1(%rbx), %eax
	cmpl	$2, %eax
	jl	.LBB18_168
# BB#129:                               # %while.cond.i.i.i.preheader
                                        #   in Loop: Header=BB18_79 Depth=3
	movq	$-1, %rbp
	cmpl	$0, "PinFlag-14.006"(%rip)
	je	.LBB18_131
# BB#130:                               #   in Loop: Header=BB18_79 Depth=3
	movq	%rcx, %r12
	jmp	.LBB18_132
	.align	16, 0x90
.LBB18_205:                             # %if.end129.i.i
                                        #   in Loop: Header=BB18_79 Depth=3
	movl	%r12d, %eax
	movq	192(%rsp), %rcx         # 8-byte Reload
	subl	%ecx, %eax
	movl	%r10d, %ebx
	subl	%r12d, %ebx
	cmpl	%ebx, %eax
	cmovlel	%eax, %ebx
	testl	%ebx, %ebx
	jle	.LBB18_223
# BB#206:                               # %while.body140.preheader.i.i
                                        #   in Loop: Header=BB18_79 Depth=3
	movq	192(%rsp), %rax         # 8-byte Reload
	leal	-1(%rax), %esi
	subl	%r12d, %esi
	leal	-1(%r12), %ebp
	subl	%r10d, %ebp
	cmpl	%ebp, %esi
	movl	%ebp, %eax
	cmovgel	%esi, %eax
	leal	1(%r10,%rax), %eax
	movslq	%eax, %r9
	cmpl	%esi, %ebp
	movl	%esi, %eax
	cmovgel	%ebp, %eax
	cmpl	$-3, %eax
	movl	$-2, %edx
	cmovgl	%eax, %edx
	subl	%eax, %edx
	incq	%rdx
	cmpq	$4, %rdx
	jb	.LBB18_219
# BB#207:                               # %min.iters.checked523
                                        #   in Loop: Header=BB18_79 Depth=3
	movq	%rdx, %rcx
	movabsq	$8589934588, %rax       # imm = 0x1FFFFFFFC
	andq	%rax, %rcx
	je	.LBB18_219
# BB#208:                               # %vector.memcheck543
                                        #   in Loop: Header=BB18_79 Depth=3
	movq	%rcx, 216(%rsp)         # 8-byte Spill
	movq	184(%rsp), %rdi         # 8-byte Reload
	leaq	(%r14,%rdi,4), %r13
	cmpl	%esi, %ebp
	movl	%esi, %ecx
	movq	%rsi, 232(%rsp)         # 8-byte Spill
	cmovgel	%ebp, %ecx
	cmpl	$-3, %ecx
	movl	$-2, %eax
	cmovgl	%ecx, %eax
	subl	%ecx, %eax
	leal	1(%r10,%rcx), %ecx
	movslq	%ecx, %rcx
	leaq	(%rcx,%rax), %rsi
	leaq	(%r14,%rsi,4), %rsi
	cmpq	%rsi, %r13
	ja	.LBB18_210
# BB#209:                               # %vector.memcheck543
                                        #   in Loop: Header=BB18_79 Depth=3
	addq	%rdi, %rax
	leaq	(%r14,%rax,4), %rax
	leaq	(%r14,%rcx,4), %rcx
	cmpq	%rax, %rcx
	jbe	.LBB18_219
.LBB18_210:                             # %vector.body516.preheader
                                        #   in Loop: Header=BB18_79 Depth=3
	movq	%rdx, 208(%rsp)         # 8-byte Spill
	movq	232(%rsp), %rdx         # 8-byte Reload
	cmpl	%edx, %ebp
	movl	%edx, %eax
	cmovgel	%ebp, %eax
	cmpl	$-3, %eax
	movl	$-2, %ecx
	cmovgl	%eax, %ecx
	subl	%eax, %ecx
	incq	%rcx
	movabsq	$8589934588, %rax       # imm = 0x1FFFFFFFC
	andq	%rax, %rcx
	addq	$-4, %rcx
	movq	%rcx, %rax
	shrq	$2, %rax
	btq	$2, %rcx
	movl	$0, %r13d
	jb	.LBB18_212
# BB#211:                               # %vector.body516.prol
                                        #   in Loop: Header=BB18_79 Depth=3
	movq	184(%rsp), %rcx         # 8-byte Reload
	movdqu	(%r14,%rcx,4), %xmm0
	movdqu	(%r14,%r9,4), %xmm1
	movdqu	%xmm1, (%r14,%rcx,4)
	movdqu	%xmm0, (%r14,%r9,4)
	movl	$4, %r13d
.LBB18_212:                             # %vector.body516.preheader.split
                                        #   in Loop: Header=BB18_79 Depth=3
	testq	%rax, %rax
	je	.LBB18_217
# BB#213:                               # %vector.body516.preheader.split.split
                                        #   in Loop: Header=BB18_79 Depth=3
	cmpl	$0, "PinFlag-14.002"(%rip)
	jne	.LBB18_215
# BB#214:                               #   in Loop: Header=BB18_79 Depth=3
	movl	$.L__unnamed_35, %edi
	movl	$1, %esi
	movl	$1120, %edx             # imm = 0x460
	movl	$29, %ecx
	movq	%r8, 248(%rsp)          # 8-byte Spill
	movl	$1, %r8d
	movq	%r12, 240(%rsp)         # 8-byte Spill
	movq	%r10, 144(%rsp)         # 8-byte Spill
	movl	%r11d, %r12d
	movq	%r9, (%rsp)             # 8-byte Spill
	callq	Pin
	movq	232(%rsp), %rdx         # 8-byte Reload
	movq	(%rsp), %r9             # 8-byte Reload
	movl	%r12d, %r11d
	movq	144(%rsp), %r10         # 8-byte Reload
	movq	240(%rsp), %r12         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movl	$1, "PinFlag-14.002"(%rip)
.LBB18_215:                             #   in Loop: Header=BB18_79 Depth=3
	cmpl	%edx, %ebp
	cmovgel	%ebp, %edx
	cmpl	$-3, %edx
	movl	$-2, %eax
	cmovgl	%edx, %eax
	subl	%edx, %eax
	incq	%rax
	movabsq	$8589934588, %rcx       # imm = 0x1FFFFFFFC
	andq	%rcx, %rax
	subq	%r13, %rax
	leal	1(%r10,%rdx), %ecx
	movslq	%ecx, %rcx
	addq	%r13, %rcx
	movq	24(%rsp), %rdx          # 8-byte Reload
	leaq	(%rdx,%rcx,4), %rcx
	addq	184(%rsp), %r13         # 8-byte Folded Reload
	leaq	(%rdx,%r13,4), %rdx
	.align	16, 0x90
.LBB18_216:                             # %vector.body516
                                        #   Parent Loop BB18_66 Depth=1
                                        #     Parent Loop BB18_70 Depth=2
                                        #       Parent Loop BB18_79 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movups	-16(%rdx), %xmm0
	movups	-16(%rcx), %xmm1
	movups	%xmm1, -16(%rdx)
	movups	%xmm0, -16(%rcx)
	movdqu	(%rdx), %xmm0
	movdqu	(%rcx), %xmm1
	movdqu	%xmm1, (%rdx)
	movdqu	%xmm0, (%rcx)
	addq	$32, %rcx
	addq	$32, %rdx
	addq	$-8, %rax
	jne	.LBB18_216
.LBB18_217:                             # %middle.block517
                                        #   in Loop: Header=BB18_79 Depth=3
	movq	216(%rsp), %rax         # 8-byte Reload
	cmpq	%rax, 208(%rsp)         # 8-byte Folded Reload
	je	.LBB18_223
# BB#218:                               #   in Loop: Header=BB18_79 Depth=3
	addq	%rax, 184(%rsp)         # 8-byte Folded Spill
	addq	%rax, %r9
	subl	%eax, %ebx
.LBB18_219:                             # %while.body140.i.i.preheader
                                        #   in Loop: Header=BB18_79 Depth=3
	movl	%ebx, %eax
	notl	%eax
	cmpl	$-3, %eax
	movl	$-2, %ecx
	cmovlel	%ecx, %eax
	cmpl	$0, "PinFlag-14.003"(%rip)
	jne	.LBB18_221
# BB#220:                               #   in Loop: Header=BB18_79 Depth=3
	leal	1(%rbx,%rax), %eax
	movslq	%eax, %rsi
	movl	$.L__unnamed_36, %edi
	movl	$240, %edx
	movl	$14, %ecx
	movq	%r12, 240(%rsp)         # 8-byte Spill
	movq	%r8, 248(%rsp)          # 8-byte Spill
	movl	$1, %r8d
	movq	%r10, %rbp
	movl	%r11d, %r13d
	movq	%r9, %r12
	callq	Pin
	movq	%r12, %r9
	movl	%r13d, %r11d
	movq	%rbp, %r10
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	240(%rsp), %r12         # 8-byte Reload
	movl	$1, "PinFlag-14.003"(%rip)
.LBB18_221:                             #   in Loop: Header=BB18_79 Depth=3
	movq	184(%rsp), %rax         # 8-byte Reload
	leaq	(%r14,%rax,4), %rax
	leaq	(%r14,%r9,4), %rcx
	incl	%ebx
	.align	16, 0x90
.LBB18_222:                             # %while.body140.i.i
                                        #   Parent Loop BB18_66 Depth=1
                                        #     Parent Loop BB18_70 Depth=2
                                        #       Parent Loop BB18_79 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	(%rax), %edx
	movl	(%rcx), %esi
	movl	%esi, (%rax)
	movl	%edx, (%rcx)
	addq	$4, %rax
	addq	$4, %rcx
	decl	%ebx
	cmpl	$1, %ebx
	jg	.LBB18_222
.LBB18_223:                             # %while.end153.i.i
                                        #   in Loop: Header=BB18_79 Depth=3
	movq	224(%rsp), %rbx         # 8-byte Reload
	subl	%r8d, %ebx
	movl	%r8d, %edi
	subl	%r11d, %edi
	cmpl	%edi, %ebx
	cmovgl	%edi, %ebx
	testl	%ebx, %ebx
	jle	.LBB18_241
# BB#224:                               # %while.body172.preheader.i.i
                                        #   in Loop: Header=BB18_79 Depth=3
	movq	224(%rsp), %rax         # 8-byte Reload
	movl	%eax, %r9d
	subl	%ebx, %r9d
	movslq	%r10d, %rbp
	decl	%r11d
	subl	%r8d, %r11d
	decl	%r8d
	subl	%eax, %r8d
	cmpl	%r8d, %r11d
	movl	%r8d, %eax
	cmovgel	%r11d, %eax
	cmpl	$-3, %eax
	movl	$-2, %r13d
	cmovgl	%eax, %r13d
	subl	%eax, %r13d
	incq	%r13
	cmpq	$4, %r13
	jb	.LBB18_237
# BB#225:                               # %min.iters.checked475
                                        #   in Loop: Header=BB18_79 Depth=3
	movq	%r13, %rcx
	movabsq	$8589934588, %rax       # imm = 0x1FFFFFFFC
	andq	%rax, %rcx
	je	.LBB18_237
# BB#226:                               # %vector.memcheck492
                                        #   in Loop: Header=BB18_79 Depth=3
	movq	%rcx, 184(%rsp)         # 8-byte Spill
	leaq	(%r14,%rbp,4), %rdx
	cmpl	%r8d, %r11d
	movl	%r8d, %ecx
	cmovgel	%r11d, %ecx
	cmpl	$-3, %ecx
	movl	$-2, %eax
	cmovgl	%ecx, %eax
	subl	%ecx, %eax
	movq	224(%rsp), %rsi         # 8-byte Reload
	leal	2(%rsi,%rcx), %ecx
	movslq	%ecx, %rcx
	leaq	(%rcx,%rax), %rsi
	leaq	(%r14,%rsi,4), %rsi
	cmpq	%rsi, %rdx
	ja	.LBB18_228
# BB#227:                               # %vector.memcheck492
                                        #   in Loop: Header=BB18_79 Depth=3
	addq	%rbp, %rax
	leaq	(%r14,%rax,4), %rax
	leaq	(%r14,%rcx,4), %rcx
	cmpq	%rax, %rcx
	jbe	.LBB18_237
.LBB18_228:                             # %vector.body470.preheader
                                        #   in Loop: Header=BB18_79 Depth=3
	movq	%rbp, 232(%rsp)         # 8-byte Spill
	cmpl	%r8d, %r11d
	movl	%r8d, %eax
	cmovgel	%r11d, %eax
	cmpl	$-3, %eax
	movl	$-2, %ecx
	cmovgl	%eax, %ecx
	subl	%eax, %ecx
	incq	%rcx
	movabsq	$8589934588, %rax       # imm = 0x1FFFFFFFC
	andq	%rax, %rcx
	addq	$-4, %rcx
	movq	%rcx, %rax
	shrq	$2, %rax
	btq	$2, %rcx
	movl	$0, %ebp
	jb	.LBB18_230
# BB#229:                               # %vector.body470.prol
                                        #   in Loop: Header=BB18_79 Depth=3
	movq	232(%rsp), %rdx         # 8-byte Reload
	movdqu	(%r14,%rdx,4), %xmm0
	leal	1(%r9), %ecx
	movslq	%ecx, %rcx
	movdqu	(%r14,%rcx,4), %xmm1
	movdqu	%xmm1, (%r14,%rdx,4)
	movdqu	%xmm0, (%r14,%rcx,4)
	movl	$4, %ebp
.LBB18_230:                             # %vector.body470.preheader.split
                                        #   in Loop: Header=BB18_79 Depth=3
	testq	%rax, %rax
	je	.LBB18_235
# BB#231:                               # %vector.body470.preheader.split.split
                                        #   in Loop: Header=BB18_79 Depth=3
	cmpl	$0, "PinFlag-14.004"(%rip)
	jne	.LBB18_233
# BB#232:                               #   in Loop: Header=BB18_79 Depth=3
	movl	%edi, 208(%rsp)         # 4-byte Spill
	movl	$.L__unnamed_37, %edi
	movl	$1, %esi
	movl	$1120, %edx             # imm = 0x460
	movl	$35, %ecx
	movq	%r8, 248(%rsp)          # 8-byte Spill
	movl	$1, %r8d
	movq	%r12, 240(%rsp)         # 8-byte Spill
	movq	%r10, %r12
	movl	%r11d, 216(%rsp)        # 4-byte Spill
	movq	%r9, 144(%rsp)          # 8-byte Spill
	callq	Pin
	movq	144(%rsp), %r9          # 8-byte Reload
	movl	208(%rsp), %edi         # 4-byte Reload
	movl	216(%rsp), %r11d        # 4-byte Reload
	movq	%r12, %r10
	movq	240(%rsp), %r12         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movl	$1, "PinFlag-14.004"(%rip)
.LBB18_233:                             #   in Loop: Header=BB18_79 Depth=3
	cmpl	%r8d, %r11d
	cmovgel	%r11d, %r8d
	cmpl	$-3, %r8d
	movl	$-2, %eax
	cmovgl	%r8d, %eax
	subl	%r8d, %eax
	incq	%rax
	movabsq	$8589934588, %rcx       # imm = 0x1FFFFFFFC
	andq	%rcx, %rax
	movq	224(%rsp), %rcx         # 8-byte Reload
	addl	%ecx, %r8d
	movslq	%r10d, %rcx
	movq	24(%rsp), %rdx          # 8-byte Reload
	leaq	(%rdx,%rcx,4), %rcx
	.align	16, 0x90
.LBB18_234:                             # %vector.body470
                                        #   Parent Loop BB18_66 Depth=1
                                        #     Parent Loop BB18_70 Depth=2
                                        #       Parent Loop BB18_79 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movups	-16(%rcx,%rbp,4), %xmm0
	leal	2(%r8,%rbp), %edx
	movslq	%edx, %rdx
	movups	(%r14,%rdx,4), %xmm1
	movups	%xmm1, -16(%rcx,%rbp,4)
	movups	%xmm0, (%r14,%rdx,4)
	movdqu	(%rcx,%rbp,4), %xmm0
	leal	6(%r8,%rbp), %edx
	movslq	%edx, %rdx
	movdqu	(%r14,%rdx,4), %xmm1
	movdqu	%xmm1, (%rcx,%rbp,4)
	movdqu	%xmm0, (%r14,%rdx,4)
	addq	$8, %rbp
	cmpq	%rbp, %rax
	jne	.LBB18_234
.LBB18_235:                             # %middle.block471
                                        #   in Loop: Header=BB18_79 Depth=3
	movq	184(%rsp), %rax         # 8-byte Reload
	cmpq	%rax, %r13
	je	.LBB18_241
# BB#236:                               #   in Loop: Header=BB18_79 Depth=3
	movq	232(%rsp), %rbp         # 8-byte Reload
	addq	%rax, %rbp
	addl	%eax, %r9d
	subl	%eax, %ebx
.LBB18_237:                             # %while.body172.i.i.preheader
                                        #   in Loop: Header=BB18_79 Depth=3
	movl	%ebx, %eax
	notl	%eax
	cmpl	$-3, %eax
	movl	$-2, %ecx
	cmovlel	%ecx, %eax
	cmpl	$0, "PinFlag-14.005"(%rip)
	jne	.LBB18_239
# BB#238:                               #   in Loop: Header=BB18_79 Depth=3
	leal	1(%rbx,%rax), %eax
	movslq	%eax, %rsi
	movl	%edi, 208(%rsp)         # 4-byte Spill
	movl	$.L__unnamed_38, %edi
	movl	$240, %edx
	movl	$15, %ecx
	movl	$1, %r8d
	movq	%rbp, 232(%rsp)         # 8-byte Spill
	movq	%r10, %rbp
	movq	%r9, %r13
	callq	Pin
	movq	%r13, %r9
	movl	208(%rsp), %edi         # 4-byte Reload
	movq	%rbp, %r10
	movq	232(%rsp), %rbp         # 8-byte Reload
	movl	$1, "PinFlag-14.005"(%rip)
.LBB18_239:                             #   in Loop: Header=BB18_79 Depth=3
	leaq	(%r14,%rbp,4), %rax
	incl	%r9d
	movslq	%r9d, %rcx
	leaq	(%r14,%rcx,4), %rcx
	incl	%ebx
	.align	16, 0x90
.LBB18_240:                             # %while.body172.i.i
                                        #   Parent Loop BB18_66 Depth=1
                                        #     Parent Loop BB18_70 Depth=2
                                        #       Parent Loop BB18_79 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	(%rax), %edx
	movl	(%rcx), %esi
	movl	%esi, (%rax)
	movl	%edx, (%rcx)
	addq	$4, %rax
	addq	$4, %rcx
	decl	%ebx
	cmpl	$1, %ebx
	jg	.LBB18_240
.LBB18_241:                             # %while.end185.i.i
                                        #   in Loop: Header=BB18_79 Depth=3
	movq	192(%rsp), %r11         # 8-byte Reload
	movl	%r11d, %eax
	subl	%r12d, %eax
	leal	(%rax,%r10), %esi
	leal	-1(%rax,%r10), %r9d
	movq	224(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebx
	subl	%edi, %ebx
	leal	1(%rbx), %edi
	leal	1(%r15), %r8d
	movl	%r9d, %edx
	subl	%r11d, %edx
	movl	%eax, %ebp
	subl	%edi, %ebp
	cmpl	%ebp, %edx
	movl	%edi, %edx
	cmovll	%r11d, %edx
	cmovll	%edi, %r11d
	movl	%eax, %ecx
	cmovll	%r9d, %ecx
	cmovll	%eax, %r9d
	movl	%ecx, %ebp
	subl	%edx, %ebp
	movl	%ebx, %eax
	subl	%esi, %eax
	cmpl	%eax, %ebp
	movl	%edx, %eax
	cmovll	%esi, %eax
	movl	%ebx, %r10d
	cmovll	%ecx, %r10d
	cmovll	%ebx, %ecx
	movl	%r15d, %ebx
	cmovll	%r8d, %ebx
	cmovll	%r15d, %r8d
	cmovgel	%esi, %edx
	movl	%r9d, %esi
	subl	%r11d, %esi
	movl	%ecx, %edi
	subl	%eax, %edi
	cmpl	%edi, %esi
	movl	%eax, %r12d
	cmovll	%r11d, %r12d
	cmovgel	%r11d, %eax
	movl	%ecx, %edi
	cmovll	%r9d, %edi
	cmovgel	%r9d, %ecx
	movl	%ebx, %ebp
	cmovll	%r15d, %ebp
	cmovgel	%r15d, %ebx
	movq	200(%rsp), %rsi         # 8-byte Reload
	movl	%eax, 4416(%rsp,%rsi,4)
	movl	%ecx, 4016(%rsp,%rsi,4)
	movl	%ebx, 3616(%rsp,%rsi,4)
	movq	136(%rsp), %rax         # 8-byte Reload
	movl	%r12d, 4416(%rsp,%rax,4)
	movl	%edi, 4016(%rsp,%rax,4)
	movl	%ebp, 3616(%rsp,%rax,4)
	movl	%edx, 4420(%rsp,%rax,4)
	movl	%r10d, 4020(%rsp,%rax,4)
	movl	%r8d, 3620(%rsp,%rax,4)
	movl	156(%rsp), %ebp         # 4-byte Reload
	addl	$2, %ebp
	movl	160(%rsp), %edx         # 4-byte Reload
	jmp	.LBB18_170
.LBB18_131:                             #   in Loop: Header=BB18_79 Depth=3
	movq	%rcx, %r12
	movslq	%ebx, %rsi
	movl	$.L__unnamed_39, %edi
	movl	$2, %edx
	movl	$6, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-14.006"(%rip)
.LBB18_132:                             # %while.cond.i.i.i
                                        #   in Loop: Header=BB18_79 Depth=3
	movq	192(%rsp), %r15         # 8-byte Reload
	.align	16, 0x90
.LBB18_133:                             # %while.cond.i.i.i
                                        #   Parent Loop BB18_66 Depth=1
                                        #     Parent Loop BB18_70 Depth=2
                                        #       Parent Loop BB18_79 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	%ebx, incs+4(,%rbp,4)
	leaq	1(%rbp), %rbp
	jle	.LBB18_133
# BB#134:                               # %for.cond.preheader.i.i.i
                                        #   in Loop: Header=BB18_79 Depth=3
	testl	%ebp, %ebp
	movq	%r12, %rcx
	jle	.LBB18_168
# BB#135:                               # %for.body.preheader.i.i.i
                                        #   in Loop: Header=BB18_79 Depth=3
	cmpl	$0, "PinFlag-14.007"(%rip)
	jne	.LBB18_137
# BB#136:                               #   in Loop: Header=BB18_79 Depth=3
	movl	$.L__unnamed_40, %edi
	movl	$1, %esi
	movl	$6, %edx
	movq	%rcx, %rbx
	movl	$15, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movq	%rbx, %rcx
	movl	$1, "PinFlag-14.007"(%rip)
.LBB18_137:                             #   in Loop: Header=BB18_79 Depth=3
	movslq	%ebp, %rax
	leal	1(%r15), %edx
	movl	%edx, 144(%rsp)         # 4-byte Spill
	leal	2(%r15), %edx
	movl	%edx, 136(%rsp)         # 4-byte Spill
.LBB18_139:                             # %for.body.i.i.i
                                        #   Parent Loop BB18_66 Depth=1
                                        #     Parent Loop BB18_70 Depth=2
                                        #       Parent Loop BB18_79 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB18_143 Depth 5
                                        #             Child Loop BB18_146 Depth 6
                                        #             Child Loop BB18_153 Depth 6
                                        #             Child Loop BB18_160 Depth 6
	movq	%rax, %rdx
	movq	%rdx, 160(%rsp)         # 8-byte Spill
	leaq	-1(%rdx), %rax
	movl	incs-4(,%rdx,4), %r12d
	leal	(%r12,%r15), %edx
	movl	%edx, 248(%rsp)         # 4-byte Spill
	movslq	%edx, %rbp
	cmpl	$0, "PinFlag-14.0070"(%rip)
	je	.LBB18_141
# BB#140:                               #   in Loop: Header=BB18_139 Depth=4
	movq	%rax, 184(%rsp)         # 8-byte Spill
	jmp	.LBB18_142
	.align	16, 0x90
.LBB18_141:                             #   in Loop: Header=BB18_139 Depth=4
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_41, %edi
	movl	$1, %esi
	movl	$5203, %edx             # imm = 0x1453
	movq	%rcx, %rbx
	movl	$58, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movq	%rbx, %rcx
	movl	$1, "PinFlag-14.0070"(%rip)
.LBB18_142:                             # %while.body7.i.i.i
                                        #   in Loop: Header=BB18_139 Depth=4
	movl	136(%rsp), %eax         # 4-byte Reload
	movl	%eax, 208(%rsp)         # 4-byte Spill
	movl	144(%rsp), %eax         # 4-byte Reload
	movl	%eax, 216(%rsp)         # 4-byte Spill
	movl	%r15d, %eax
	movl	%eax, 224(%rsp)         # 4-byte Spill
	.align	16, 0x90
.LBB18_143:                             # %while.body7.i.i.i
                                        #   Parent Loop BB18_66 Depth=1
                                        #     Parent Loop BB18_70 Depth=2
                                        #       Parent Loop BB18_79 Depth=3
                                        #         Parent Loop BB18_139 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB18_146 Depth 6
                                        #             Child Loop BB18_153 Depth 6
                                        #             Child Loop BB18_160 Depth 6
	cmpq	232(%rsp), %rbp         # 8-byte Folded Reload
	jg	.LBB18_138
# BB#144:                               # %if.end10.i.i.i
                                        #   in Loop: Header=BB18_143 Depth=5
	movl	(%r14,%rbp,4), %eax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movq	%rbp, 240(%rsp)         # 8-byte Spill
	leal	(%rax,%rcx), %ebp
	cmpl	$0, "PinFlag-14.00700"(%rip)
	movl	224(%rsp), %eax         # 4-byte Reload
	movq	%r14, %rbx
	jne	.LBB18_146
# BB#145:                               #   in Loop: Header=BB18_143 Depth=5
	movl	$.L__unnamed_42, %edi
	movl	$1, %esi
	movl	$378, %edx              # imm = 0x17A
	movq	%rcx, %r14
	movl	$15, %ecx
	movl	$1, %r8d
	callq	Pin
	movq	%r14, %rcx
	movl	$1, "PinFlag-14.00700"(%rip)
	movl	224(%rsp), %eax         # 4-byte Reload
	.align	16, 0x90
.LBB18_146:                             # %while.cond13.i.i.i
                                        #   Parent Loop BB18_66 Depth=1
                                        #     Parent Loop BB18_70 Depth=2
                                        #       Parent Loop BB18_79 Depth=3
                                        #         Parent Loop BB18_139 Depth=4
                                        #           Parent Loop BB18_143 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	leal	(%r12,%rax), %r15d
	movslq	%eax, %r14
	movl	(%rbx,%r14,4), %edi
	addl	%ecx, %edi
	movq	%rcx, %r13
	movl	%ebp, %esi
	movq	272(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	leaq	284(%rsp), %r9
	callq	mainGtU
	testb	%al, %al
	je	.LBB18_149
# BB#147:                               # %while.body19.i.i.i
                                        #   in Loop: Header=BB18_146 Depth=6
	movl	(%rbx,%r14,4), %eax
	movslq	%r15d, %rcx
	movl	%eax, (%rbx,%rcx,4)
	movl	%r14d, %eax
	subl	%r12d, %eax
	cmpl	248(%rsp), %r14d        # 4-byte Folded Reload
	movq	%r13, %rcx
	jge	.LBB18_146
# BB#148:                               # %while.end31.i.i.isplit
                                        #   in Loop: Header=BB18_143 Depth=5
	addl	%r12d, %eax
	movl	%eax, %r15d
	movq	%rbx, %r14
	jmp	.LBB18_150
	.align	16, 0x90
.LBB18_149:                             # %while.cond13.i.i.i.while.end31.i.i.i_crit_edge
                                        #   in Loop: Header=BB18_143 Depth=5
	movq	%rbx, %r14
	movq	%r13, %rcx
.LBB18_150:                             # %while.end31.i.i.i
                                        #   in Loop: Header=BB18_143 Depth=5
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movslq	%r15d, %rax
	movl	%esi, (%r14,%rax,4)
	cmpq	232(%rsp), %rdx         # 8-byte Folded Reload
	jge	.LBB18_138
# BB#151:                               # %if.end37.i.i.i
                                        #   in Loop: Header=BB18_143 Depth=5
	movl	4(%r14,%rdx,4), %eax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movq	%rdx, 240(%rsp)         # 8-byte Spill
	leal	(%rax,%rcx), %r15d
	cmpl	$0, "PinFlag-14.00701"(%rip)
	movl	216(%rsp), %eax         # 4-byte Reload
	jne	.LBB18_153
# BB#152:                               #   in Loop: Header=BB18_143 Depth=5
	movl	$.L__unnamed_43, %edi
	movl	$1, %esi
	movl	$378, %edx              # imm = 0x17A
	movq	%rcx, %rbx
	movl	$15, %ecx
	movl	$1, %r8d
	callq	Pin
	movq	%rbx, %rcx
	movl	$1, "PinFlag-14.00701"(%rip)
	movl	216(%rsp), %eax         # 4-byte Reload
	.align	16, 0x90
.LBB18_153:                             # %while.cond40.i.i.i
                                        #   Parent Loop BB18_66 Depth=1
                                        #     Parent Loop BB18_70 Depth=2
                                        #       Parent Loop BB18_79 Depth=3
                                        #         Parent Loop BB18_139 Depth=4
                                        #           Parent Loop BB18_143 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	leal	(%r12,%rax), %r13d
	movslq	%eax, %rbx
	movl	(%r14,%rbx,4), %edi
	addl	%ecx, %edi
	movq	%rcx, %rbp
	movl	%r15d, %esi
	movq	272(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	leaq	284(%rsp), %r9
	callq	mainGtU
	testb	%al, %al
	je	.LBB18_156
# BB#154:                               # %while.body48.i.i.i
                                        #   in Loop: Header=BB18_153 Depth=6
	movl	(%r14,%rbx,4), %eax
	movslq	%r13d, %rcx
	movl	%eax, (%r14,%rcx,4)
	movl	%ebx, %eax
	subl	%r12d, %eax
	cmpl	248(%rsp), %ebx         # 4-byte Folded Reload
	movq	%rbp, %rcx
	jge	.LBB18_153
# BB#155:                               # %while.end60.i.i.isplit
                                        #   in Loop: Header=BB18_143 Depth=5
	addl	%r12d, %eax
	movl	%eax, %r13d
	jmp	.LBB18_157
	.align	16, 0x90
.LBB18_156:                             # %while.cond40.i.i.i.while.end60.i.i.i_crit_edge
                                        #   in Loop: Header=BB18_143 Depth=5
	movq	%rbp, %rcx
.LBB18_157:                             # %while.end60.i.i.i
                                        #   in Loop: Header=BB18_143 Depth=5
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movslq	%r13d, %rax
	movl	%esi, (%r14,%rax,4)
	leaq	2(%rdx), %rax
	cmpq	232(%rsp), %rax         # 8-byte Folded Reload
	jg	.LBB18_138
# BB#158:                               # %if.end66.i.i.i
                                        #   in Loop: Header=BB18_143 Depth=5
	movl	8(%r14,%rdx,4), %eax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movq	%rdx, 240(%rsp)         # 8-byte Spill
	leal	(%rax,%rcx), %r13d
	cmpl	$0, "PinFlag-14.00702"(%rip)
	movl	208(%rsp), %eax         # 4-byte Reload
	jne	.LBB18_160
# BB#159:                               #   in Loop: Header=BB18_143 Depth=5
	movl	$.L__unnamed_44, %edi
	movl	$1, %esi
	movl	$378, %edx              # imm = 0x17A
	movq	%rcx, %rbx
	movl	$15, %ecx
	movl	$1, %r8d
	callq	Pin
	movq	%rbx, %rcx
	movl	$1, "PinFlag-14.00702"(%rip)
	movl	208(%rsp), %eax         # 4-byte Reload
	.align	16, 0x90
.LBB18_160:                             # %while.cond69.i.i.i
                                        #   Parent Loop BB18_66 Depth=1
                                        #     Parent Loop BB18_70 Depth=2
                                        #       Parent Loop BB18_79 Depth=3
                                        #         Parent Loop BB18_139 Depth=4
                                        #           Parent Loop BB18_143 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	leal	(%r12,%rax), %r15d
	movslq	%eax, %rbx
	movl	(%r14,%rbx,4), %edi
	addl	%ecx, %edi
	movq	%rcx, %rbp
	movl	%r13d, %esi
	movq	272(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	leaq	284(%rsp), %r9
	callq	mainGtU
	testb	%al, %al
	je	.LBB18_163
# BB#161:                               # %while.body77.i.i.i
                                        #   in Loop: Header=BB18_160 Depth=6
	movl	(%r14,%rbx,4), %eax
	movslq	%r15d, %rcx
	movl	%eax, (%r14,%rcx,4)
	movl	%ebx, %eax
	subl	%r12d, %eax
	cmpl	248(%rsp), %ebx         # 4-byte Folded Reload
	movq	%rbp, %rcx
	jge	.LBB18_160
# BB#162:                               # %while.end89.i.i.isplit
                                        #   in Loop: Header=BB18_143 Depth=5
	addl	%r12d, %eax
	movl	%eax, %r15d
	jmp	.LBB18_164
	.align	16, 0x90
.LBB18_163:                             # %while.cond69.i.i.i.while.end89.i.i.i_crit_edge
                                        #   in Loop: Header=BB18_143 Depth=5
	movq	%rbp, %rcx
.LBB18_164:                             # %while.end89.i.i.i
                                        #   in Loop: Header=BB18_143 Depth=5
	movslq	%r15d, %rax
	movq	200(%rsp), %rdx         # 8-byte Reload
	movl	%edx, (%r14,%rax,4)
	movl	284(%rsp), %edx
	movq	240(%rsp), %rbp         # 8-byte Reload
	addq	$3, %rbp
	addl	$3, 224(%rsp)           # 4-byte Folded Spill
	addl	$3, 216(%rsp)           # 4-byte Folded Spill
	addl	$3, 208(%rsp)           # 4-byte Folded Spill
	testl	%edx, %edx
	jns	.LBB18_143
	jmp	.LBB18_165
	.align	16, 0x90
.LBB18_138:                             # %for.cond.loopexit.i.i.i
                                        #   in Loop: Header=BB18_139 Depth=4
	cmpq	$2, 160(%rsp)           # 8-byte Folded Reload
	movq	192(%rsp), %r15         # 8-byte Reload
	movq	184(%rsp), %rax         # 8-byte Reload
	jge	.LBB18_139
# BB#167:                               # %mainSimpleSort.exit.i.i.loopexit
                                        #   in Loop: Header=BB18_79 Depth=3
	movl	284(%rsp), %eax
	movl	%eax, 160(%rsp)         # 4-byte Spill
	.align	16, 0x90
.LBB18_168:                             # %mainSimpleSort.exit.i.i
                                        #   in Loop: Header=BB18_79 Depth=3
	movl	160(%rsp), %edx         # 4-byte Reload
	testl	%edx, %edx
	js	.LBB18_165
# BB#169:                               #   in Loop: Header=BB18_79 Depth=3
	movl	156(%rsp), %ebp         # 4-byte Reload
	decl	%ebp
.LBB18_170:                             # %while.cond.outer.backedge.i.i
                                        #   in Loop: Header=BB18_79 Depth=3
	testl	%ebp, %ebp
	jg	.LBB18_79
.LBB18_165:                             # %mainQSort3.exit.i
                                        #   in Loop: Header=BB18_70 Depth=2
	testl	%edx, %edx
	js	.LBB18_166
# BB#242:                               # %mainQSort3.exit.if.end322_crit_edge.i
                                        #   in Loop: Header=BB18_70 Depth=2
	movl	%edx, 160(%rsp)         # 4-byte Spill
	movl	128(%rsp), %eax         # 4-byte Reload
	incl	%eax
	subl	108(%rsp), %eax         # 4-byte Folded Reload
	addl	132(%rsp), %eax         # 4-byte Folded Reload
	movl	%eax, 128(%rsp)         # 4-byte Spill
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	112(%rsp), %r13         # 8-byte Reload
	movl	(%r10,%r13,4), %eax
	movl	$-2097153, %r15d        # imm = 0xFFFFFFFFFFDFFFFF
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rbp          # 8-byte Reload
	movq	120(%rsp), %rbx         # 8-byte Reload
.LBB18_243:                             # %if.end322.i
                                        #   in Loop: Header=BB18_70 Depth=2
	orl	$2097152, %eax          # imm = 0x200000
	movl	%eax, (%r10,%r13,4)
.LBB18_244:                             # %for.inc327.i
                                        #   in Loop: Header=BB18_70 Depth=2
	incq	%rbx
	cmpq	$256, %rbx              # imm = 0x100
	jl	.LBB18_70
# BB#245:                               # %for.end329.i
                                        #   in Loop: Header=BB18_66 Depth=1
	cmpb	$0, 2336(%rsp,%rdi)
	je	.LBB18_247
# BB#246:                               # %if.then333.i
                                        #   in Loop: Header=BB18_66 Depth=1
	movq	%rdi, %r12
	movl	$1006, %edi             # imm = 0x3EE
	movq	%r10, %r13
	movq	%rsi, %rbx
	callq	BZ2_bz__AssertH__fail
	movq	%rbx, %rsi
	movq	%r12, %rdi
	movq	%r13, %r10
.LBB18_247:                             # %for.body338.i.preheader
                                        #   in Loop: Header=BB18_66 Depth=1
	cmpl	$0, "PinFlag-14.1"(%rip)
	jne	.LBB18_249
# BB#248:                               #   in Loop: Header=BB18_66 Depth=1
	movq	%rdi, %r12
	movl	$.L__unnamed_45, %edi
	movq	%rsi, %r13
	movl	$127, %esi
	movl	$36, %edx
	movl	$33, %ecx
	movl	$1, %r8d
	movq	%r10, %rbx
	callq	Pin
	movq	%r13, %rsi
	movq	%r12, %rdi
	movq	%rbx, %r10
	movl	$1, "PinFlag-14.1"(%rip)
.LBB18_249:                             #   in Loop: Header=BB18_66 Depth=1
	movq	48(%rsp), %rax          # 8-byte Reload
	leaq	(%rax,%rdi,4), %rax
	xorl	%ecx, %ecx
	.align	16, 0x90
.LBB18_250:                             # %for.body338.i
                                        #   Parent Loop BB18_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-1028(%rax), %edx
	andl	%r15d, %edx
	movl	%edx, 1312(%rsp,%rcx,4)
	movl	-1024(%rax), %edx
	andl	%r15d, %edx
	decl	%edx
	movl	%edx, 288(%rsp,%rcx,4)
	movl	-4(%rax), %edx
	andl	%r15d, %edx
	movl	%edx, 1316(%rsp,%rcx,4)
	movl	(%rax), %edx
	andl	%r15d, %edx
	decl	%edx
	movl	%edx, 292(%rsp,%rcx,4)
	addq	$2, %rcx
	addq	$2048, %rax             # imm = 0x800
	cmpq	$256, %rcx              # imm = 0x100
	jne	.LBB18_250
# BB#251:                               # %for.end357.i
                                        #   in Loop: Header=BB18_66 Depth=1
	movl	(%r10,%rsi,4), %eax
	andl	%r15d, %eax
	movl	1312(%rsp,%rdi,4), %r12d
	cmpl	%r12d, %eax
	movq	256(%rsp), %r9          # 8-byte Reload
	jge	.LBB18_252
# BB#253:                               # %for.body367.preheader.i
                                        #   in Loop: Header=BB18_66 Depth=1
	movq	%rbp, 96(%rsp)          # 8-byte Spill
	movq	%r9, %r13
	movslq	%eax, %rbx
	cmpl	$0, "PinFlag-14.2"(%rip)
	je	.LBB18_255
# BB#254:                               #   in Loop: Header=BB18_66 Depth=1
	movq	%rsi, 88(%rsp)          # 8-byte Spill
	jmp	.LBB18_256
	.align	16, 0x90
.LBB18_252:                             #   in Loop: Header=BB18_66 Depth=1
	movq	%rbp, 96(%rsp)          # 8-byte Spill
	movq	%rsi, 88(%rsp)          # 8-byte Spill
	movl	60(%rsp), %r8d          # 4-byte Reload
	jmp	.LBB18_260
.LBB18_255:                             #   in Loop: Header=BB18_66 Depth=1
	movq	%rsi, 88(%rsp)          # 8-byte Spill
	movq	%rdi, 80(%rsp)          # 8-byte Spill
	movl	$.L__unnamed_46, %edi
	movl	$1, %esi
	movl	$25, %edx
	movl	$30, %ecx
	movl	$1, %r8d
	movq	%r10, %rbp
	callq	Pin
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	%rbp, %r10
	movl	$1, "PinFlag-14.2"(%rip)
.LBB18_256:                             # %for.body367.i
                                        #   in Loop: Header=BB18_66 Depth=1
	movq	%r13, %r9
	movl	60(%rsp), %r8d          # 4-byte Reload
	.align	16, 0x90
.LBB18_257:                             # %for.body367.i
                                        #   Parent Loop BB18_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	(%r14,%rbx,4), %eax
	leal	-1(%rax), %ecx
	sarl	$31, %ecx
	andl	%r9d, %ecx
	leal	-1(%rcx,%rax), %eax
	movslq	%eax, %rcx
	movq	272(%rsp), %rdx         # 8-byte Reload
	movzbl	(%rdx,%rcx), %ecx
	cmpb	$0, 2336(%rsp,%rcx)
	jne	.LBB18_259
# BB#258:                               # %if.then381.i
                                        #   in Loop: Header=BB18_257 Depth=2
	movslq	1312(%rsp,%rcx,4), %rdx
	leal	1(%rdx), %esi
	movl	%esi, 1312(%rsp,%rcx,4)
	movl	%eax, (%r14,%rdx,4)
	movl	1312(%rsp,%rdi,4), %r12d
.LBB18_259:                             # %for.inc388.i
                                        #   in Loop: Header=BB18_257 Depth=2
	incq	%rbx
	movslq	%r12d, %rax
	cmpq	%rax, %rbx
	jl	.LBB18_257
.LBB18_260:                             # %for.end390.i
                                        #   in Loop: Header=BB18_66 Depth=1
	addl	$256, %r8d              # imm = 0x100
	movslq	%r8d, %rbp
	movl	(%r10,%rbp,4), %ebx
	andl	%r15d, %ebx
	decl	%ebx
	movl	288(%rsp,%rdi,4), %r13d
	cmpl	%r13d, %ebx
	jle	.LBB18_265
# BB#261:                               # %for.body402.i.preheader
                                        #   in Loop: Header=BB18_66 Depth=1
	cmpl	$0, "PinFlag-14.3"(%rip)
	jne	.LBB18_263
# BB#262:                               #   in Loop: Header=BB18_66 Depth=1
	movq	%rdi, 80(%rsp)          # 8-byte Spill
	movl	$.L__unnamed_47, %edi
	movl	$1, %esi
	movl	$25, %edx
	movl	$30, %ecx
	movl	$1, %r8d
	movq	%r10, 176(%rsp)         # 8-byte Spill
	movq	%r9, %r15
	callq	Pin
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	%r15, %r9
	movl	$-2097153, %r15d        # imm = 0xFFFFFFFFFFDFFFFF
	movq	176(%rsp), %r10         # 8-byte Reload
	movl	$1, "PinFlag-14.3"(%rip)
	.align	16, 0x90
.LBB18_263:                             # %for.body402.i
                                        #   Parent Loop BB18_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	%ebx, %rax
	movl	(%r14,%rax,4), %eax
	leal	-1(%rax), %ecx
	sarl	$31, %ecx
	andl	%r9d, %ecx
	leal	-1(%rcx,%rax), %eax
	movslq	%eax, %rcx
	movq	272(%rsp), %rdx         # 8-byte Reload
	movzbl	(%rdx,%rcx), %ecx
	cmpb	$0, 2336(%rsp,%rcx)
	jne	.LBB18_264
# BB#310:                               # %if.then416.i
                                        #   in Loop: Header=BB18_263 Depth=2
	movslq	288(%rsp,%rcx,4), %rdx
	leal	-1(%rdx), %esi
	movl	%esi, 288(%rsp,%rcx,4)
	movl	%eax, (%r14,%rdx,4)
	movl	288(%rsp,%rdi,4), %r13d
.LBB18_264:                             # %for.cond397.backedge.i
                                        #   in Loop: Header=BB18_263 Depth=2
	decl	%ebx
	cmpl	%r13d, %ebx
	jg	.LBB18_263
.LBB18_265:                             # %for.end425.i
                                        #   in Loop: Header=BB18_66 Depth=1
	leal	-1(%r12), %eax
	cmpl	%r13d, %eax
	je	.LBB18_269
# BB#266:                               # %lor.lhs.false.i
                                        #   in Loop: Header=BB18_66 Depth=1
	testl	%r12d, %r12d
	jne	.LBB18_268
# BB#267:                               # %lor.lhs.false.i
                                        #   in Loop: Header=BB18_66 Depth=1
	cmpl	36(%rsp), %r13d         # 4-byte Folded Reload
	je	.LBB18_269
.LBB18_268:                             # %if.then442.i
                                        #   in Loop: Header=BB18_66 Depth=1
	movq	%rdi, %r13
	movl	$1007, %edi             # imm = 0x3EF
	movq	%r10, %r12
	movq	%r9, %rbx
	callq	BZ2_bz__AssertH__fail
	movq	%r13, %rdi
	movq	%rbx, %r9
	movq	%r12, %r10
.LBB18_269:                             # %for.body447.i.preheader
                                        #   in Loop: Header=BB18_66 Depth=1
	cmpl	$0, "PinFlag-14.4"(%rip)
	jne	.LBB18_271
# BB#270:                               #   in Loop: Header=BB18_66 Depth=1
	movq	%rdi, %r13
	movl	$.L__unnamed_48, %edi
	movl	$63, %esi
	movl	$168, %edx
	movl	$31, %ecx
	movl	$1, %r8d
	movq	%r10, %r12
	movq	%r9, %rbx
	callq	Pin
	movq	%r13, %rdi
	movq	%rbx, %r9
	movq	%r12, %r10
	movl	$1, "PinFlag-14.4"(%rip)
.LBB18_271:                             #   in Loop: Header=BB18_66 Depth=1
	movq	%r9, 256(%rsp)          # 8-byte Spill
	movq	96(%rsp), %rax          # 8-byte Reload
	cltq
	movq	40(%rsp), %rcx          # 8-byte Reload
	leaq	(%rcx,%rax,4), %rax
	xorl	%ecx, %ecx
	.align	16, 0x90
.LBB18_272:                             # %for.body447.i
                                        #   Parent Loop BB18_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	orb	$32, -3070(%rax,%rcx)
	orb	$32, -2046(%rax,%rcx)
	orb	$32, -1022(%rax,%rcx)
	orb	$32, 2(%rax,%rcx)
	addq	$4096, %rcx             # imm = 0x1000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB18_272
# BB#273:                               # %for.end455.i
                                        #   in Loop: Header=BB18_66 Depth=1
	movb	$1, 2336(%rsp,%rdi)
	movq	64(%rsp), %rax          # 8-byte Reload
	cmpq	$254, %rax
	jg	.LBB18_288
# BB#274:                               # %if.then460.i
                                        #   in Loop: Header=BB18_66 Depth=1
	movq	88(%rsp), %rax          # 8-byte Reload
	movl	(%r10,%rax,4), %eax
	andl	%r15d, %eax
	movl	$-2097153, %ecx         # imm = 0xFFFFFFFFFFDFFFFF
	movl	(%r10,%rbp,4), %r13d
	andl	%ecx, %r13d
	movl	%r13d, %ebx
	subl	%eax, %ebx
	movl	$-1, %r15d
	cmpl	$0, "PinFlag-14.5"(%rip)
	je	.LBB18_276
# BB#275:                               #   in Loop: Header=BB18_66 Depth=1
	movq	%r10, 176(%rsp)         # 8-byte Spill
	jmp	.LBB18_277
.LBB18_276:                             #   in Loop: Header=BB18_66 Depth=1
	movq	%r10, 176(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_49, %edi
	movl	$65534, %esi            # imm = 0xFFFE
	xorl	%edx, %edx
	movl	$5, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-14.5"(%rip)
.LBB18_277:                             # %while.cond471.i
                                        #   in Loop: Header=BB18_66 Depth=1
	movq	256(%rsp), %r9          # 8-byte Reload
	.align	16, 0x90
.LBB18_278:                             # %while.cond471.i
                                        #   Parent Loop BB18_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	incl	%r15d
	movl	%ebx, %eax
	movb	%r15b, %cl
	sarl	%cl, %eax
	cmpl	$65534, %eax            # imm = 0xFFFE
	jg	.LBB18_278
# BB#279:                               # %while.end477.i
                                        #   in Loop: Header=BB18_66 Depth=1
	leal	-1(%rbx), %r12d
	testl	%ebx, %ebx
	movq	176(%rsp), %r10         # 8-byte Reload
	jle	.LBB18_286
# BB#280:                               # %for.body482.preheader.i
                                        #   in Loop: Header=BB18_66 Depth=1
	movslq	%ebx, %rbx
	movq	%rbx, %rax
	notq	%rax
	cmpq	$-3, %rax
	movq	$-2, %rcx
	cmovleq	%rcx, %rax
	cmpl	$0, "PinFlag-14.6"(%rip)
	jne	.LBB18_282
# BB#281:                               #   in Loop: Header=BB18_66 Depth=1
	leaq	1(%rax,%rbx), %rsi
	movl	$.L__unnamed_50, %edi
	movl	$6, %edx
	movl	$23, %ecx
	movl	$1, %r8d
	movq	%r9, %rbp
	callq	Pin
	movq	%rbp, %r9
	movq	176(%rsp), %r10         # 8-byte Reload
	movl	$1, "PinFlag-14.6"(%rip)
.LBB18_282:                             #   in Loop: Header=BB18_66 Depth=1
	incq	%rbx
	decl	%r13d
	movslq	%r13d, %rax
	leaq	(%r14,%rax,4), %rax
	movl	%r12d, %edx
	.align	16, 0x90
.LBB18_283:                             # %for.body482.i
                                        #   Parent Loop BB18_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	(%rax), %rsi
	movl	%edx, %edi
	movb	%r15b, %cl
	sarl	%cl, %edi
	cmpq	$33, %rsi
	movq	264(%rsp), %rbp         # 8-byte Reload
	movw	%di, (%rbp,%rsi,2)
	jg	.LBB18_285
# BB#284:                               # %if.then492.i
                                        #   in Loop: Header=BB18_283 Depth=2
	leal	(%r9,%rsi), %ecx
	movslq	%ecx, %rcx
	movw	%di, (%rbp,%rcx,2)
.LBB18_285:                             # %if.end496.i
                                        #   in Loop: Header=BB18_283 Depth=2
	decl	%edx
	decq	%rbx
	addq	$-4, %rax
	cmpq	$1, %rbx
	jg	.LBB18_283
.LBB18_286:                             # %for.end499.i
                                        #   in Loop: Header=BB18_66 Depth=1
	movq	%r9, 256(%rsp)          # 8-byte Spill
	movb	%r15b, %cl
	sarl	%cl, %r12d
	cmpl	$65536, %r12d           # imm = 0x10000
	movl	$-2097153, %r15d        # imm = 0xFFFFFFFFFFDFFFFF
	movq	64(%rsp), %rax          # 8-byte Reload
	jl	.LBB18_288
# BB#287:                               # %if.then504.i
                                        #   in Loop: Header=BB18_66 Depth=1
	movl	$1002, %edi             # imm = 0x3EA
	movq	%r10, %rbp
	movq	%rax, %rbx
	callq	BZ2_bz__AssertH__fail
	movq	%rbx, %rax
	movq	%rbp, %r10
.LBB18_288:                             # %for.inc507.i
                                        #   in Loop: Header=BB18_66 Depth=1
	incq	%rax
	cmpq	$256, %rax              # imm = 0x100
	jl	.LBB18_66
# BB#289:                               # %for.end509.i
	cmpl	$4, 76(%rsp)            # 4-byte Folded Reload
	jge	.LBB18_290
.LBB18_291:                             # %mainSort.exit
	movq	8(%rsp), %rax           # 8-byte Reload
	movl	160(%rsp), %edx         # 4-byte Reload
	jmp	.LBB18_292
.LBB18_166:
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
.LBB18_292:                             # %mainSort.exit
	cmpl	$3, 76(%rsp)            # 4-byte Folded Reload
	jge	.LBB18_293
.LBB18_297:                             # %if.end21
	testl	%edx, %edx
	movq	256(%rsp), %rbp         # 8-byte Reload
	jns	.LBB18_302
# BB#298:                               # %if.then24
	movl	76(%rsp), %ebx          # 4-byte Reload
	cmpl	$2, %ebx
	jge	.LBB18_299
.LBB18_300:                             # %if.end29
	movq	24(%rax), %rdi
	movq	32(%rax), %rsi
	movq	%r10, %rdx
	movl	%ebp, %ecx
	movl	%ebx, %r8d
.LBB18_301:                             # %if.end33
	movq	%rax, %rbx
	callq	fallbackSort
	movq	%rbx, %rax
.LBB18_302:                             # %if.end33
	movl	$-1, 48(%rax)
	movq	%rax, %rcx
	movslq	108(%rcx), %rax
	movq	%rcx, %rdx
	testq	%rax, %rax
	jle	.LBB18_307
# BB#303:                               # %for.body.preheader
	xorl	%ecx, %ecx
	.align	16, 0x90
.LBB18_304:                             # %for.body
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, (%r14,%rcx,4)
	je	.LBB18_306
# BB#305:                               # %for.inc
                                        #   in Loop: Header=BB18_304 Depth=1
	incq	%rcx
	cmpq	%rax, %rcx
	jl	.LBB18_304
	jmp	.LBB18_307
.LBB18_306:                             # %for.end
	movl	%ecx, 48(%rdx)
	cmpl	$-1, %ecx
	jne	.LBB18_308
.LBB18_307:                             # %if.then48
	movl	$1003, %edi             # imm = 0x3EB
	callq	BZ2_bz__AssertH__fail
.LBB18_308:                             # %if.end49
	addq	$4824, %rsp             # imm = 0x12D8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB18_3:                               # %if.then.i
	movq	stderr(%rip), %rcx
	movl	$.L.str.6.3, %edi
	movl	$33, %esi
	movl	$1, %edx
	callq	fwrite
	jmp	.LBB18_4
.LBB18_30:                              # %if.then96.i
	movq	stderr(%rip), %rcx
	movl	$.L.str.2, %edi
	movl	$27, %esi
	movl	$1, %edx
	movq	%r10, %rbx
	movq	%r11, %rbp
	callq	fwrite
	movq	%rbp, %r11
	movq	%rbx, %r10
	jmp	.LBB18_31
.LBB18_293:                             # %if.then13
	movq	stderr(%rip), %rdi
	movq	16(%rsp), %rcx          # 8-byte Reload
	subl	%edx, %ecx
	movl	%edx, %r15d
	cvtsi2ssl	%ecx, %xmm0
	movq	%rcx, %rdx
	movq	256(%rsp), %rcx         # 8-byte Reload
	movq	%r10, %rbp
	movq	%rax, %rbx
	testl	%ecx, %ecx
	je	.LBB18_294
# BB#295:                               # %if.then13
	cvtsi2ssl	%ecx, %xmm1
	jmp	.LBB18_296
.LBB18_294:
	movss	.LCPI18_2(%rip), %xmm1  # xmm1 = mem[0],zero,zero,zero
.LBB18_296:                             # %if.then13
	divss	%xmm1, %xmm0
	cvtss2sd	%xmm0, %xmm0
	movl	$.L.str, %esi
	movb	$1, %al
	callq	fprintf
	movq	%rbx, %rax
	movq	%rbp, %r10
	movl	%r15d, %edx
	jmp	.LBB18_297
.LBB18_299:                             # %if.then27
	movq	stderr(%rip), %rcx
	movl	$.L.str.1, %edi
	movl	$53, %esi
	movl	$1, %edx
	movq	%rax, %r15
	movq	%r10, %r12
	callq	fwrite
	movq	%r12, %r10
	movq	%r15, %rax
	jmp	.LBB18_300
.LBB18_290:                             # %if.then512.i
	movq	stderr(%rip), %rdi
	movq	256(%rsp), %rdx         # 8-byte Reload
	movl	%edx, %r8d
	movl	128(%rsp), %ecx         # 4-byte Reload
	subl	%ecx, %r8d
	movl	$.L.str.8.5, %esi
	xorl	%eax, %eax
	movq	%r10, %rbx
	callq	fprintf
	movq	%rbx, %r10
	jmp	.LBB18_291
.Lfunc_end18:
	.size	BZ2_blockSort, .Lfunc_end18-BZ2_blockSort
	.cfi_endproc

	.align	16, 0x90
	.type	fallbackSort,@function
fallbackSort:                           # @fallbackSort
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp106:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp107:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp108:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp109:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp110:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp111:
	.cfi_def_cfa_offset 56
	subq	$3096, %rsp             # imm = 0xC18
.Ltmp112:
	.cfi_def_cfa_offset 3152
.Ltmp113:
	.cfi_offset %rbx, -56
.Ltmp114:
	.cfi_offset %r12, -48
.Ltmp115:
	.cfi_offset %r13, -40
.Ltmp116:
	.cfi_offset %r14, -32
.Ltmp117:
	.cfi_offset %r15, -24
.Ltmp118:
	.cfi_offset %rbp, -16
	movl	%r8d, 108(%rsp)         # 4-byte Spill
	movl	%ecx, %ebx
	movq	%rbx, 40(%rsp)          # 8-byte Spill
	movq	%rdx, 48(%rsp)          # 8-byte Spill
	movq	%rsi, %r12
	movq	%rdi, 192(%rsp)         # 8-byte Spill
	cmpl	$3, %r8d
	movl	%ebx, %r14d
	movq	%r14, 72(%rsp)          # 8-byte Spill
	jg	.LBB19_224
.LBB19_1:                               # %for.body.preheader
	leaq	1248(%rsp), %rdi
	xorl	%ebp, %ebp
	xorl	%esi, %esi
	movl	$1028, %edx             # imm = 0x404
	callq	memset
	testl	%ebx, %ebx
	movq	%rbx, %r9
	jle	.LBB19_13
# BB#2:                                 # %for.body4.preheader
	movq	%r14, %r13
	leal	-1(%r9), %r14d
	xorl	%ebx, %ebx
	testb	$3, %r9b
	je	.LBB19_7
# BB#3:                                 # %for.body4.prol.preheader
	movl	%r9d, %ebp
	andl	$3, %ebp
	cmpl	$0, "PinFlag-32."(%rip)
	jne	.LBB19_5
# BB#4:
	leal	-1(%rbp), %eax
	movslq	%eax, %rsi
	movl	$.L__unnamed_51, %edi
	movl	$3, %edx
	movl	$13, %ecx
	movl	$1, %r8d
	movq	%r9, %rbx
	callq	Pin
	movq	%rbx, %r9
	movl	$1, "PinFlag-32."(%rip)
.LBB19_5:
	xorl	%ebx, %ebx
	.align	16, 0x90
.LBB19_6:                               # %for.body4.prol
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%r12,%rbx), %eax
	incl	1248(%rsp,%rax,4)
	incq	%rbx
	cmpl	%ebx, %ebp
	jne	.LBB19_6
.LBB19_7:                               # %for.body4.preheader.split
	cmpl	$3, %r14d
	jb	.LBB19_12
# BB#8:                                 # %for.body4.preheader.split.split
	cmpl	$0, "PinFlag-31."(%rip)
	jne	.LBB19_10
# BB#9:
	movl	$.L__unnamed_52, %edi
	movl	$1, %esi
	movl	$36, %edx
	movl	$36, %ecx
	movl	$1, %r8d
	movq	%r9, %rbp
	callq	Pin
	movq	%rbp, %r9
	movl	$1, "PinFlag-31."(%rip)
.LBB19_10:
	movl	%r9d, %eax
	subl	%ebx, %eax
	leaq	3(%rbx,%r12), %rcx
	.align	16, 0x90
.LBB19_11:                              # %for.body4
                                        # =>This Inner Loop Header: Depth=1
	movzbl	-3(%rcx), %edx
	incl	1248(%rsp,%rdx,4)
	movzbl	-2(%rcx), %edx
	incl	1248(%rsp,%rdx,4)
	movzbl	-1(%rcx), %edx
	incl	1248(%rsp,%rdx,4)
	movzbl	(%rcx), %edx
	incl	1248(%rsp,%rdx,4)
	addq	$4, %rcx
	addl	$-4, %eax
	jne	.LBB19_11
.LBB19_12:                              # %for.body15.preheader.loopexit
	movl	1248(%rsp), %ebp
	movq	%r13, %r14
.LBB19_13:                              # %for.body15.preheader
	movq	%r9, %rbx
	leaq	224(%rsp), %rdi
	leaq	1248(%rsp), %rsi
	movl	$1024, %edx             # imm = 0x400
	callq	memcpy
	cmpl	$0, "PinFlag-30."(%rip)
	jne	.LBB19_15
# BB#14:
	movl	$.L__unnamed_53, %edi
	movl	$63, %esi
	movl	$4, %edx
	movl	$24, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-30."(%rip)
.LBB19_15:
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rsi, 184(%rsp)         # 8-byte Spill
	movq	%rbx, %r9
	.align	16, 0x90
.LBB19_16:                              # %for.body25
                                        # =>This Inner Loop Header: Depth=1
	addl	1252(%rsp,%rax,4), %ebp
	movl	%ebp, 1252(%rsp,%rax,4)
	addl	1256(%rsp,%rax,4), %ebp
	movl	%ebp, 1256(%rsp,%rax,4)
	addl	1260(%rsp,%rax,4), %ebp
	movl	%ebp, 1260(%rsp,%rax,4)
	addl	1264(%rsp,%rax,4), %ebp
	movl	%ebp, 1264(%rsp,%rax,4)
	addq	$4, %rax
	cmpq	$256, %rax              # imm = 0x100
	jne	.LBB19_16
# BB#17:                                # %for.cond33.preheader
	testl	%r9d, %r9d
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	48(%rsp), %r12          # 8-byte Reload
	jle	.LBB19_24
# BB#18:                                # %for.body35.preheader
	xorl	%ebp, %ebp
	testb	$1, %r9b
	je	.LBB19_20
# BB#19:                                # %for.body35.prol
	movzbl	(%rsi), %eax
	movslq	1248(%rsp,%rax,4), %rcx
	leaq	-1(%rcx), %rdx
	movl	%edx, 1248(%rsp,%rax,4)
	movl	$0, -4(%rdi,%rcx,4)
	movl	$1, %ebp
.LBB19_20:                              # %for.body35.preheader.split
	cmpl	$1, %r9d
	je	.LBB19_24
# BB#21:                                # %for.body35.preheader.split.split
	cmpl	$0, "PinFlag-29."(%rip)
	jne	.LBB19_23
# BB#22:
	movq	%r14, %r13
	movq	%rdi, %r14
	movl	$.L__unnamed_54, %edi
	movq	%rsi, %r15
	movl	$1, %esi
	movl	$13, %edx
	movl	$28, %ecx
	movl	$1, %r8d
	movq	%r9, %rbx
	callq	Pin
	movq	%rbx, %r9
	movq	%r14, %rdi
	movq	%r13, %r14
	movq	%r15, %rsi
	movl	$1, "PinFlag-29."(%rip)
	.align	16, 0x90
.LBB19_23:                              # %for.body35
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rsi,%rbp), %eax
	movslq	1248(%rsp,%rax,4), %rcx
	leaq	-1(%rcx), %rdx
	movl	%edx, 1248(%rsp,%rax,4)
	movl	%ebp, -4(%rdi,%rcx,4)
	movzbl	1(%rsi,%rbp), %eax
	movslq	1248(%rsp,%rax,4), %rcx
	leaq	-1(%rcx), %rdx
	movl	%edx, 1248(%rsp,%rax,4)
	leal	1(%rbp), %eax
	movl	%eax, -4(%rdi,%rcx,4)
	addq	$2, %rbp
	cmpl	%r9d, %ebp
	jne	.LBB19_23
.LBB19_24:                              # %for.end47
	cmpl	$-63, %r9d
	jl	.LBB19_26
# BB#25:                                # %for.body52.preheader
	movl	%r9d, %eax
	sarl	$31, %eax
	shrl	$27, %eax
	addl	%r9d, %eax
	sarl	$5, %eax
	xorl	%ecx, %ecx
	incl	%eax
	cmovsl	%ecx, %eax
	movl	%eax, %eax
	leaq	4(,%rax,4), %rdx
	movq	%rsi, %r15
	xorl	%esi, %esi
	movq	%rdi, %rbp
	movq	%r12, %rdi
	movq	%r9, %rbx
	callq	memset
	movq	%rbx, %r9
	movq	%rbp, %rdi
	movq	%r15, %rsi
.LBB19_26:                              # %for.body61.preheader
	cmpl	$0, "PinFlag-28."(%rip)
	jne	.LBB19_28
# BB#27:
	movq	%rdi, %r15
	movl	$.L__unnamed_55, %edi
	movq	%rsi, %rbx
	movl	$127, %esi
	movl	$10, %edx
	movl	$25, %ecx
	movl	$1, %r8d
	movq	%r9, %rbp
	callq	Pin
	movq	%rbp, %r9
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movl	$1, "PinFlag-28."(%rip)
.LBB19_28:
	xorl	%eax, %eax
	.align	16, 0x90
.LBB19_29:                              # %for.body61
                                        # =>This Inner Loop Header: Depth=1
	movl	1248(%rsp,%rax,4), %ecx
	movl	$1, %edx
	shll	%cl, %edx
	sarl	$5, %ecx
	movslq	%ecx, %rcx
	orl	%edx, (%r12,%rcx,4)
	movl	1252(%rsp,%rax,4), %ecx
	movl	$1, %edx
	shll	%cl, %edx
	sarl	$5, %ecx
	movslq	%ecx, %rcx
	orl	%edx, (%r12,%rcx,4)
	addq	$2, %rax
	cmpq	$256, %rax              # imm = 0x100
	jne	.LBB19_29
# BB#30:                                # %for.body74.preheader
	xorl	%ebp, %ebp
	cmpl	$0, "PinFlag-27."(%rip)
	jne	.LBB19_32
# BB#31:
	movq	%r14, %r13
	movq	%rdi, %r14
	movl	$.L__unnamed_56, %edi
	movq	%rsi, %r15
	movl	$31, %esi
	movl	$10, %edx
	movl	$24, %ecx
	movl	$1, %r8d
	movq	%r9, %rbx
	callq	Pin
	movq	%rbx, %r9
	movq	%r14, %rdi
	movq	%r13, %r14
	movq	%r15, %rsi
	movl	$1, "PinFlag-27."(%rip)
	.align	16, 0x90
.LBB19_32:                              # %for.body74
                                        # =>This Inner Loop Header: Depth=1
	leal	(%r9,%rbp), %ecx
	movl	$1, %eax
	shll	%cl, %eax
	sarl	$5, %ecx
	movslq	%ecx, %rcx
	orl	%eax, (%r12,%rcx,4)
	leal	1(%r9,%rbp), %ecx
	movl	$-2, %eax
	roll	%cl, %eax
	sarl	$5, %ecx
	movslq	%ecx, %rcx
	andl	%eax, (%r12,%rcx,4)
	addl	$2, %ebp
	cmpl	$64, %ebp
	jne	.LBB19_32
# BB#33:                                # %while.body.preheader
	leal	-1(%r9), %ebx
	cmpl	$0, "PinFlag-26."(%rip)
	jne	.LBB19_35
# BB#34:
	movq	%r14, %r13
	movq	%rdi, %r14
	movl	$.L__unnamed_57, %edi
	movq	%rsi, %r15
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$32, %ecx
	xorl	%r8d, %r8d
	movq	%r9, %rbp
	callq	Pin
	movq	%rbp, %r9
	movq	%r14, %rdi
	movq	%r13, %r14
	movq	%r15, %rsi
	movl	$1, "PinFlag-26."(%rip)
.LBB19_35:
	leaq	16(%rdi), %rax
	movq	%rax, (%rsp)            # 8-byte Spill
	movl	$1, %r13d
	movslq	%ebx, %rax
	movq	%rax, 32(%rsp)          # 8-byte Spill
	jmp	.LBB19_36
.LBB19_37:                              # %if.then101
                                        #   in Loop: Header=BB19_36 Depth=1
	movq	%rdi, %r15
	movq	stderr(%rip), %rdi
	movq	%rsi, %rbx
	movl	$.L.str.3.1, %esi
	xorl	%eax, %eax
	movl	%r13d, %edx
	movq	%r9, %rbp
	callq	fprintf
	movq	%rbp, %r9
	movq	%r15, %rdi
	movq	%rbx, %rsi
	jmp	.LBB19_38
.LBB19_198:                             # %if.then258
                                        #   in Loop: Header=BB19_36 Depth=1
	movq	%rdi, %r14
	movq	stderr(%rip), %rdi
	movq	%rsi, %rbx
	movl	$.L.str.4, %esi
	xorl	%eax, %eax
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	%r9, %rbp
	callq	fprintf
	movq	%rbp, %r9
	movq	%r14, %rdi
	movq	%rbx, %rsi
	jmp	.LBB19_199
	.align	16, 0x90
.LBB19_36:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_41 Depth 2
                                        #     Child Loop BB19_45 Depth 2
                                        #       Child Loop BB19_48 Depth 3
                                        #         Child Loop BB19_54 Depth 4
                                        #         Child Loop BB19_58 Depth 4
                                        #         Child Loop BB19_62 Depth 4
                                        #         Child Loop BB19_67 Depth 4
                                        #         Child Loop BB19_71 Depth 4
                                        #       Child Loop BB19_78 Depth 3
                                        #         Child Loop BB19_81 Depth 4
                                        #           Child Loop BB19_101 Depth 5
                                        #             Child Loop BB19_106 Depth 6
                                        #           Child Loop BB19_90 Depth 5
                                        #             Child Loop BB19_93 Depth 6
                                        #         Child Loop BB19_116 Depth 4
                                        #           Child Loop BB19_121 Depth 5
                                        #             Child Loop BB19_124 Depth 6
                                        #           Child Loop BB19_136 Depth 5
                                        #             Child Loop BB19_134 Depth 6
                                        #         Child Loop BB19_166 Depth 4
                                        #         Child Loop BB19_172 Depth 4
                                        #         Child Loop BB19_186 Depth 4
                                        #         Child Loop BB19_192 Depth 4
                                        #       Child Loop BB19_148 Depth 3
	movl	%r13d, 148(%rsp)        # 4-byte Spill
	cmpl	$4, 108(%rsp)           # 4-byte Folded Reload
	jge	.LBB19_37
.LBB19_38:                              # %for.cond104.preheader
                                        #   in Loop: Header=BB19_36 Depth=1
	testl	%r9d, %r9d
	jle	.LBB19_42
# BB#39:                                # %for.body107.preheader
                                        #   in Loop: Header=BB19_36 Depth=1
	xorl	%ebx, %ebx
	cmpl	$0, "PinFlag-26.0"(%rip)
	movl	$0, %eax
	jne	.LBB19_41
# BB#40:                                #   in Loop: Header=BB19_36 Depth=1
	xorl	%ebx, %ebx
	movl	%r13d, 148(%rsp)        # 4-byte Spill
	movq	%r14, %r13
	movq	%rdi, %r14
	movl	$.L__unnamed_58, %edi
	xorl	%edx, %edx
	movl	$25, %ecx
	movl	$1, %r8d
	movq	%rsi, %r15
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	%r9, %rbp
	callq	Pin
	movq	%rbp, %r9
	movq	%r14, %rdi
	movq	%r13, %r14
	movl	148(%rsp), %r13d        # 4-byte Reload
	movq	%r15, %rsi
	movl	$1, "PinFlag-26.0"(%rip)
	xorl	%eax, %eax
	.align	16, 0x90
.LBB19_41:                              # %for.body107
                                        #   Parent Loop BB19_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	%ebx, %ecx
	sarl	$5, %ecx
	movslq	%ecx, %rcx
	movl	(%r12,%rcx,4), %ecx
	btl	%ebx, %ecx
	cmovbl	%ebx, %eax
	movl	(%rdi,%rbx,4), %ecx
	subl	%r13d, %ecx
	movl	%ecx, %edx
	sarl	$31, %edx
	andl	%r14d, %edx
	addl	%ecx, %edx
	movslq	%edx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	incq	%rbx
	cmpl	%ebx, %r14d
	jne	.LBB19_41
.LBB19_42:                              # %while.body130.outer.preheader
                                        #   in Loop: Header=BB19_36 Depth=1
	movl	$-1, %ebx
	cmpl	$0, "PinFlag-26.1"(%rip)
	je	.LBB19_44
# BB#43:                                #   in Loop: Header=BB19_36 Depth=1
	xorl	%eax, %eax
	movq	%rax, 128(%rsp)         # 8-byte Spill
	jmp	.LBB19_45
	.align	16, 0x90
.LBB19_44:                              #   in Loop: Header=BB19_36 Depth=1
	xorl	%eax, %eax
	movq	%rax, 128(%rsp)         # 8-byte Spill
	movq	%rdi, %r14
	movl	$.L__unnamed_59, %edi
	movq	%rsi, %r15
	movl	$1, %esi
	movl	$56, %edx
	movl	$48, %ecx
	xorl	%r8d, %r8d
	movq	%r9, %rbp
	callq	Pin
	movq	%rbp, %r9
	movq	%r14, %rdi
	movq	%r15, %rsi
	movl	$1, "PinFlag-26.1"(%rip)
	jmp	.LBB19_45
.LBB19_151:                             #   in Loop: Header=BB19_45 Depth=2
	movq	%r15, %r9
	movq	%r13, %r12
	movl	148(%rsp), %r13d        # 4-byte Reload
	movq	88(%rsp), %rbx          # 8-byte Reload
	.align	16, 0x90
.LBB19_45:                              # %while.body130.outer
                                        #   Parent Loop BB19_36 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_48 Depth 3
                                        #         Child Loop BB19_54 Depth 4
                                        #         Child Loop BB19_58 Depth 4
                                        #         Child Loop BB19_62 Depth 4
                                        #         Child Loop BB19_67 Depth 4
                                        #         Child Loop BB19_71 Depth 4
                                        #       Child Loop BB19_78 Depth 3
                                        #         Child Loop BB19_81 Depth 4
                                        #           Child Loop BB19_101 Depth 5
                                        #             Child Loop BB19_106 Depth 6
                                        #           Child Loop BB19_90 Depth 5
                                        #             Child Loop BB19_93 Depth 6
                                        #         Child Loop BB19_116 Depth 4
                                        #           Child Loop BB19_121 Depth 5
                                        #             Child Loop BB19_124 Depth 6
                                        #           Child Loop BB19_136 Depth 5
                                        #             Child Loop BB19_134 Depth 6
                                        #         Child Loop BB19_166 Depth 4
                                        #         Child Loop BB19_172 Depth 4
                                        #         Child Loop BB19_186 Depth 4
                                        #         Child Loop BB19_192 Depth 4
                                        #       Child Loop BB19_148 Depth 3
	cmpl	$0, "PinFlag-26.10"(%rip)
	je	.LBB19_47
# BB#46:                                #   in Loop: Header=BB19_45 Depth=2
	movq	%rdi, %r15
	jmp	.LBB19_48
	.align	16, 0x90
.LBB19_47:                              #   in Loop: Header=BB19_45 Depth=2
	movq	%rdi, %r15
	movl	$.L__unnamed_60, %edi
	movq	%rsi, %r14
	movl	$1, %esi
	movl	$110, %edx
	movl	$70, %ecx
	xorl	%r8d, %r8d
	movq	%r9, %rbp
	callq	Pin
	movq	%rbp, %r9
	movq	%r14, %rsi
	movl	$1, "PinFlag-26.10"(%rip)
	.align	16, 0x90
.LBB19_48:                              # %while.cond132
                                        #   Parent Loop BB19_36 Depth=1
                                        #     Parent Loop BB19_45 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB19_54 Depth 4
                                        #         Child Loop BB19_58 Depth 4
                                        #         Child Loop BB19_62 Depth 4
                                        #         Child Loop BB19_67 Depth 4
                                        #         Child Loop BB19_71 Depth 4
	movl	%ebx, %ebp
	leal	1(%rbp), %r8d
	movl	%r8d, %eax
	sarl	$5, %eax
	movslq	%eax, %rdx
	movl	%r8d, %ecx
	andl	$31, %ecx
	movl	$1, %eax
	shll	%cl, %eax
	andl	(%r12,%rdx,4), %eax
	setne	%cl
	movl	%r8d, %edx
	andl	$31, %edx
	je	.LBB19_50
# BB#49:                                # %while.cond132
                                        #   in Loop: Header=BB19_48 Depth=3
	testb	%cl, %cl
	movl	%r8d, %ebx
	jne	.LBB19_48
.LBB19_50:                              # %while.end
                                        #   in Loop: Header=BB19_48 Depth=3
	testl	%eax, %eax
	movq	%r15, %rdi
	je	.LBB19_59
# BB#51:                                # %while.cond152.preheader
                                        #   in Loop: Header=BB19_48 Depth=3
	cmpl	$0, "PinFlag-26.100"(%rip)
	jne	.LBB19_53
# BB#52:                                #   in Loop: Header=BB19_48 Depth=3
	movq	%rdi, %r14
	movl	$.L__unnamed_61, %edi
	movq	%rsi, %r15
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$8, %ecx
	movl	$1, %r8d
	movq	%r9, %rbx
	callq	Pin
	movq	%rbx, %r9
	movq	%r14, %rdi
	movq	%r15, %rsi
	movl	$1, "PinFlag-26.100"(%rip)
.LBB19_53:                              #   in Loop: Header=BB19_48 Depth=3
	addl	$-31, %ebp
	.align	16, 0x90
.LBB19_54:                              # %while.cond152
                                        #   Parent Loop BB19_36 Depth=1
                                        #     Parent Loop BB19_45 Depth=2
                                        #       Parent Loop BB19_48 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	addl	$32, %ebp
	movl	%ebp, %eax
	sarl	$5, %eax
	cltq
	cmpl	$-1, (%r12,%rax,4)
	je	.LBB19_54
# BB#55:                                # %while.cond161.preheader
                                        #   in Loop: Header=BB19_48 Depth=3
	movq	%rdi, %rbx
	cmpl	$0, "PinFlag-26.101"(%rip)
	jne	.LBB19_57
# BB#56:                                #   in Loop: Header=BB19_48 Depth=3
	movl	$.L__unnamed_62, %edi
	movq	%rsi, %r14
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$11, %ecx
	movl	$1, %r8d
	movq	%r9, %r15
	callq	Pin
	movq	%r15, %r9
	movq	%r14, %rsi
	movl	$1, "PinFlag-26.101"(%rip)
.LBB19_57:                              # %while.cond161
                                        #   in Loop: Header=BB19_48 Depth=3
	movq	%rbx, %rdi
	.align	16, 0x90
.LBB19_58:                              # %while.cond161
                                        #   Parent Loop BB19_36 Depth=1
                                        #     Parent Loop BB19_45 Depth=2
                                        #       Parent Loop BB19_48 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	%ebp, %eax
	sarl	$5, %eax
	cltq
	movl	(%r12,%rax,4), %eax
	movl	%ebp, %r8d
	btl	%ebp, %eax
	leal	1(%rbp), %eax
	movl	%eax, %ebp
	jb	.LBB19_58
.LBB19_59:                              # %if.end172
                                        #   in Loop: Header=BB19_48 Depth=3
	movq	%r8, 216(%rsp)          # 8-byte Spill
	cmpl	%r9d, %r8d
	jg	.LBB19_197
# BB#60:                                # %while.cond178.preheader
                                        #   in Loop: Header=BB19_48 Depth=3
	cmpl	$0, "PinFlag-26.102"(%rip)
	movl	%r8d, %ecx
	jne	.LBB19_62
# BB#61:                                #   in Loop: Header=BB19_48 Depth=3
	movq	%rdi, %r14
	movl	$.L__unnamed_63, %edi
	movq	%rsi, %r15
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$13, %ecx
	movq	%r8, %rbp
	movl	$1, %r8d
	movq	%r9, %rbx
	callq	Pin
	movq	%rbx, %r9
	movq	%rbp, %r8
	movq	%r14, %rdi
	movq	%r15, %rsi
	movl	$1, "PinFlag-26.102"(%rip)
	movl	%r8d, %ecx
	.align	16, 0x90
.LBB19_62:                              # %while.cond178
                                        #   Parent Loop BB19_36 Depth=1
                                        #     Parent Loop BB19_45 Depth=2
                                        #       Parent Loop BB19_48 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	%ecx, %r14d
	movl	%r14d, %eax
	sarl	$5, %eax
	movslq	%eax, %rdx
	andl	$31, %ecx
	movl	$1, %eax
	shll	%cl, %eax
	andl	(%r12,%rdx,4), %eax
	movl	%r14d, %ecx
	andl	$31, %ecx
	je	.LBB19_64
# BB#63:                                # %while.cond178
                                        #   in Loop: Header=BB19_62 Depth=4
	leal	1(%r14), %ecx
	testl	%eax, %eax
	je	.LBB19_62
.LBB19_64:                              # %while.end192
                                        #   in Loop: Header=BB19_48 Depth=3
	testl	%eax, %eax
	jne	.LBB19_72
# BB#65:                                # %while.cond201.preheader
                                        #   in Loop: Header=BB19_48 Depth=3
	cmpl	$0, "PinFlag-26.103"(%rip)
	jne	.LBB19_67
# BB#66:                                #   in Loop: Header=BB19_48 Depth=3
	movl	$.L__unnamed_64, %edi
	movl	%r13d, %r15d
	movq	%rsi, %r13
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$8, %ecx
	movq	%r8, %rbp
	movl	$1, %r8d
	movq	%r9, %rbx
	callq	Pin
	movq	%rbx, %r9
	movq	%rbp, %r8
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	%r13, %rsi
	movl	%r15d, %r13d
	movl	$1, "PinFlag-26.103"(%rip)
	.align	16, 0x90
.LBB19_67:                              # %while.cond201
                                        #   Parent Loop BB19_36 Depth=1
                                        #     Parent Loop BB19_45 Depth=2
                                        #       Parent Loop BB19_48 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	%r14d, %ebx
	movl	%ebx, %eax
	sarl	$5, %eax
	cltq
	leal	32(%rbx), %r14d
	cmpl	$0, (%r12,%rax,4)
	je	.LBB19_67
# BB#68:                                # %while.cond210.preheader
                                        #   in Loop: Header=BB19_48 Depth=3
	movq	%r8, %r15
	cmpl	$0, "PinFlag-26.104"(%rip)
	jne	.LBB19_70
# BB#69:                                #   in Loop: Header=BB19_48 Depth=3
	movl	$.L__unnamed_65, %edi
	movq	%rsi, %rbp
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$11, %ecx
	movl	$1, %r8d
	movl	%r13d, %r14d
	movq	%r9, %r13
	callq	Pin
	movq	%r13, %r9
	movl	%r14d, %r13d
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	%rbp, %rsi
	movl	$1, "PinFlag-26.104"(%rip)
.LBB19_70:                              # %while.cond210
                                        #   in Loop: Header=BB19_48 Depth=3
	movq	%r15, %r8
	.align	16, 0x90
.LBB19_71:                              # %while.cond210
                                        #   Parent Loop BB19_36 Depth=1
                                        #     Parent Loop BB19_45 Depth=2
                                        #       Parent Loop BB19_48 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	%ebx, %eax
	sarl	$5, %eax
	cltq
	movl	(%r12,%rax,4), %eax
	btl	%ebx, %eax
	movl	%ebx, %r14d
	leal	1(%rbx), %eax
	movl	%eax, %ebx
	jae	.LBB19_71
.LBB19_72:                              # %if.end221
                                        #   in Loop: Header=BB19_48 Depth=3
	cmpl	%r9d, %r14d
	jg	.LBB19_197
# BB#73:                                # %if.end226
                                        #   in Loop: Header=BB19_48 Depth=3
	movq	%rdi, %r15
	leal	-1(%r14), %ebx
	cmpl	%r8d, %r14d
	jle	.LBB19_48
# BB#74:                                # %if.then229
                                        #   in Loop: Header=BB19_45 Depth=2
	leal	-1(%r8), %edx
	movl	$1, %ebp
	movl	$1, %eax
	subl	%r8d, %eax
	movq	128(%rsp), %rcx         # 8-byte Reload
	addl	%eax, %ecx
	movq	%rcx, %rax
	leal	1(%rbx,%rax), %eax
	movl	%edx, 2688(%rsp)
	movl	%ebx, 2288(%rsp)
	cmpl	$0, "PinFlag-26.11"(%rip)
	je	.LBB19_76
# BB#75:                                #   in Loop: Header=BB19_45 Depth=2
	xorl	%ecx, %ecx
	movq	%rcx, 96(%rsp)          # 8-byte Spill
	movl	%edx, 68(%rsp)          # 4-byte Spill
	movq	%rbx, 88(%rsp)          # 8-byte Spill
	movq	%rax, 128(%rsp)         # 8-byte Spill
	jmp	.LBB19_77
.LBB19_76:                              #   in Loop: Header=BB19_45 Depth=2
	movl	%edx, 68(%rsp)          # 4-byte Spill
	movq	%rbx, 88(%rsp)          # 8-byte Spill
	movq	%rax, 128(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 96(%rsp)          # 8-byte Spill
	movl	$.L__unnamed_66, %edi
	movq	%rsi, %r12
	movl	$1, %esi
	movl	$9744, %edx             # imm = 0x2610
	movl	$346, %ecx              # imm = 0x15A
	movq	%r8, %rbx
	xorl	%r8d, %r8d
	callq	Pin
	movq	%rbx, %r8
	movq	%r12, %rsi
	movl	$1, "PinFlag-26.11"(%rip)
.LBB19_77:                              # %while.body.lr.ph.i
                                        #   in Loop: Header=BB19_45 Depth=2
	movq	%r15, %rdi
	jmp	.LBB19_78
.LBB19_180:                             # %vector.body.preheader
                                        #   in Loop: Header=BB19_78 Depth=3
	movq	%rdx, 112(%rsp)         # 8-byte Spill
	movl	124(%rsp), %edx         # 4-byte Reload
	cmpl	%ebx, %edx
	movl	%ebx, %eax
	cmovgel	%edx, %eax
	cmpl	$-3, %eax
	movl	$-2, %ecx
	cmovgl	%eax, %ecx
	subl	%eax, %ecx
	incq	%rcx
	movabsq	$8589934588, %rax       # imm = 0x1FFFFFFFC
	andq	%rax, %rcx
	addq	$-4, %rcx
	movq	%rcx, %rax
	shrq	$2, %rax
	btq	$2, %rcx
	movl	$0, %ebp
	movq	208(%rsp), %rsi         # 8-byte Reload
	jb	.LBB19_182
# BB#181:                               # %vector.body.prol
                                        #   in Loop: Header=BB19_78 Depth=3
	movq	112(%rsp), %rbp         # 8-byte Reload
	movups	(%rdi,%rbp,4), %xmm0
	leal	1(%rsi), %ecx
	movslq	%ecx, %rcx
	movups	(%rdi,%rcx,4), %xmm1
	movups	%xmm1, (%rdi,%rbp,4)
	movups	%xmm0, (%rdi,%rcx,4)
	movl	$4, %ebp
.LBB19_182:                             # %vector.body.preheader.split
                                        #   in Loop: Header=BB19_78 Depth=3
	testq	%rax, %rax
	je	.LBB19_187
# BB#183:                               # %vector.body.preheader.split.split
                                        #   in Loop: Header=BB19_78 Depth=3
	cmpl	$0, "PinFlag-26.114"(%rip)
	jne	.LBB19_185
# BB#184:                               #   in Loop: Header=BB19_78 Depth=3
	movl	$.L__unnamed_67, %edi
	movl	$1, %esi
	movl	$1120, %edx             # imm = 0x460
	movl	$35, %ecx
	movq	%r8, 216(%rsp)          # 8-byte Spill
	movl	$1, %r8d
	movq	%r9, 200(%rsp)          # 8-byte Spill
	movq	%r11, 80(%rsp)          # 8-byte Spill
	movq	%rbx, 160(%rsp)         # 8-byte Spill
	movl	%r10d, %ebx
	callq	Pin
	movq	208(%rsp), %rsi         # 8-byte Reload
	movl	%ebx, %r10d
	movl	124(%rsp), %edx         # 4-byte Reload
	movq	160(%rsp), %rbx         # 8-byte Reload
	movq	80(%rsp), %r11          # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %rdi         # 8-byte Reload
	movl	$1, "PinFlag-26.114"(%rip)
.LBB19_185:                             #   in Loop: Header=BB19_78 Depth=3
	cmpl	%ebx, %edx
	cmovgel	%edx, %ebx
	cmpl	$-3, %ebx
	movl	$-2, %eax
	cmovgl	%ebx, %eax
	subl	%ebx, %eax
	incq	%rax
	movabsq	$8589934588, %rcx       # imm = 0x1FFFFFFFC
	andq	%rcx, %rax
	addl	%r9d, %ebx
	movq	136(%rsp), %rcx         # 8-byte Reload
	movslq	%ecx, %rcx
	movq	(%rsp), %rdx            # 8-byte Reload
	leaq	(%rdx,%rcx,4), %rcx
	.align	16, 0x90
.LBB19_186:                             # %vector.body
                                        #   Parent Loop BB19_36 Depth=1
                                        #     Parent Loop BB19_45 Depth=2
                                        #       Parent Loop BB19_78 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movups	-16(%rcx,%rbp,4), %xmm0
	leal	2(%rbx,%rbp), %edx
	movslq	%edx, %rdx
	movups	(%rdi,%rdx,4), %xmm1
	movups	%xmm1, -16(%rcx,%rbp,4)
	movups	%xmm0, (%rdi,%rdx,4)
	movups	(%rcx,%rbp,4), %xmm0
	leal	6(%rbx,%rbp), %edx
	movslq	%edx, %rdx
	movups	(%rdi,%rdx,4), %xmm1
	movups	%xmm1, (%rcx,%rbp,4)
	movups	%xmm0, (%rdi,%rdx,4)
	addq	$8, %rbp
	cmpq	%rbp, %rax
	jne	.LBB19_186
.LBB19_187:                             # %middle.block
                                        #   in Loop: Header=BB19_78 Depth=3
	movq	%r12, %rax
	cmpq	%rax, %r15
	movq	176(%rsp), %r12         # 8-byte Reload
	movq	168(%rsp), %rbp         # 8-byte Reload
	movq	152(%rsp), %r15         # 8-byte Reload
	je	.LBB19_193
# BB#188:                               #   in Loop: Header=BB19_78 Depth=3
	movq	112(%rsp), %rdx         # 8-byte Reload
	addq	%rax, %rdx
	addl	%eax, %esi
	subl	%eax, %ebp
	jmp	.LBB19_189
	.align	16, 0x90
.LBB19_78:                              # %while.body.lr.ph.i
                                        #   Parent Loop BB19_36 Depth=1
                                        #     Parent Loop BB19_45 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB19_81 Depth 4
                                        #           Child Loop BB19_101 Depth 5
                                        #             Child Loop BB19_106 Depth 6
                                        #           Child Loop BB19_90 Depth 5
                                        #             Child Loop BB19_93 Depth 6
                                        #         Child Loop BB19_116 Depth 4
                                        #           Child Loop BB19_121 Depth 5
                                        #             Child Loop BB19_124 Depth 6
                                        #           Child Loop BB19_136 Depth 5
                                        #             Child Loop BB19_134 Depth 6
                                        #         Child Loop BB19_166 Depth 4
                                        #         Child Loop BB19_172 Depth 4
                                        #         Child Loop BB19_186 Depth 4
                                        #         Child Loop BB19_192 Depth 4
	movq	%rdi, %r15
	movslq	%ebp, %rbx
	cmpl	$0, "PinFlag-26.110"(%rip)
	jne	.LBB19_80
# BB#79:                                #   in Loop: Header=BB19_78 Depth=3
	movl	$.L__unnamed_68, %edi
	movq	%rsi, %rbp
	movl	$1, %esi
	movl	$12, %edx
	movl	$61, %ecx
	movq	%r8, %r12
	xorl	%r8d, %r8d
	callq	Pin
	movq	%r12, %r8
	movq	%rbp, %rsi
	movl	$1, "PinFlag-26.110"(%rip)
.LBB19_80:                              # %while.body.i
                                        #   in Loop: Header=BB19_78 Depth=3
	movq	%r15, %rdi
	.align	16, 0x90
.LBB19_81:                              # %while.body.i
                                        #   Parent Loop BB19_36 Depth=1
                                        #     Parent Loop BB19_45 Depth=2
                                        #       Parent Loop BB19_78 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB19_101 Depth 5
                                        #             Child Loop BB19_106 Depth 6
                                        #           Child Loop BB19_90 Depth 5
                                        #             Child Loop BB19_93 Depth 6
	cmpq	$100, %rbx
	jl	.LBB19_83
# BB#82:                                # %if.then.i
                                        #   in Loop: Header=BB19_81 Depth=4
	movq	%rdi, %r15
	movl	$1004, %edi             # imm = 0x3EC
	movq	%rsi, %r12
	movq	%r8, %rbp
	callq	BZ2_bz__AssertH__fail
	movq	%rbp, %r8
	movq	%r15, %rdi
	movq	%r12, %rsi
.LBB19_83:                              # %if.end.i
                                        #   in Loop: Header=BB19_81 Depth=4
	leaq	-1(%rbx), %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	movq	%rbx, 176(%rsp)         # 8-byte Spill
	movslq	%eax, %rbp
	movl	2688(%rsp,%rbp,4), %ebx
	movslq	%ebx, %r10
	movq	%r10, 208(%rsp)         # 8-byte Spill
	movl	2288(%rsp,%rbp,4), %r9d
	movq	%r9, 200(%rsp)          # 8-byte Spill
	movslq	%r9d, %r12
	movl	%r12d, %eax
	subl	%r10d, %eax
	cmpl	$9, %eax
	jg	.LBB19_109
# BB#84:                                # %if.then9.i
                                        #   in Loop: Header=BB19_81 Depth=4
	cmpl	%ebx, %r9d
	je	.LBB19_85
# BB#86:                                # %if.end.i.i
                                        #   in Loop: Header=BB19_81 Depth=4
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	cmpl	$3, %eax
	jle	.LBB19_87
# BB#97:                                # %if.then3.i.i
                                        #   in Loop: Header=BB19_81 Depth=4
	leal	-4(%r9), %eax
	movq	152(%rsp), %rcx         # 8-byte Reload
	cmpl	%ecx, %eax
	jl	.LBB19_87
# BB#98:                                # %for.body.preheader.i.i
                                        #   in Loop: Header=BB19_81 Depth=4
	movq	%rdi, %r13
	movq	%rsi, %rbx
	movslq	%eax, %r15
	movq	%r10, %rdx
	notq	%rdx
	cltq
	movq	%rax, %rcx
	notq	%rcx
	cmpq	%rcx, %rdx
	cmovgeq	%rdx, %rcx
	cmpl	$0, "PinFlag-26.1100"(%rip)
	jne	.LBB19_100
# BB#99:                                #   in Loop: Header=BB19_81 Depth=4
	leaq	1(%rcx,%rax), %rsi
	movl	$.L__unnamed_69, %edi
	movl	$458, %edx              # imm = 0x1CA
	movl	$30, %ecx
	xorl	%r8d, %r8d
	movq	%r9, %rbp
	movq	%r10, 208(%rsp)         # 8-byte Spill
	callq	Pin
	movq	208(%rsp), %r10         # 8-byte Reload
	movq	%rbp, %r9
	movq	216(%rsp), %r8          # 8-byte Reload
	movl	$1, "PinFlag-26.1100"(%rip)
.LBB19_100:                             # %for.body.i.i
                                        #   in Loop: Header=BB19_81 Depth=4
	movl	%r9d, %ebp
	movq	%rbx, %rsi
	movq	%r13, %rdi
	.align	16, 0x90
.LBB19_101:                             # %for.body.i.i
                                        #   Parent Loop BB19_36 Depth=1
                                        #     Parent Loop BB19_45 Depth=2
                                        #       Parent Loop BB19_78 Depth=3
                                        #         Parent Loop BB19_81 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB19_106 Depth 6
	movslq	(%rdi,%r15,4), %r11
	leaq	4(%r15), %rax
	cmpq	%r12, %rax
	jle	.LBB19_103
# BB#102:                               #   in Loop: Header=BB19_101 Depth=5
	movl	%r15d, %eax
	jmp	.LBB19_108
	.align	16, 0x90
.LBB19_103:                             # %land.rhs.preheader.i.i
                                        #   in Loop: Header=BB19_101 Depth=5
	movslq	%ebp, %rax
	leaq	(%rdi,%rax,4), %rbx
	movl	(%rsi,%r11,4), %r13d
	cmpl	$0, "PinFlag-26.11000"(%rip)
	jne	.LBB19_105
# BB#104:                               #   in Loop: Header=BB19_101 Depth=5
	movl	$.L__unnamed_70, %edi
	movl	$1, %esi
	movl	$126, %edx
	movl	$18, %ecx
	movq	%r8, 216(%rsp)          # 8-byte Spill
	movl	$1, %r8d
	movq	%r9, 200(%rsp)          # 8-byte Spill
	movq	%r10, 208(%rsp)         # 8-byte Spill
	movq	%r11, 160(%rsp)         # 8-byte Spill
	callq	Pin
	movq	160(%rsp), %r11         # 8-byte Reload
	movq	208(%rsp), %r10         # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	184(%rsp), %rsi         # 8-byte Reload
	movl	$1, "PinFlag-26.11000"(%rip)
.LBB19_105:                             # %land.rhs.i.i
                                        #   in Loop: Header=BB19_101 Depth=5
	movl	%r15d, %eax
	.align	16, 0x90
.LBB19_106:                             # %land.rhs.i.i
                                        #   Parent Loop BB19_36 Depth=1
                                        #     Parent Loop BB19_45 Depth=2
                                        #       Parent Loop BB19_78 Depth=3
                                        #         Parent Loop BB19_81 Depth=4
                                        #           Parent Loop BB19_101 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	(%rbx), %ecx
	cmpl	(%rsi,%rcx,4), %r13d
	jbe	.LBB19_108
# BB#107:                               # %for.body15.i.i
                                        #   in Loop: Header=BB19_106 Depth=6
	movslq	%eax, %rdx
	movl	%ecx, (%rdi,%rdx,4)
	leal	4(%rdx), %eax
	addq	$16, %rbx
	addl	$8, %edx
	cmpl	%r9d, %edx
	jle	.LBB19_106
.LBB19_108:                             # %for.end.i.i
                                        #   in Loop: Header=BB19_101 Depth=5
	cltq
	movl	%r11d, (%rdi,%rax,4)
	decl	%ebp
	cmpq	%r10, %r15
	leaq	-1(%r15), %r15
	jg	.LBB19_101
.LBB19_87:                              # %for.cond29.preheader.i.i
                                        #   in Loop: Header=BB19_81 Depth=4
	movq	152(%rsp), %rax         # 8-byte Reload
	cmpl	%eax, %r9d
	jle	.LBB19_85
# BB#88:                                # %for.body31.preheader.i.i
                                        #   in Loop: Header=BB19_81 Depth=4
	cmpl	$0, "PinFlag-26.1101"(%rip)
	movq	%r12, %rbp
	jne	.LBB19_90
# BB#89:                                #   in Loop: Header=BB19_81 Depth=4
	leaq	-1(%r12), %rsi
	subq	%r10, %rsi
	movq	%rdi, %r13
	movl	$.L__unnamed_71, %edi
	movl	$458, %edx              # imm = 0x1CA
	movl	$27, %ecx
	movq	%r8, %rbx
	xorl	%r8d, %r8d
	movq	%r9, %rbp
	movq	%r10, %r15
	callq	Pin
	movq	%r15, %r10
	movq	%rbp, %r9
	movq	%rbx, %r8
	movq	%r13, %rdi
	movq	184(%rsp), %rsi         # 8-byte Reload
	movl	$1, "PinFlag-26.1101"(%rip)
	movq	%r12, %rbp
	.align	16, 0x90
.LBB19_90:                              # %for.body31.i.i
                                        #   Parent Loop BB19_36 Depth=1
                                        #     Parent Loop BB19_45 Depth=2
                                        #       Parent Loop BB19_78 Depth=3
                                        #         Parent Loop BB19_81 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB19_93 Depth 6
	leaq	-1(%rbp), %r13
	movslq	-4(%rdi,%rbp,4), %r15
	cmpl	%r9d, %ebp
	jg	.LBB19_96
# BB#91:                                # %land.rhs39.i.i.preheader
                                        #   in Loop: Header=BB19_90 Depth=5
	movl	(%rsi,%r15,4), %ebx
	cmpl	$0, "PinFlag-26.11010"(%rip)
	jne	.LBB19_93
# BB#92:                                #   in Loop: Header=BB19_90 Depth=5
	movl	$.L__unnamed_72, %edi
	movl	$1, %esi
	movl	$126, %edx
	movl	$17, %ecx
	movl	$1, %r8d
	callq	Pin
	movq	208(%rsp), %r10         # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	184(%rsp), %rsi         # 8-byte Reload
	movl	$1, "PinFlag-26.11010"(%rip)
	.align	16, 0x90
.LBB19_93:                              # %land.rhs39.i.i
                                        #   Parent Loop BB19_36 Depth=1
                                        #     Parent Loop BB19_45 Depth=2
                                        #       Parent Loop BB19_78 Depth=3
                                        #         Parent Loop BB19_81 Depth=4
                                        #           Parent Loop BB19_90 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	(%rdi,%rbp,4), %eax
	cmpl	(%rsi,%rax,4), %ebx
	jbe	.LBB19_96
# BB#94:                                # %for.body46.i.i
                                        #   in Loop: Header=BB19_93 Depth=6
	movl	%eax, -4(%rdi,%rbp,4)
	leaq	1(%rbp), %rax
	cmpq	%r12, %rbp
	movq	%rax, %rbp
	jl	.LBB19_93
# BB#95:                                # %for.end53.i.i.loopexitsplit
                                        #   in Loop: Header=BB19_90 Depth=5
	movl	%eax, %ebp
.LBB19_96:                              # %for.end53.i.i
                                        #   in Loop: Header=BB19_90 Depth=5
	movslq	%ebp, %rax
	movl	%r15d, -4(%rdi,%rax,4)
	cmpq	%r10, %r13
	movq	%r13, %rbp
	jg	.LBB19_90
.LBB19_85:                              # %while.cond.backedge.i
                                        #   in Loop: Header=BB19_81 Depth=4
	cmpq	$1, 176(%rsp)           # 8-byte Folded Reload
	movq	168(%rsp), %rbx         # 8-byte Reload
	movl	148(%rsp), %r13d        # 4-byte Reload
	jg	.LBB19_81
	jmp	.LBB19_144
	.align	16, 0x90
.LBB19_109:                             # %if.end10.i
                                        #   in Loop: Header=BB19_78 Depth=3
	movq	96(%rsp), %rdx          # 8-byte Reload
	imull	$7621, %edx, %edx       # imm = 0x1DC5
	incl	%edx
	andl	$32767, %edx            # imm = 0x7FFF
	movq	%rdx, %rax
	movl	$2863311531, %ecx       # imm = 0xAAAAAAAB
	imulq	%rcx, %rax
	shrq	$33, %rax
	leal	(%rax,%rax,2), %ecx
	movl	%edx, %eax
	subl	%ecx, %eax
	cmpl	$1, %eax
	je	.LBB19_112
# BB#110:                               # %if.end10.i
                                        #   in Loop: Header=BB19_78 Depth=3
	testl	%eax, %eax
	jne	.LBB19_113
# BB#111:                               # %if.then13.i
                                        #   in Loop: Header=BB19_78 Depth=3
	movq	%rbp, 56(%rsp)          # 8-byte Spill
	movq	%rdx, 96(%rsp)          # 8-byte Spill
	movl	(%rdi,%r10,4), %eax
	jmp	.LBB19_114
.LBB19_112:                             # %if.then19.i
                                        #   in Loop: Header=BB19_78 Depth=3
	movq	%rbp, 56(%rsp)          # 8-byte Spill
	movq	%rdx, 96(%rsp)          # 8-byte Spill
	leal	(%r9,%rbx), %eax
	sarl	%eax
	cltq
	movl	(%rdi,%rax,4), %eax
	jmp	.LBB19_114
.LBB19_113:                             # %if.else25.i
                                        #   in Loop: Header=BB19_78 Depth=3
	movq	%rbp, 56(%rsp)          # 8-byte Spill
	movq	%rdx, 96(%rsp)          # 8-byte Spill
	movl	(%rdi,%r12,4), %eax
.LBB19_114:                             # %if.end31.i
                                        #   in Loop: Header=BB19_78 Depth=3
	leaq	(%rsi,%rax,4), %rax
	movq	176(%rsp), %r12         # 8-byte Reload
	movl	(%rax), %eax
	movl	%eax, 112(%rsp)         # 4-byte Spill
	cmpl	$0, "PinFlag-26.111"(%rip)
	movl	%r9d, %eax
	movq	%rax, 160(%rsp)         # 8-byte Spill
	movl	%ebx, %r11d
	movl	%r9d, %edx
	movl	%ebx, %eax
	jne	.LBB19_116
# BB#115:                               #   in Loop: Header=BB19_78 Depth=3
	movl	$.L__unnamed_73, %edi
	movl	$1, %esi
	movl	$1092, %edx             # imm = 0x444
	movl	$48, %ecx
	movq	%r8, 216(%rsp)          # 8-byte Spill
	xorl	%r8d, %r8d
	movq	%r9, %r15
	movq	%r10, %rbp
	callq	Pin
	movq	%rbp, %r10
	movq	%r15, %r9
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	184(%rsp), %rsi         # 8-byte Reload
	movl	$1, "PinFlag-26.111"(%rip)
	movl	%r9d, %eax
	movq	%rax, 160(%rsp)         # 8-byte Spill
	movl	%ebx, %r11d
	movl	%r9d, %edx
	movl	%ebx, %eax
	jmp	.LBB19_116
	.align	16, 0x90
.LBB19_225:                             # %if.end92.i
                                        #   in Loop: Header=BB19_116 Depth=4
	movl	(%rdi,%r15,4), %edx
	movl	%ecx, (%rdi,%r15,4)
	movl	%edx, (%rax)
	movq	136(%rsp), %rax         # 8-byte Reload
	incl	%eax
	decl	%ebp
	movl	%ebp, %edx
	movq	152(%rsp), %rbx         # 8-byte Reload
.LBB19_116:                             # %while.body35.outer.i
                                        #   Parent Loop BB19_36 Depth=1
                                        #     Parent Loop BB19_45 Depth=2
                                        #       Parent Loop BB19_78 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB19_121 Depth 5
                                        #             Child Loop BB19_124 Depth 6
                                        #           Child Loop BB19_136 Depth 5
                                        #             Child Loop BB19_134 Depth 6
	cmpl	%edx, %eax
	jle	.LBB19_118
# BB#117:                               #   in Loop: Header=BB19_116 Depth=4
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	jmp	.LBB19_127
	.align	16, 0x90
.LBB19_118:                             # %if.end38.lr.ph.preheader.i
                                        #   in Loop: Header=BB19_116 Depth=4
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r12, %rbp
	movq	%r8, %r12
	movslq	%edx, %r15
	movslq	%r11d, %r11
	cmpl	$0, "PinFlag-26.1110"(%rip)
	jne	.LBB19_120
# BB#119:                               #   in Loop: Header=BB19_116 Depth=4
	movl	$.L__unnamed_74, %edi
	movl	$1, %esi
	movl	%edx, 124(%rsp)         # 4-byte Spill
	movl	$458, %edx              # imm = 0x1CA
	movq	%rax, 136(%rsp)         # 8-byte Spill
	movl	$24, %ecx
	xorl	%r8d, %r8d
	movq	%r9, 200(%rsp)          # 8-byte Spill
	movq	%r10, %rbx
	movq	%r11, 80(%rsp)          # 8-byte Spill
	callq	Pin
	movl	124(%rsp), %edx         # 4-byte Reload
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	80(%rsp), %r11          # 8-byte Reload
	movq	%rbx, %r10
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	184(%rsp), %rsi         # 8-byte Reload
	movl	$1, "PinFlag-26.1110"(%rip)
.LBB19_120:                             # %if.end38.lr.ph.i
                                        #   in Loop: Header=BB19_116 Depth=4
	movq	%r12, %r8
	movq	%rbp, %r12
.LBB19_121:                             # %if.end38.lr.ph.i
                                        #   Parent Loop BB19_36 Depth=1
                                        #     Parent Loop BB19_45 Depth=2
                                        #       Parent Loop BB19_78 Depth=3
                                        #         Parent Loop BB19_116 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB19_124 Depth 6
	movl	%edx, 124(%rsp)         # 4-byte Spill
	movslq	%eax, %rbp
	cmpl	$0, "PinFlag-26.11100"(%rip)
	jne	.LBB19_123
# BB#122:                               #   in Loop: Header=BB19_121 Depth=5
	movl	%r13d, 148(%rsp)        # 4-byte Spill
	movl	$.L__unnamed_75, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$16, %ecx
	movq	%r8, 216(%rsp)          # 8-byte Spill
	movl	$1, %r8d
	movq	%r9, %r12
	movq	%r10, %rbx
	movq	%r11, %r13
	callq	Pin
	movq	%r13, %r11
	movq	%rbx, %r10
	movq	%r12, %r9
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	176(%rsp), %r12         # 8-byte Reload
	movl	148(%rsp), %r13d        # 4-byte Reload
	movq	184(%rsp), %rsi         # 8-byte Reload
	movl	$1, "PinFlag-26.11100"(%rip)
.LBB19_123:                             #   in Loop: Header=BB19_121 Depth=5
	leaq	(%rdi,%rbp,4), %rax
	movl	112(%rsp), %edx         # 4-byte Reload
	.align	16, 0x90
.LBB19_124:                             # %if.end38.i
                                        #   Parent Loop BB19_36 Depth=1
                                        #     Parent Loop BB19_45 Depth=2
                                        #       Parent Loop BB19_78 Depth=3
                                        #         Parent Loop BB19_116 Depth=4
                                        #           Parent Loop BB19_121 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	(%rax), %ecx
	cmpl	%edx, (%rsi,%rcx,4)
	je	.LBB19_125
# BB#132:                               # %if.end56.i
                                        #   in Loop: Header=BB19_124 Depth=6
	jg	.LBB19_126
# BB#133:                               # %if.end59.i
                                        #   in Loop: Header=BB19_124 Depth=6
	addq	$4, %rax
	cmpq	%r15, %rbp
	leaq	1(%rbp), %rbp
	jl	.LBB19_124
	jmp	.LBB19_126
	.align	16, 0x90
.LBB19_125:                             # %if.then45.i
                                        #   in Loop: Header=BB19_121 Depth=5
	movl	(%rdi,%r11,4), %edx
	movl	%edx, (%rax)
	movl	%ecx, (%rdi,%r11,4)
	incq	%r11
	leal	1(%rbp), %eax
	movl	124(%rsp), %edx         # 4-byte Reload
	cmpl	%edx, %ebp
	jl	.LBB19_121
	jmp	.LBB19_127
	.align	16, 0x90
.LBB19_126:                             # %if.end56.i.while.body62.preheader.loopexit.i_crit_edge
                                        #   in Loop: Header=BB19_116 Depth=4
	movl	%ebp, %eax
	movl	124(%rsp), %edx         # 4-byte Reload
.LBB19_127:                             # %while.body62.preheader.i
                                        #   in Loop: Header=BB19_116 Depth=4
	cmpl	%edx, %eax
	jg	.LBB19_128
# BB#129:                               # %if.end65.lr.ph.preheader.i
                                        #   in Loop: Header=BB19_116 Depth=4
	movq	%r8, %rbp
	movslq	%eax, %r15
	movq	160(%rsp), %rcx         # 8-byte Reload
	movslq	%ecx, %rcx
	movq	%rcx, 160(%rsp)         # 8-byte Spill
	cmpl	$0, "PinFlag-26.1111"(%rip)
	je	.LBB19_131
# BB#130:                               #   in Loop: Header=BB19_116 Depth=4
	movq	%rax, 136(%rsp)         # 8-byte Spill
	movq	%rbp, %r8
	jmp	.LBB19_136
	.align	16, 0x90
.LBB19_131:                             #   in Loop: Header=BB19_116 Depth=4
	movq	%rax, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_76, %edi
	movl	$1, %esi
	movl	%edx, 124(%rsp)         # 4-byte Spill
	movl	$458, %edx              # imm = 0x1CA
	movl	$24, %ecx
	xorl	%r8d, %r8d
	movq	%r9, 200(%rsp)          # 8-byte Spill
	movq	%r10, %rbx
	movq	%r11, 80(%rsp)          # 8-byte Spill
	callq	Pin
	movl	124(%rsp), %edx         # 4-byte Reload
	movq	80(%rsp), %r11          # 8-byte Reload
	movq	%rbx, %r10
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	184(%rsp), %rsi         # 8-byte Reload
	movl	$1, "PinFlag-26.1111"(%rip)
	movq	%rbp, %r8
.LBB19_136:                             # %if.end65.lr.ph.i
                                        #   Parent Loop BB19_36 Depth=1
                                        #     Parent Loop BB19_45 Depth=2
                                        #       Parent Loop BB19_78 Depth=3
                                        #         Parent Loop BB19_116 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB19_134 Depth 6
	movslq	%edx, %rbp
	cmpl	$0, "PinFlag-26.11110"(%rip)
	jne	.LBB19_138
# BB#137:                               #   in Loop: Header=BB19_136 Depth=5
	movl	%r13d, 148(%rsp)        # 4-byte Spill
	movl	$.L__unnamed_77, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$15, %ecx
	movq	%r8, 216(%rsp)          # 8-byte Spill
	movl	$1, %r8d
	movq	%r9, %r12
	movq	%r10, %rbx
	movq	%r11, %r13
	callq	Pin
	movq	%r13, %r11
	movq	%rbx, %r10
	movq	%r12, %r9
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	176(%rsp), %r12         # 8-byte Reload
	movl	148(%rsp), %r13d        # 4-byte Reload
	movq	184(%rsp), %rsi         # 8-byte Reload
	movl	$1, "PinFlag-26.11110"(%rip)
.LBB19_138:                             #   in Loop: Header=BB19_136 Depth=5
	leaq	(%rdi,%rbp,4), %rax
	movl	112(%rsp), %edx         # 4-byte Reload
	.align	16, 0x90
.LBB19_134:                             # %if.end65.i
                                        #   Parent Loop BB19_36 Depth=1
                                        #     Parent Loop BB19_45 Depth=2
                                        #       Parent Loop BB19_78 Depth=3
                                        #         Parent Loop BB19_116 Depth=4
                                        #           Parent Loop BB19_136 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	(%rax), %ecx
	cmpl	%edx, (%rsi,%rcx,4)
	je	.LBB19_135
# BB#139:                               # %if.end84.i
                                        #   in Loop: Header=BB19_134 Depth=6
	jl	.LBB19_225
# BB#140:                               # %if.end87.i
                                        #   in Loop: Header=BB19_134 Depth=6
	addq	$-4, %rax
	cmpq	%rbp, %r15
	leaq	-1(%rbp), %rbp
	jl	.LBB19_134
	jmp	.LBB19_141
	.align	16, 0x90
.LBB19_135:                             # %if.then72.i
                                        #   in Loop: Header=BB19_136 Depth=5
	movq	160(%rsp), %rbx         # 8-byte Reload
	movl	(%rdi,%rbx,4), %edx
	movl	%edx, (%rax)
	movl	%ecx, (%rdi,%rbx,4)
	decq	%rbx
	movq	%rbx, 160(%rsp)         # 8-byte Spill
	leal	-1(%rbp), %edx
	movq	136(%rsp), %rax         # 8-byte Reload
	cmpl	%ebp, %eax
	jl	.LBB19_136
	jmp	.LBB19_142
	.align	16, 0x90
.LBB19_141:                             # %while.end104.loopexit.i
                                        #   in Loop: Header=BB19_78 Depth=3
	movl	%ebp, %edx
.LBB19_142:                             # %while.end104.i
                                        #   in Loop: Header=BB19_78 Depth=3
	movq	160(%rsp), %rax         # 8-byte Reload
	cmpl	%r11d, %eax
	jl	.LBB19_143
# BB#152:                               # %if.end107.i
                                        #   in Loop: Header=BB19_78 Depth=3
	movl	%edx, 124(%rsp)         # 4-byte Spill
	movl	%r11d, %eax
	movq	152(%rsp), %r15         # 8-byte Reload
	subl	%r15d, %eax
	movq	136(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, %ebx
	subl	%r11d, %ebx
	cmpl	%ebx, %eax
	cmovlel	%eax, %ebx
	testl	%ebx, %ebx
	jle	.LBB19_173
# BB#153:                               # %while.body116.preheader.i
                                        #   in Loop: Header=BB19_78 Depth=3
	leal	-1(%r11), %ebp
	movq	136(%rsp), %rcx         # 8-byte Reload
	subl	%ecx, %ebp
	leal	-1(%r15), %edx
	subl	%r11d, %edx
	cmpl	%edx, %ebp
	movl	%edx, %eax
	cmovgel	%ebp, %eax
	leal	1(%rcx,%rax), %ecx
	movslq	%ecx, %rsi
	cmpl	$-3, %eax
	movl	$-2, %r12d
	cmovgl	%eax, %r12d
	subl	%eax, %r12d
	incq	%r12
	cmpq	$4, %r12
	jae	.LBB19_155
# BB#154:                               #   in Loop: Header=BB19_78 Depth=3
	movq	176(%rsp), %r12         # 8-byte Reload
	jmp	.LBB19_169
.LBB19_155:                             # %min.iters.checked683
                                        #   in Loop: Header=BB19_78 Depth=3
	movq	%r12, %rcx
	movabsq	$8589934588, %rax       # imm = 0x1FFFFFFFC
	andq	%rax, %rcx
	je	.LBB19_156
# BB#157:                               # %vector.memcheck703
                                        #   in Loop: Header=BB19_78 Depth=3
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	%rsi, 168(%rsp)         # 8-byte Spill
	leaq	(%rdi,%r10,4), %rax
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	movl	%ebp, 12(%rsp)          # 4-byte Spill
	cmpl	%edx, %ebp
	movl	%edx, %ecx
	cmovgel	%ebp, %ecx
	cmpl	$-3, %ecx
	movl	$-2, %eax
	cmovgl	%ecx, %eax
	subl	%ecx, %eax
	movq	136(%rsp), %rsi         # 8-byte Reload
	leal	1(%rsi,%rcx), %ecx
	movslq	%ecx, %rcx
	leaq	(%rcx,%rax), %rsi
	leaq	(%rdi,%rsi,4), %rsi
	cmpq	%rsi, 112(%rsp)         # 8-byte Folded Reload
	ja	.LBB19_160
# BB#158:                               # %vector.memcheck703
                                        #   in Loop: Header=BB19_78 Depth=3
	addq	%r10, %rax
	leaq	(%rdi,%rax,4), %rax
	leaq	(%rdi,%rcx,4), %rcx
	cmpq	%rax, %rcx
	ja	.LBB19_160
# BB#159:                               #   in Loop: Header=BB19_78 Depth=3
	movq	176(%rsp), %r12         # 8-byte Reload
	movq	168(%rsp), %rsi         # 8-byte Reload
	jmp	.LBB19_169
.LBB19_128:                             #   in Loop: Header=BB19_78 Depth=3
	movq	%rax, 136(%rsp)         # 8-byte Spill
	jmp	.LBB19_142
.LBB19_156:                             #   in Loop: Header=BB19_78 Depth=3
	movq	176(%rsp), %r12         # 8-byte Reload
	jmp	.LBB19_169
.LBB19_160:                             # %vector.body676.preheader
                                        #   in Loop: Header=BB19_78 Depth=3
	movq	%rbx, 112(%rsp)         # 8-byte Spill
	movq	24(%rsp), %rdx          # 8-byte Reload
	movl	12(%rsp), %ebp          # 4-byte Reload
	cmpl	%edx, %ebp
	movl	%edx, %eax
	cmovgel	%ebp, %eax
	cmpl	$-3, %eax
	movl	$-2, %ecx
	cmovgl	%eax, %ecx
	subl	%eax, %ecx
	incq	%rcx
	movabsq	$8589934588, %rax       # imm = 0x1FFFFFFFC
	andq	%rax, %rcx
	addq	$-4, %rcx
	movq	%rcx, %rax
	shrq	$2, %rax
	btq	$2, %rcx
	movl	$0, %ebx
	movq	168(%rsp), %rsi         # 8-byte Reload
	jb	.LBB19_162
# BB#161:                               # %vector.body676.prol
                                        #   in Loop: Header=BB19_78 Depth=3
	movups	(%rdi,%r10,4), %xmm0
	movups	(%rdi,%rsi,4), %xmm1
	movups	%xmm1, (%rdi,%r10,4)
	movups	%xmm0, (%rdi,%rsi,4)
	movl	$4, %ebx
.LBB19_162:                             # %vector.body676.preheader.split
                                        #   in Loop: Header=BB19_78 Depth=3
	testq	%rax, %rax
	je	.LBB19_167
# BB#163:                               # %vector.body676.preheader.split.split
                                        #   in Loop: Header=BB19_78 Depth=3
	cmpl	$0, "PinFlag-26.112"(%rip)
	jne	.LBB19_165
# BB#164:                               #   in Loop: Header=BB19_78 Depth=3
	movl	$.L__unnamed_78, %edi
	movl	$1, %esi
	movl	$1120, %edx             # imm = 0x460
	movl	$29, %ecx
	movq	%r8, 216(%rsp)          # 8-byte Spill
	movl	$1, %r8d
	movq	%r9, 200(%rsp)          # 8-byte Spill
	movq	%r10, 208(%rsp)         # 8-byte Spill
	movq	%r11, 80(%rsp)          # 8-byte Spill
	callq	Pin
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	168(%rsp), %rsi         # 8-byte Reload
	movq	80(%rsp), %r11          # 8-byte Reload
	movq	208(%rsp), %r10         # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %rdi         # 8-byte Reload
	movl	$1, "PinFlag-26.112"(%rip)
.LBB19_165:                             #   in Loop: Header=BB19_78 Depth=3
	cmpl	%edx, %ebp
	cmovgel	%ebp, %edx
	cmpl	$-3, %edx
	movl	$-2, %eax
	cmovgl	%edx, %eax
	subl	%edx, %eax
	incq	%rax
	movabsq	$8589934588, %rcx       # imm = 0x1FFFFFFFC
	andq	%rcx, %rax
	subq	%rbx, %rax
	movq	136(%rsp), %rcx         # 8-byte Reload
	leal	1(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	addq	%rbx, %rcx
	movq	(%rsp), %rdx            # 8-byte Reload
	leaq	(%rdx,%rcx,4), %rcx
	addq	%r10, %rbx
	leaq	(%rdx,%rbx,4), %rdx
	.align	16, 0x90
.LBB19_166:                             # %vector.body676
                                        #   Parent Loop BB19_36 Depth=1
                                        #     Parent Loop BB19_45 Depth=2
                                        #       Parent Loop BB19_78 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movups	-16(%rdx), %xmm0
	movups	-16(%rcx), %xmm1
	movups	%xmm1, -16(%rdx)
	movups	%xmm0, -16(%rcx)
	movups	(%rdx), %xmm0
	movups	(%rcx), %xmm1
	movups	%xmm1, (%rdx)
	movups	%xmm0, (%rcx)
	addq	$32, %rcx
	addq	$32, %rdx
	addq	$-8, %rax
	jne	.LBB19_166
.LBB19_167:                             # %middle.block677
                                        #   in Loop: Header=BB19_78 Depth=3
	movq	16(%rsp), %rax          # 8-byte Reload
	cmpq	%rax, %r12
	movq	176(%rsp), %r12         # 8-byte Reload
	movq	112(%rsp), %rbx         # 8-byte Reload
	je	.LBB19_173
# BB#168:                               #   in Loop: Header=BB19_78 Depth=3
	addq	%rax, %r10
	addq	%rax, %rsi
	subl	%eax, %ebx
.LBB19_169:                             # %while.body116.i.preheader
                                        #   in Loop: Header=BB19_78 Depth=3
	movl	%ebx, %eax
	notl	%eax
	cmpl	$-3, %eax
	movl	$-2, %ecx
	cmovlel	%ecx, %eax
	cmpl	$0, "PinFlag-26.113"(%rip)
	jne	.LBB19_171
# BB#170:                               #   in Loop: Header=BB19_78 Depth=3
	leal	1(%rbx,%rax), %eax
	movq	%rsi, 168(%rsp)         # 8-byte Spill
	movslq	%eax, %rsi
	movl	$.L__unnamed_79, %edi
	movl	$240, %edx
	movl	$14, %ecx
	movq	%r8, 216(%rsp)          # 8-byte Spill
	movl	$1, %r8d
	movq	%r9, %r15
	movq	%rbx, 112(%rsp)         # 8-byte Spill
	movq	%r10, %rbx
	movq	%r11, %rbp
	callq	Pin
	movq	168(%rsp), %rsi         # 8-byte Reload
	movq	%rbp, %r11
	movq	%rbx, %r10
	movq	112(%rsp), %rbx         # 8-byte Reload
	movq	%r15, %r9
	movq	152(%rsp), %r15         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %rdi         # 8-byte Reload
	movl	$1, "PinFlag-26.113"(%rip)
.LBB19_171:                             #   in Loop: Header=BB19_78 Depth=3
	leaq	(%rdi,%r10,4), %rax
	leaq	(%rdi,%rsi,4), %rcx
	incl	%ebx
	.align	16, 0x90
.LBB19_172:                             # %while.body116.i
                                        #   Parent Loop BB19_36 Depth=1
                                        #     Parent Loop BB19_45 Depth=2
                                        #       Parent Loop BB19_78 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	(%rax), %edx
	movl	(%rcx), %esi
	movl	%esi, (%rax)
	movl	%edx, (%rcx)
	addq	$4, %rax
	addq	$4, %rcx
	decl	%ebx
	cmpl	$1, %ebx
	jg	.LBB19_172
.LBB19_173:                             # %while.end129.i
                                        #   in Loop: Header=BB19_78 Depth=3
	movl	%r9d, %ebp
	movq	160(%rsp), %rbx         # 8-byte Reload
	subl	%ebx, %ebp
	movl	%ebx, %r10d
	movl	124(%rsp), %ecx         # 4-byte Reload
	subl	%ecx, %r10d
	cmpl	%r10d, %ebp
	cmovgl	%r10d, %ebp
	testl	%ebp, %ebp
	jle	.LBB19_193
# BB#174:                               # %while.body146.preheader.i
                                        #   in Loop: Header=BB19_78 Depth=3
	movl	%r9d, %esi
	subl	%ebp, %esi
	movq	136(%rsp), %rax         # 8-byte Reload
	movslq	%eax, %rdx
	decl	%ecx
	subl	%ebx, %ecx
	decl	%ebx
	subl	%r9d, %ebx
	cmpl	%ebx, %ecx
	movl	%ebx, %eax
	cmovgel	%ecx, %eax
	cmpl	$-3, %eax
	movl	$-2, %r15d
	cmovgl	%eax, %r15d
	subl	%eax, %r15d
	incq	%r15
	cmpq	$4, %r15
	jb	.LBB19_175
# BB#176:                               # %min.iters.checked
                                        #   in Loop: Header=BB19_78 Depth=3
	movq	%r15, %r12
	movabsq	$8589934588, %rax       # imm = 0x1FFFFFFFC
	andq	%rax, %r12
	je	.LBB19_175
# BB#177:                               # %vector.memcheck
                                        #   in Loop: Header=BB19_78 Depth=3
	movq	%rsi, 208(%rsp)         # 8-byte Spill
	movq	%rbp, 168(%rsp)         # 8-byte Spill
	leaq	(%rdi,%rdx,4), %rbp
	movl	%ecx, %eax
	movl	%eax, 124(%rsp)         # 4-byte Spill
	cmpl	%ebx, %eax
	movl	%ebx, %ecx
	cmovgel	%eax, %ecx
	cmpl	$-3, %ecx
	movl	$-2, %eax
	cmovgl	%ecx, %eax
	subl	%ecx, %eax
	leal	2(%r9,%rcx), %ecx
	movslq	%ecx, %rcx
	leaq	(%rcx,%rax), %rsi
	leaq	(%rdi,%rsi,4), %rsi
	cmpq	%rsi, %rbp
	ja	.LBB19_180
# BB#178:                               # %vector.memcheck
                                        #   in Loop: Header=BB19_78 Depth=3
	addq	%rdx, %rax
	leaq	(%rdi,%rax,4), %rax
	leaq	(%rdi,%rcx,4), %rcx
	cmpq	%rax, %rcx
	ja	.LBB19_180
# BB#179:                               #   in Loop: Header=BB19_78 Depth=3
	movq	176(%rsp), %r12         # 8-byte Reload
	movq	168(%rsp), %rbp         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %r15         # 8-byte Reload
	jmp	.LBB19_189
.LBB19_175:                             #   in Loop: Header=BB19_78 Depth=3
	movq	176(%rsp), %r12         # 8-byte Reload
	movq	152(%rsp), %r15         # 8-byte Reload
.LBB19_189:                             # %while.body146.i.preheader
                                        #   in Loop: Header=BB19_78 Depth=3
	movl	%ebp, %eax
	notl	%eax
	cmpl	$-3, %eax
	movl	$-2, %ecx
	cmovlel	%ecx, %eax
	cmpl	$0, "PinFlag-26.115"(%rip)
	jne	.LBB19_191
# BB#190:                               #   in Loop: Header=BB19_78 Depth=3
	leal	1(%rbp,%rax), %eax
	movq	%rsi, 208(%rsp)         # 8-byte Spill
	movslq	%eax, %rsi
	movl	$.L__unnamed_80, %edi
	movq	%rdx, 112(%rsp)         # 8-byte Spill
	movl	$240, %edx
	movl	$15, %ecx
	movq	%r8, 216(%rsp)          # 8-byte Spill
	movl	$1, %r8d
	movq	%r9, %rbx
	movq	%r11, %r15
	movq	%rbp, 168(%rsp)         # 8-byte Spill
	movl	%r10d, %ebp
	callq	Pin
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movl	%ebp, %r10d
	movq	168(%rsp), %rbp         # 8-byte Reload
	movq	%r15, %r11
	movq	%rbx, %r9
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %r15         # 8-byte Reload
	movl	$1, "PinFlag-26.115"(%rip)
.LBB19_191:                             #   in Loop: Header=BB19_78 Depth=3
	leaq	(%rdi,%rdx,4), %rax
	incl	%esi
	movslq	%esi, %rcx
	leaq	(%rdi,%rcx,4), %rcx
	incl	%ebp
	.align	16, 0x90
.LBB19_192:                             # %while.body146.i
                                        #   Parent Loop BB19_36 Depth=1
                                        #     Parent Loop BB19_45 Depth=2
                                        #       Parent Loop BB19_78 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	(%rax), %edx
	movl	(%rcx), %esi
	movl	%esi, (%rax)
	movl	%edx, (%rcx)
	addq	$4, %rax
	addq	$4, %rcx
	decl	%ebp
	cmpl	$1, %ebp
	jg	.LBB19_192
.LBB19_193:                             # %while.end159.i
                                        #   in Loop: Header=BB19_78 Depth=3
	leal	-1(%r15), %eax
	subl	%r11d, %eax
	movq	136(%rsp), %rcx         # 8-byte Reload
	addl	%ecx, %eax
	movl	%r9d, %ecx
	subl	%r10d, %ecx
	incl	%ecx
	movl	%eax, %edx
	subl	%r15d, %edx
	movl	%r9d, %esi
	subl	%ecx, %esi
	cmpl	%esi, %edx
	jle	.LBB19_196
# BB#194:                               # %if.then169.i
                                        #   in Loop: Header=BB19_78 Depth=3
	movq	56(%rsp), %rdx          # 8-byte Reload
	movl	%eax, 2288(%rsp,%rdx,4)
	movslq	%r12d, %rax
	movl	%ecx, 2688(%rsp,%rax,4)
	movl	%r9d, 2288(%rsp,%rax,4)
	jmp	.LBB19_195
.LBB19_196:                             # %if.else180.i
                                        #   in Loop: Header=BB19_78 Depth=3
	movq	56(%rsp), %rdx          # 8-byte Reload
	movl	%ecx, 2688(%rsp,%rdx,4)
	movslq	%r12d, %rcx
	movl	%r15d, 2688(%rsp,%rcx,4)
	movl	%eax, 2288(%rsp,%rcx,4)
.LBB19_195:                             # %while.cond.outer.backedge.i
                                        #   in Loop: Header=BB19_78 Depth=3
	leal	1(%r12), %eax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	movq	184(%rsp), %rsi         # 8-byte Reload
.LBB19_143:                             # %while.cond.outer.backedge.i
                                        #   in Loop: Header=BB19_78 Depth=3
	movq	168(%rsp), %rbp         # 8-byte Reload
	testl	%ebp, %ebp
	jg	.LBB19_78
	.align	16, 0x90
.LBB19_144:                             # %fallbackQSort3.exit
                                        #   in Loop: Header=BB19_45 Depth=2
	cmpl	%r14d, %r8d
	movq	40(%rsp), %r9           # 8-byte Reload
	movq	48(%rsp), %r12          # 8-byte Reload
	movq	88(%rsp), %rbx          # 8-byte Reload
	jg	.LBB19_45
# BB#145:                               # %for.body236.preheader
                                        #   in Loop: Header=BB19_45 Depth=2
	movl	%r13d, 148(%rsp)        # 4-byte Spill
	movq	%r12, %r13
	movq	%rsi, %rbp
	movq	%r9, %r15
	movslq	68(%rsp), %r12          # 4-byte Folded Reload
	movl	%r14d, %eax
	cmovgel	%r8d, %eax
	movl	$-1, %ebx
	cmpl	$0, "PinFlag-26.12"(%rip)
	jne	.LBB19_147
# BB#146:                               #   in Loop: Header=BB19_45 Depth=2
	subl	%r8d, %eax
	movslq	%eax, %rsi
	movl	$.L__unnamed_81, %edi
	movl	$18, %edx
	movl	$25, %ecx
	movl	$1, %r8d
	callq	Pin
	movq	192(%rsp), %rdi         # 8-byte Reload
	movl	$1, "PinFlag-26.12"(%rip)
.LBB19_147:                             # %for.body236
                                        #   in Loop: Header=BB19_45 Depth=2
	movq	%rbp, %rsi
	.align	16, 0x90
.LBB19_148:                             # %for.body236
                                        #   Parent Loop BB19_36 Depth=1
                                        #     Parent Loop BB19_45 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	(%rdi,%r12,4), %eax
	movl	(%rsi,%rax,4), %eax
	cmpl	%eax, %ebx
	je	.LBB19_150
# BB#149:                               # %if.then243
                                        #   in Loop: Header=BB19_148 Depth=3
	movl	$1, %edx
	movb	%r12b, %cl
	shll	%cl, %edx
	movl	%r12d, %ecx
	sarl	$5, %ecx
	movslq	%ecx, %rcx
	orl	%edx, (%r13,%rcx,4)
	movl	%eax, %ebx
.LBB19_150:                             # %for.inc251
                                        #   in Loop: Header=BB19_148 Depth=3
	incq	%r12
	cmpl	%r14d, %r12d
	jl	.LBB19_148
	jmp	.LBB19_151
	.align	16, 0x90
.LBB19_197:                             # %while.end255
                                        #   in Loop: Header=BB19_36 Depth=1
	cmpl	$4, 108(%rsp)           # 4-byte Folded Reload
	jge	.LBB19_198
.LBB19_199:                             # %if.end260
                                        #   in Loop: Header=BB19_36 Depth=1
	addl	%r13d, %r13d
	cmpl	%r9d, %r13d
	movq	72(%rsp), %r14          # 8-byte Reload
	jg	.LBB19_201
# BB#200:                               # %if.end260
                                        #   in Loop: Header=BB19_36 Depth=1
	movq	128(%rsp), %rax         # 8-byte Reload
	testl	%eax, %eax
	jne	.LBB19_36
.LBB19_201:                             # %while.end268
	cmpl	$4, 108(%rsp)           # 4-byte Folded Reload
	jge	.LBB19_202
.LBB19_203:                             # %for.cond274.preheader
	testl	%r9d, %r9d
	jle	.LBB19_223
# BB#204:                               # %while.cond278.preheader.preheader
	xorl	%r14d, %r14d
	testb	$1, %r9b
	movl	$0, %ebp
	je	.LBB19_208
# BB#205:
	movq	$-1, %rbp
	.align	16, 0x90
.LBB19_206:                             # %while.cond278.prol
                                        # =>This Inner Loop Header: Depth=1
	movq	%rbp, %rax
	movl	228(%rsp,%rax,4), %ecx
	leaq	1(%rax), %rbp
	testl	%ecx, %ecx
	je	.LBB19_206
# BB#207:                               # %while.end285.prol
	decl	%ecx
	movl	%ecx, 228(%rsp,%rax,4)
	movl	(%rdi), %eax
	movb	%bpl, (%rsi,%rax)
	movl	$1, %r14d
.LBB19_208:                             # %while.cond278.preheader.preheader.split
	cmpl	$1, %r9d
	movq	%r9, %r15
	je	.LBB19_221
# BB#209:                               # %while.cond278.preheader.preheader.split.split
	cmpl	$0, "PinFlag-24."(%rip)
	jne	.LBB19_211
# BB#210:
	movq	%rdi, %r12
	movl	$.L__unnamed_82, %edi
	movq	%rsi, %rbx
	movl	$1, %esi
	movl	$10, %edx
	movl	$47, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movl	$1, "PinFlag-24."(%rip)
.LBB19_211:
	leaq	220(%rsp), %r12
	.align	16, 0x90
.LBB19_212:                             # %while.cond278.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_215 Depth 2
                                        #     Child Loop BB19_219 Depth 2
	cmpl	$0, "PinFlag-24.0"(%rip)
	jne	.LBB19_214
# BB#213:                               #   in Loop: Header=BB19_212 Depth=1
	movq	%rdi, %r13
	movl	$.L__unnamed_83, %edi
	movq	%rsi, %rbx
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$6, %ecx
	movl	$1, %r8d
	callq	Pin
	movq	%r13, %rdi
	movq	%rbx, %rsi
	movl	$1, "PinFlag-24.0"(%rip)
.LBB19_214:                             #   in Loop: Header=BB19_212 Depth=1
	movslq	%ebp, %rbx
	leaq	(%r12,%rbx,4), %rax
	decq	%rbx
	.align	16, 0x90
.LBB19_215:                             # %while.cond278
                                        #   Parent Loop BB19_212 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	4(%rax), %ecx
	addq	$4, %rax
	incq	%rbx
	testl	%ecx, %ecx
	je	.LBB19_215
# BB#216:                               # %while.end285
                                        #   in Loop: Header=BB19_212 Depth=1
	decl	%ecx
	movl	%ecx, (%rax)
	movl	(%rdi,%r14,4), %eax
	movb	%bl, (%rsi,%rax)
	cmpl	$0, "PinFlag-24.1"(%rip)
	jne	.LBB19_218
# BB#217:                               #   in Loop: Header=BB19_212 Depth=1
	movq	%rdi, %r13
	movl	$.L__unnamed_84, %edi
	movq	%rsi, %rbp
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$6, %ecx
	movl	$1, %r8d
	callq	Pin
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movl	$1, "PinFlag-24.1"(%rip)
.LBB19_218:                             #   in Loop: Header=BB19_212 Depth=1
	movslq	%ebx, %rbp
	leaq	(%r12,%rbp,4), %rax
	decq	%rbp
	.align	16, 0x90
.LBB19_219:                             # %while.cond278.1
                                        #   Parent Loop BB19_212 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	4(%rax), %ecx
	addq	$4, %rax
	incq	%rbp
	testl	%ecx, %ecx
	je	.LBB19_219
# BB#220:                               # %while.end285.1
                                        #   in Loop: Header=BB19_212 Depth=1
	decl	%ecx
	movl	%ecx, (%rax)
	movl	4(%rdi,%r14,4), %eax
	movb	%bpl, (%rsi,%rax)
	addq	$2, %r14
	cmpl	%r15d, %r14d
	jne	.LBB19_212
.LBB19_221:                             # %for.end295
	cmpl	$256, %ebp              # imm = 0x100
	jl	.LBB19_223
# BB#222:                               # %if.then298
	movl	$1005, %edi             # imm = 0x3ED
	callq	BZ2_bz__AssertH__fail
.LBB19_223:                             # %if.end299
	addq	$3096, %rsp             # imm = 0xC18
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB19_224:                             # %if.then
	movq	stderr(%rip), %rcx
	movl	$.L.str.2, %edi
	movl	$27, %esi
	movl	$1, %edx
	callq	fwrite
	jmp	.LBB19_1
.LBB19_202:                             # %if.then271
	movq	stderr(%rip), %rcx
	movq	%rdi, %r14
	movl	$.L.str.5.2, %edi
	movq	%rsi, %rbx
	movl	$33, %esi
	movl	$1, %edx
	movq	%r9, %rbp
	callq	fwrite
	movq	%rbp, %r9
	movq	%r14, %rdi
	movq	%rbx, %rsi
	jmp	.LBB19_203
.Lfunc_end19:
	.size	fallbackSort, .Lfunc_end19-fallbackSort
	.cfi_endproc

	.align	16, 0x90
	.type	mainGtU,@function
mainGtU:                                # @mainGtU
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp119:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp120:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp121:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp122:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp123:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp124:
	.cfi_def_cfa_offset 56
	pushq	%rax
.Ltmp125:
	.cfi_def_cfa_offset 64
.Ltmp126:
	.cfi_offset %rbx, -56
.Ltmp127:
	.cfi_offset %r12, -48
.Ltmp128:
	.cfi_offset %r13, -40
.Ltmp129:
	.cfi_offset %r14, -32
.Ltmp130:
	.cfi_offset %r15, -24
.Ltmp131:
	.cfi_offset %rbp, -16
	movq	%r9, %r14
	movl	%r8d, %r15d
	movq	%rcx, %r12
	movq	%rdx, %rbx
	movl	%esi, %r13d
	movl	%edi, %ebp
	movl	%ebp, %eax
	movzbl	(%rbx,%rax), %eax
	movl	%r13d, %ecx
	movzbl	(%rbx,%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB20_1
# BB#3:                                 # %if.end
	leal	1(%rbp), %eax
	leal	1(%r13), %ecx
	movzbl	(%rbx,%rax), %eax
	movzbl	(%rbx,%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB20_1
# BB#4:                                 # %if.end25
	leal	2(%rbp), %eax
	leal	2(%r13), %ecx
	movzbl	(%rbx,%rax), %eax
	movzbl	(%rbx,%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB20_1
# BB#5:                                 # %if.end42
	leal	3(%rbp), %eax
	leal	3(%r13), %ecx
	movzbl	(%rbx,%rax), %eax
	movzbl	(%rbx,%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB20_1
# BB#6:                                 # %if.end59
	leal	4(%rbp), %eax
	leal	4(%r13), %ecx
	movzbl	(%rbx,%rax), %eax
	movzbl	(%rbx,%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB20_1
# BB#7:                                 # %if.end76
	leal	5(%rbp), %eax
	leal	5(%r13), %ecx
	movzbl	(%rbx,%rax), %eax
	movzbl	(%rbx,%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB20_1
# BB#8:                                 # %if.end93
	leal	6(%rbp), %eax
	leal	6(%r13), %ecx
	movzbl	(%rbx,%rax), %eax
	movzbl	(%rbx,%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB20_1
# BB#9:                                 # %if.end110
	leal	7(%rbp), %eax
	leal	7(%r13), %ecx
	movzbl	(%rbx,%rax), %eax
	movzbl	(%rbx,%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB20_1
# BB#10:                                # %if.end127
	leal	8(%rbp), %eax
	leal	8(%r13), %ecx
	movzbl	(%rbx,%rax), %eax
	movzbl	(%rbx,%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB20_1
# BB#11:                                # %if.end144
	leal	9(%rbp), %eax
	leal	9(%r13), %ecx
	movzbl	(%rbx,%rax), %eax
	movzbl	(%rbx,%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB20_1
# BB#12:                                # %if.end161
	leal	10(%rbp), %eax
	leal	10(%r13), %ecx
	movzbl	(%rbx,%rax), %eax
	movzbl	(%rbx,%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB20_1
# BB#13:                                # %if.end178
	leal	11(%rbp), %eax
	leal	11(%r13), %ecx
	movzbl	(%rbx,%rax), %eax
	movzbl	(%rbx,%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB20_1
# BB#14:                                # %if.end195
	addl	$12, %ebp
	addl	$12, %r13d
	leal	8(%r15), %edi
	cmpl	$0, "PinFlag-33."(%rip)
	jne	.LBB20_16
# BB#15:
	movl	%edi, 4(%rsp)           # 4-byte Spill
	movl	$.L__unnamed_85, %edi
	movl	$1, %esi
	movl	$272, %edx              # imm = 0x110
	movl	$143, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	4(%rsp), %edi           # 4-byte Reload
	movl	$1, "PinFlag-33."(%rip)
.LBB20_16:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	%ebp, %ebp
	movzbl	(%rbx,%rbp), %eax
	movl	%r13d, %r13d
	movzbl	(%rbx,%r13), %ecx
	cmpl	%ecx, %eax
	jne	.LBB20_1
# BB#17:                                # %if.end212
                                        #   in Loop: Header=BB20_16 Depth=1
	movzwl	(%r12,%rbp,2), %eax
	movzwl	(%r12,%r13,2), %ecx
	cmpl	%ecx, %eax
	jne	.LBB20_18
# BB#19:                                # %if.end227
                                        #   in Loop: Header=BB20_16 Depth=1
	leal	1(%rbp), %eax
	leal	1(%r13), %ecx
	movzbl	(%rbx,%rax), %edx
	movzbl	(%rbx,%rcx), %esi
	cmpl	%esi, %edx
	jne	.LBB20_20
# BB#21:                                # %if.end244
                                        #   in Loop: Header=BB20_16 Depth=1
	movzwl	(%r12,%rax,2), %eax
	movzwl	(%r12,%rcx,2), %ecx
	cmpl	%ecx, %eax
	jne	.LBB20_18
# BB#22:                                # %if.end259
                                        #   in Loop: Header=BB20_16 Depth=1
	leal	2(%rbp), %eax
	leal	2(%r13), %ecx
	movzbl	(%rbx,%rax), %edx
	movzbl	(%rbx,%rcx), %esi
	cmpl	%esi, %edx
	jne	.LBB20_20
# BB#23:                                # %if.end276
                                        #   in Loop: Header=BB20_16 Depth=1
	movzwl	(%r12,%rax,2), %eax
	movzwl	(%r12,%rcx,2), %ecx
	cmpl	%ecx, %eax
	jne	.LBB20_18
# BB#24:                                # %if.end291
                                        #   in Loop: Header=BB20_16 Depth=1
	leal	3(%rbp), %eax
	leal	3(%r13), %ecx
	movzbl	(%rbx,%rax), %edx
	movzbl	(%rbx,%rcx), %esi
	cmpl	%esi, %edx
	jne	.LBB20_20
# BB#25:                                # %if.end308
                                        #   in Loop: Header=BB20_16 Depth=1
	movzwl	(%r12,%rax,2), %eax
	movzwl	(%r12,%rcx,2), %ecx
	cmpl	%ecx, %eax
	jne	.LBB20_18
# BB#26:                                # %if.end323
                                        #   in Loop: Header=BB20_16 Depth=1
	leal	4(%rbp), %eax
	leal	4(%r13), %ecx
	movzbl	(%rbx,%rax), %edx
	movzbl	(%rbx,%rcx), %esi
	cmpl	%esi, %edx
	jne	.LBB20_20
# BB#27:                                # %if.end340
                                        #   in Loop: Header=BB20_16 Depth=1
	movzwl	(%r12,%rax,2), %eax
	movzwl	(%r12,%rcx,2), %ecx
	cmpl	%ecx, %eax
	jne	.LBB20_18
# BB#28:                                # %if.end355
                                        #   in Loop: Header=BB20_16 Depth=1
	leal	5(%rbp), %eax
	leal	5(%r13), %ecx
	movzbl	(%rbx,%rax), %edx
	movzbl	(%rbx,%rcx), %esi
	cmpl	%esi, %edx
	jne	.LBB20_20
# BB#29:                                # %if.end372
                                        #   in Loop: Header=BB20_16 Depth=1
	movzwl	(%r12,%rax,2), %eax
	movzwl	(%r12,%rcx,2), %ecx
	cmpl	%ecx, %eax
	jne	.LBB20_18
# BB#30:                                # %if.end387
                                        #   in Loop: Header=BB20_16 Depth=1
	leal	6(%rbp), %eax
	leal	6(%r13), %ecx
	movzbl	(%rbx,%rax), %edx
	movzbl	(%rbx,%rcx), %esi
	cmpl	%esi, %edx
	jne	.LBB20_20
# BB#31:                                # %if.end404
                                        #   in Loop: Header=BB20_16 Depth=1
	movzwl	(%r12,%rax,2), %eax
	movzwl	(%r12,%rcx,2), %ecx
	cmpl	%ecx, %eax
	jne	.LBB20_18
# BB#32:                                # %if.end419
                                        #   in Loop: Header=BB20_16 Depth=1
	leal	7(%rbp), %eax
	leal	7(%r13), %ecx
	movzbl	(%rbx,%rax), %edx
	movzbl	(%rbx,%rcx), %esi
	cmpl	%esi, %edx
	jne	.LBB20_20
# BB#33:                                # %if.end436
                                        #   in Loop: Header=BB20_16 Depth=1
	movzwl	(%r12,%rax,2), %eax
	movzwl	(%r12,%rcx,2), %ecx
	cmpl	%ecx, %eax
	jne	.LBB20_18
# BB#34:                                # %if.end451
                                        #   in Loop: Header=BB20_16 Depth=1
	addl	$8, %ebp
	addl	$8, %r13d
	xorl	%eax, %eax
	cmpl	%r15d, %ebp
	movl	%r15d, %ecx
	cmovbl	%eax, %ecx
	subl	%ecx, %ebp
	cmpl	%r15d, %r13d
	movl	%r15d, %ecx
	cmovbl	%eax, %ecx
	subl	%ecx, %r13d
	decl	(%r14)
	addl	$-8, %edi
	jns	.LBB20_16
	jmp	.LBB20_35
.LBB20_1:                               # %if.then
	movzbl	%al, %eax
	movzbl	%cl, %ecx
.LBB20_2:                               # %cleanup
	cmpl	%eax, %ecx
	setb	%al
.LBB20_35:                              # %cleanup
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB20_18:                              # %if.then221
	movzwl	%ax, %eax
	movzwl	%cx, %ecx
	jmp	.LBB20_2
.LBB20_20:                              # %if.then238
	movzbl	%dl, %eax
	movzbl	%sil, %ecx
	jmp	.LBB20_2
.Lfunc_end20:
	.size	mainGtU, .Lfunc_end20-mainGtU
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI21_0:
	.quad	4643211215818981376     # double 256
.LCPI21_1:
	.quad	4679240012837945344     # double 65536
.LCPI21_2:
	.quad	4715268809856909312     # double 16777216
.LCPI21_3:
	.quad	4751297606875873280     # double 4294967296
.LCPI21_4:
	.quad	4787326403894837248     # double 1099511627776
.LCPI21_5:
	.quad	4823355200913801216     # double 281474976710656
.LCPI21_6:
	.quad	4859383997932765184     # double 72057594037927936
.LCPI21_7:
	.quad	4620693217682128896     # double 8
.LCPI21_8:
	.quad	4607182418800017408     # double 1
.LCPI21_9:
	.quad	4636737291354636288     # double 100
	.text
	.globl	compressStream
	.align	16, 0x90
	.type	compressStream,@function
compressStream:                         # @compressStream
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp132:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp133:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp134:
	.cfi_def_cfa_offset 32
	subq	$5152, %rsp             # imm = 0x1420
.Ltmp135:
	.cfi_def_cfa_offset 5184
.Ltmp136:
	.cfi_offset %rbx, -32
.Ltmp137:
	.cfi_offset %r14, -24
.Ltmp138:
	.cfi_offset %rbp, -16
	movl	%esi, %r14d
	movl	%edi, %ebp
	movl	blockSize100k(%rip), %edx
	movl	verbosity(%rip), %ecx
	movl	workFactor(%rip), %r8d
	leaq	124(%rsp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, %rbx
	cmpl	$0, 124(%rsp)
	jne	.LBB21_9
# BB#1:                                 # %if.end
	cmpl	$2, verbosity(%rip)
	jge	.LBB21_2
.LBB21_3:                               # %while.body.preheader
	cmpl	$0, "PinFlag-312."(%rip)
	jne	.LBB21_5
# BB#4:
	movl	$.L__unnamed_86, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$13, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movl	$1, "PinFlag-312."(%rip)
	.align	16, 0x90
.LBB21_5:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movl	%ebp, %edi
	callq	spec_getc
	cmpl	$-1, %eax
	je	.LBB21_13
# BB#6:                                 # %if.end7
                                        #   in Loop: Header=BB21_5 Depth=1
	movzbl	%al, %edi
	movl	%ebp, %esi
	callq	spec_ungetc
	leaq	144(%rsp), %rdi
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	movl	%ebp, %ecx
	callq	spec_fread
	testl	%eax, %eax
	jle	.LBB21_8
# BB#7:                                 # %if.then10
                                        #   in Loop: Header=BB21_5 Depth=1
	leaq	124(%rsp), %rdi
	leaq	144(%rsp), %rdx
	movq	%rbx, %rsi
	movl	%eax, %ecx
	callq	BZ2_bzWrite
.LBB21_8:                               # %if.end12
                                        #   in Loop: Header=BB21_5 Depth=1
	cmpl	$0, 124(%rsp)
	je	.LBB21_5
.LBB21_9:                               # %errhandler
	leaq	128(%rsp), %rax
	movq	%rax, (%rsp)
	leaq	120(%rsp), %rdi
	leaq	140(%rsp), %rcx
	leaq	136(%rsp), %r8
	leaq	132(%rsp), %r9
	movl	$1, %edx
	movq	%rbx, %rsi
	callq	BZ2_bzWriteClose64
	movl	124(%rsp), %eax
	cmpl	$-3, %eax
	je	.LBB21_19
# BB#10:                                # %errhandler
	cmpl	$-6, %eax
	je	.LBB21_20
# BB#11:                                # %errhandler
	cmpl	$-9, %eax
	jne	.LBB21_21
# BB#12:                                # %sw.bb
	callq	configError
.LBB21_13:                              # %while.end
	leaq	128(%rsp), %rax
	movq	%rax, (%rsp)
	leaq	124(%rsp), %rdi
	leaq	140(%rsp), %rcx
	leaq	136(%rsp), %r8
	leaq	132(%rsp), %r9
	xorl	%edx, %edx
	movq	%rbx, %rsi
	callq	BZ2_bzWriteClose64
	cmpl	$0, 124(%rsp)
	jne	.LBB21_9
# BB#14:                                # %if.end21
	cmpl	$1, %r14d
	je	.LBB21_16
# BB#15:                                # %if.then23
	movl	$0, outputHandleJustInCase(%rip)
.LBB21_16:                              # %if.end27
	movl	$0, outputHandleJustInCase(%rip)
	cmpl	$0, verbosity(%rip)
	jg	.LBB21_17
.LBB21_23:                              # %cleanup
	addq	$5152, %rsp             # imm = 0x1420
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.LBB21_2:                               # %if.then2
	movq	stderr(%rip), %rsi
	movl	$10, %edi
	callq	fputc
	jmp	.LBB21_3
.LBB21_17:                              # %if.then32
	movl	140(%rsp), %esi
	movl	136(%rsp), %edx
	movl	%edx, %eax
	orl	%esi, %eax
	jne	.LBB21_22
# BB#18:                                # %if.then35
	movq	stderr(%rip), %rcx
	movl	$.L.str.1.16, %edi
	movl	$21, %esi
	movl	$1, %edx
	callq	fwrite
	jmp	.LBB21_23
.LBB21_22:                              # %if.else
	movl	%edx, %r8d
	shrl	$24, %r8d
	movb	%r8b, 47(%rsp)
	movl	%edx, %r9d
	shrl	$16, %r9d
	movb	%r9b, 46(%rsp)
	movl	%edx, %r11d
	shrl	$8, %r11d
	movb	%r11b, 45(%rsp)
	movb	%dl, 44(%rsp)
	movl	%esi, %edi
	shrl	$24, %edi
	movb	%dil, 43(%rsp)
	movl	%esi, %ebp
	shrl	$16, %ebp
	movb	%bpl, 42(%rsp)
	movl	%esi, %ecx
	shrl	$8, %ecx
	movb	%cl, 41(%rsp)
	movb	%sil, 40(%rsp)
	movzbl	%sil, %eax
	cvtsi2sdl	%eax, %xmm8
	movl	132(%rsp), %ebx
	movzbl	%cl, %ecx
	cvtsi2sdl	%ecx, %xmm10
	movl	128(%rsp), %esi
	movzbl	%bpl, %ecx
	cvtsi2sdl	%ecx, %xmm11
	movl	%esi, %r10d
	shrl	$24, %r10d
	movb	%r10b, 39(%rsp)
	cvtsi2sdl	%edi, %xmm12
	movl	%esi, %ebp
	shrl	$16, %ebp
	movb	%bpl, 38(%rsp)
	movzbl	%dl, %ecx
	cvtsi2sdl	%ecx, %xmm13
	movl	%esi, %edx
	shrl	$8, %edx
	movb	%dl, 37(%rsp)
	movb	%sil, 36(%rsp)
	movzbl	%r11b, %ecx
	cvtsi2sdl	%ecx, %xmm5
	movl	%ebx, %ecx
	shrl	$24, %ecx
	movb	%cl, 35(%rsp)
	movzbl	%r9b, %edi
	cvtsi2sdl	%edi, %xmm6
	movl	%ebx, %edi
	shrl	$16, %edi
	movb	%dil, 34(%rsp)
	cvtsi2sdl	%r8d, %xmm15
	movl	%ebx, %eax
	shrl	$8, %eax
	movb	%al, 33(%rsp)
	movb	%bl, 32(%rsp)
	movzbl	%bl, %ebx
	cvtsi2sdl	%ebx, %xmm9
	movzbl	%al, %eax
	cvtsi2sdl	%eax, %xmm0
	movzbl	%dil, %eax
	cvtsi2sdl	%eax, %xmm7
	cvtsi2sdl	%ecx, %xmm1
	movzbl	%sil, %eax
	cvtsi2sdl	%eax, %xmm2
	movzbl	%dl, %eax
	cvtsi2sdl	%eax, %xmm3
	movzbl	%bpl, %eax
	cvtsi2sdl	%eax, %xmm4
	movsd	.LCPI21_0(%rip), %xmm14 # xmm14 = mem[0],zero
	mulsd	%xmm14, %xmm10
	addsd	%xmm8, %xmm10
	movsd	.LCPI21_1(%rip), %xmm8  # xmm8 = mem[0],zero
	mulsd	%xmm8, %xmm11
	addsd	%xmm10, %xmm11
	movsd	.LCPI21_2(%rip), %xmm10 # xmm10 = mem[0],zero
	mulsd	%xmm10, %xmm12
	addsd	%xmm11, %xmm12
	movsd	.LCPI21_3(%rip), %xmm11 # xmm11 = mem[0],zero
	mulsd	%xmm11, %xmm13
	addsd	%xmm12, %xmm13
	movsd	.LCPI21_4(%rip), %xmm12 # xmm12 = mem[0],zero
	mulsd	%xmm12, %xmm5
	addsd	%xmm13, %xmm5
	movsd	.LCPI21_5(%rip), %xmm13 # xmm13 = mem[0],zero
	mulsd	%xmm13, %xmm6
	addsd	%xmm5, %xmm6
	movsd	.LCPI21_6(%rip), %xmm5  # xmm5 = mem[0],zero
	mulsd	%xmm5, %xmm15
	addsd	%xmm6, %xmm15
	movsd	%xmm15, 24(%rsp)        # 8-byte Spill
	xorps	%xmm6, %xmm6
	cvtsi2sdl	%r10d, %xmm6
	mulsd	%xmm14, %xmm0
	addsd	%xmm9, %xmm0
	mulsd	%xmm8, %xmm7
	addsd	%xmm0, %xmm7
	mulsd	%xmm10, %xmm1
	addsd	%xmm7, %xmm1
	mulsd	%xmm11, %xmm2
	addsd	%xmm1, %xmm2
	mulsd	%xmm12, %xmm3
	addsd	%xmm2, %xmm3
	mulsd	%xmm13, %xmm4
	addsd	%xmm3, %xmm4
	mulsd	%xmm5, %xmm6
	addsd	%xmm4, %xmm6
	movsd	%xmm6, 16(%rsp)         # 8-byte Spill
	leaq	80(%rsp), %rbx
	leaq	40(%rsp), %rsi
	movq	%rbx, %rdi
	callq	uInt64_toAscii
	leaq	48(%rsp), %rbp
	leaq	32(%rsp), %rsi
	movq	%rbp, %rdi
	callq	uInt64_toAscii
	movq	stderr(%rip), %rdi
	movsd	24(%rsp), %xmm2         # 8-byte Reload
                                        # xmm2 = mem[0],zero
	movapd	%xmm2, %xmm0
	movsd	16(%rsp), %xmm3         # 8-byte Reload
                                        # xmm3 = mem[0],zero
	divsd	%xmm3, %xmm0
	movsd	.LCPI21_7(%rip), %xmm1  # xmm1 = mem[0],zero
	mulsd	%xmm3, %xmm1
	divsd	%xmm2, %xmm1
	divsd	%xmm2, %xmm3
	movsd	.LCPI21_8(%rip), %xmm2  # xmm2 = mem[0],zero
	subsd	%xmm3, %xmm2
	mulsd	.LCPI21_9(%rip), %xmm2
	movl	$.L.str.2.17, %esi
	movb	$3, %al
	movq	%rbx, %rdx
	movq	%rbp, %rcx
	callq	fprintf
	jmp	.LBB21_23
.LBB21_19:                              # %sw.bb49
	callq	outOfMemory
.LBB21_20:                              # %errhandler_io
	callq	ioError
.LBB21_21:                              # %sw.default
	movl	$.L.str.3.22, %edi
	callq	panic
.Lfunc_end21:
	.size	compressStream, .Lfunc_end21-compressStream
	.cfi_endproc

	.align	16, 0x90
	.type	uInt64_toAscii,@function
uInt64_toAscii:                         # @uInt64_toAscii
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp139:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp140:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp141:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp142:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp143:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp144:
	.cfi_def_cfa_offset 56
.Ltmp145:
	.cfi_offset %rbx, -56
.Ltmp146:
	.cfi_offset %r12, -48
.Ltmp147:
	.cfi_offset %r13, -40
.Ltmp148:
	.cfi_offset %r14, -32
.Ltmp149:
	.cfi_offset %r15, -24
.Ltmp150:
	.cfi_offset %rbp, -16
	movq	(%rsi), %rdx
	movq	%rdx, %rbp
	shrq	$8, %rbp
	movq	%rdx, %rsi
	shrq	$16, %rsi
	movq	%rdx, %rbx
	shrq	$24, %rbx
	movq	%rdx, %r13
	shrq	$32, %r13
	movq	%rdx, %r12
	shrq	$40, %r12
	movq	%rdx, %r14
	shrq	$48, %r14
	movq	%rdx, %r11
	shrq	$56, %r11
	xorl	%eax, %eax
	movb	$10, %r8b
	movl	$3435973837, %r10d      # imm = 0xCCCCCCCD
	.align	16, 0x90
.LBB22_1:                               # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %r9
	movzbl	%r11b, %r15d
	imull	$205, %r15d, %r11d
	andl	$63488, %r11d           # imm = 0xF800
	shrl	$11, %r11d
	movb	%r11b, %al
	mulb	%r8b
	movb	%r15b, %cl
	subb	%al, %cl
	movzbl	%cl, %eax
	shll	$8, %eax
	movzbl	%r14b, %ecx
	orl	%eax, %ecx
	movq	%rcx, %r14
	imulq	%r10, %r14
	shrq	$35, %r14
	leal	(%r14,%r14), %eax
	leal	(%rax,%rax,4), %eax
	subl	%eax, %ecx
	shll	$8, %ecx
	movzbl	%r12b, %eax
	orl	%ecx, %eax
	movq	%rax, %r12
	imulq	%r10, %r12
	shrq	$35, %r12
	leal	(%r12,%r12), %ecx
	leal	(%rcx,%rcx,4), %ecx
	subl	%ecx, %eax
	shll	$8, %eax
	movzbl	%r13b, %ecx
	orl	%eax, %ecx
	movq	%rcx, %r13
	imulq	%r10, %r13
	shrq	$35, %r13
	leal	(%r13,%r13), %eax
	leal	(%rax,%rax,4), %eax
	subl	%eax, %ecx
	shll	$8, %ecx
	movzbl	%bl, %eax
	orl	%ecx, %eax
	movq	%rax, %rbx
	imulq	%r10, %rbx
	shrq	$35, %rbx
	leal	(%rbx,%rbx), %ecx
	leal	(%rcx,%rcx,4), %ecx
	subl	%ecx, %eax
	shll	$8, %eax
	movzbl	%sil, %ecx
	orl	%eax, %ecx
	movq	%rcx, %rsi
	imulq	%r10, %rsi
	shrq	$35, %rsi
	leal	(%rsi,%rsi), %eax
	leal	(%rax,%rax,4), %eax
	subl	%eax, %ecx
	shll	$8, %ecx
	movzbl	%bpl, %eax
	orl	%ecx, %eax
	movq	%rax, %rbp
	imulq	%r10, %rbp
	shrq	$35, %rbp
	leal	(%rbp,%rbp), %ecx
	leal	(%rcx,%rcx,4), %ecx
	subl	%ecx, %eax
	shll	$8, %eax
	movzbl	%dl, %ecx
	orl	%eax, %ecx
	movq	%rcx, %rdx
	imulq	%r10, %rdx
	shrq	$35, %rdx
	leal	(%rdx,%rdx), %eax
	leal	(%rax,%rax,4), %eax
	subl	%eax, %ecx
	orl	$48, %ecx
	leaq	1(%r9), %rax
	testb	%dl, %dl
	movb	%cl, -40(%rsp,%r9)
	jne	.LBB22_1
# BB#2:                                 # %for.cond.i
                                        #   in Loop: Header=BB22_1 Depth=1
	xorl	%edx, %edx
	testb	%bpl, %bpl
	jne	.LBB22_1
# BB#3:                                 # %for.cond.1.i
                                        #   in Loop: Header=BB22_1 Depth=1
	xorl	%ebp, %ebp
	testb	%sil, %sil
	movl	$0, %edx
	jne	.LBB22_1
# BB#4:                                 # %for.cond.2.i
                                        #   in Loop: Header=BB22_1 Depth=1
	xorl	%esi, %esi
	testb	%bl, %bl
	movl	$0, %ebp
	movl	$0, %edx
	jne	.LBB22_1
# BB#5:                                 # %for.cond.3.i
                                        #   in Loop: Header=BB22_1 Depth=1
	xorl	%ebx, %ebx
	testb	%r13b, %r13b
	movl	$0, %esi
	movl	$0, %ebp
	movl	$0, %edx
	jne	.LBB22_1
# BB#6:                                 # %for.cond.4.i
                                        #   in Loop: Header=BB22_1 Depth=1
	xorl	%r13d, %r13d
	testb	%r12b, %r12b
	movl	$0, %ebx
	movl	$0, %esi
	movl	$0, %ebp
	movl	$0, %edx
	jne	.LBB22_1
# BB#7:                                 # %for.cond.5.i
                                        #   in Loop: Header=BB22_1 Depth=1
	xorl	%r12d, %r12d
	testb	%r14b, %r14b
	movl	$0, %r13d
	movl	$0, %ebx
	movl	$0, %esi
	movl	$0, %ebp
	movl	$0, %edx
	jne	.LBB22_1
# BB#8:                                 # %uInt64_isZero.exit
                                        #   in Loop: Header=BB22_1 Depth=1
	xorl	%r14d, %r14d
	cmpl	$9, %r15d
	movl	$0, %r12d
	movl	$0, %r13d
	movl	$0, %ebx
	movl	$0, %esi
	movl	$0, %ebp
	movl	$0, %edx
	ja	.LBB22_1
# BB#9:                                 # %do.end
	cltq
	movb	$0, (%rdi,%rax)
	testl	%r9d, %r9d
	js	.LBB22_16
# BB#10:                                # %for.body.lr.ph
	movabsq	$-4294967296, %rax      # imm = 0xFFFFFFFF00000000
	leal	1(%r9), %ecx
	xorl	%edx, %edx
	testb	$3, %cl
	je	.LBB22_13
# BB#11:                                # %for.body.prol.preheader
	movq	%r9, %rbp
	shlq	$32, %rbp
	movb	%r9b, %dl
	incb	%dl
	movzbl	%dl, %esi
	andl	$3, %esi
	xorl	%edx, %edx
	.align	16, 0x90
.LBB22_12:                              # %for.body.prol
                                        # =>This Inner Loop Header: Depth=1
	movq	%rbp, %rcx
	sarq	$32, %rcx
	movb	-40(%rsp,%rcx), %cl
	movb	%cl, (%rdi,%rdx)
	incq	%rdx
	addq	%rax, %rbp
	cmpl	%edx, %esi
	jne	.LBB22_12
.LBB22_13:                              # %for.body.lr.ph.split
	cmpl	$3, %r9d
	jb	.LBB22_16
# BB#14:                                # %for.body.lr.ph.split.split
	leal	1(%r9), %ecx
	subl	%edx, %ecx
	leaq	3(%rdx,%rdi), %rsi
	shlq	$32, %r9
	shlq	$32, %rdx
	subq	%rdx, %r9
	movabsq	$-8589934592, %rdx      # imm = 0xFFFFFFFE00000000
	movabsq	$-12884901888, %rdi     # imm = 0xFFFFFFFD00000000
	movabsq	$-17179869184, %rbp     # imm = 0xFFFFFFFC00000000
	.align	16, 0x90
.LBB22_15:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	%r9, %rbx
	sarq	$32, %rbx
	movb	-40(%rsp,%rbx), %bl
	movb	%bl, -3(%rsi)
	leaq	(%r9,%rax), %rbx
	sarq	$32, %rbx
	movb	-40(%rsp,%rbx), %bl
	movb	%bl, -2(%rsi)
	leaq	(%r9,%rdx), %rbx
	sarq	$32, %rbx
	movb	-40(%rsp,%rbx), %bl
	movb	%bl, -1(%rsi)
	leaq	(%r9,%rdi), %rbx
	sarq	$32, %rbx
	movb	-40(%rsp,%rbx), %bl
	movb	%bl, (%rsi)
	addq	$4, %rsi
	addq	%rbp, %r9
	addl	$-4, %ecx
	jne	.LBB22_15
.LBB22_16:                              # %for.end
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end22:
	.size	uInt64_toAscii, .Lfunc_end22-uInt64_toAscii
	.cfi_endproc

	.align	16, 0x90
	.type	configError,@function
configError:                            # @configError
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
.Ltmp151:
	.cfi_def_cfa_offset 16
	movq	stderr(%rip), %rcx
	movl	$.L.str.17.18, %edi
	movl	$235, %esi
	movl	$1, %edx
	callq	fwrite
	movl	$0, exitValue(%rip)
	xorl	%edi, %edi
	callq	exit
.Lfunc_end23:
	.size	configError, .Lfunc_end23-configError
	.cfi_endproc

	.align	16, 0x90
	.type	outOfMemory,@function
outOfMemory:                            # @outOfMemory
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
.Ltmp152:
	.cfi_def_cfa_offset 16
	movq	stderr(%rip), %rdi
	movq	progName(%rip), %rdx
	movl	$.L.str.16.19, %esi
	xorl	%eax, %eax
	callq	fprintf
	cmpb	$0, noisy(%rip)
	je	.LBB24_2
# BB#1:                                 # %if.then.i
	movq	stderr(%rip), %rdi
	movl	$.L.str.11.20, %esi
	movl	$inName, %edx
	movl	$outName, %ecx
	xorl	%eax, %eax
	callq	fprintf
.LBB24_2:                               # %showFileNames.exit
	callq	cleanUpAndFail
.Lfunc_end24:
	.size	outOfMemory, .Lfunc_end24-outOfMemory
	.cfi_endproc

	.align	16, 0x90
	.type	cleanUpAndFail,@function
cleanUpAndFail:                         # @cleanUpAndFail
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
.Ltmp153:
	.cfi_def_cfa_offset 16
	movl	$0, exitValue(%rip)
	xorl	%edi, %edi
	callq	exit
.Lfunc_end25:
	.size	cleanUpAndFail, .Lfunc_end25-cleanUpAndFail
	.cfi_endproc

	.align	16, 0x90
	.type	ioError,@function
ioError:                                # @ioError
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
.Ltmp154:
	.cfi_def_cfa_offset 16
	movq	stderr(%rip), %rdi
	movq	progName(%rip), %rdx
	movl	$.L.str.15.21, %esi
	xorl	%eax, %eax
	callq	fprintf
	movq	progName(%rip), %rdi
	callq	perror
	cmpb	$0, noisy(%rip)
	je	.LBB26_2
# BB#1:                                 # %if.then.i
	movq	stderr(%rip), %rdi
	movl	$.L.str.11.20, %esi
	movl	$inName, %edx
	movl	$outName, %ecx
	xorl	%eax, %eax
	callq	fprintf
.LBB26_2:                               # %showFileNames.exit
	callq	cleanUpAndFail
.Lfunc_end26:
	.size	ioError, .Lfunc_end26-ioError
	.cfi_endproc

	.align	16, 0x90
	.type	panic,@function
panic:                                  # @panic
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
.Ltmp155:
	.cfi_def_cfa_offset 16
	movq	%rdi, %rcx
	movq	stderr(%rip), %rdi
	movq	progName(%rip), %rdx
	movl	$.L.str.10, %esi
	xorl	%eax, %eax
	callq	fprintf
	cmpb	$0, noisy(%rip)
	je	.LBB27_2
# BB#1:                                 # %if.then.i
	movq	stderr(%rip), %rdi
	movl	$.L.str.11.20, %esi
	movl	$inName, %edx
	movl	$outName, %ecx
	xorl	%eax, %eax
	callq	fprintf
.LBB27_2:                               # %showFileNames.exit
	callq	cleanUpAndFail
.Lfunc_end27:
	.size	panic, .Lfunc_end27-panic
	.cfi_endproc

	.globl	uncompressStream
	.align	16, 0x90
	.type	uncompressStream,@function
uncompressStream:                       # @uncompressStream
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp156:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp157:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp158:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp159:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp160:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp161:
	.cfi_def_cfa_offset 56
	subq	$10072, %rsp            # imm = 0x2758
.Ltmp162:
	.cfi_def_cfa_offset 10128
.Ltmp163:
	.cfi_offset %rbx, -56
.Ltmp164:
	.cfi_offset %r12, -48
.Ltmp165:
	.cfi_offset %r13, -40
.Ltmp166:
	.cfi_offset %r14, -32
.Ltmp167:
	.cfi_offset %r15, -24
.Ltmp168:
	.cfi_offset %rbp, -16
	movl	%esi, %r15d
	movl	%edi, %r12d
	movl	$0, 44(%rsp)
	movl	verbosity(%rip), %edx
	movzbl	smallMode(%rip), %ecx
	leaq	10068(%rsp), %rdi
	leaq	48(%rsp), %r8
	xorl	%r9d, %r9d
	movl	%r12d, %esi
	callq	BZ2_bzReadOpen
	movq	%rax, %rbx
	testq	%rbx, %rbx
	je	.LBB28_1
# BB#2:                                 # %entry
	movl	10068(%rsp), %eax
	testl	%eax, %eax
	jne	.LBB28_1
# BB#3:                                 # %if.end.preheader
	cmpl	$0, "PinFlag-39."(%rip)
	jne	.LBB28_5
# BB#4:
	movl	$.L__unnamed_87, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$108, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movl	$1, "PinFlag-39."(%rip)
.LBB28_5:
	xorl	%eax, %eax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	leaq	10068(%rsp), %rbp
	leaq	5056(%rsp), %r13
	leaq	32(%rsp), %r14
.LBB28_6:                               # %if.end
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_8 Depth 2
                                        #     Child Loop BB28_25 Depth 2
                                        #     Child Loop BB28_30 Depth 2
                                        #     Child Loop BB28_34 Depth 2
	movq	24(%rsp), %rax          # 8-byte Reload
	incl	%eax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	cmpl	$0, "PinFlag-39.0"(%rip)
	movl	$0, %ecx
	jne	.LBB28_8
# BB#7:                                 #   in Loop: Header=BB28_6 Depth=1
	movl	$.L__unnamed_88, %edi
	movl	$1, %esi
	movl	$2, %edx
	movl	$16, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-39.0"(%rip)
	xorl	%ecx, %ecx
	jmp	.LBB28_8
	.align	16, 0x90
.LBB28_15:                              # %if.then21
                                        #   in Loop: Header=BB28_8 Depth=2
	movl	$1, %esi
	movq	%r13, %rdi
	movl	%eax, %edx
	movl	%r15d, %ecx
	callq	spec_fwrite
	movl	10068(%rsp), %ecx
.LBB28_8:                               # %while.cond4
                                        #   Parent Loop BB28_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testl	%ecx, %ecx
	jne	.LBB28_9
# BB#12:                                # %while.body7
                                        #   in Loop: Header=BB28_8 Depth=2
	movl	$5000, %ecx             # imm = 0x1388
	movq	%rbp, %rdi
	movq	%rbx, %rsi
	movq	%r13, %rdx
	callq	BZ2_bzRead
	movl	10068(%rsp), %ecx
	cmpl	$-5, %ecx
	je	.LBB28_47
# BB#13:                                # %if.end13
                                        #   in Loop: Header=BB28_8 Depth=2
	testl	%eax, %eax
	jle	.LBB28_8
# BB#14:                                # %if.end13
                                        #   in Loop: Header=BB28_8 Depth=2
	movl	%ecx, %edx
	orl	$4, %edx
	cmpl	$4, %edx
	je	.LBB28_15
	jmp	.LBB28_8
	.align	16, 0x90
.LBB28_9:                               # %while.cond4
                                        #   in Loop: Header=BB28_6 Depth=1
	cmpl	$4, %ecx
	jne	.LBB28_39
# BB#10:                                # %if.end28
                                        #   in Loop: Header=BB28_6 Depth=1
	movq	%rbp, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	leaq	44(%rsp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, 10068(%rsp)
	jne	.LBB28_11
# BB#16:                                # %if.end32
                                        #   in Loop: Header=BB28_6 Depth=1
	movslq	44(%rsp), %rbp
	testq	%rbp, %rbp
	jle	.LBB28_35
# BB#17:                                # %for.body.preheader
                                        #   in Loop: Header=BB28_6 Depth=1
	movq	32(%rsp), %rdi
	cmpl	$32, %ebp
	movl	$0, %r14d
	jb	.LBB28_32
# BB#18:                                # %min.iters.checked
                                        #   in Loop: Header=BB28_6 Depth=1
	movq	%rbp, %r8
	andq	$-32, %r8
	movl	$0, %r14d
	je	.LBB28_32
# BB#19:                                # %vector.memcheck
                                        #   in Loop: Header=BB28_6 Depth=1
	leaq	-1(%rdi,%rbp), %rax
	leaq	48(%rsp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB28_21
# BB#20:                                # %vector.memcheck
                                        #   in Loop: Header=BB28_6 Depth=1
	leaq	47(%rsp), %rax
	leaq	(%rax,%rbp), %rax
	cmpq	%rax, %rdi
	movl	$0, %r14d
	jbe	.LBB28_32
.LBB28_21:                              # %vector.body.preheader
                                        #   in Loop: Header=BB28_6 Depth=1
	leaq	-32(%rbp), %rcx
	movq	%rbp, 8(%rsp)           # 8-byte Spill
	movl	%ecx, %eax
	shrl	$5, %eax
	incl	%eax
	testb	$3, %al
	movl	$0, %ebp
	je	.LBB28_26
# BB#22:                                # %vector.body.prol.preheader
                                        #   in Loop: Header=BB28_6 Depth=1
	movq	8(%rsp), %rbp           # 8-byte Reload
	leal	-32(%rbp), %esi
	shrl	$5, %esi
	incl	%esi
	andl	$3, %esi
	cmpl	$0, "PinFlag-39.1"(%rip)
	jne	.LBB28_24
# BB#23:                                #   in Loop: Header=BB28_6 Depth=1
	decq	%rsi
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movl	$.L__unnamed_89, %edi
	movl	$6, %edx
	movq	%rcx, (%rsp)            # 8-byte Spill
	movl	$18, %ecx
	movq	%r8, %r14
	movl	$1, %r8d
	callq	Pin
	movq	(%rsp), %rcx            # 8-byte Reload
	movq	%r14, %r8
	movq	16(%rsp), %rdi          # 8-byte Reload
	movl	$1, "PinFlag-39.1"(%rip)
.LBB28_24:                              #   in Loop: Header=BB28_6 Depth=1
	leal	-32(%rbp), %eax
	shrl	$5, %eax
	incl	%eax
	andl	$3, %eax
	negq	%rax
	xorl	%ebp, %ebp
	.align	16, 0x90
.LBB28_25:                              # %vector.body.prol
                                        #   Parent Loop BB28_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movups	(%rdi,%rbp), %xmm0
	movups	16(%rdi,%rbp), %xmm1
	movaps	%xmm0, 48(%rsp,%rbp)
	movaps	%xmm1, 64(%rsp,%rbp)
	addq	$32, %rbp
	incq	%rax
	jne	.LBB28_25
.LBB28_26:                              # %vector.body.preheader.split
                                        #   in Loop: Header=BB28_6 Depth=1
	cmpq	$96, %rcx
	jb	.LBB28_31
# BB#27:                                # %vector.body.preheader.split.split
                                        #   in Loop: Header=BB28_6 Depth=1
	cmpl	$0, "PinFlag-39.2"(%rip)
	leaq	160(%rsp), %r14
	jne	.LBB28_29
# BB#28:                                #   in Loop: Header=BB28_6 Depth=1
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movl	$.L__unnamed_90, %edi
	movl	$1, %esi
	movl	$336, %edx              # imm = 0x150
	movl	$55, %ecx
	movq	%r8, (%rsp)             # 8-byte Spill
	movl	$1, %r8d
	callq	Pin
	movq	(%rsp), %r8             # 8-byte Reload
	movq	16(%rsp), %rdi          # 8-byte Reload
	movl	$1, "PinFlag-39.2"(%rip)
.LBB28_29:                              #   in Loop: Header=BB28_6 Depth=1
	movq	8(%rsp), %rax           # 8-byte Reload
	andq	$-32, %rax
	subq	%rbp, %rax
	leaq	(%r14,%rbp), %rcx
	leaq	112(%rdi,%rbp), %rdx
	.align	16, 0x90
.LBB28_30:                              # %vector.body
                                        #   Parent Loop BB28_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movups	-112(%rdx), %xmm0
	movups	-96(%rdx), %xmm1
	movaps	%xmm0, -112(%rcx)
	movaps	%xmm1, -96(%rcx)
	movups	-80(%rdx), %xmm0
	movups	-64(%rdx), %xmm1
	movaps	%xmm0, -80(%rcx)
	movaps	%xmm1, -64(%rcx)
	movups	-48(%rdx), %xmm0
	movups	-32(%rdx), %xmm1
	movaps	%xmm0, -48(%rcx)
	movaps	%xmm1, -32(%rcx)
	movups	-16(%rdx), %xmm0
	movups	(%rdx), %xmm1
	movaps	%xmm0, -16(%rcx)
	movaps	%xmm1, (%rcx)
	subq	$-128, %rcx
	subq	$-128, %rdx
	addq	$-128, %rax
	jne	.LBB28_30
.LBB28_31:                              # %middle.block
                                        #   in Loop: Header=BB28_6 Depth=1
	movq	8(%rsp), %rbp           # 8-byte Reload
	cmpq	%r8, %rbp
	movq	%r8, %r14
	je	.LBB28_35
.LBB28_32:                              # %for.body.preheader244
                                        #   in Loop: Header=BB28_6 Depth=1
	leaq	1(%r14), %rsi
	cmpq	%rbp, %rsi
	cmovlq	%rbp, %rsi
	cmpl	$0, "PinFlag-39.3"(%rip)
	jne	.LBB28_34
# BB#33:                                #   in Loop: Header=BB28_6 Depth=1
	decq	%rsi
	subq	%r14, %rsi
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movl	$.L__unnamed_91, %edi
	xorl	%edx, %edx
	movl	$8, %ecx
	movl	$1, %r8d
	callq	Pin
	movq	16(%rsp), %rdi          # 8-byte Reload
	movl	$1, "PinFlag-39.3"(%rip)
	.align	16, 0x90
.LBB28_34:                              # %for.body
                                        #   Parent Loop BB28_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movb	(%rdi,%r14), %al
	movb	%al, 48(%rsp,%r14)
	incq	%r14
	cmpq	%rbp, %r14
	jl	.LBB28_34
.LBB28_35:                              # %for.end
                                        #   in Loop: Header=BB28_6 Depth=1
	leaq	10068(%rsp), %rbp
	movq	%rbp, %rdi
	movq	%rbx, %rsi
	callq	BZ2_bzReadClose
	cmpl	$0, 10068(%rsp)
	jne	.LBB28_70
# BB#36:                                # %if.end41
                                        #   in Loop: Header=BB28_6 Depth=1
	movl	44(%rsp), %r9d
	testl	%r9d, %r9d
	leaq	48(%rsp), %rbx
	jne	.LBB28_37
# BB#41:                                # %land.lhs.true44
                                        #   in Loop: Header=BB28_6 Depth=1
	movl	%r12d, %edi
	callq	spec_getc
	cmpl	$-1, %eax
	je	.LBB28_43
# BB#42:                                # %myfeof.exit.thread
                                        #   in Loop: Header=BB28_6 Depth=1
	movzbl	%al, %edi
	movl	%r12d, %esi
	callq	spec_ungetc
	movl	44(%rsp), %r9d
.LBB28_37:                              # %while.body.backedge
                                        #   in Loop: Header=BB28_6 Depth=1
	movl	verbosity(%rip), %edx
	movzbl	smallMode(%rip), %ecx
	movq	%rbp, %rdi
	movl	%r12d, %esi
	movq	%rbx, %r8
	callq	BZ2_bzReadOpen
	movq	%rax, %rbx
	testq	%rbx, %rbx
	je	.LBB28_39
# BB#38:                                # %while.body.backedge
                                        #   in Loop: Header=BB28_6 Depth=1
	movl	10068(%rsp), %eax
	testl	%eax, %eax
	leaq	32(%rsp), %r14
	je	.LBB28_6
	jmp	.LBB28_39
.LBB28_1:
	xorl	%eax, %eax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	jmp	.LBB28_39
.LBB28_47:                              # %trycat
	cmpb	$0, forceOverwrite(%rip)
	je	.LBB28_39
# BB#48:                                # %if.then72
	movl	%r12d, %edi
	callq	spec_rewind
	movl	%r12d, %edi
	callq	spec_getc
	cmpl	$-1, %eax
	je	.LBB28_43
# BB#49:
	leaq	5056(%rsp), %rbx
	.align	16, 0x90
.LBB28_50:                              # %if.end79
                                        # =>This Inner Loop Header: Depth=1
	movzbl	%al, %edi
	movl	%r12d, %esi
	callq	spec_ungetc
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	movq	%rbx, %rdi
	movl	%r12d, %ecx
	callq	spec_fread
	testl	%eax, %eax
	jle	.LBB28_52
# BB#51:                                # %if.then84
                                        #   in Loop: Header=BB28_50 Depth=1
	movl	$1, %esi
	movq	%rbx, %rdi
	movl	%eax, %edx
	movl	%r15d, %ecx
	callq	spec_fwrite
.LBB28_52:                              # %while.body75.backedge
                                        #   in Loop: Header=BB28_50 Depth=1
	movl	%r12d, %edi
	callq	spec_getc
	cmpl	$-1, %eax
	jne	.LBB28_50
.LBB28_43:                              # %if.end57
	cmpl	$1, %r15d
	je	.LBB28_45
# BB#44:                                # %if.then60
	movl	$0, outputHandleJustInCase(%rip)
.LBB28_45:                              # %if.end65
	movl	$0, outputHandleJustInCase(%rip)
	movb	$1, %bl
	cmpl	$2, verbosity(%rip)
	jl	.LBB28_69
# BB#46:                                # %if.then68
	movq	stderr(%rip), %rcx
	movl	$.L.str.6.26, %edi
	movl	$5, %esi
	movl	$1, %edx
	callq	fwrite
	jmp	.LBB28_69
.LBB28_39:                              # %errhandler
	leaq	10064(%rsp), %rdi
	movq	%rbx, %rsi
	callq	BZ2_bzReadClose
	movl	10068(%rsp), %eax
	addl	$9, %eax
	cmpl	$6, %eax
	ja	.LBB28_71
# BB#40:                                # %errhandler
	jmpq	*.LJTI28_0(,%rax,8)
.LBB28_65:                              # %sw.bb94
	movq	24(%rsp), %rax          # 8-byte Reload
	cmpl	$1, %eax
	jne	.LBB28_67
# BB#66:
	xorl	%ebx, %ebx
	jmp	.LBB28_69
.LBB28_67:                              # %if.else
	movb	$1, %bl
	cmpb	$0, noisy(%rip)
	jne	.LBB28_68
.LBB28_69:                              # %cleanup
	movzbl	%bl, %eax
	addq	$10072, %rsp            # imm = 0x2758
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB28_68:                              # %if.then107
	movq	stderr(%rip), %rdi
	movq	progName(%rip), %rdx
	movl	$.L.str.7.30, %esi
	movl	$inName, %ecx
	xorl	%eax, %eax
	callq	fprintf
	jmp	.LBB28_69
.LBB28_11:                              # %if.then31
	movl	$.L.str.5.25, %edi
	callq	panic
.LBB28_70:                              # %if.then40
	movl	$.L.str.5.25, %edi
	callq	panic
.LBB28_53:                              # %sw.bb
	callq	configError
.LBB28_71:                              # %sw.default
	movl	$.L.str.8.31, %edi
	callq	panic
.LBB28_55:                              # %sw.bb91
	movq	stderr(%rip), %rdi
	movq	progName(%rip), %rdx
	movl	$.L.str.12.27, %esi
	xorl	%eax, %eax
	callq	fprintf
	cmpb	$0, noisy(%rip)
	je	.LBB28_58
# BB#56:                                # %showFileNames.exit.i
	movq	stderr(%rip), %rdi
	movl	$.L.str.11.20, %esi
	movl	$inName, %edx
	movl	$outName, %ecx
	xorl	%eax, %eax
	callq	fprintf
	cmpb	$0, noisy(%rip)
	je	.LBB28_58
# BB#57:                                # %if.then.i2.i
	movq	stderr(%rip), %rcx
	movl	$.L.str.13.28, %edi
	movl	$240, %esi
	movl	$1, %edx
	callq	fwrite
.LBB28_58:                              # %cadvise.exit.i
	callq	cleanUpAndFail
.LBB28_59:                              # %sw.bb92
	callq	outOfMemory
.LBB28_60:                              # %sw.bb93
	cmpb	$0, noisy(%rip)
	je	.LBB28_64
# BB#61:                                # %if.then.i
	movq	stderr(%rip), %rdi
	movq	progName(%rip), %rdx
	movl	$.L.str.14.29, %esi
	xorl	%eax, %eax
	callq	fprintf
	movq	progName(%rip), %rdi
	callq	perror
	cmpb	$0, noisy(%rip)
	je	.LBB28_64
# BB#62:                                # %showFileNames.exit.i163
	movq	stderr(%rip), %rdi
	movl	$.L.str.11.20, %esi
	movl	$inName, %edx
	movl	$outName, %ecx
	xorl	%eax, %eax
	callq	fprintf
	cmpb	$0, noisy(%rip)
	je	.LBB28_64
# BB#63:                                # %if.then.i2.i164
	movq	stderr(%rip), %rcx
	movl	$.L.str.13.28, %edi
	movl	$240, %esi
	movl	$1, %edx
	callq	fwrite
.LBB28_64:                              # %if.end.i165
	callq	cleanUpAndFail
.LBB28_54:                              # %errhandler_io
	callq	ioError
.Lfunc_end28:
	.size	uncompressStream, .Lfunc_end28-uncompressStream
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI28_0:
	.quad	.LBB28_53
	.quad	.LBB28_71
	.quad	.LBB28_60
	.quad	.LBB28_54
	.quad	.LBB28_65
	.quad	.LBB28_55
	.quad	.LBB28_59

	.text
	.globl	BZ2_bz__AssertH__fail
	.align	16, 0x90
	.type	BZ2_bz__AssertH__fail,@function
BZ2_bz__AssertH__fail:                  # @BZ2_bz__AssertH__fail
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp169:
	.cfi_def_cfa_offset 16
.Ltmp170:
	.cfi_offset %rbx, -16
	movl	%edi, %ebx
	movq	stderr(%rip), %rdi
	movl	$.L.str.34, %esi
	movl	$.L.str.5.35, %ecx
	xorl	%eax, %eax
	movl	%ebx, %edx
	callq	fprintf
	cmpl	$1007, %ebx             # imm = 0x3EF
	jne	.LBB29_2
# BB#1:                                 # %if.then
	movq	stderr(%rip), %rcx
	movl	$.L.str.1.36, %edi
	movl	$1056, %esi             # imm = 0x420
	movl	$1, %edx
	callq	fwrite
.LBB29_2:                               # %if.end
	xorl	%edi, %edi
	callq	exit
.Lfunc_end29:
	.size	BZ2_bz__AssertH__fail, .Lfunc_end29-BZ2_bz__AssertH__fail
	.cfi_endproc

	.globl	BZ2_bzlibVersion
	.align	16, 0x90
	.type	BZ2_bzlibVersion,@function
BZ2_bzlibVersion:                       # @BZ2_bzlibVersion
	.cfi_startproc
# BB#0:                                 # %entry
	movl	$.L.str.5.35, %eax
	retq
.Lfunc_end30:
	.size	BZ2_bzlibVersion, .Lfunc_end30-BZ2_bzlibVersion
	.cfi_endproc

	.globl	BZ2_bzCompressInit
	.align	16, 0x90
	.type	BZ2_bzCompressInit,@function
BZ2_bzCompressInit:                     # @BZ2_bzCompressInit
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp171:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp172:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp173:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp174:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp175:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp176:
	.cfi_def_cfa_offset 56
	pushq	%rax
.Ltmp177:
	.cfi_def_cfa_offset 64
.Ltmp178:
	.cfi_offset %rbx, -56
.Ltmp179:
	.cfi_offset %r12, -48
.Ltmp180:
	.cfi_offset %r13, -40
.Ltmp181:
	.cfi_offset %r14, -32
.Ltmp182:
	.cfi_offset %r15, -24
.Ltmp183:
	.cfi_offset %rbp, -16
	movl	%esi, %r12d
	movq	%rdi, %r14
	cmpl	$250, %ecx
	movl	$-2, %r13d
	ja	.LBB31_18
# BB#1:                                 # %entry
	testq	%r14, %r14
	je	.LBB31_18
# BB#2:                                 # %entry
	leal	-1(%r12), %eax
	cmpl	$8, %eax
	ja	.LBB31_18
# BB#3:                                 # %if.end9
	testl	%ecx, %ecx
	movl	$30, %r15d
	cmovnel	%ecx, %r15d
	movq	56(%r14), %rax
	testq	%rax, %rax
	jne	.LBB31_5
# BB#4:                                 # %if.then14
	movq	$default_bzalloc, 56(%r14)
	movl	$default_bzalloc, %eax
.LBB31_5:                               # %if.end16
	movl	%edx, 4(%rsp)           # 4-byte Spill
	cmpq	$0, 64(%r14)
	jne	.LBB31_7
# BB#6:                                 # %if.then18
	movq	$default_bzfree, 64(%r14)
.LBB31_7:                               # %if.end20
	movq	72(%r14), %rdi
	movl	$55768, %esi            # imm = 0xD9D8
	movl	$1, %edx
	callq	*%rax
	movq	%rax, %rbx
	movl	$-3, %r13d
	testq	%rbx, %rbx
	je	.LBB31_18
# BB#8:                                 # %if.end25
	movq	%r14, (%rbx)
	xorps	%xmm0, %xmm0
	movups	%xmm0, 24(%rbx)
	movq	$0, 40(%rbx)
	movq	72(%r14), %rdi
	imull	$400000, %r12d, %ebp    # imm = 0x61A80
	movl	$1, %edx
	movl	%ebp, %esi
	callq	*56(%r14)
	movq	%rax, 24(%rbx)
	movq	72(%r14), %rdi
	addl	$136, %ebp
	movl	$1, %edx
	movl	%ebp, %esi
	callq	*56(%r14)
	movq	%rax, 32(%rbx)
	movq	72(%r14), %rdi
	movl	$262148, %esi           # imm = 0x40004
	movl	$1, %edx
	callq	*56(%r14)
	movq	%rax, 40(%rbx)
	movq	24(%rbx), %rsi
	testq	%rsi, %rsi
	je	.LBB31_12
# BB#9:                                 # %lor.lhs.false47
	testq	%rax, %rax
	je	.LBB31_11
# BB#10:                                # %lor.lhs.false47
	movq	32(%rbx), %rax
	testq	%rax, %rax
	je	.LBB31_11
# BB#17:                                # %if.end86
	imull	$100000, %r12d, %ecx    # imm = 0x186A0
	movl	$0, 660(%rbx)
	movl	$2, 12(%rbx)
	movl	$2, 8(%rbx)
	movl	$0, 652(%rbx)
	movl	%r12d, 664(%rbx)
	addl	$-19, %ecx
	movl	%ecx, 112(%rbx)
	movl	4(%rsp), %ecx           # 4-byte Reload
	movl	%ecx, 656(%rbx)
	movl	%r15d, 88(%rbx)
	movq	%rax, 64(%rbx)
	movq	%rsi, 72(%rbx)
	movq	$0, 80(%rbx)
	movq	%rsi, 56(%rbx)
	movq	%rbx, 48(%r14)
	movl	$0, 12(%r14)
	movl	$0, 16(%r14)
	movl	$0, 36(%r14)
	movl	$0, 40(%r14)
	movq	$256, 92(%rbx)          # imm = 0x100
	movl	$0, 108(%rbx)
	movl	$0, 116(%rbx)
	movl	$0, 120(%rbx)
	movl	$-1, 648(%rbx)
	xorps	%xmm0, %xmm0
	movups	%xmm0, 368(%rbx)
	movups	%xmm0, 352(%rbx)
	movups	%xmm0, 336(%rbx)
	movups	%xmm0, 320(%rbx)
	movups	%xmm0, 304(%rbx)
	movups	%xmm0, 288(%rbx)
	movups	%xmm0, 272(%rbx)
	movups	%xmm0, 256(%rbx)
	movups	%xmm0, 240(%rbx)
	movups	%xmm0, 224(%rbx)
	movups	%xmm0, 208(%rbx)
	movups	%xmm0, 192(%rbx)
	movups	%xmm0, 176(%rbx)
	movups	%xmm0, 160(%rbx)
	movups	%xmm0, 144(%rbx)
	movups	%xmm0, 128(%rbx)
	incl	660(%rbx)
	xorl	%r13d, %r13d
	jmp	.LBB31_18
.LBB31_11:                              # %if.then59
	movq	72(%r14), %rdi
	callq	*64(%r14)
.LBB31_12:                              # %if.end63
	movq	32(%rbx), %rsi
	testq	%rsi, %rsi
	je	.LBB31_14
# BB#13:                                # %if.then67
	movq	72(%r14), %rdi
	callq	*64(%r14)
.LBB31_14:                              # %if.end71
	movq	40(%rbx), %rsi
	testq	%rsi, %rsi
	je	.LBB31_16
# BB#15:                                # %if.then75
	movq	72(%r14), %rdi
	callq	*64(%r14)
.LBB31_16:                              # %if.then82
	movq	72(%r14), %rdi
	movq	%rbx, %rsi
	callq	*64(%r14)
.LBB31_18:                              # %cleanup
	movl	%r13d, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end31:
	.size	BZ2_bzCompressInit, .Lfunc_end31-BZ2_bzCompressInit
	.cfi_endproc

	.align	16, 0x90
	.type	default_bzalloc,@function
default_bzalloc:                        # @default_bzalloc
	.cfi_startproc
# BB#0:                                 # %entry
	imull	%edx, %esi
	movslq	%esi, %rdi
	jmp	malloc                  # TAILCALL
.Lfunc_end32:
	.size	default_bzalloc, .Lfunc_end32-default_bzalloc
	.cfi_endproc

	.align	16, 0x90
	.type	default_bzfree,@function
default_bzfree:                         # @default_bzfree
	.cfi_startproc
# BB#0:                                 # %entry
	testq	%rsi, %rsi
	je	.LBB33_1
# BB#2:                                 # %if.then
	movq	%rsi, %rdi
	jmp	free                    # TAILCALL
.LBB33_1:                               # %if.end
	retq
.Lfunc_end33:
	.size	default_bzfree, .Lfunc_end33-default_bzfree
	.cfi_endproc

	.globl	BZ2_bzCompress
	.align	16, 0x90
	.type	BZ2_bzCompress,@function
BZ2_bzCompress:                         # @BZ2_bzCompress
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp184:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp185:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp186:
	.cfi_def_cfa_offset 32
.Ltmp187:
	.cfi_offset %rbx, -24
.Ltmp188:
	.cfi_offset %r14, -16
	movl	$-2, %ebx
	testq	%rdi, %rdi
	je	.LBB34_37
# BB#1:                                 # %if.end
	movq	48(%rdi), %r14
	testq	%r14, %r14
	je	.LBB34_37
# BB#2:                                 # %if.end3
	cmpq	%rdi, (%r14)
	jne	.LBB34_37
# BB#3:                                 # %preswitch.preheader
	testl	%esi, %esi
	je	.LBB34_9
# BB#4:                                 # %preswitch.preheader
	cmpl	$1, %esi
	je	.LBB34_11
# BB#5:                                 # %preswitch.preheader
	cmpl	$2, %esi
	jne	.LBB34_16
# BB#6:                                 # %preswitch.us131.preheader
	movl	8(%r14), %eax
	jmp	.LBB34_7
	.align	16, 0x90
.LBB34_15:                              # %if.then18.us133
                                        #   in Loop: Header=BB34_7 Depth=1
	movl	8(%rdi), %eax
	movl	%eax, 16(%r14)
	movl	$4, 8(%r14)
	movl	$4, %eax
.LBB34_7:                               # %preswitch.us131
                                        # =>This Inner Loop Header: Depth=1
	xorl	%ebx, %ebx
	decl	%eax
	cmpl	$3, %eax
	ja	.LBB34_37
# BB#8:                                 # %preswitch.us131
                                        #   in Loop: Header=BB34_7 Depth=1
	movl	$-1, %ebx
	jmpq	*.LJTI34_0(,%rax,8)
.LBB34_9:                               # %preswitch.us
	movl	8(%r14), %eax
	xorl	%ebx, %ebx
	decl	%eax
	cmpl	$3, %eax
	ja	.LBB34_37
# BB#10:                                # %preswitch.us
	movl	$-1, %ebx
	jmpq	*.LJTI34_2(,%rax,8)
.LBB34_18:                              # %if.then10
	callq	handle_compress
	movl	$0, "PinFlag-164."(%rip)
	movl	$0, "PinFlag-164.0"(%rip)
	movl	$0, "PinFlag-313."(%rip)
	movl	$0, "PinFlag-161."(%rip)
	movl	$0, "PinFlag-161.0"(%rip)
	movl	$0, "PinFlag-161.1"(%rip)
	movl	$0, "PinFlag-161.10"(%rip)
	movl	$0, "PinFlag-161.11"(%rip)
	movl	$0, "PinFlag-161.12"(%rip)
	movl	$0, "PinFlag-161.2"(%rip)
	movl	$0, "PinFlag-161.3"(%rip)
	movl	$0, "PinFlag-161.30"(%rip)
	movl	$0, "PinFlag-161.31"(%rip)
	movl	$0, "PinFlag-161.4"(%rip)
	movl	$0, "PinFlag-161.5"(%rip)
	movl	$0, "PinFlag-98."(%rip)
	movl	$0, "PinFlag-225."(%rip)
	movl	$0, "PinFlag-206."(%rip)
	movl	$0, "PinFlag-203."(%rip)
	movl	$0, "PinFlag-82."(%rip)
	movl	$0, "PinFlag-82.0"(%rip)
	movl	$0, "PinFlag-82.00"(%rip)
	movl	$0, "PinFlag-82.1"(%rip)
	movl	$0, "PinFlag-82.10"(%rip)
	movl	$0, "PinFlag-82.2"(%rip)
	movl	$0, "PinFlag-82.3"(%rip)
	movl	$0, "PinFlag-82.4"(%rip)
	movl	$0, "PinFlag-82.5"(%rip)
	movl	$0, "PinFlag-82.6"(%rip)
	movl	$0, "PinFlag-82.7"(%rip)
	movl	$0, "PinFlag-82.8"(%rip)
	movl	$0, "PinFlag-82.9"(%rip)
	movl	$0, "PinFlag-83."(%rip)
	movl	$0, "PinFlag-83.0"(%rip)
	movl	$0, "PinFlag-83.00"(%rip)
	movl	$0, "PinFlag-83.01"(%rip)
	movl	$0, "PinFlag-85."(%rip)
	movl	$0, "PinFlag-85.0"(%rip)
	movl	$0, "PinFlag-87."(%rip)
	movl	$0, "PinFlag-87.0"(%rip)
	movl	$0, "PinFlag-88."(%rip)
	movl	$0, "PinFlag-89."(%rip)
	movl	$0, "PinFlag-89.0"(%rip)
	movl	$0, "PinFlag-89.1"(%rip)
	movl	$0, "PinFlag-91."(%rip)
	movl	$0, "PinFlag-91.0"(%rip)
	movl	$0, "PinFlag-91.1"(%rip)
	movl	$0, "PinFlag-92."(%rip)
	movl	$0, "PinFlag-95."(%rip)
	movl	$0, "PinFlag-95.0"(%rip)
	movl	$0, "PinFlag-95.1"(%rip)
	movl	$0, "PinFlag-95.2"(%rip)
	movl	$0, "PinFlag-95.20"(%rip)
	movl	$0, "PinFlag-95.21"(%rip)
	movl	$0, "PinFlag-95.210"(%rip)
	movl	$0, "PinFlag-95.211"(%rip)
	movl	$0, "PinFlag-95.22"(%rip)
	movl	$0, "PinFlag-95.23"(%rip)
	movl	$0, "PinFlag-95.3"(%rip)
	movl	$0, "PinFlag-95.4"(%rip)
	movl	$0, "PinFlag-96."(%rip)
	movl	$0, "PinFlag-96.0"(%rip)
	movl	$0, "PinFlag-96.1"(%rip)
	movl	$0, "PinFlag-96.2"(%rip)
	movl	$0, "PinFlag-97."(%rip)
	movl	$0, "PinFlag-97.0"(%rip)
	movl	$0, "PinFlag-78."(%rip)
	movl	$0, "PinFlag-79."(%rip)
	movl	$0, "PinFlag-80."(%rip)
	movl	$0, "PinFlag-81."(%rip)
	movl	$0, "PinFlag-55."(%rip)
	movl	$0, "PinFlag-56."(%rip)
	movl	$0, "PinFlag-57."(%rip)
	movl	$0, "PinFlag-58."(%rip)
	movl	$0, "PinFlag-59."(%rip)
	movl	$0, "PinFlag-60."(%rip)
	movl	$0, "PinFlag-61."(%rip)
	movl	$0, "PinFlag-62."(%rip)
	movl	$0, "PinFlag-63."(%rip)
	movl	$0, "PinFlag-63.0"(%rip)
	movl	$0, "PinFlag-63.1"(%rip)
	movl	$0, "PinFlag-67."(%rip)
	movl	$0, "PinFlag-68."(%rip)
	movl	$0, "PinFlag-69."(%rip)
	movl	$0, "PinFlag-70."(%rip)
	movl	$0, "PinFlag-71."(%rip)
	movl	$0, "PinFlag-72."(%rip)
	movl	$0, "PinFlag-73."(%rip)
	movl	$0, "PinFlag-74."(%rip)
	movl	$0, "PinFlag-75."(%rip)
	movl	$0, "PinFlag-76."(%rip)
	movl	$0, "PinFlag-77."(%rip)
	movl	$0, "PinFlag-44."(%rip)
	movl	$0, "PinFlag-43."(%rip)
	movl	$0, "PinFlag-43.0"(%rip)
	movl	$0, "PinFlag-43.1"(%rip)
	movl	$0, "PinFlag-43.2"(%rip)
	movl	$0, "PinFlag-33."(%rip)
	movl	$0, "PinFlag-24."(%rip)
	movl	$0, "PinFlag-24.0"(%rip)
	movl	$0, "PinFlag-24.1"(%rip)
	movl	$0, "PinFlag-26."(%rip)
	movl	$0, "PinFlag-26.0"(%rip)
	movl	$0, "PinFlag-26.1"(%rip)
	movl	$0, "PinFlag-26.10"(%rip)
	movl	$0, "PinFlag-26.100"(%rip)
	movl	$0, "PinFlag-26.101"(%rip)
	movl	$0, "PinFlag-26.102"(%rip)
	movl	$0, "PinFlag-26.103"(%rip)
	movl	$0, "PinFlag-26.104"(%rip)
	movl	$0, "PinFlag-26.11"(%rip)
	movl	$0, "PinFlag-26.110"(%rip)
	movl	$0, "PinFlag-26.1100"(%rip)
	movl	$0, "PinFlag-26.11000"(%rip)
	movl	$0, "PinFlag-26.1101"(%rip)
	movl	$0, "PinFlag-26.11010"(%rip)
	movl	$0, "PinFlag-26.111"(%rip)
	movl	$0, "PinFlag-26.1110"(%rip)
	movl	$0, "PinFlag-26.11100"(%rip)
	movl	$0, "PinFlag-26.1111"(%rip)
	movl	$0, "PinFlag-26.11110"(%rip)
	movl	$0, "PinFlag-26.112"(%rip)
	movl	$0, "PinFlag-26.113"(%rip)
	movl	$0, "PinFlag-26.114"(%rip)
	movl	$0, "PinFlag-26.115"(%rip)
	movl	$0, "PinFlag-26.12"(%rip)
	movl	$0, "PinFlag-27."(%rip)
	movl	$0, "PinFlag-28."(%rip)
	movl	$0, "PinFlag-29."(%rip)
	movl	$0, "PinFlag-30."(%rip)
	movl	$0, "PinFlag-31."(%rip)
	movl	$0, "PinFlag-32."(%rip)
	movl	$0, "PinFlag-14."(%rip)
	movl	$0, "PinFlag-14.0"(%rip)
	movl	$0, "PinFlag-14.00"(%rip)
	movl	$0, "PinFlag-14.000"(%rip)
	movl	$0, "PinFlag-14.0000"(%rip)
	movl	$0, "PinFlag-14.00000"(%rip)
	movl	$0, "PinFlag-14.000000"(%rip)
	movl	$0, "PinFlag-14.00001"(%rip)
	movl	$0, "PinFlag-14.000010"(%rip)
	movl	$0, "PinFlag-14.001"(%rip)
	movl	$0, "PinFlag-14.0010"(%rip)
	movl	$0, "PinFlag-14.00100"(%rip)
	movl	$0, "PinFlag-14.001000"(%rip)
	movl	$0, "PinFlag-14.00101"(%rip)
	movl	$0, "PinFlag-14.001010"(%rip)
	movl	$0, "PinFlag-14.002"(%rip)
	movl	$0, "PinFlag-14.003"(%rip)
	movl	$0, "PinFlag-14.004"(%rip)
	movl	$0, "PinFlag-14.005"(%rip)
	movl	$0, "PinFlag-14.006"(%rip)
	movl	$0, "PinFlag-14.007"(%rip)
	movl	$0, "PinFlag-14.0070"(%rip)
	movl	$0, "PinFlag-14.00700"(%rip)
	movl	$0, "PinFlag-14.00701"(%rip)
	movl	$0, "PinFlag-14.00702"(%rip)
	movl	$0, "PinFlag-14.1"(%rip)
	movl	$0, "PinFlag-14.2"(%rip)
	movl	$0, "PinFlag-14.3"(%rip)
	movl	$0, "PinFlag-14.4"(%rip)
	movl	$0, "PinFlag-14.5"(%rip)
	movl	$0, "PinFlag-14.6"(%rip)
	movl	$0, "PinFlag-15."(%rip)
	movl	$0, "PinFlag-15.0"(%rip)
	movl	$0, "PinFlag-15.00"(%rip)
	movl	$0, "PinFlag-17."(%rip)
	movl	$0, "PinFlag-18."(%rip)
	movl	$0, "PinFlag-19."(%rip)
	movl	$0, "PinFlag-20."(%rip)
	movl	$0, "PinFlag-21."(%rip)
	movl	$0, "PinFlag-22."(%rip)
	movl	$0, "PinFlag-23."(%rip)
	testb	%al, %al
	movl	$1, %eax
	movl	$-2, %ebx
	cmovnel	%eax, %ebx
	jmp	.LBB34_37
.LBB34_11:                              # %preswitch.us125.preheader
	movl	8(%r14), %eax
	jmp	.LBB34_12
	.align	16, 0x90
.LBB34_14:                              # %if.then13.us128
                                        #   in Loop: Header=BB34_12 Depth=1
	movl	8(%rdi), %eax
	movl	%eax, 16(%r14)
	movl	$3, 8(%r14)
	movl	$3, %eax
.LBB34_12:                              # %preswitch.us125
                                        # =>This Inner Loop Header: Depth=1
	xorl	%ebx, %ebx
	decl	%eax
	cmpl	$3, %eax
	ja	.LBB34_37
# BB#13:                                # %preswitch.us125
                                        #   in Loop: Header=BB34_12 Depth=1
	movl	$-1, %ebx
	jmpq	*.LJTI34_1(,%rax,8)
.LBB34_20:                              # %sw.bb23
	movl	$-1, %ebx
	cmpl	$1, %esi
	jne	.LBB34_37
# BB#21:                                # %if.end27
	movl	16(%r14), %eax
	cmpl	8(%rdi), %eax
	jne	.LBB34_37
# BB#22:                                # %if.end34
	callq	handle_compress
	movl	$0, "PinFlag-164."(%rip)
	movl	$0, "PinFlag-164.0"(%rip)
	movl	$0, "PinFlag-313."(%rip)
	movl	$0, "PinFlag-161."(%rip)
	movl	$0, "PinFlag-161.0"(%rip)
	movl	$0, "PinFlag-161.1"(%rip)
	movl	$0, "PinFlag-161.10"(%rip)
	movl	$0, "PinFlag-161.11"(%rip)
	movl	$0, "PinFlag-161.12"(%rip)
	movl	$0, "PinFlag-161.2"(%rip)
	movl	$0, "PinFlag-161.3"(%rip)
	movl	$0, "PinFlag-161.30"(%rip)
	movl	$0, "PinFlag-161.31"(%rip)
	movl	$0, "PinFlag-161.4"(%rip)
	movl	$0, "PinFlag-161.5"(%rip)
	movl	$0, "PinFlag-98."(%rip)
	movl	$0, "PinFlag-225."(%rip)
	movl	$0, "PinFlag-206."(%rip)
	movl	$0, "PinFlag-203."(%rip)
	movl	$0, "PinFlag-82."(%rip)
	movl	$0, "PinFlag-82.0"(%rip)
	movl	$0, "PinFlag-82.00"(%rip)
	movl	$0, "PinFlag-82.1"(%rip)
	movl	$0, "PinFlag-82.10"(%rip)
	movl	$0, "PinFlag-82.2"(%rip)
	movl	$0, "PinFlag-82.3"(%rip)
	movl	$0, "PinFlag-82.4"(%rip)
	movl	$0, "PinFlag-82.5"(%rip)
	movl	$0, "PinFlag-82.6"(%rip)
	movl	$0, "PinFlag-82.7"(%rip)
	movl	$0, "PinFlag-82.8"(%rip)
	movl	$0, "PinFlag-82.9"(%rip)
	movl	$0, "PinFlag-83."(%rip)
	movl	$0, "PinFlag-83.0"(%rip)
	movl	$0, "PinFlag-83.00"(%rip)
	movl	$0, "PinFlag-83.01"(%rip)
	movl	$0, "PinFlag-85."(%rip)
	movl	$0, "PinFlag-85.0"(%rip)
	movl	$0, "PinFlag-87."(%rip)
	movl	$0, "PinFlag-87.0"(%rip)
	movl	$0, "PinFlag-88."(%rip)
	movl	$0, "PinFlag-89."(%rip)
	movl	$0, "PinFlag-89.0"(%rip)
	movl	$0, "PinFlag-89.1"(%rip)
	movl	$0, "PinFlag-91."(%rip)
	movl	$0, "PinFlag-91.0"(%rip)
	movl	$0, "PinFlag-91.1"(%rip)
	movl	$0, "PinFlag-92."(%rip)
	movl	$0, "PinFlag-95."(%rip)
	movl	$0, "PinFlag-95.0"(%rip)
	movl	$0, "PinFlag-95.1"(%rip)
	movl	$0, "PinFlag-95.2"(%rip)
	movl	$0, "PinFlag-95.20"(%rip)
	movl	$0, "PinFlag-95.21"(%rip)
	movl	$0, "PinFlag-95.210"(%rip)
	movl	$0, "PinFlag-95.211"(%rip)
	movl	$0, "PinFlag-95.22"(%rip)
	movl	$0, "PinFlag-95.23"(%rip)
	movl	$0, "PinFlag-95.3"(%rip)
	movl	$0, "PinFlag-95.4"(%rip)
	movl	$0, "PinFlag-96."(%rip)
	movl	$0, "PinFlag-96.0"(%rip)
	movl	$0, "PinFlag-96.1"(%rip)
	movl	$0, "PinFlag-96.2"(%rip)
	movl	$0, "PinFlag-97."(%rip)
	movl	$0, "PinFlag-97.0"(%rip)
	movl	$0, "PinFlag-78."(%rip)
	movl	$0, "PinFlag-79."(%rip)
	movl	$0, "PinFlag-80."(%rip)
	movl	$0, "PinFlag-81."(%rip)
	movl	$0, "PinFlag-55."(%rip)
	movl	$0, "PinFlag-56."(%rip)
	movl	$0, "PinFlag-57."(%rip)
	movl	$0, "PinFlag-58."(%rip)
	movl	$0, "PinFlag-59."(%rip)
	movl	$0, "PinFlag-60."(%rip)
	movl	$0, "PinFlag-61."(%rip)
	movl	$0, "PinFlag-62."(%rip)
	movl	$0, "PinFlag-63."(%rip)
	movl	$0, "PinFlag-63.0"(%rip)
	movl	$0, "PinFlag-63.1"(%rip)
	movl	$0, "PinFlag-67."(%rip)
	movl	$0, "PinFlag-68."(%rip)
	movl	$0, "PinFlag-69."(%rip)
	movl	$0, "PinFlag-70."(%rip)
	movl	$0, "PinFlag-71."(%rip)
	movl	$0, "PinFlag-72."(%rip)
	movl	$0, "PinFlag-73."(%rip)
	movl	$0, "PinFlag-74."(%rip)
	movl	$0, "PinFlag-75."(%rip)
	movl	$0, "PinFlag-76."(%rip)
	movl	$0, "PinFlag-77."(%rip)
	movl	$0, "PinFlag-44."(%rip)
	movl	$0, "PinFlag-43."(%rip)
	movl	$0, "PinFlag-43.0"(%rip)
	movl	$0, "PinFlag-43.1"(%rip)
	movl	$0, "PinFlag-43.2"(%rip)
	movl	$0, "PinFlag-33."(%rip)
	movl	$0, "PinFlag-24."(%rip)
	movl	$0, "PinFlag-24.0"(%rip)
	movl	$0, "PinFlag-24.1"(%rip)
	movl	$0, "PinFlag-26."(%rip)
	movl	$0, "PinFlag-26.0"(%rip)
	movl	$0, "PinFlag-26.1"(%rip)
	movl	$0, "PinFlag-26.10"(%rip)
	movl	$0, "PinFlag-26.100"(%rip)
	movl	$0, "PinFlag-26.101"(%rip)
	movl	$0, "PinFlag-26.102"(%rip)
	movl	$0, "PinFlag-26.103"(%rip)
	movl	$0, "PinFlag-26.104"(%rip)
	movl	$0, "PinFlag-26.11"(%rip)
	movl	$0, "PinFlag-26.110"(%rip)
	movl	$0, "PinFlag-26.1100"(%rip)
	movl	$0, "PinFlag-26.11000"(%rip)
	movl	$0, "PinFlag-26.1101"(%rip)
	movl	$0, "PinFlag-26.11010"(%rip)
	movl	$0, "PinFlag-26.111"(%rip)
	movl	$0, "PinFlag-26.1110"(%rip)
	movl	$0, "PinFlag-26.11100"(%rip)
	movl	$0, "PinFlag-26.1111"(%rip)
	movl	$0, "PinFlag-26.11110"(%rip)
	movl	$0, "PinFlag-26.112"(%rip)
	movl	$0, "PinFlag-26.113"(%rip)
	movl	$0, "PinFlag-26.114"(%rip)
	movl	$0, "PinFlag-26.115"(%rip)
	movl	$0, "PinFlag-26.12"(%rip)
	movl	$0, "PinFlag-27."(%rip)
	movl	$0, "PinFlag-28."(%rip)
	movl	$0, "PinFlag-29."(%rip)
	movl	$0, "PinFlag-30."(%rip)
	movl	$0, "PinFlag-31."(%rip)
	movl	$0, "PinFlag-32."(%rip)
	movl	$0, "PinFlag-14."(%rip)
	movl	$0, "PinFlag-14.0"(%rip)
	movl	$0, "PinFlag-14.00"(%rip)
	movl	$0, "PinFlag-14.000"(%rip)
	movl	$0, "PinFlag-14.0000"(%rip)
	movl	$0, "PinFlag-14.00000"(%rip)
	movl	$0, "PinFlag-14.000000"(%rip)
	movl	$0, "PinFlag-14.00001"(%rip)
	movl	$0, "PinFlag-14.000010"(%rip)
	movl	$0, "PinFlag-14.001"(%rip)
	movl	$0, "PinFlag-14.0010"(%rip)
	movl	$0, "PinFlag-14.00100"(%rip)
	movl	$0, "PinFlag-14.001000"(%rip)
	movl	$0, "PinFlag-14.00101"(%rip)
	movl	$0, "PinFlag-14.001010"(%rip)
	movl	$0, "PinFlag-14.002"(%rip)
	movl	$0, "PinFlag-14.003"(%rip)
	movl	$0, "PinFlag-14.004"(%rip)
	movl	$0, "PinFlag-14.005"(%rip)
	movl	$0, "PinFlag-14.006"(%rip)
	movl	$0, "PinFlag-14.007"(%rip)
	movl	$0, "PinFlag-14.0070"(%rip)
	movl	$0, "PinFlag-14.00700"(%rip)
	movl	$0, "PinFlag-14.00701"(%rip)
	movl	$0, "PinFlag-14.00702"(%rip)
	movl	$0, "PinFlag-14.1"(%rip)
	movl	$0, "PinFlag-14.2"(%rip)
	movl	$0, "PinFlag-14.3"(%rip)
	movl	$0, "PinFlag-14.4"(%rip)
	movl	$0, "PinFlag-14.5"(%rip)
	movl	$0, "PinFlag-14.6"(%rip)
	movl	$0, "PinFlag-15."(%rip)
	movl	$0, "PinFlag-15.0"(%rip)
	movl	$0, "PinFlag-15.00"(%rip)
	movl	$0, "PinFlag-17."(%rip)
	movl	$0, "PinFlag-18."(%rip)
	movl	$0, "PinFlag-19."(%rip)
	movl	$0, "PinFlag-20."(%rip)
	movl	$0, "PinFlag-21."(%rip)
	movl	$0, "PinFlag-22."(%rip)
	movl	$0, "PinFlag-23."(%rip)
	movl	$2, %ebx
	cmpl	$0, 16(%r14)
	jne	.LBB34_37
# BB#23:                                # %lor.lhs.false
	cmpl	$255, 92(%r14)
	ja	.LBB34_25
# BB#24:                                # %land.lhs.true.i
	cmpl	$0, 96(%r14)
	jg	.LBB34_37
.LBB34_25:                              # %lor.lhs.false41
	movl	120(%r14), %eax
	cmpl	116(%r14), %eax
	jl	.LBB34_37
# BB#26:                                # %if.end45
	movl	$2, 8(%r14)
	movl	$1, %ebx
	jmp	.LBB34_37
.LBB34_16:                              # %preswitch
	movl	8(%r14), %eax
	xorl	%ebx, %ebx
	decl	%eax
	cmpl	$3, %eax
	ja	.LBB34_37
# BB#17:                                # %preswitch
	movl	$-1, %ebx
	jmpq	*.LJTI34_3(,%rax,8)
.LBB34_36:                              # %sw.bb8
	movl	$-2, %ebx
	jmp	.LBB34_37
.LBB34_28:                              # %sw.bb47
	movl	$-1, %ebx
	cmpl	$2, %esi
	jne	.LBB34_37
# BB#29:                                # %if.end51
	movl	16(%r14), %eax
	cmpl	8(%rdi), %eax
	jne	.LBB34_37
# BB#30:                                # %if.end58
	callq	handle_compress
	movl	$0, "PinFlag-164."(%rip)
	movl	$0, "PinFlag-164.0"(%rip)
	movl	$0, "PinFlag-313."(%rip)
	movl	$0, "PinFlag-161."(%rip)
	movl	$0, "PinFlag-161.0"(%rip)
	movl	$0, "PinFlag-161.1"(%rip)
	movl	$0, "PinFlag-161.10"(%rip)
	movl	$0, "PinFlag-161.11"(%rip)
	movl	$0, "PinFlag-161.12"(%rip)
	movl	$0, "PinFlag-161.2"(%rip)
	movl	$0, "PinFlag-161.3"(%rip)
	movl	$0, "PinFlag-161.30"(%rip)
	movl	$0, "PinFlag-161.31"(%rip)
	movl	$0, "PinFlag-161.4"(%rip)
	movl	$0, "PinFlag-161.5"(%rip)
	movl	$0, "PinFlag-98."(%rip)
	movl	$0, "PinFlag-225."(%rip)
	movl	$0, "PinFlag-206."(%rip)
	movl	$0, "PinFlag-203."(%rip)
	movl	$0, "PinFlag-82."(%rip)
	movl	$0, "PinFlag-82.0"(%rip)
	movl	$0, "PinFlag-82.00"(%rip)
	movl	$0, "PinFlag-82.1"(%rip)
	movl	$0, "PinFlag-82.10"(%rip)
	movl	$0, "PinFlag-82.2"(%rip)
	movl	$0, "PinFlag-82.3"(%rip)
	movl	$0, "PinFlag-82.4"(%rip)
	movl	$0, "PinFlag-82.5"(%rip)
	movl	$0, "PinFlag-82.6"(%rip)
	movl	$0, "PinFlag-82.7"(%rip)
	movl	$0, "PinFlag-82.8"(%rip)
	movl	$0, "PinFlag-82.9"(%rip)
	movl	$0, "PinFlag-83."(%rip)
	movl	$0, "PinFlag-83.0"(%rip)
	movl	$0, "PinFlag-83.00"(%rip)
	movl	$0, "PinFlag-83.01"(%rip)
	movl	$0, "PinFlag-85."(%rip)
	movl	$0, "PinFlag-85.0"(%rip)
	movl	$0, "PinFlag-87."(%rip)
	movl	$0, "PinFlag-87.0"(%rip)
	movl	$0, "PinFlag-88."(%rip)
	movl	$0, "PinFlag-89."(%rip)
	movl	$0, "PinFlag-89.0"(%rip)
	movl	$0, "PinFlag-89.1"(%rip)
	movl	$0, "PinFlag-91."(%rip)
	movl	$0, "PinFlag-91.0"(%rip)
	movl	$0, "PinFlag-91.1"(%rip)
	movl	$0, "PinFlag-92."(%rip)
	movl	$0, "PinFlag-95."(%rip)
	movl	$0, "PinFlag-95.0"(%rip)
	movl	$0, "PinFlag-95.1"(%rip)
	movl	$0, "PinFlag-95.2"(%rip)
	movl	$0, "PinFlag-95.20"(%rip)
	movl	$0, "PinFlag-95.21"(%rip)
	movl	$0, "PinFlag-95.210"(%rip)
	movl	$0, "PinFlag-95.211"(%rip)
	movl	$0, "PinFlag-95.22"(%rip)
	movl	$0, "PinFlag-95.23"(%rip)
	movl	$0, "PinFlag-95.3"(%rip)
	movl	$0, "PinFlag-95.4"(%rip)
	movl	$0, "PinFlag-96."(%rip)
	movl	$0, "PinFlag-96.0"(%rip)
	movl	$0, "PinFlag-96.1"(%rip)
	movl	$0, "PinFlag-96.2"(%rip)
	movl	$0, "PinFlag-97."(%rip)
	movl	$0, "PinFlag-97.0"(%rip)
	movl	$0, "PinFlag-78."(%rip)
	movl	$0, "PinFlag-79."(%rip)
	movl	$0, "PinFlag-80."(%rip)
	movl	$0, "PinFlag-81."(%rip)
	movl	$0, "PinFlag-55."(%rip)
	movl	$0, "PinFlag-56."(%rip)
	movl	$0, "PinFlag-57."(%rip)
	movl	$0, "PinFlag-58."(%rip)
	movl	$0, "PinFlag-59."(%rip)
	movl	$0, "PinFlag-60."(%rip)
	movl	$0, "PinFlag-61."(%rip)
	movl	$0, "PinFlag-62."(%rip)
	movl	$0, "PinFlag-63."(%rip)
	movl	$0, "PinFlag-63.0"(%rip)
	movl	$0, "PinFlag-63.1"(%rip)
	movl	$0, "PinFlag-67."(%rip)
	movl	$0, "PinFlag-68."(%rip)
	movl	$0, "PinFlag-69."(%rip)
	movl	$0, "PinFlag-70."(%rip)
	movl	$0, "PinFlag-71."(%rip)
	movl	$0, "PinFlag-72."(%rip)
	movl	$0, "PinFlag-73."(%rip)
	movl	$0, "PinFlag-74."(%rip)
	movl	$0, "PinFlag-75."(%rip)
	movl	$0, "PinFlag-76."(%rip)
	movl	$0, "PinFlag-77."(%rip)
	movl	$0, "PinFlag-44."(%rip)
	movl	$0, "PinFlag-43."(%rip)
	movl	$0, "PinFlag-43.0"(%rip)
	movl	$0, "PinFlag-43.1"(%rip)
	movl	$0, "PinFlag-43.2"(%rip)
	movl	$0, "PinFlag-33."(%rip)
	movl	$0, "PinFlag-24."(%rip)
	movl	$0, "PinFlag-24.0"(%rip)
	movl	$0, "PinFlag-24.1"(%rip)
	movl	$0, "PinFlag-26."(%rip)
	movl	$0, "PinFlag-26.0"(%rip)
	movl	$0, "PinFlag-26.1"(%rip)
	movl	$0, "PinFlag-26.10"(%rip)
	movl	$0, "PinFlag-26.100"(%rip)
	movl	$0, "PinFlag-26.101"(%rip)
	movl	$0, "PinFlag-26.102"(%rip)
	movl	$0, "PinFlag-26.103"(%rip)
	movl	$0, "PinFlag-26.104"(%rip)
	movl	$0, "PinFlag-26.11"(%rip)
	movl	$0, "PinFlag-26.110"(%rip)
	movl	$0, "PinFlag-26.1100"(%rip)
	movl	$0, "PinFlag-26.11000"(%rip)
	movl	$0, "PinFlag-26.1101"(%rip)
	movl	$0, "PinFlag-26.11010"(%rip)
	movl	$0, "PinFlag-26.111"(%rip)
	movl	$0, "PinFlag-26.1110"(%rip)
	movl	$0, "PinFlag-26.11100"(%rip)
	movl	$0, "PinFlag-26.1111"(%rip)
	movl	$0, "PinFlag-26.11110"(%rip)
	movl	$0, "PinFlag-26.112"(%rip)
	movl	$0, "PinFlag-26.113"(%rip)
	movl	$0, "PinFlag-26.114"(%rip)
	movl	$0, "PinFlag-26.115"(%rip)
	movl	$0, "PinFlag-26.12"(%rip)
	movl	$0, "PinFlag-27."(%rip)
	movl	$0, "PinFlag-28."(%rip)
	movl	$0, "PinFlag-29."(%rip)
	movl	$0, "PinFlag-30."(%rip)
	movl	$0, "PinFlag-31."(%rip)
	movl	$0, "PinFlag-32."(%rip)
	movl	$0, "PinFlag-14."(%rip)
	movl	$0, "PinFlag-14.0"(%rip)
	movl	$0, "PinFlag-14.00"(%rip)
	movl	$0, "PinFlag-14.000"(%rip)
	movl	$0, "PinFlag-14.0000"(%rip)
	movl	$0, "PinFlag-14.00000"(%rip)
	movl	$0, "PinFlag-14.000000"(%rip)
	movl	$0, "PinFlag-14.00001"(%rip)
	movl	$0, "PinFlag-14.000010"(%rip)
	movl	$0, "PinFlag-14.001"(%rip)
	movl	$0, "PinFlag-14.0010"(%rip)
	movl	$0, "PinFlag-14.00100"(%rip)
	movl	$0, "PinFlag-14.001000"(%rip)
	movl	$0, "PinFlag-14.00101"(%rip)
	movl	$0, "PinFlag-14.001010"(%rip)
	movl	$0, "PinFlag-14.002"(%rip)
	movl	$0, "PinFlag-14.003"(%rip)
	movl	$0, "PinFlag-14.004"(%rip)
	movl	$0, "PinFlag-14.005"(%rip)
	movl	$0, "PinFlag-14.006"(%rip)
	movl	$0, "PinFlag-14.007"(%rip)
	movl	$0, "PinFlag-14.0070"(%rip)
	movl	$0, "PinFlag-14.00700"(%rip)
	movl	$0, "PinFlag-14.00701"(%rip)
	movl	$0, "PinFlag-14.00702"(%rip)
	movl	$0, "PinFlag-14.1"(%rip)
	movl	$0, "PinFlag-14.2"(%rip)
	movl	$0, "PinFlag-14.3"(%rip)
	movl	$0, "PinFlag-14.4"(%rip)
	movl	$0, "PinFlag-14.5"(%rip)
	movl	$0, "PinFlag-14.6"(%rip)
	movl	$0, "PinFlag-15."(%rip)
	movl	$0, "PinFlag-15.0"(%rip)
	movl	$0, "PinFlag-15.00"(%rip)
	movl	$0, "PinFlag-17."(%rip)
	movl	$0, "PinFlag-18."(%rip)
	movl	$0, "PinFlag-19."(%rip)
	movl	$0, "PinFlag-20."(%rip)
	movl	$0, "PinFlag-21."(%rip)
	movl	$0, "PinFlag-22."(%rip)
	movl	$0, "PinFlag-23."(%rip)
	testb	%al, %al
	je	.LBB34_37
# BB#31:                                # %if.end62
	movl	$3, %ebx
	cmpl	$0, 16(%r14)
	jne	.LBB34_37
# BB#32:                                # %lor.lhs.false66
	cmpl	$255, 92(%r14)
	ja	.LBB34_34
# BB#33:                                # %land.lhs.true.i115
	cmpl	$0, 96(%r14)
	jg	.LBB34_37
.LBB34_34:                              # %lor.lhs.false69
	movl	120(%r14), %eax
	cmpl	116(%r14), %eax
	jl	.LBB34_37
# BB#35:                                # %if.end75
	movl	$1, 8(%r14)
	movl	$4, %ebx
	jmp	.LBB34_37
.LBB34_19:                              # %sw.bb23.thread
	movl	$-1, %ebx
	jmp	.LBB34_37
.LBB34_27:                              # %sw.bb47.thread
	movl	$-1, %ebx
.LBB34_37:                              # %cleanup
	movl	%ebx, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.Lfunc_end34:
	.size	BZ2_bzCompress, .Lfunc_end34-BZ2_bzCompress
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI34_0:
	.quad	.LBB34_37
	.quad	.LBB34_15
	.quad	.LBB34_20
	.quad	.LBB34_28
.LJTI34_1:
	.quad	.LBB34_37
	.quad	.LBB34_14
	.quad	.LBB34_20
	.quad	.LBB34_28
.LJTI34_2:
	.quad	.LBB34_37
	.quad	.LBB34_18
	.quad	.LBB34_19
	.quad	.LBB34_27
.LJTI34_3:
	.quad	.LBB34_37
	.quad	.LBB34_36
	.quad	.LBB34_19
	.quad	.LBB34_27

	.text
	.align	16, 0x90
	.type	handle_compress,@function
handle_compress:                        # @handle_compress
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp189:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp190:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp191:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp192:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp193:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp194:
	.cfi_def_cfa_offset 56
	pushq	%rax
.Ltmp195:
	.cfi_def_cfa_offset 64
.Ltmp196:
	.cfi_offset %rbx, -56
.Ltmp197:
	.cfi_offset %r12, -48
.Ltmp198:
	.cfi_offset %r13, -40
.Ltmp199:
	.cfi_offset %r14, -32
.Ltmp200:
	.cfi_offset %r15, -24
.Ltmp201:
	.cfi_offset %rbp, -16
	movq	48(%rdi), %rbx
	movq	%rbx, %r14
	subq	$-128, %r14
	cmpl	$0, "PinFlag-43."(%rip)
	je	.LBB35_2
# BB#1:
	xorl	%r12d, %r12d
	jmp	.LBB35_3
.LBB35_2:
	xorl	%r12d, %r12d
	movl	$.L__unnamed_92, %edi
	movl	$1, %esi
	movl	$62, %edx
	movl	$126, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movl	$1, "PinFlag-43."(%rip)
.LBB35_3:                               # %while.body.outer
	xorl	%r15d, %r15d
	jmp	.LBB35_4
	.align	16, 0x90
.LBB35_74:                              # %while.body.outer
                                        #   in Loop: Header=BB35_4 Depth=1
	movq	%rbx, %rdi
	callq	BZ2_compressBlock
	movl	$1, 12(%rbx)
.LBB35_4:                               # %while.body.outer
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_16 Depth 2
                                        #     Child Loop BB35_37 Depth 2
                                        #     Child Loop BB35_47 Depth 2
	movl	12(%rbx), %eax
	cmpl	$2, %eax
	je	.LBB35_5
# BB#10:                                # %while.body.outer
                                        #   in Loop: Header=BB35_4 Depth=1
	cmpl	$1, %eax
	jne	.LBB35_77
# BB#11:                                # %if.then
                                        #   in Loop: Header=BB35_4 Depth=1
	movq	(%rbx), %rbp
	cmpl	$0, 32(%rbp)
	je	.LBB35_12
# BB#13:                                # %if.end.i.preheader
                                        #   in Loop: Header=BB35_4 Depth=1
	cmpl	$0, "PinFlag-43.0"(%rip)
	jne	.LBB35_15
# BB#14:                                #   in Loop: Header=BB35_4 Depth=1
	movl	$.L__unnamed_93, %edi
	movl	$1, %esi
	movl	$46, %edx
	movl	$47, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-43.0"(%rip)
.LBB35_15:                              # %if.end.i
                                        #   in Loop: Header=BB35_4 Depth=1
	xorl	%eax, %eax
	.align	16, 0x90
.LBB35_16:                              # %if.end.i
                                        #   Parent Loop BB35_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	120(%rbx), %rcx
	cmpl	116(%rbx), %ecx
	jge	.LBB35_20
# BB#17:                                # %if.end3.i
                                        #   in Loop: Header=BB35_16 Depth=2
	movq	80(%rbx), %rax
	movb	(%rax,%rcx), %al
	movq	24(%rbp), %rcx
	movb	%al, (%rcx)
	incl	120(%rbx)
	movq	(%rbx), %rax
	decl	32(%rax)
	movq	(%rbx), %rax
	incq	24(%rax)
	movq	(%rbx), %rax
	incl	36(%rax)
	movq	(%rbx), %rbp
	cmpl	$0, 36(%rbp)
	jne	.LBB35_19
# BB#18:                                # %if.then16.i
                                        #   in Loop: Header=BB35_16 Depth=2
	incl	40(%rbp)
	movq	(%rbx), %rbp
.LBB35_19:                              # %while.body.backedge.i
                                        #   in Loop: Header=BB35_16 Depth=2
	movb	$1, %al
	cmpl	$0, 32(%rbp)
	jne	.LBB35_16
	jmp	.LBB35_20
	.align	16, 0x90
.LBB35_5:                               #   in Loop: Header=BB35_4 Depth=1
	movb	%r12b, %al
	jmp	.LBB35_6
.LBB35_12:                              #   in Loop: Header=BB35_4 Depth=1
	xorl	%eax, %eax
.LBB35_20:                              # %copy_output_until_stop.exit
                                        #   in Loop: Header=BB35_4 Depth=1
	orb	%r12b, %al
	movl	120(%rbx), %ecx
	cmpl	116(%rbx), %ecx
	jl	.LBB35_21
# BB#22:                                # %if.end
                                        #   in Loop: Header=BB35_4 Depth=1
	movl	8(%rbx), %ecx
	cmpl	$4, %ecx
	jne	.LBB35_28
# BB#23:                                # %land.lhs.true
                                        #   in Loop: Header=BB35_4 Depth=1
	cmpl	$0, 16(%rbx)
	jne	.LBB35_28
# BB#24:                                # %land.lhs.true11
                                        #   in Loop: Header=BB35_4 Depth=1
	cmpl	$255, 92(%rbx)
	ja	.LBB35_25
# BB#26:                                # %land.lhs.true.i
                                        #   in Loop: Header=BB35_4 Depth=1
	cmpl	$0, 96(%rbx)
	jle	.LBB35_27
	.align	16, 0x90
.LBB35_28:                              # %if.end15
                                        #   in Loop: Header=BB35_4 Depth=1
	movl	$0, 108(%rbx)
	movl	$0, 116(%rbx)
	movl	$0, 120(%rbx)
	movl	$-1, 648(%rbx)
	xorps	%xmm0, %xmm0
	movups	%xmm0, 240(%r14)
	movups	%xmm0, 224(%r14)
	movups	%xmm0, 208(%r14)
	movups	%xmm0, 192(%r14)
	movups	%xmm0, 176(%r14)
	movups	%xmm0, 160(%r14)
	movups	%xmm0, 144(%r14)
	movups	%xmm0, 128(%r14)
	movups	%xmm0, 112(%r14)
	movups	%xmm0, 96(%r14)
	movups	%xmm0, 80(%r14)
	movups	%xmm0, 64(%r14)
	movups	%xmm0, 48(%r14)
	movups	%xmm0, 32(%r14)
	movups	%xmm0, 16(%r14)
	movups	%xmm0, (%r14)
	incl	660(%rbx)
	movl	$2, 12(%rbx)
	cmpl	$3, %ecx
	jne	.LBB35_7
# BB#29:                                # %land.lhs.true20
                                        #   in Loop: Header=BB35_4 Depth=1
	cmpl	$0, 16(%rbx)
	jne	.LBB35_6
# BB#30:                                # %land.lhs.true24
                                        #   in Loop: Header=BB35_4 Depth=1
	cmpl	$255, 92(%rbx)
	ja	.LBB35_31
# BB#32:                                # %land.lhs.true.i125
                                        #   in Loop: Header=BB35_4 Depth=1
	cmpl	$0, 96(%rbx)
	jle	.LBB35_33
	.align	16, 0x90
.LBB35_6:                               # %if.end30.if.then34_crit_edge
                                        #   in Loop: Header=BB35_4 Depth=1
	movl	8(%rbx), %ecx
.LBB35_7:                               # %if.then34
                                        #   in Loop: Header=BB35_4 Depth=1
	movb	%al, %r12b
	cmpl	$2, %ecx
	movl	108(%rbx), %r13d
	movl	112(%rbx), %ebp
	jne	.LBB35_8
# BB#42:                                # %while.body.preheader.i
                                        #   in Loop: Header=BB35_4 Depth=1
	cmpl	%ebp, %r13d
	jge	.LBB35_43
# BB#44:                                # %if.end.i108.preheader
                                        #   in Loop: Header=BB35_4 Depth=1
	cmpl	$0, "PinFlag-43.2"(%rip)
	jne	.LBB35_46
# BB#45:                                #   in Loop: Header=BB35_4 Depth=1
	movl	$.L__unnamed_94, %edi
	movl	$1, %esi
	movl	$168, %edx
	movl	$82, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-43.2"(%rip)
.LBB35_46:                              # %if.end.i108
                                        #   in Loop: Header=BB35_4 Depth=1
	xorl	%eax, %eax
	.align	16, 0x90
.LBB35_47:                              # %if.end.i108
                                        #   Parent Loop BB35_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rbx), %rcx
	cmpl	$0, 8(%rcx)
	je	.LBB35_67
# BB#48:                                # %if.end5.i
                                        #   in Loop: Header=BB35_47 Depth=2
	movq	(%rcx), %rax
	movzbl	(%rax), %ebp
	movl	92(%rbx), %eax
	movl	96(%rbx), %ecx
	cmpl	%eax, %ebp
	jne	.LBB35_49
# BB#51:                                # %lor.lhs.false.i
                                        #   in Loop: Header=BB35_47 Depth=2
	cmpl	$255, %ecx
	je	.LBB35_52
# BB#55:                                # %if.else40.i
                                        #   in Loop: Header=BB35_47 Depth=2
	incl	%ecx
	movl	%ecx, 96(%rbx)
	jmp	.LBB35_56
	.align	16, 0x90
.LBB35_49:                              # %land.lhs.true.i109
                                        #   in Loop: Header=BB35_47 Depth=2
	cmpl	$1, %ecx
	jne	.LBB35_52
# BB#50:                                # %if.then11.i
                                        #   in Loop: Header=BB35_47 Depth=2
	movl	648(%rbx), %ecx
	movl	%ecx, %edx
	shll	$8, %edx
	shrl	$24, %ecx
	movzbl	%al, %esi
	xorl	%ecx, %esi
	xorl	BZ2_crc32Table(,%rsi,4), %edx
	movl	%edx, 648(%rbx)
	movb	$1, 128(%rbx,%rax)
	movslq	%r13d, %rcx
	movq	64(%rbx), %rdx
	movb	%al, (%rdx,%rcx)
	incl	108(%rbx)
	movl	%ebp, 92(%rbx)
	jmp	.LBB35_56
	.align	16, 0x90
.LBB35_52:                              # %if.then32.i
                                        #   in Loop: Header=BB35_47 Depth=2
	cmpl	$255, %eax
	ja	.LBB35_54
# BB#53:                                # %if.then36.i
                                        #   in Loop: Header=BB35_47 Depth=2
	movq	%rbx, %rdi
	callq	add_pair_to_block
.LBB35_54:                              # %if.end37.i
                                        #   in Loop: Header=BB35_47 Depth=2
	movl	%ebp, 92(%rbx)
	movl	$1, 96(%rbx)
.LBB35_56:                              # %if.end44.i
                                        #   in Loop: Header=BB35_47 Depth=2
	movq	(%rbx), %rax
	incq	(%rax)
	movq	(%rbx), %rax
	decl	8(%rax)
	movq	(%rbx), %rax
	incl	12(%rax)
	movq	(%rbx), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB35_58
# BB#57:                                # %if.then55.i
                                        #   in Loop: Header=BB35_47 Depth=2
	incl	16(%rax)
.LBB35_58:                              # %while.body.backedge.i116
                                        #   in Loop: Header=BB35_47 Depth=2
	movl	108(%rbx), %r13d
	movl	112(%rbx), %ebp
	movb	$1, %al
	cmpl	%ebp, %r13d
	jl	.LBB35_47
	jmp	.LBB35_67
	.align	16, 0x90
.LBB35_8:                               # %while.body61.preheader.i
                                        #   in Loop: Header=BB35_4 Depth=1
	cmpl	%ebp, %r13d
	jge	.LBB35_9
# BB#34:                                # %if.end67.i.preheader
                                        #   in Loop: Header=BB35_4 Depth=1
	cmpl	$0, "PinFlag-43.1"(%rip)
	jne	.LBB35_36
# BB#35:                                #   in Loop: Header=BB35_4 Depth=1
	movl	$.L__unnamed_95, %edi
	movl	$1, %esi
	movl	$189, %edx
	movl	$88, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-43.1"(%rip)
.LBB35_36:                              # %if.end67.i
                                        #   in Loop: Header=BB35_4 Depth=1
	xorl	%eax, %eax
	.align	16, 0x90
.LBB35_37:                              # %if.end67.i
                                        #   Parent Loop BB35_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rbx), %rcx
	cmpl	$0, 8(%rcx)
	je	.LBB35_67
# BB#38:                                # %if.end73.i
                                        #   in Loop: Header=BB35_37 Depth=2
	cmpl	$0, 16(%rbx)
	je	.LBB35_67
# BB#39:                                # %if.end77.i
                                        #   in Loop: Header=BB35_37 Depth=2
	movq	(%rcx), %rax
	movzbl	(%rax), %ebp
	movl	92(%rbx), %eax
	movl	96(%rbx), %ecx
	cmpl	%eax, %ebp
	jne	.LBB35_40
# BB#59:                                # %lor.lhs.false118.i
                                        #   in Loop: Header=BB35_37 Depth=2
	cmpl	$255, %ecx
	je	.LBB35_60
# BB#63:                                # %if.else130.i
                                        #   in Loop: Header=BB35_37 Depth=2
	incl	%ecx
	movl	%ecx, 96(%rbx)
	jmp	.LBB35_64
	.align	16, 0x90
.LBB35_40:                              # %land.lhs.true85.i
                                        #   in Loop: Header=BB35_37 Depth=2
	cmpl	$1, %ecx
	jne	.LBB35_60
# BB#41:                                # %if.then89.i
                                        #   in Loop: Header=BB35_37 Depth=2
	movl	648(%rbx), %ecx
	movl	%ecx, %edx
	shll	$8, %edx
	shrl	$24, %ecx
	movzbl	%al, %esi
	xorl	%ecx, %esi
	xorl	BZ2_crc32Table(,%rsi,4), %edx
	movl	%edx, 648(%rbx)
	movb	$1, 128(%rbx,%rax)
	movslq	%r13d, %rcx
	movq	64(%rbx), %rdx
	movb	%al, (%rdx,%rcx)
	incl	108(%rbx)
	movl	%ebp, 92(%rbx)
	jmp	.LBB35_64
	.align	16, 0x90
.LBB35_60:                              # %if.then122.i
                                        #   in Loop: Header=BB35_37 Depth=2
	cmpl	$255, %eax
	ja	.LBB35_62
# BB#61:                                # %if.then126.i
                                        #   in Loop: Header=BB35_37 Depth=2
	movq	%rbx, %rdi
	callq	add_pair_to_block
.LBB35_62:                              # %if.end127.i
                                        #   in Loop: Header=BB35_37 Depth=2
	movl	%ebp, 92(%rbx)
	movl	$1, 96(%rbx)
.LBB35_64:                              # %if.end134.i
                                        #   in Loop: Header=BB35_37 Depth=2
	movq	(%rbx), %rax
	incq	(%rax)
	movq	(%rbx), %rax
	decl	8(%rax)
	movq	(%rbx), %rax
	incl	12(%rax)
	movq	(%rbx), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB35_66
# BB#65:                                # %if.then148.i
                                        #   in Loop: Header=BB35_37 Depth=2
	incl	16(%rax)
.LBB35_66:                              # %if.end152.i
                                        #   in Loop: Header=BB35_37 Depth=2
	decl	16(%rbx)
	movl	108(%rbx), %r13d
	movl	112(%rbx), %ebp
	movb	$1, %al
	cmpl	%ebp, %r13d
	jl	.LBB35_37
	jmp	.LBB35_67
	.align	16, 0x90
.LBB35_43:                              #   in Loop: Header=BB35_4 Depth=1
	xorl	%eax, %eax
	jmp	.LBB35_67
	.align	16, 0x90
.LBB35_9:                               #   in Loop: Header=BB35_4 Depth=1
	xorl	%eax, %eax
.LBB35_67:                              # %copy_input_until_stop.exit
                                        #   in Loop: Header=BB35_4 Depth=1
	orb	%al, %r15b
	movl	8(%rbx), %eax
	cmpl	$2, %eax
	je	.LBB35_72
# BB#68:                                # %land.lhs.true43
                                        #   in Loop: Header=BB35_4 Depth=1
	cmpl	$0, 16(%rbx)
	je	.LBB35_69
.LBB35_72:                              # %if.else
                                        #   in Loop: Header=BB35_4 Depth=1
	cmpl	%ebp, %r13d
	jge	.LBB35_73
# BB#75:                                # %if.else57
                                        #   in Loop: Header=BB35_4 Depth=1
	movq	(%rbx), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB35_4
	jmp	.LBB35_76
	.align	16, 0x90
.LBB35_73:                              # %if.then55
                                        #   in Loop: Header=BB35_4 Depth=1
	xorl	%esi, %esi
	jmp	.LBB35_74
.LBB35_69:                              # %if.then47
                                        #   in Loop: Header=BB35_4 Depth=1
	cmpl	$255, 92(%rbx)
	ja	.LBB35_71
# BB#70:                                # %if.then.i
                                        #   in Loop: Header=BB35_4 Depth=1
	movq	%rbx, %rdi
	callq	add_pair_to_block
	movl	8(%rbx), %eax
.LBB35_71:                              # %flush_RL.exit
                                        #   in Loop: Header=BB35_4 Depth=1
	movq	$256, 92(%rbx)          # imm = 0x100
	cmpl	$4, %eax
	sete	%al
	movzbl	%al, %esi
	jmp	.LBB35_74
	.align	16, 0x90
.LBB35_77:                              # %infloop
                                        # =>This Inner Loop Header: Depth=1
	jmp	.LBB35_77
.LBB35_21:
	movb	%al, %r12b
.LBB35_76:                              # %while.end
	orb	%r15b, %r12b
	setne	%bl
	movl	$43, %edi
	callq	UnPin
	movl	$0, "PinFlag-43.0"(%rip)
	movl	$0, "PinFlag-43.1"(%rip)
	movl	$0, "PinFlag-43.2"(%rip)
	movl	$0, "PinFlag-43."(%rip)
	movl	$43, %edi
	callq	UnPin
	movl	$0, "PinFlag-43.0"(%rip)
	movl	$0, "PinFlag-43.1"(%rip)
	movl	$0, "PinFlag-43.2"(%rip)
	movl	$0, "PinFlag-43."(%rip)
	movl	$43, %edi
	callq	UnPin
	movl	$0, "PinFlag-43.0"(%rip)
	movl	$0, "PinFlag-43.1"(%rip)
	movl	$0, "PinFlag-43.2"(%rip)
	movl	$0, "PinFlag-43."(%rip)
	movl	$43, %edi
	callq	UnPin
	movl	$0, "PinFlag-43.0"(%rip)
	movl	$0, "PinFlag-43.1"(%rip)
	movl	$0, "PinFlag-43.2"(%rip)
	movl	$0, "PinFlag-43."(%rip)
	movl	$43, %edi
	callq	UnPin
	movl	$0, "PinFlag-43.0"(%rip)
	movl	$0, "PinFlag-43.1"(%rip)
	movl	$0, "PinFlag-43.2"(%rip)
	movl	$0, "PinFlag-43."(%rip)
	movzbl	%bl, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB35_25:
	movb	%al, %r12b
	jmp	.LBB35_76
.LBB35_27:
	movb	%al, %r12b
	jmp	.LBB35_76
.LBB35_31:
	movb	%al, %r12b
	jmp	.LBB35_76
.LBB35_33:
	movb	%al, %r12b
	jmp	.LBB35_76
.Lfunc_end35:
	.size	handle_compress, .Lfunc_end35-handle_compress
	.cfi_endproc

	.align	16, 0x90
	.type	add_pair_to_block,@function
add_pair_to_block:                      # @add_pair_to_block
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp202:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp203:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp204:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp205:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp206:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp207:
	.cfi_def_cfa_offset 56
	pushq	%rax
.Ltmp208:
	.cfi_def_cfa_offset 64
.Ltmp209:
	.cfi_offset %rbx, -56
.Ltmp210:
	.cfi_offset %r12, -48
.Ltmp211:
	.cfi_offset %r13, -40
.Ltmp212:
	.cfi_offset %r14, -32
.Ltmp213:
	.cfi_offset %r15, -24
.Ltmp214:
	.cfi_offset %rbp, -16
	movq	%rdi, %r12
	movl	92(%r12), %r14d
	movslq	96(%r12), %r15
	testq	%r15, %r15
	jle	.LBB36_7
# BB#1:                                 # %for.body.lr.ph
	movzbl	%r14b, %r13d
	movl	648(%r12), %ebx
	xorl	%ebp, %ebp
	testb	$1, %r15b
	je	.LBB36_3
# BB#2:                                 # %for.body.prol
	movl	%ebx, %eax
	shll	$8, %eax
	shrl	$24, %ebx
	xorl	%r13d, %ebx
	xorl	BZ2_crc32Table(,%rbx,4), %eax
	movl	%eax, 648(%r12)
	movl	$1, %ebp
	movl	%eax, %ebx
.LBB36_3:                               # %for.body.lr.ph.split
	cmpl	$1, %r15d
	je	.LBB36_7
# BB#4:                                 # %for.body.lr.ph.split.split
	leal	2(%rbp), %esi
	cmpl	%esi, %r15d
	cmovgel	%r15d, %esi
	decl	%esi
	subl	%ebp, %esi
	shrl	%esi
	cmpl	$0, "PinFlag-44."(%rip)
	jne	.LBB36_6
# BB#5:
	movl	$.L__unnamed_96, %edi
	movl	$3, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-44."(%rip)
	.align	16, 0x90
.LBB36_6:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movl	%ebx, %eax
	shll	$8, %eax
	shrl	$24, %ebx
	xorl	%r13d, %ebx
	xorl	BZ2_crc32Table(,%rbx,4), %eax
	movl	%eax, 648(%r12)
	movl	%eax, %ebx
	shll	$8, %ebx
	shrl	$24, %eax
	xorl	%r13d, %eax
	xorl	BZ2_crc32Table(,%rax,4), %ebx
	movl	%ebx, 648(%r12)
	addl	$2, %ebp
	cmpl	%r15d, %ebp
	jl	.LBB36_6
.LBB36_7:                               # %for.end
	movb	$1, 128(%r12,%r14)
	cmpl	$3, %r15d
	je	.LBB36_13
# BB#8:                                 # %for.end
	cmpl	$2, %r15d
	je	.LBB36_11
# BB#9:                                 # %for.end
	cmpl	$1, %r15d
	jne	.LBB36_14
# BB#10:                                # %sw.bb
	movslq	108(%r12), %rax
	movq	64(%r12), %rcx
	movb	%r14b, (%rcx,%rax)
	jmp	.LBB36_15
.LBB36_13:                              # %sw.bb27
	movslq	108(%r12), %rax
	movq	64(%r12), %rcx
	movb	%r14b, (%rcx,%rax)
	movslq	108(%r12), %rax
	leaq	1(%rax), %rcx
	movl	%ecx, 108(%r12)
	movq	64(%r12), %rcx
	movb	%r14b, 1(%rcx,%rax)
	jmp	.LBB36_12
.LBB36_11:                              # %sw.bb14
	movslq	108(%r12), %rax
	movq	64(%r12), %rcx
	movb	%r14b, (%rcx,%rax)
.LBB36_12:                              # %sw.epilog
	movslq	108(%r12), %rax
	leaq	1(%rax), %rcx
	movl	%ecx, 108(%r12)
	movq	64(%r12), %rcx
	movb	%r14b, 1(%rcx,%rax)
	jmp	.LBB36_15
.LBB36_14:                              # %sw.default
	movb	$1, 124(%r15,%r12)
	movslq	108(%r12), %rax
	movq	64(%r12), %rcx
	movb	%r14b, (%rcx,%rax)
	movslq	108(%r12), %rax
	leaq	1(%rax), %rcx
	movl	%ecx, 108(%r12)
	movq	64(%r12), %rcx
	movb	%r14b, 1(%rcx,%rax)
	movslq	108(%r12), %rax
	leaq	1(%rax), %rcx
	movl	%ecx, 108(%r12)
	movq	64(%r12), %rcx
	movb	%r14b, 1(%rcx,%rax)
	movslq	108(%r12), %rax
	leaq	1(%rax), %rcx
	movl	%ecx, 108(%r12)
	movq	64(%r12), %rcx
	movb	%r14b, 1(%rcx,%rax)
	movslq	108(%r12), %rax
	leaq	1(%rax), %rcx
	movl	%ecx, 108(%r12)
	movl	$252, %ecx
	addl	96(%r12), %ecx
	movq	64(%r12), %rdx
	movb	%cl, 1(%rdx,%rax)
.LBB36_15:                              # %sw.epilog
	incl	108(%r12)
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end36:
	.size	add_pair_to_block, .Lfunc_end36-add_pair_to_block
	.cfi_endproc

	.globl	BZ2_bzCompressEnd
	.align	16, 0x90
	.type	BZ2_bzCompressEnd,@function
BZ2_bzCompressEnd:                      # @BZ2_bzCompressEnd
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp215:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp216:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp217:
	.cfi_def_cfa_offset 32
.Ltmp218:
	.cfi_offset %rbx, -24
.Ltmp219:
	.cfi_offset %r14, -16
	movq	%rdi, %rbx
	movl	$-2, %eax
	testq	%rbx, %rbx
	je	.LBB37_10
# BB#1:                                 # %if.end
	movq	48(%rbx), %r14
	testq	%r14, %r14
	je	.LBB37_10
# BB#2:                                 # %if.end3
	cmpq	%rbx, (%r14)
	jne	.LBB37_10
# BB#3:                                 # %if.end7
	movq	24(%r14), %rsi
	testq	%rsi, %rsi
	je	.LBB37_5
# BB#4:                                 # %if.then9
	movq	72(%rbx), %rdi
	callq	*64(%rbx)
.LBB37_5:                               # %if.end11
	movq	32(%r14), %rsi
	testq	%rsi, %rsi
	je	.LBB37_7
# BB#6:                                 # %if.then13
	movq	72(%rbx), %rdi
	callq	*64(%rbx)
.LBB37_7:                               # %if.end17
	movq	40(%r14), %rsi
	testq	%rsi, %rsi
	je	.LBB37_9
# BB#8:                                 # %if.then19
	movq	72(%rbx), %rdi
	callq	*64(%rbx)
.LBB37_9:                               # %if.end23
	movq	48(%rbx), %rsi
	movq	72(%rbx), %rdi
	callq	*64(%rbx)
	movq	$0, 48(%rbx)
	xorl	%eax, %eax
.LBB37_10:                              # %cleanup
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.Lfunc_end37:
	.size	BZ2_bzCompressEnd, .Lfunc_end37-BZ2_bzCompressEnd
	.cfi_endproc

	.globl	BZ2_bzDecompressInit
	.align	16, 0x90
	.type	BZ2_bzDecompressInit,@function
BZ2_bzDecompressInit:                   # @BZ2_bzDecompressInit
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp220:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp221:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp222:
	.cfi_def_cfa_offset 32
.Ltmp223:
	.cfi_offset %rbx, -32
.Ltmp224:
	.cfi_offset %r14, -24
.Ltmp225:
	.cfi_offset %rbp, -16
	movl	%edx, %r14d
	movl	%esi, %ebx
	movq	%rdi, %rbp
	cmpl	$4, %ebx
	movl	$-2, %eax
	ja	.LBB38_9
# BB#1:                                 # %entry
	testq	%rbp, %rbp
	je	.LBB38_9
# BB#2:                                 # %entry
	cmpl	$1, %r14d
	ja	.LBB38_9
# BB#3:                                 # %if.end10
	movq	56(%rbp), %rax
	testq	%rax, %rax
	jne	.LBB38_5
# BB#4:                                 # %if.then12
	movq	$default_bzalloc, 56(%rbp)
	movl	$default_bzalloc, %eax
.LBB38_5:                               # %if.end14
	cmpq	$0, 64(%rbp)
	jne	.LBB38_7
# BB#6:                                 # %if.then16
	movq	$default_bzfree, 64(%rbp)
.LBB38_7:                               # %if.end18
	movq	72(%rbp), %rdi
	movl	$64144, %esi            # imm = 0xFA90
	movl	$1, %edx
	callq	*%rax
	movq	%rax, %rcx
	movl	$-3, %eax
	testq	%rcx, %rcx
	je	.LBB38_9
# BB#8:                                 # %if.end23
	movq	%rbp, (%rcx)
	movq	%rcx, 48(%rbp)
	movl	$10, 8(%rcx)
	movl	$0, 36(%rcx)
	movl	$0, 32(%rcx)
	movl	$0, 3188(%rcx)
	movl	$0, 12(%rbp)
	movl	$0, 16(%rbp)
	movl	$0, 36(%rbp)
	movl	$0, 40(%rbp)
	movb	%r14b, 44(%rcx)
	movl	$0, 48(%rcx)
	xorps	%xmm0, %xmm0
	movups	%xmm0, 3152(%rcx)
	movq	$0, 3168(%rcx)
	movl	%ebx, 52(%rcx)
	xorl	%eax, %eax
.LBB38_9:                               # %cleanup
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end38:
	.size	BZ2_bzDecompressInit, .Lfunc_end38-BZ2_bzDecompressInit
	.cfi_endproc

	.globl	BZ2_indexIntoF
	.align	16, 0x90
	.type	BZ2_indexIntoF,@function
BZ2_indexIntoF:                         # @BZ2_indexIntoF
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp226:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp227:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp228:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp229:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp230:
	.cfi_def_cfa_offset 48
.Ltmp231:
	.cfi_offset %rbx, -40
.Ltmp232:
	.cfi_offset %r14, -32
.Ltmp233:
	.cfi_offset %r15, -24
.Ltmp234:
	.cfi_offset %rbp, -16
	movq	%rsi, %r14
	movl	%edi, %r15d
	xorl	%ebx, %ebx
	movl	$256, %ebp              # imm = 0x100
	cmpl	$0, "PinFlag-45."(%rip)
	jne	.LBB39_2
# BB#1:
	movl	$.L__unnamed_97, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$13, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-45."(%rip)
	.align	16, 0x90
.LBB39_2:                               # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leal	(%rbx,%rbp), %eax
	sarl	%eax
	cltq
	cmpl	%r15d, (%r14,%rax,4)
	cmovgl	%eax, %ebp
	cmovlel	%eax, %ebx
	movl	%ebp, %eax
	subl	%ebx, %eax
	cmpl	$1, %eax
	jne	.LBB39_2
# BB#3:                                 # %do.end
	movl	%ebx, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end39:
	.size	BZ2_indexIntoF, .Lfunc_end39-BZ2_indexIntoF
	.cfi_endproc

	.globl	BZ2_bzDecompress
	.align	16, 0x90
	.type	BZ2_bzDecompress,@function
BZ2_bzDecompress:                       # @BZ2_bzDecompress
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp235:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp236:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp237:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp238:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp239:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp240:
	.cfi_def_cfa_offset 56
	subq	$72, %rsp
.Ltmp241:
	.cfi_def_cfa_offset 128
.Ltmp242:
	.cfi_offset %rbx, -56
.Ltmp243:
	.cfi_offset %r12, -48
.Ltmp244:
	.cfi_offset %r13, -40
.Ltmp245:
	.cfi_offset %r14, -32
.Ltmp246:
	.cfi_offset %r15, -24
.Ltmp247:
	.cfi_offset %rbp, -16
	movl	$-2, %ebp
	testq	%rdi, %rdi
	je	.LBB40_173
# BB#1:                                 # %if.end
	movq	48(%rdi), %r15
	testq	%r15, %r15
	je	.LBB40_173
# BB#2:                                 # %if.end3
	cmpq	%rdi, (%r15)
	jne	.LBB40_173
# BB#3:                                 # %while.body.preheader
	movq	8(%r15), %r14
	cmpl	$0, "PinFlag-47."(%rip)
	jne	.LBB40_5
# BB#4:
	movl	$.L__unnamed_98, %edi
	movl	$1, %esi
	movl	$376, %edx              # imm = 0x178
	movl	$171, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movl	$1, "PinFlag-47."(%rip)
.LBB40_5:                               # %while.body.outer
	movl	%r14d, %eax
	jmp	.LBB40_6
	.align	16, 0x90
.LBB40_171:                             # %cleanup
                                        #   in Loop: Header=BB40_6 Depth=1
	movq	8(%r15), %r14
	movl	$2, %eax
	cmpl	$2, %r14d
	je	.LBB40_6
	jmp	.LBB40_172
.LBB40_68:                              # %if.then26
                                        #   in Loop: Header=BB40_6 Depth=1
	movq	stderr(%rip), %rdi
	movl	3176(%r15), %edx
	movl	$.L.str.2.37, %esi
	xorl	%eax, %eax
	callq	fprintf
	movl	52(%r15), %eax
	jmp	.LBB40_69
.LBB40_70:                              # %if.then32
                                        #   in Loop: Header=BB40_6 Depth=1
	movq	stderr(%rip), %rsi
	movl	$93, %edi
	callq	fputc
	jmp	.LBB40_71
	.align	16, 0x90
.LBB40_6:                               # %while.body.outer
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_14 Depth 2
                                        #       Child Loop BB40_28 Depth 3
                                        #       Child Loop BB40_36 Depth 3
                                        #       Child Loop BB40_45 Depth 3
                                        #       Child Loop BB40_53 Depth 3
                                        #       Child Loop BB40_60 Depth 3
                                        #     Child Loop BB40_20 Depth 2
                                        #       Child Loop BB40_83 Depth 3
                                        #       Child Loop BB40_88 Depth 3
                                        #       Child Loop BB40_94 Depth 3
                                        #       Child Loop BB40_99 Depth 3
                                        #       Child Loop BB40_102 Depth 3
                                        #     Child Loop BB40_112 Depth 2
                                        #     Child Loop BB40_141 Depth 2
                                        #       Child Loop BB40_148 Depth 3
	cmpl	$2, %eax
	je	.LBB40_107
# BB#7:                                 # %while.body.outer
                                        #   in Loop: Header=BB40_6 Depth=1
	movl	$-1, %ebp
	cmpl	$1, %eax
	je	.LBB40_172
# BB#8:                                 # %while.body.outer.split.split
                                        #   in Loop: Header=BB40_6 Depth=1
	cmpl	$9, %eax
	jg	.LBB40_73
	jmp	.LBB40_9
	.align	16, 0x90
.LBB40_107:                             # %while.body.outer.split.split.us
                                        #   in Loop: Header=BB40_6 Depth=1
	cmpb	$0, 44(%r15)
	movb	20(%r15), %al
	je	.LBB40_108
# BB#10:                                # %if.then15
                                        #   in Loop: Header=BB40_6 Depth=1
	testb	%al, %al
	movq	(%r15), %rsi
	movl	32(%rsi), %eax
	je	.LBB40_17
# BB#11:                                # %while.body2.preheader.i
                                        #   in Loop: Header=BB40_6 Depth=1
	testl	%eax, %eax
	je	.LBB40_65
# BB#12:                                # %if.end.i.preheader
                                        #   in Loop: Header=BB40_6 Depth=1
	cmpl	$0, "PinFlag-47.0"(%rip)
	jne	.LBB40_14
# BB#13:                                #   in Loop: Header=BB40_6 Depth=1
	movl	$.L__unnamed_99, %edi
	movq	%rsi, %rbx
	movl	$1, %esi
	movl	$1900, %edx             # imm = 0x76C
	movl	$319, %ecx              # imm = 0x13F
	xorl	%r8d, %r8d
	callq	Pin
	movq	%rbx, %rsi
	movl	$1, "PinFlag-47.0"(%rip)
	.align	16, 0x90
.LBB40_14:                              # %if.end.i
                                        #   Parent Loop BB40_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_28 Depth 3
                                        #       Child Loop BB40_36 Depth 3
                                        #       Child Loop BB40_45 Depth 3
                                        #       Child Loop BB40_53 Depth 3
                                        #       Child Loop BB40_60 Depth 3
	cmpl	$0, 16(%r15)
	je	.LBB40_23
# BB#15:                                # %if.end6.i
                                        #   in Loop: Header=BB40_14 Depth=2
	movb	12(%r15), %al
	movq	24(%rsi), %rcx
	movb	%al, (%rcx)
	movl	3184(%r15), %eax
	movl	%eax, %ecx
	shll	$8, %ecx
	shrl	$24, %eax
	movzbl	12(%r15), %edx
	xorl	%eax, %edx
	xorl	BZ2_crc32Table(,%rdx,4), %ecx
	movl	%ecx, 3184(%r15)
	decl	16(%r15)
	movq	(%r15), %rax
	incq	24(%rax)
	movq	(%r15), %rax
	decl	32(%rax)
	movq	(%r15), %rax
	incl	36(%rax)
	movq	(%r15), %rsi
	cmpl	$0, 36(%rsi)
	jne	.LBB40_64
# BB#16:                                # %if.then23.i
                                        #   in Loop: Header=BB40_14 Depth=2
	incl	40(%rsi)
	movq	(%r15), %rsi
	jmp	.LBB40_64
	.align	16, 0x90
.LBB40_23:                              # %while.end.i
                                        #   in Loop: Header=BB40_14 Depth=2
	movl	1092(%r15), %r10d
	movl	64080(%r15), %r11d
	leal	1(%r11), %eax
	cmpl	%eax, %r10d
	je	.LBB40_65
# BB#24:                                # %if.end30.i
                                        #   in Loop: Header=BB40_14 Depth=2
	movl	$-4, %ebp
	jg	.LBB40_173
# BB#25:                                # %if.end37.i
                                        #   in Loop: Header=BB40_14 Depth=2
	movl	$1, 16(%r15)
	movl	64(%r15), %eax
	movb	%al, 12(%r15)
	movl	60(%r15), %r12d
	xorl	%ebx, %ebx
	movl	$256, %ebp              # imm = 0x100
	cmpl	$0, "PinFlag-47.00"(%rip)
	je	.LBB40_27
# BB#26:                                #   in Loop: Header=BB40_14 Depth=2
	movl	%eax, 68(%rsp)          # 4-byte Spill
	jmp	.LBB40_28
.LBB40_27:                              #   in Loop: Header=BB40_14 Depth=2
	movl	%eax, 68(%rsp)          # 4-byte Spill
	xorl	%ebx, %ebx
	movl	$.L__unnamed_100, %edi
	movq	%rsi, 56(%rsp)          # 8-byte Spill
	movl	$1, %esi
	movq	%r10, %r13
	xorl	%edx, %edx
	movl	$13, %ecx
	movl	$1, %r8d
	movq	%r11, %r14
	callq	Pin
	movq	%r14, %r11
	movq	%r13, %r10
	movq	56(%rsp), %rsi          # 8-byte Reload
	movl	$1, "PinFlag-47.00"(%rip)
	.align	16, 0x90
.LBB40_28:                              # %do.body.i.i
                                        #   Parent Loop BB40_6 Depth=1
                                        #     Parent Loop BB40_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	leal	(%rbx,%rbp), %eax
	sarl	%eax
	cltq
	cmpl	%r12d, 1096(%r15,%rax,4)
	cmovgl	%eax, %ebp
	cmovlel	%eax, %ebx
	movl	%ebp, %eax
	subl	%ebx, %eax
	cmpl	$1, %eax
	jne	.LBB40_28
# BB#29:                                # %BZ2_indexIntoF.exit.i
                                        #   in Loop: Header=BB40_14 Depth=2
	movq	3160(%r15), %r9
	movq	3168(%r15), %r8
	movzwl	(%r9,%r12,2), %r13d
	movl	%r12d, %eax
	shrl	%eax
	movzbl	(%r8,%rax), %r14d
	leal	(,%r12,4), %ecx
	andb	$4, %cl
	shrl	%cl, %r14d
	andl	$15, %r14d
	shll	$16, %r14d
	orl	%r13d, %r14d
	movl	%r14d, 60(%r15)
	movq	24(%r15), %rdx
	movq	%rdx, %rdi
	shrq	$32, %rdi
	testl	%edx, %edx
	jne	.LBB40_31
# BB#30:                                # %if.then59.i
                                        #   in Loop: Header=BB40_14 Depth=2
	sarq	$32, %rdx
	movl	BZ2_rNums(,%rdx,4), %edx
	movl	%edx, 24(%r15)
	incl	%edi
	xorl	%eax, %eax
	cmpl	$512, %edi              # imm = 0x200
	cmovnel	%edi, %eax
	movl	%eax, 28(%r15)
	movl	%eax, %edi
.LBB40_31:                              # %if.end71.i
                                        #   in Loop: Header=BB40_14 Depth=2
	decl	%edx
	movl	%edx, 24(%r15)
	leal	1(%r10), %ebp
	movl	%ebp, 1092(%r15)
	cmpl	%r11d, %r10d
	je	.LBB40_64
# BB#32:                                # %if.end88.i
                                        #   in Loop: Header=BB40_14 Depth=2
	cmpl	$1, %edx
	sete	%al
	movzbl	%al, %ecx
	movzbl	%bl, %eax
	xorl	%ecx, %eax
	movl	68(%rsp), %ecx          # 4-byte Reload
	cmpl	%ecx, %eax
	jne	.LBB40_33
# BB#34:                                # %if.end96.i
                                        #   in Loop: Header=BB40_14 Depth=2
	movq	%rdi, 48(%rsp)          # 8-byte Spill
	movl	$2, 16(%r15)
	xorl	%r12d, %r12d
	movl	$256, %ebx              # imm = 0x100
	cmpl	$0, "PinFlag-47.01"(%rip)
	jne	.LBB40_36
# BB#35:                                #   in Loop: Header=BB40_14 Depth=2
	xorl	%r12d, %r12d
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	movl	$.L__unnamed_101, %edi
	movq	%rsi, 56(%rsp)          # 8-byte Spill
	movl	$1, %esi
	movq	%r10, 40(%rsp)          # 8-byte Spill
	xorl	%edx, %edx
	movl	$13, %ecx
	movq	%r8, 32(%rsp)           # 8-byte Spill
	movl	$1, %r8d
	movq	%r9, 16(%rsp)           # 8-byte Spill
	movl	%ebp, 12(%rsp)          # 4-byte Spill
	movq	%r11, %rbp
	callq	Pin
	movq	%rbp, %r11
	movl	12(%rsp), %ebp          # 4-byte Reload
	movq	16(%rsp), %r9           # 8-byte Reload
	movq	32(%rsp), %r8           # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	40(%rsp), %r10          # 8-byte Reload
	movq	56(%rsp), %rsi          # 8-byte Reload
	movl	$1, "PinFlag-47.01"(%rip)
	.align	16, 0x90
.LBB40_36:                              # %do.body.i922.i
                                        #   Parent Loop BB40_6 Depth=1
                                        #     Parent Loop BB40_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	leal	(%r12,%rbx), %eax
	sarl	%eax
	cltq
	cmpl	%r14d, 1096(%r15,%rax,4)
	cmovgl	%eax, %ebx
	cmovlel	%eax, %r12d
	movl	%ebx, %eax
	subl	%r12d, %eax
	cmpl	$1, %eax
	jne	.LBB40_36
# BB#37:                                # %BZ2_indexIntoF.exit923.i
                                        #   in Loop: Header=BB40_14 Depth=2
	movl	%r14d, %eax
	movzwl	(%r9,%rax,2), %edi
	shrl	%r14d
	movzbl	(%r8,%r14), %r14d
	shll	$2, %r13d
	andb	$4, %r13b
	movb	%r13b, %cl
	shrl	%cl, %r14d
	andl	$15, %r14d
	shll	$16, %r14d
	orl	%edi, %r14d
	movl	%r14d, 60(%r15)
	testl	%edx, %edx
	jne	.LBB40_39
# BB#38:                                # %if.then125.i
                                        #   in Loop: Header=BB40_14 Depth=2
	movq	48(%rsp), %rax          # 8-byte Reload
	cltq
	movl	BZ2_rNums(,%rax,4), %edx
	movl	%edx, 24(%r15)
	incl	%eax
	xorl	%ecx, %ecx
	cmpl	$512, %eax              # imm = 0x200
	cmovnel	%eax, %ecx
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movl	%ecx, 28(%r15)
.LBB40_39:                              # %if.end138.i
                                        #   in Loop: Header=BB40_14 Depth=2
	decl	%edx
	movl	%edx, 24(%r15)
	leal	2(%r10), %ebx
	movl	%ebx, 1092(%r15)
	cmpl	%r11d, %ebp
	je	.LBB40_64
# BB#40:                                # %if.end156.i
                                        #   in Loop: Header=BB40_14 Depth=2
	cmpl	$1, %edx
	sete	%al
	movzbl	%al, %ecx
	movzbl	%r12b, %eax
	xorl	%ecx, %eax
	cmpl	68(%rsp), %eax          # 4-byte Folded Reload
	jne	.LBB40_41
# BB#42:                                # %if.end164.i
                                        #   in Loop: Header=BB40_14 Depth=2
	movl	%ebx, 12(%rsp)          # 4-byte Spill
	movl	%edi, %r13d
	movl	$3, 16(%r15)
	xorl	%ebp, %ebp
	movl	$256, %ebx              # imm = 0x100
	cmpl	$0, "PinFlag-47.02"(%rip)
	jne	.LBB40_44
# BB#43:                                #   in Loop: Header=BB40_14 Depth=2
	xorl	%ebp, %ebp
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	movl	$.L__unnamed_102, %edi
	movq	%rsi, 56(%rsp)          # 8-byte Spill
	movl	$1, %esi
	movq	%r10, 40(%rsp)          # 8-byte Spill
	xorl	%edx, %edx
	movl	$13, %ecx
	movq	%r8, 32(%rsp)           # 8-byte Spill
	movl	$1, %r8d
	movq	%r9, 16(%rsp)           # 8-byte Spill
	movq	%r11, %r12
	callq	Pin
	movq	%r12, %r11
	movq	16(%rsp), %r9           # 8-byte Reload
	movq	32(%rsp), %r8           # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	40(%rsp), %r10          # 8-byte Reload
	movq	56(%rsp), %rsi          # 8-byte Reload
	movl	$1, "PinFlag-47.02"(%rip)
.LBB40_44:                              # %do.body.i909.i
                                        #   in Loop: Header=BB40_14 Depth=2
	movl	%r13d, %ecx
	.align	16, 0x90
.LBB40_45:                              # %do.body.i909.i
                                        #   Parent Loop BB40_6 Depth=1
                                        #     Parent Loop BB40_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	leal	(%rbp,%rbx), %eax
	sarl	%eax
	cltq
	cmpl	%r14d, 1096(%r15,%rax,4)
	cmovgl	%eax, %ebx
	cmovlel	%eax, %ebp
	movl	%ebx, %eax
	subl	%ebp, %eax
	cmpl	$1, %eax
	jne	.LBB40_45
# BB#46:                                # %BZ2_indexIntoF.exit910.i
                                        #   in Loop: Header=BB40_14 Depth=2
	movl	%r14d, %eax
	movzwl	(%r9,%rax,2), %r12d
	shrl	%r14d
	movzbl	(%r8,%r14), %r13d
	shll	$2, %ecx
	andb	$4, %cl
	shrl	%cl, %r13d
	andl	$15, %r13d
	shll	$16, %r13d
	orl	%r12d, %r13d
	movl	%r13d, 60(%r15)
	testl	%edx, %edx
	jne	.LBB40_48
# BB#47:                                # %if.then193.i
                                        #   in Loop: Header=BB40_14 Depth=2
	movq	48(%rsp), %rax          # 8-byte Reload
	cltq
	movl	BZ2_rNums(,%rax,4), %edx
	movl	%edx, 24(%r15)
	incl	%eax
	xorl	%ecx, %ecx
	cmpl	$512, %eax              # imm = 0x200
	cmovnel	%eax, %ecx
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movl	%ecx, 28(%r15)
.LBB40_48:                              # %if.end206.i
                                        #   in Loop: Header=BB40_14 Depth=2
	movl	12(%rsp), %ecx          # 4-byte Reload
	decl	%edx
	movl	%edx, 24(%r15)
	leal	3(%r10), %eax
	movl	%eax, 1092(%r15)
	cmpl	%r11d, %ecx
	je	.LBB40_64
# BB#49:                                # %if.end224.i
                                        #   in Loop: Header=BB40_14 Depth=2
	cmpl	$1, %edx
	sete	%al
	movzbl	%al, %ecx
	movzbl	%bpl, %eax
	xorl	%ecx, %eax
	cmpl	68(%rsp), %eax          # 4-byte Folded Reload
	jne	.LBB40_174
# BB#50:                                # %do.body.i896.i.preheader
                                        #   in Loop: Header=BB40_14 Depth=2
	movq	%rdx, %r14
	xorl	%ebp, %ebp
	movl	$256, %ebx              # imm = 0x100
	cmpl	$0, "PinFlag-47.03"(%rip)
	jne	.LBB40_52
# BB#51:                                #   in Loop: Header=BB40_14 Depth=2
	xorl	%ebp, %ebp
	movl	$.L__unnamed_103, %edi
	movq	%rsi, 56(%rsp)          # 8-byte Spill
	movl	$1, %esi
	movq	%r10, 40(%rsp)          # 8-byte Spill
	xorl	%edx, %edx
	movl	$13, %ecx
	movq	%r8, 32(%rsp)           # 8-byte Spill
	movl	$1, %r8d
	movq	%r9, 16(%rsp)           # 8-byte Spill
	callq	Pin
	movq	16(%rsp), %r9           # 8-byte Reload
	movq	32(%rsp), %r8           # 8-byte Reload
	movq	40(%rsp), %r10          # 8-byte Reload
	movq	56(%rsp), %rsi          # 8-byte Reload
	movl	$1, "PinFlag-47.03"(%rip)
.LBB40_52:                              # %do.body.i896.i
                                        #   in Loop: Header=BB40_14 Depth=2
	movq	%r14, %rdi
	.align	16, 0x90
.LBB40_53:                              # %do.body.i896.i
                                        #   Parent Loop BB40_6 Depth=1
                                        #     Parent Loop BB40_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	leal	(%rbp,%rbx), %eax
	sarl	%eax
	cltq
	cmpl	%r13d, 1096(%r15,%rax,4)
	cmovgl	%eax, %ebx
	cmovlel	%eax, %ebp
	movl	%ebx, %eax
	subl	%ebp, %eax
	cmpl	$1, %eax
	jne	.LBB40_53
# BB#54:                                # %BZ2_indexIntoF.exit897.i
                                        #   in Loop: Header=BB40_14 Depth=2
	movl	%r13d, %eax
	movzwl	(%r9,%rax,2), %eax
	movl	%eax, 68(%rsp)          # 4-byte Spill
	shrl	%r13d
	movzbl	(%r8,%r13), %r14d
	shll	$2, %r12d
	andb	$4, %r12b
	movb	%r12b, %cl
	shrl	%cl, %r14d
	andl	$15, %r14d
	shll	$16, %r14d
	orl	%eax, %r14d
	movl	%r14d, 60(%r15)
	testl	%edi, %edi
	je	.LBB40_56
# BB#55:                                #   in Loop: Header=BB40_14 Depth=2
	movq	48(%rsp), %r13          # 8-byte Reload
	jmp	.LBB40_57
.LBB40_33:                              # %if.then93.i
                                        #   in Loop: Header=BB40_14 Depth=2
	movl	%eax, 64(%r15)
	jmp	.LBB40_64
.LBB40_41:                              # %if.then161.i
                                        #   in Loop: Header=BB40_14 Depth=2
	movl	%eax, 64(%r15)
	jmp	.LBB40_64
.LBB40_174:                             # %if.then229.i
                                        #   in Loop: Header=BB40_14 Depth=2
	movl	%eax, 64(%r15)
	jmp	.LBB40_64
.LBB40_56:                              # %if.then260.i
                                        #   in Loop: Header=BB40_14 Depth=2
	movq	48(%rsp), %rax          # 8-byte Reload
	cltq
	movl	BZ2_rNums(,%rax,4), %edi
	movl	%edi, 24(%r15)
	incl	%eax
	xorl	%r13d, %r13d
	cmpl	$512, %eax              # imm = 0x200
	cmovnel	%eax, %r13d
	movl	%r13d, 28(%r15)
.LBB40_57:                              # %if.end273.i
                                        #   in Loop: Header=BB40_14 Depth=2
	decl	%edi
	movl	%edi, 24(%r15)
	cmpl	$1, %edi
	sete	%al
	movzbl	%al, %eax
	leal	4(%r10), %ecx
	movl	%ecx, 1092(%r15)
	movzbl	%bpl, %ecx
	xorl	%eax, %ecx
	addl	$4, %ecx
	movl	%ecx, 16(%r15)
	xorl	%ebp, %ebp
	movl	$256, %ebx              # imm = 0x100
	cmpl	$0, "PinFlag-47.04"(%rip)
	je	.LBB40_59
# BB#58:                                #   in Loop: Header=BB40_14 Depth=2
	movq	%r10, 40(%rsp)          # 8-byte Spill
	jmp	.LBB40_60
.LBB40_59:                              #   in Loop: Header=BB40_14 Depth=2
	movq	%r10, 40(%rsp)          # 8-byte Spill
	xorl	%ebp, %ebp
	movq	%rdi, 24(%rsp)          # 8-byte Spill
	movl	$.L__unnamed_104, %edi
	movq	%rsi, 56(%rsp)          # 8-byte Spill
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$13, %ecx
	movq	%r8, 32(%rsp)           # 8-byte Spill
	movl	$1, %r8d
	movq	%r9, %r12
	callq	Pin
	movq	%r12, %r9
	movq	32(%rsp), %r8           # 8-byte Reload
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	56(%rsp), %rsi          # 8-byte Reload
	movl	$1, "PinFlag-47.04"(%rip)
	.align	16, 0x90
.LBB40_60:                              # %do.body.i883.i
                                        #   Parent Loop BB40_6 Depth=1
                                        #     Parent Loop BB40_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	leal	(%rbp,%rbx), %eax
	sarl	%eax
	cltq
	cmpl	%r14d, 1096(%r15,%rax,4)
	cmovgl	%eax, %ebx
	cmovlel	%eax, %ebp
	movl	%ebx, %eax
	subl	%ebp, %eax
	cmpl	$1, %eax
	jne	.LBB40_60
# BB#61:                                # %BZ2_indexIntoF.exit884.i
                                        #   in Loop: Header=BB40_14 Depth=2
	movl	%ebp, 64(%r15)
	movl	%r14d, %eax
	movzwl	(%r9,%rax,2), %eax
	shrl	%r14d
	movzbl	(%r8,%r14), %edx
	movl	68(%rsp), %ecx          # 4-byte Reload
	shll	$2, %ecx
	andb	$4, %cl
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%eax, %edx
	movl	%edx, 60(%r15)
	testl	%edi, %edi
	jne	.LBB40_63
# BB#62:                                # %if.then315.i
                                        #   in Loop: Header=BB40_14 Depth=2
	movslq	%r13d, %rax
	movl	BZ2_rNums(,%rax,4), %edi
	movl	%edi, 24(%r15)
	incl	%eax
	xorl	%ecx, %ecx
	cmpl	$512, %eax              # imm = 0x200
	cmovnel	%eax, %ecx
	movl	%ecx, 28(%r15)
.LBB40_63:                              # %if.end328.i
                                        #   in Loop: Header=BB40_14 Depth=2
	decl	%edi
	movl	%edi, 24(%r15)
	cmpl	$1, %edi
	sete	%al
	movzbl	%al, %eax
	xorl	%ebp, %eax
	movl	%eax, 64(%r15)
	movq	40(%rsp), %r13          # 8-byte Reload
	addl	$5, %r13d
	movl	%r13d, 1092(%r15)
	.align	16, 0x90
.LBB40_64:                              # %while.body2.backedge.i
                                        #   in Loop: Header=BB40_14 Depth=2
	cmpl	$0, 32(%rsi)
	jne	.LBB40_14
	jmp	.LBB40_65
.LBB40_108:                             # %if.else
                                        #   in Loop: Header=BB40_6 Depth=1
	testb	%al, %al
	je	.LBB40_138
# BB#109:                               # %while.body2.preheader.i110
                                        #   in Loop: Header=BB40_6 Depth=1
	movq	(%r15), %r14
	cmpl	$0, 32(%r14)
	je	.LBB40_65
# BB#110:                               # %if.end.i121.preheader
                                        #   in Loop: Header=BB40_6 Depth=1
	cmpl	$0, "PinFlag-47.2"(%rip)
	jne	.LBB40_112
# BB#111:                               #   in Loop: Header=BB40_6 Depth=1
	movl	$.L__unnamed_105, %edi
	movl	$1, %esi
	movl	$209, %edx
	movl	$224, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-47.2"(%rip)
	.align	16, 0x90
.LBB40_112:                             # %if.end.i121
                                        #   Parent Loop BB40_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, 16(%r15)
	je	.LBB40_115
# BB#113:                               # %if.end6.i139
                                        #   in Loop: Header=BB40_112 Depth=2
	movb	12(%r15), %al
	movq	24(%r14), %rcx
	movb	%al, (%rcx)
	movl	3184(%r15), %eax
	movl	%eax, %ecx
	shll	$8, %ecx
	shrl	$24, %eax
	movzbl	12(%r15), %edx
	xorl	%eax, %edx
	xorl	BZ2_crc32Table(,%rdx,4), %ecx
	movl	%ecx, 3184(%r15)
	decl	16(%r15)
	movq	(%r15), %rax
	incq	24(%rax)
	movq	(%r15), %rax
	decl	32(%rax)
	movq	(%r15), %rax
	incl	36(%rax)
	movq	(%r15), %r14
	cmpl	$0, 36(%r14)
	jne	.LBB40_137
# BB#114:                               # %if.then23.i143
                                        #   in Loop: Header=BB40_112 Depth=2
	incl	40(%r14)
	movq	(%r15), %r14
	jmp	.LBB40_137
	.align	16, 0x90
.LBB40_115:                             # %while.end.i146
                                        #   in Loop: Header=BB40_112 Depth=2
	movl	1092(%r15), %r11d
	movl	64080(%r15), %edi
	leal	1(%rdi), %eax
	cmpl	%eax, %r11d
	je	.LBB40_65
# BB#116:                               # %if.end30.i148
                                        #   in Loop: Header=BB40_112 Depth=2
	movl	$-4, %ebp
	jg	.LBB40_173
# BB#117:                               # %if.end37.i151
                                        #   in Loop: Header=BB40_112 Depth=2
	movl	$1, 16(%r15)
	movl	64(%r15), %r9d
	movb	%r9b, 12(%r15)
	movl	60(%r15), %eax
	movq	3152(%r15), %r8
	movl	(%r8,%rax,4), %eax
	movl	%eax, %edx
	shrl	$8, %edx
	movl	%edx, 60(%r15)
	movq	24(%r15), %rcx
	movq	%rcx, %rsi
	shrq	$32, %rsi
	testl	%ecx, %ecx
	jne	.LBB40_119
# BB#118:                               # %if.then50.i
                                        #   in Loop: Header=BB40_112 Depth=2
	sarq	$32, %rcx
	movl	BZ2_rNums(,%rcx,4), %ecx
	movl	%ecx, 24(%r15)
	incl	%esi
	xorl	%ebp, %ebp
	cmpl	$512, %esi              # imm = 0x200
	cmovnel	%esi, %ebp
	movl	%ebp, 28(%r15)
	movl	%ebp, %esi
.LBB40_119:                             # %if.end62.i
                                        #   in Loop: Header=BB40_112 Depth=2
	decl	%ecx
	movl	%ecx, 24(%r15)
	leal	1(%r11), %ebp
	movl	%ebp, 1092(%r15)
	cmpl	%edi, %r11d
	je	.LBB40_137
# BB#120:                               # %if.end79.i
                                        #   in Loop: Header=BB40_112 Depth=2
	cmpl	$1, %ecx
	sete	%bl
	movzbl	%bl, %ebx
	movzbl	%al, %eax
	xorl	%ebx, %eax
	cmpl	%r9d, %eax
	jne	.LBB40_121
# BB#122:                               # %if.end87.i
                                        #   in Loop: Header=BB40_112 Depth=2
	movl	$2, 16(%r15)
	movl	%edx, %eax
	movl	(%r8,%rax,4), %eax
	movl	%eax, %edx
	shrl	$8, %edx
	movl	%edx, 60(%r15)
	testl	%ecx, %ecx
	jne	.LBB40_124
# BB#123:                               # %if.then102.i
                                        #   in Loop: Header=BB40_112 Depth=2
	movslq	%esi, %rbx
	movl	BZ2_rNums(,%rbx,4), %ecx
	movl	%ecx, 24(%r15)
	incl	%ebx
	xorl	%esi, %esi
	cmpl	$512, %ebx              # imm = 0x200
	cmovnel	%ebx, %esi
	movl	%esi, 28(%r15)
.LBB40_124:                             # %if.end115.i
                                        #   in Loop: Header=BB40_112 Depth=2
	decl	%ecx
	movl	%ecx, 24(%r15)
	leal	2(%r11), %r10d
	movl	%r10d, 1092(%r15)
	cmpl	%edi, %ebp
	je	.LBB40_137
# BB#125:                               # %if.end133.i
                                        #   in Loop: Header=BB40_112 Depth=2
	cmpl	$1, %ecx
	sete	%bl
	movzbl	%bl, %ebx
	movzbl	%al, %eax
	xorl	%ebx, %eax
	cmpl	%r9d, %eax
	jne	.LBB40_126
# BB#127:                               # %if.end141.i
                                        #   in Loop: Header=BB40_112 Depth=2
	movl	$3, 16(%r15)
	movl	%edx, %eax
	movl	(%r8,%rax,4), %eax
	movl	%eax, %edx
	shrl	$8, %edx
	movl	%edx, 60(%r15)
	testl	%ecx, %ecx
	jne	.LBB40_129
# BB#128:                               # %if.then156.i
                                        #   in Loop: Header=BB40_112 Depth=2
	movslq	%esi, %rbx
	movl	BZ2_rNums(,%rbx,4), %ecx
	movl	%ecx, 24(%r15)
	incl	%ebx
	xorl	%esi, %esi
	cmpl	$512, %ebx              # imm = 0x200
	cmovnel	%ebx, %esi
	movl	%esi, 28(%r15)
.LBB40_129:                             # %if.end169.i
                                        #   in Loop: Header=BB40_112 Depth=2
	decl	%ecx
	movl	%ecx, 24(%r15)
	leal	3(%r11), %ebx
	movl	%ebx, 1092(%r15)
	cmpl	%edi, %r10d
	je	.LBB40_137
# BB#130:                               # %if.end187.i
                                        #   in Loop: Header=BB40_112 Depth=2
	cmpl	$1, %ecx
	sete	%bl
	movzbl	%bl, %edi
	movzbl	%al, %eax
	xorl	%edi, %eax
	cmpl	%r9d, %eax
	jne	.LBB40_131
# BB#132:                               # %if.end195.i
                                        #   in Loop: Header=BB40_112 Depth=2
	movl	%edx, %eax
	movl	(%r8,%rax,4), %edx
	movl	%edx, %eax
	shrl	$8, %eax
	movl	%eax, 60(%r15)
	testl	%ecx, %ecx
	jne	.LBB40_134
# BB#133:                               # %if.then209.i
                                        #   in Loop: Header=BB40_112 Depth=2
	movslq	%esi, %rdi
	movl	BZ2_rNums(,%rdi,4), %ecx
	movl	%ecx, 24(%r15)
	incl	%edi
	xorl	%esi, %esi
	cmpl	$512, %edi              # imm = 0x200
	cmovnel	%edi, %esi
	movl	%esi, 28(%r15)
.LBB40_134:                             # %if.end222.i
                                        #   in Loop: Header=BB40_112 Depth=2
	leal	-1(%rcx), %edi
	movl	%edi, 24(%r15)
	cmpl	$1, %edi
	sete	%bl
	movzbl	%bl, %edi
	leal	4(%r11), %ebp
	movl	%ebp, 1092(%r15)
	movzbl	%dl, %edx
	xorl	%edi, %edx
	addl	$4, %edx
	movl	%edx, 16(%r15)
	movl	%eax, %eax
	movl	(%r8,%rax,4), %edx
	movzbl	%dl, %eax
	shrl	$8, %edx
	decl	%ecx
	movl	%eax, 64(%r15)
	movl	%edx, 60(%r15)
	jne	.LBB40_136
# BB#135:                               # %if.then252.i
                                        #   in Loop: Header=BB40_112 Depth=2
	movslq	%esi, %rdx
	movl	BZ2_rNums(,%rdx,4), %ecx
	movl	%ecx, 24(%r15)
	incl	%edx
	xorl	%esi, %esi
	cmpl	$512, %edx              # imm = 0x200
	cmovnel	%edx, %esi
	movl	%esi, 28(%r15)
.LBB40_136:                             # %if.end265.i
                                        #   in Loop: Header=BB40_112 Depth=2
	decl	%ecx
	movl	%ecx, 24(%r15)
	cmpl	$1, %ecx
	sete	%cl
	movzbl	%cl, %ecx
	xorl	%eax, %ecx
	movl	%ecx, 64(%r15)
	addl	$5, %r11d
	movl	%r11d, 1092(%r15)
	jmp	.LBB40_137
.LBB40_121:                             # %if.then84.i
                                        #   in Loop: Header=BB40_112 Depth=2
	movl	%eax, 64(%r15)
	jmp	.LBB40_137
.LBB40_126:                             # %if.then138.i
                                        #   in Loop: Header=BB40_112 Depth=2
	movl	%eax, 64(%r15)
	jmp	.LBB40_137
.LBB40_131:                             # %if.then192.i
                                        #   in Loop: Header=BB40_112 Depth=2
	movl	%eax, 64(%r15)
	.align	16, 0x90
.LBB40_137:                             # %while.body2.backedge.i158
                                        #   in Loop: Header=BB40_112 Depth=2
	cmpl	$0, 32(%r14)
	jne	.LBB40_112
	jmp	.LBB40_65
.LBB40_17:                              # %while.body342.preheader.i
                                        #   in Loop: Header=BB40_6 Depth=1
	testl	%eax, %eax
	je	.LBB40_65
# BB#18:                                # %if.end348.i.preheader
                                        #   in Loop: Header=BB40_6 Depth=1
	cmpl	$0, "PinFlag-47.1"(%rip)
	jne	.LBB40_20
# BB#19:                                #   in Loop: Header=BB40_6 Depth=1
	movl	$.L__unnamed_106, %edi
	movq	%rsi, %rbx
	movl	$1, %esi
	movl	$1313, %edx             # imm = 0x521
	movl	$225, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movq	%rbx, %rsi
	movl	$1, "PinFlag-47.1"(%rip)
	.align	16, 0x90
.LBB40_20:                              # %if.end348.i
                                        #   Parent Loop BB40_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_83 Depth 3
                                        #       Child Loop BB40_88 Depth 3
                                        #       Child Loop BB40_94 Depth 3
                                        #       Child Loop BB40_99 Depth 3
                                        #       Child Loop BB40_102 Depth 3
	cmpl	$0, 16(%r15)
	je	.LBB40_78
# BB#21:                                # %if.end353.i
                                        #   in Loop: Header=BB40_20 Depth=2
	movb	12(%r15), %al
	movq	24(%rsi), %rcx
	movb	%al, (%rcx)
	movl	3184(%r15), %eax
	movl	%eax, %ecx
	shll	$8, %ecx
	shrl	$24, %eax
	movzbl	12(%r15), %edx
	xorl	%eax, %edx
	xorl	BZ2_crc32Table(,%rdx,4), %ecx
	movl	%ecx, 3184(%r15)
	decl	16(%r15)
	movq	(%r15), %rax
	incq	24(%rax)
	movq	(%r15), %rax
	decl	32(%rax)
	movq	(%r15), %rax
	incl	36(%rax)
	movq	(%r15), %rsi
	cmpl	$0, 36(%rsi)
	jne	.LBB40_106
# BB#22:                                # %if.then383.i
                                        #   in Loop: Header=BB40_20 Depth=2
	incl	40(%rsi)
	movq	(%r15), %rsi
	jmp	.LBB40_106
	.align	16, 0x90
.LBB40_78:                              # %while.end388.i
                                        #   in Loop: Header=BB40_20 Depth=2
	movl	1092(%r15), %edx
	movl	64080(%r15), %edi
	leal	1(%rdi), %eax
	cmpl	%eax, %edx
	je	.LBB40_65
# BB#79:                                # %if.end395.i
                                        #   in Loop: Header=BB40_20 Depth=2
	movl	$-4, %ebp
	jg	.LBB40_173
# BB#80:                                # %if.end402.i
                                        #   in Loop: Header=BB40_20 Depth=2
	movl	$1, 16(%r15)
	movl	64(%r15), %eax
	movb	%al, 12(%r15)
	movl	60(%r15), %r13d
	xorl	%ebx, %ebx
	movl	$256, %ebp              # imm = 0x100
	cmpl	$0, "PinFlag-47.10"(%rip)
	je	.LBB40_82
# BB#81:                                #   in Loop: Header=BB40_20 Depth=2
	movl	%eax, 68(%rsp)          # 4-byte Spill
	jmp	.LBB40_83
.LBB40_82:                              #   in Loop: Header=BB40_20 Depth=2
	movl	%eax, 68(%rsp)          # 4-byte Spill
	xorl	%ebx, %ebx
	movq	%rdx, %r12
	movq	%rdi, 48(%rsp)          # 8-byte Spill
	movl	$.L__unnamed_107, %edi
	movq	%rsi, %r14
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$13, %ecx
	movl	$1, %r8d
	callq	Pin
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	%r12, %rdx
	movq	%r14, %rsi
	movl	$1, "PinFlag-47.10"(%rip)
	.align	16, 0x90
.LBB40_83:                              # %do.body.i870.i
                                        #   Parent Loop BB40_6 Depth=1
                                        #     Parent Loop BB40_20 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	leal	(%rbx,%rbp), %eax
	sarl	%eax
	cltq
	cmpl	%r13d, 1096(%r15,%rax,4)
	cmovgl	%eax, %ebp
	cmovlel	%eax, %ebx
	movl	%ebp, %eax
	subl	%ebx, %eax
	cmpl	$1, %eax
	jne	.LBB40_83
# BB#84:                                # %BZ2_indexIntoF.exit871.i
                                        #   in Loop: Header=BB40_20 Depth=2
	movq	3160(%r15), %r9
	movq	3168(%r15), %r8
	movzwl	(%r9,%r13,2), %r12d
	movl	%r13d, %eax
	shrl	%eax
	movzbl	(%r8,%rax), %r14d
	leal	(,%r13,4), %ecx
	andb	$4, %cl
	shrl	%cl, %r14d
	andl	$15, %r14d
	shll	$16, %r14d
	orl	%r12d, %r14d
	movl	%r14d, 60(%r15)
	leal	1(%rdx), %ebp
	movl	%ebp, 1092(%r15)
	cmpl	%edi, %edx
	je	.LBB40_106
# BB#85:                                # %if.end439.i
                                        #   in Loop: Header=BB40_20 Depth=2
	movzbl	%bl, %eax
	movl	68(%rsp), %ecx          # 4-byte Reload
	cmpl	%ecx, %eax
	jne	.LBB40_105
# BB#86:                                # %if.end447.i
                                        #   in Loop: Header=BB40_20 Depth=2
	movl	$2, 16(%r15)
	xorl	%r13d, %r13d
	movl	$256, %ebx              # imm = 0x100
	cmpl	$0, "PinFlag-47.11"(%rip)
	jne	.LBB40_88
# BB#87:                                #   in Loop: Header=BB40_20 Depth=2
	xorl	%r13d, %r13d
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	movq	%rdi, 48(%rsp)          # 8-byte Spill
	movl	$.L__unnamed_108, %edi
	movq	%rsi, 56(%rsp)          # 8-byte Spill
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$13, %ecx
	movq	%r8, 32(%rsp)           # 8-byte Spill
	movl	$1, %r8d
	movq	%r9, 40(%rsp)           # 8-byte Spill
	callq	Pin
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	40(%rsp), %r9           # 8-byte Reload
	movq	32(%rsp), %r8           # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rsi          # 8-byte Reload
	movl	$1, "PinFlag-47.11"(%rip)
	.align	16, 0x90
.LBB40_88:                              # %do.body.i857.i
                                        #   Parent Loop BB40_6 Depth=1
                                        #     Parent Loop BB40_20 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	leal	(%r13,%rbx), %eax
	sarl	%eax
	cltq
	cmpl	%r14d, 1096(%r15,%rax,4)
	cmovgl	%eax, %ebx
	cmovlel	%eax, %r13d
	movl	%ebx, %eax
	subl	%r13d, %eax
	cmpl	$1, %eax
	jne	.LBB40_88
# BB#89:                                # %BZ2_indexIntoF.exit858.i
                                        #   in Loop: Header=BB40_20 Depth=2
	movl	%r14d, %eax
	movzwl	(%r9,%rax,2), %ebx
	shrl	%r14d
	movzbl	(%r8,%r14), %r14d
	shll	$2, %r12d
	andb	$4, %r12b
	movb	%r12b, %cl
	shrl	%cl, %r14d
	andl	$15, %r14d
	shll	$16, %r14d
	orl	%ebx, %r14d
	movl	%r14d, 60(%r15)
	leal	2(%rdx), %r12d
	movl	%r12d, 1092(%r15)
	cmpl	%edi, %ebp
	je	.LBB40_106
# BB#90:                                # %if.end481.i
                                        #   in Loop: Header=BB40_20 Depth=2
	movzbl	%r13b, %eax
	cmpl	68(%rsp), %eax          # 4-byte Folded Reload
	jne	.LBB40_105
# BB#91:                                # %if.end489.i
                                        #   in Loop: Header=BB40_20 Depth=2
	movl	%ebx, 24(%rsp)          # 4-byte Spill
	movq	%rdi, 48(%rsp)          # 8-byte Spill
	movq	%rdx, %r13
	movl	$3, 16(%r15)
	xorl	%ebp, %ebp
	movl	$256, %ebx              # imm = 0x100
	cmpl	$0, "PinFlag-47.12"(%rip)
	jne	.LBB40_93
# BB#92:                                #   in Loop: Header=BB40_20 Depth=2
	xorl	%ebp, %ebp
	movl	$.L__unnamed_109, %edi
	movq	%rsi, 56(%rsp)          # 8-byte Spill
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$13, %ecx
	movq	%r8, 32(%rsp)           # 8-byte Spill
	movl	$1, %r8d
	movq	%r9, 40(%rsp)           # 8-byte Spill
	callq	Pin
	movq	40(%rsp), %r9           # 8-byte Reload
	movq	32(%rsp), %r8           # 8-byte Reload
	movq	56(%rsp), %rsi          # 8-byte Reload
	movl	$1, "PinFlag-47.12"(%rip)
.LBB40_93:                              # %do.body.i844.i
                                        #   in Loop: Header=BB40_20 Depth=2
	movq	%r13, %rdx
	movq	48(%rsp), %rdi          # 8-byte Reload
	movl	24(%rsp), %ecx          # 4-byte Reload
	.align	16, 0x90
.LBB40_94:                              # %do.body.i844.i
                                        #   Parent Loop BB40_6 Depth=1
                                        #     Parent Loop BB40_20 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	leal	(%rbp,%rbx), %eax
	sarl	%eax
	cltq
	cmpl	%r14d, 1096(%r15,%rax,4)
	cmovgl	%eax, %ebx
	cmovlel	%eax, %ebp
	movl	%ebx, %eax
	subl	%ebp, %eax
	cmpl	$1, %eax
	jne	.LBB40_94
# BB#95:                                # %BZ2_indexIntoF.exit845.i
                                        #   in Loop: Header=BB40_20 Depth=2
	movl	%r14d, %eax
	movzwl	(%r9,%rax,2), %ebx
	shrl	%r14d
	movzbl	(%r8,%r14), %r13d
	shll	$2, %ecx
	andb	$4, %cl
	shrl	%cl, %r13d
	andl	$15, %r13d
	shll	$16, %r13d
	orl	%ebx, %r13d
	movl	%r13d, 60(%r15)
	leal	3(%rdx), %eax
	movl	%eax, 1092(%r15)
	cmpl	%edi, %r12d
	je	.LBB40_106
# BB#96:                                # %if.end523.i
                                        #   in Loop: Header=BB40_20 Depth=2
	movzbl	%bpl, %eax
	cmpl	68(%rsp), %eax          # 4-byte Folded Reload
	jne	.LBB40_105
# BB#97:                                # %do.body.i831.i.preheader
                                        #   in Loop: Header=BB40_20 Depth=2
	movl	%ebx, 68(%rsp)          # 4-byte Spill
	movq	%r9, 40(%rsp)           # 8-byte Spill
	movq	%r8, %r14
	movq	%rdx, %r12
	xorl	%ebp, %ebp
	movl	$256, %ebx              # imm = 0x100
	cmpl	$0, "PinFlag-47.13"(%rip)
	jne	.LBB40_98
# BB#104:                               #   in Loop: Header=BB40_20 Depth=2
	xorl	%ebp, %ebp
	movl	$.L__unnamed_110, %edi
	movq	%rsi, 56(%rsp)          # 8-byte Spill
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$13, %ecx
	movl	$1, %r8d
	callq	Pin
	movq	56(%rsp), %rsi          # 8-byte Reload
	movl	$1, "PinFlag-47.13"(%rip)
.LBB40_98:                              #   in Loop: Header=BB40_20 Depth=2
	movq	%r12, %rdi
	movq	%r14, %r8
	movq	40(%rsp), %r9           # 8-byte Reload
	movl	68(%rsp), %ecx          # 4-byte Reload
.LBB40_99:                              # %do.body.i831.i
                                        #   Parent Loop BB40_6 Depth=1
                                        #     Parent Loop BB40_20 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	leal	(%rbp,%rbx), %eax
	sarl	%eax
	cltq
	cmpl	%r13d, 1096(%r15,%rax,4)
	cmovgl	%eax, %ebx
	cmovlel	%eax, %ebp
	movl	%ebx, %eax
	subl	%ebp, %eax
	cmpl	$1, %eax
	jne	.LBB40_99
# BB#100:                               # %BZ2_indexIntoF.exit832.i
                                        #   in Loop: Header=BB40_20 Depth=2
	movl	%r13d, %eax
	movzwl	(%r9,%rax,2), %r14d
	shrl	%r13d
	movzbl	(%r8,%r13), %r12d
	shll	$2, %ecx
	andb	$4, %cl
	shrl	%cl, %r12d
	andl	$15, %r12d
	shll	$16, %r12d
	orl	%r14d, %r12d
	movl	%r12d, 60(%r15)
	leal	4(%rdi), %eax
	movl	%eax, 1092(%r15)
	movzbl	%bpl, %eax
	addl	$4, %eax
	movl	%eax, 16(%r15)
	xorl	%ebx, %ebx
	movl	$256, %ebp              # imm = 0x100
	cmpl	$0, "PinFlag-47.14"(%rip)
	jne	.LBB40_102
# BB#101:                               #   in Loop: Header=BB40_20 Depth=2
	xorl	%ebx, %ebx
	movq	%rdi, 24(%rsp)          # 8-byte Spill
	movl	$.L__unnamed_111, %edi
	movq	%rsi, 56(%rsp)          # 8-byte Spill
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$13, %ecx
	movq	%r8, 32(%rsp)           # 8-byte Spill
	movl	$1, %r8d
	movq	%r9, %r13
	callq	Pin
	movq	%r13, %r9
	movq	32(%rsp), %r8           # 8-byte Reload
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	56(%rsp), %rsi          # 8-byte Reload
	movl	$1, "PinFlag-47.14"(%rip)
.LBB40_102:                             # %do.body.i818.i
                                        #   Parent Loop BB40_6 Depth=1
                                        #     Parent Loop BB40_20 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	leal	(%rbx,%rbp), %eax
	sarl	%eax
	cltq
	cmpl	%r12d, 1096(%r15,%rax,4)
	cmovgl	%eax, %ebp
	cmovlel	%eax, %ebx
	movl	%ebp, %eax
	subl	%ebx, %eax
	cmpl	$1, %eax
	jne	.LBB40_102
# BB#103:                               # %BZ2_indexIntoF.exit819.i
                                        #   in Loop: Header=BB40_20 Depth=2
	movl	%ebx, 64(%r15)
	movl	%r12d, %eax
	movzwl	(%r9,%rax,2), %eax
	shrl	%r12d
	movzbl	(%r8,%r12), %edx
	shll	$2, %r14d
	andb	$4, %r14b
	movb	%r14b, %cl
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%eax, %edx
	movl	%edx, 60(%r15)
	addl	$5, %edi
	movl	%edi, 1092(%r15)
	jmp	.LBB40_106
.LBB40_105:                             # %if.then528.i
                                        #   in Loop: Header=BB40_20 Depth=2
	movl	%eax, 64(%r15)
	.align	16, 0x90
.LBB40_106:                             # %while.body342.backedge.i
                                        #   in Loop: Header=BB40_20 Depth=2
	cmpl	$0, 32(%rsi)
	jne	.LBB40_20
	jmp	.LBB40_65
.LBB40_138:                             # %if.else.i
                                        #   in Loop: Header=BB40_6 Depth=1
	shrq	$32, %r14
	movl	3184(%r15), %ebx
	movl	16(%r15), %ebp
	movl	1092(%r15), %r11d
	movl	64(%r15), %esi
	movq	3152(%r15), %r8
	movq	%r8, 40(%rsp)           # 8-byte Spill
	movl	60(%r15), %r9d
	movq	(%r15), %rax
	movq	24(%rax), %r12
	movl	32(%rax), %eax
	movl	%eax, 32(%rsp)          # 4-byte Spill
	movl	64080(%r15), %r10d
	incl	%r10d
	movl	%r10d, 16(%rsp)         # 4-byte Spill
	cmpl	$0, "PinFlag-47.3"(%rip)
	jne	.LBB40_140
# BB#139:                               #   in Loop: Header=BB40_6 Depth=1
	movq	%r8, 40(%rsp)           # 8-byte Spill
	movl	$.L__unnamed_112, %edi
	movl	%esi, 56(%rsp)          # 4-byte Spill
	movl	$1, %esi
	movl	$68, %edx
	movl	$105, %ecx
	xorl	%r8d, %r8d
	movl	%r9d, 68(%rsp)          # 4-byte Spill
	movl	%r10d, %r13d
	movl	%r11d, 48(%rsp)         # 4-byte Spill
	callq	Pin
	movl	48(%rsp), %r11d         # 4-byte Reload
	movl	56(%rsp), %esi          # 4-byte Reload
	movl	%r13d, %r10d
	movl	68(%rsp), %r9d          # 4-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movl	$1, "PinFlag-47.3"(%rip)
.LBB40_140:                             # %while.body290.i
                                        #   in Loop: Header=BB40_6 Depth=1
	movl	32(%rsp), %r13d         # 4-byte Reload
	jmp	.LBB40_141
.LBB40_170:                             # %if.end385.i
                                        #   in Loop: Header=BB40_141 Depth=2
	movl	%r9d, %ecx
	movl	(%r8,%rcx,4), %ecx
	movzbl	%cl, %ebp
	shrl	$8, %ecx
	addl	$4, %ebp
	movl	(%r8,%rcx,4), %r9d
	movzbl	%r9b, %esi
	shrl	$8, %r9d
	addl	$5, %eax
	movl	%eax, %r11d
.LBB40_141:                             # %while.body290.i
                                        #   Parent Loop BB40_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_148 Depth 3
	testl	%ebp, %ebp
	jle	.LBB40_142
# BB#143:                               # %while.body295.preheader.i
                                        #   in Loop: Header=BB40_141 Depth=2
	xorl	%r10d, %r10d
	testl	%r13d, %r13d
	je	.LBB40_144
# BB#145:                               # %if.end299.lr.ph.i
                                        #   in Loop: Header=BB40_141 Depth=2
	movl	%r11d, 48(%rsp)         # 4-byte Spill
	movl	%esi, 56(%rsp)          # 4-byte Spill
	movl	%r9d, 68(%rsp)          # 4-byte Spill
	movq	%r14, 24(%rsp)          # 8-byte Spill
	movzbl	%r14b, %r14d
	cmpl	$0, "PinFlag-47.30"(%rip)
	jne	.LBB40_147
# BB#146:                               #   in Loop: Header=BB40_141 Depth=2
	movl	$.L__unnamed_113, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$19, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-47.30"(%rip)
.LBB40_147:                             # %if.end299.i
                                        #   in Loop: Header=BB40_141 Depth=2
	movq	40(%rsp), %r8           # 8-byte Reload
	movl	68(%rsp), %r9d          # 4-byte Reload
	movl	16(%rsp), %r10d         # 4-byte Reload
	movl	56(%rsp), %edx          # 4-byte Reload
	movl	48(%rsp), %esi          # 4-byte Reload
	.align	16, 0x90
.LBB40_148:                             # %if.end299.i
                                        #   Parent Loop BB40_6 Depth=1
                                        #     Parent Loop BB40_141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$1, %ebp
	je	.LBB40_149
# BB#150:                               # %if.end303.i
                                        #   in Loop: Header=BB40_148 Depth=3
	movb	%r14b, (%r12)
	movl	%ebx, %eax
	shll	$8, %eax
	shrl	$24, %ebx
	movl	%ebx, %ecx
	xorl	%r14d, %ecx
	movl	%eax, %ebx
	xorl	BZ2_crc32Table(,%rcx,4), %ebx
	decl	%ebp
	incq	%r12
	decl	%r13d
	jne	.LBB40_148
	jmp	.LBB40_151
.LBB40_142:                             #   in Loop: Header=BB40_141 Depth=2
	movb	%r14b, %cl
	movl	%r11d, %eax
	movl	%esi, %r14d
	jmp	.LBB40_158
.LBB40_149:                             #   in Loop: Header=BB40_141 Depth=2
	movq	24(%rsp), %rax          # 8-byte Reload
	movb	%al, %cl
	jmp	.LBB40_163
	.align	16, 0x90
.LBB40_152:                             # %s_state_out_len_eq_one.i
                                        #   in Loop: Header=BB40_141 Depth=2
	testl	%r13d, %r13d
	je	.LBB40_153
# BB#157:                               # %if.end318.i
                                        #   in Loop: Header=BB40_141 Depth=2
	movb	%cl, (%r12)
	movl	%ebx, %edx
	shll	$8, %edx
	shrl	$24, %ebx
	movzbl	%cl, %esi
	xorl	%ebx, %esi
	xorl	BZ2_crc32Table(,%rsi,4), %edx
	incq	%r12
	decl	%r13d
	movl	%edx, %ebx
.LBB40_158:                             # %if.end328.i159
                                        #   in Loop: Header=BB40_141 Depth=2
	movl	$-4, %ebp
	cmpl	%r10d, %eax
	jg	.LBB40_173
# BB#159:                               # %if.end332.i
                                        #   in Loop: Header=BB40_141 Depth=2
	xorl	%ebp, %ebp
	cmpl	%r10d, %eax
	je	.LBB40_160
# BB#161:                               # %if.end336.i
                                        #   in Loop: Header=BB40_141 Depth=2
	movl	%r9d, %ecx
	movl	(%r8,%rcx,4), %ecx
	movzbl	%cl, %edx
	movl	%ecx, %r9d
	shrl	$8, %r9d
	leal	1(%rax), %esi
	cmpl	%r14d, %edx
	jne	.LBB40_162
# BB#164:                               # %if.end349.i
                                        #   in Loop: Header=BB40_141 Depth=2
	cmpl	%r10d, %esi
	jne	.LBB40_166
# BB#165:                               #   in Loop: Header=BB40_141 Depth=2
	movb	%r14b, %cl
	movl	%r10d, %eax
	jmp	.LBB40_152
.LBB40_162:                             #   in Loop: Header=BB40_141 Depth=2
	movb	%r14b, %cl
.LBB40_163:                             # %s_state_out_len_eq_one.i
                                        #   in Loop: Header=BB40_141 Depth=2
	movl	%esi, %eax
	movl	%edx, %r14d
	jmp	.LBB40_152
.LBB40_166:                             # %if.end353.i162
                                        #   in Loop: Header=BB40_141 Depth=2
	movl	%r9d, %ecx
	movl	(%r8,%rcx,4), %ecx
	movl	%ecx, %r9d
	shrl	$8, %r9d
	leal	2(%rax), %edx
	movl	$2, %ebp
	cmpl	%r10d, %edx
	movl	%r10d, %r11d
	movl	%r14d, %esi
	je	.LBB40_141
# BB#167:                               # %if.end363.i
                                        #   in Loop: Header=BB40_141 Depth=2
	movzbl	%cl, %esi
	cmpl	%r14d, %esi
	movl	%edx, %r11d
	jne	.LBB40_141
# BB#168:                               # %if.end369.i
                                        #   in Loop: Header=BB40_141 Depth=2
	movl	%r9d, %ecx
	movl	(%r8,%rcx,4), %ecx
	movl	%ecx, %r9d
	shrl	$8, %r9d
	leal	3(%rax), %edx
	movl	$3, %ebp
	cmpl	%r10d, %edx
	movl	%r10d, %r11d
	movl	%r14d, %esi
	je	.LBB40_141
# BB#169:                               # %if.end379.i
                                        #   in Loop: Header=BB40_141 Depth=2
	movzbl	%cl, %esi
	cmpl	%r14d, %esi
	movl	%edx, %r11d
	jne	.LBB40_141
	jmp	.LBB40_170
.LBB40_151:                             #   in Loop: Header=BB40_6 Depth=1
	movq	24(%rsp), %rax          # 8-byte Reload
	movb	%al, %cl
	movl	%esi, %eax
	movl	%edx, %r14d
	xorl	%r10d, %r10d
	jmp	.LBB40_154
.LBB40_153:                             #   in Loop: Header=BB40_6 Depth=1
	xorl	%r10d, %r10d
	movl	$1, %ebp
	jmp	.LBB40_154
.LBB40_160:                             #   in Loop: Header=BB40_6 Depth=1
	movl	%r10d, %eax
	movl	%r13d, %r10d
	jmp	.LBB40_154
.LBB40_144:                             #   in Loop: Header=BB40_6 Depth=1
	movb	%r14b, %cl
	movl	%r11d, %eax
	movl	%esi, %r14d
.LBB40_154:                             # %return_notr.i
                                        #   in Loop: Header=BB40_6 Depth=1
	movq	(%r15), %rdx
	movl	36(%rdx), %esi
	movl	32(%rsp), %edi          # 4-byte Reload
	subl	%r10d, %edi
	addl	%esi, %edi
	movl	%edi, 36(%rdx)
	movq	(%r15), %rdx
	cmpl	%esi, 36(%rdx)
	jae	.LBB40_156
# BB#155:                               # %if.then410.i
                                        #   in Loop: Header=BB40_6 Depth=1
	incl	40(%rdx)
	movq	(%r15), %rdx
.LBB40_156:                             #   in Loop: Header=BB40_6 Depth=1
	movl	%ebx, 3184(%r15)
	movb	%cl, 12(%r15)
	movl	%ebp, 16(%r15)
	movl	%eax, 1092(%r15)
	movl	%r14d, 64(%r15)
	movq	%r8, 3152(%r15)
	movl	%r9d, 60(%r15)
	movq	%r12, 24(%rdx)
	movq	(%r15), %rax
	movl	%r10d, 32(%rax)
	.align	16, 0x90
.LBB40_65:                              # %if.end20
                                        #   in Loop: Header=BB40_6 Depth=1
	movl	64080(%r15), %eax
	incl	%eax
	xorl	%ebp, %ebp
	cmpl	%eax, 1092(%r15)
	jne	.LBB40_172
# BB#66:                                # %land.lhs.true
                                        #   in Loop: Header=BB40_6 Depth=1
	cmpl	$0, 16(%r15)
	jne	.LBB40_172
# BB#67:                                # %if.then23
                                        #   in Loop: Header=BB40_6 Depth=1
	movl	3184(%r15), %ecx
	notl	%ecx
	movl	%ecx, 3184(%r15)
	movl	52(%r15), %eax
	cmpl	$3, %eax
	jge	.LBB40_68
.LBB40_69:                              # %if.end29
                                        #   in Loop: Header=BB40_6 Depth=1
	cmpl	$2, %eax
	jge	.LBB40_70
.LBB40_71:                              # %if.end34
                                        #   in Loop: Header=BB40_6 Depth=1
	movq	3184(%r15), %rax
	movl	$-4, %ebp
	cmpl	3176(%r15), %eax
	jne	.LBB40_172
# BB#72:                                # %if.end47.thread
                                        #   in Loop: Header=BB40_6 Depth=1
	movq	%rax, %rcx
	shrq	$31, %rcx
	andl	$-2, %ecx
	movq	%rax, %rdx
	shrq	$63, %rdx
	orl	%ecx, %edx
	xorl	%edx, %eax
	movl	%eax, 3188(%r15)
	movl	$14, 8(%r15)
.LBB40_73:                              # %if.then50
                                        #   in Loop: Header=BB40_6 Depth=1
	movq	%r15, %rdi
	callq	BZ2_decompress
	movl	%eax, %ebp
	cmpl	$4, %ebp
	jne	.LBB40_171
# BB#74:                                # %if.then53
	cmpl	$2, 52(%r15)
	jg	.LBB40_75
.LBB40_76:                              # %cleanup.thread
	movl	3188(%r15), %eax
	movl	$4, %ebp
	cmpl	3180(%r15), %eax
	je	.LBB40_173
# BB#77:                                # %select.false
	movl	$-4, %ebp
	jmp	.LBB40_173
	.align	16, 0x90
.LBB40_9:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	jmp	.LBB40_9
.LBB40_172:                             # %cleanup71.loopexit261
	movl	$47, %edi
	callq	UnPin
	movl	$0, "PinFlag-47.00"(%rip)
	movl	$0, "PinFlag-47.01"(%rip)
	movl	$0, "PinFlag-47.02"(%rip)
	movl	$0, "PinFlag-47.03"(%rip)
	movl	$0, "PinFlag-47.04"(%rip)
	movl	$0, "PinFlag-47.0"(%rip)
	movl	$0, "PinFlag-47.10"(%rip)
	movl	$0, "PinFlag-47.11"(%rip)
	movl	$0, "PinFlag-47.12"(%rip)
	movl	$0, "PinFlag-47.13"(%rip)
	movl	$0, "PinFlag-47.14"(%rip)
	movl	$0, "PinFlag-47.1"(%rip)
	movl	$0, "PinFlag-47.2"(%rip)
	movl	$0, "PinFlag-47.30"(%rip)
	movl	$0, "PinFlag-47.3"(%rip)
	movl	$0, "PinFlag-47."(%rip)
	movl	$47, %edi
	callq	UnPin
	movl	$0, "PinFlag-47.00"(%rip)
	movl	$0, "PinFlag-47.01"(%rip)
	movl	$0, "PinFlag-47.02"(%rip)
	movl	$0, "PinFlag-47.03"(%rip)
	movl	$0, "PinFlag-47.04"(%rip)
	movl	$0, "PinFlag-47.0"(%rip)
	movl	$0, "PinFlag-47.10"(%rip)
	movl	$0, "PinFlag-47.11"(%rip)
	movl	$0, "PinFlag-47.12"(%rip)
	movl	$0, "PinFlag-47.13"(%rip)
	movl	$0, "PinFlag-47.14"(%rip)
	movl	$0, "PinFlag-47.1"(%rip)
	movl	$0, "PinFlag-47.2"(%rip)
	movl	$0, "PinFlag-47.30"(%rip)
	movl	$0, "PinFlag-47.3"(%rip)
	movl	$0, "PinFlag-47."(%rip)
	movl	$47, %edi
	callq	UnPin
	movl	$0, "PinFlag-47.00"(%rip)
	movl	$0, "PinFlag-47.01"(%rip)
	movl	$0, "PinFlag-47.02"(%rip)
	movl	$0, "PinFlag-47.03"(%rip)
	movl	$0, "PinFlag-47.04"(%rip)
	movl	$0, "PinFlag-47.0"(%rip)
	movl	$0, "PinFlag-47.10"(%rip)
	movl	$0, "PinFlag-47.11"(%rip)
	movl	$0, "PinFlag-47.12"(%rip)
	movl	$0, "PinFlag-47.13"(%rip)
	movl	$0, "PinFlag-47.14"(%rip)
	movl	$0, "PinFlag-47.1"(%rip)
	movl	$0, "PinFlag-47.2"(%rip)
	movl	$0, "PinFlag-47.30"(%rip)
	movl	$0, "PinFlag-47.3"(%rip)
	movl	$0, "PinFlag-47."(%rip)
	movl	$47, %edi
	callq	UnPin
	movl	$0, "PinFlag-47.00"(%rip)
	movl	$0, "PinFlag-47.01"(%rip)
	movl	$0, "PinFlag-47.02"(%rip)
	movl	$0, "PinFlag-47.03"(%rip)
	movl	$0, "PinFlag-47.04"(%rip)
	movl	$0, "PinFlag-47.0"(%rip)
	movl	$0, "PinFlag-47.10"(%rip)
	movl	$0, "PinFlag-47.11"(%rip)
	movl	$0, "PinFlag-47.12"(%rip)
	movl	$0, "PinFlag-47.13"(%rip)
	movl	$0, "PinFlag-47.14"(%rip)
	movl	$0, "PinFlag-47.1"(%rip)
	movl	$0, "PinFlag-47.2"(%rip)
	movl	$0, "PinFlag-47.30"(%rip)
	movl	$0, "PinFlag-47.3"(%rip)
	movl	$0, "PinFlag-47."(%rip)
.LBB40_173:                             # %cleanup71
	movl	%ebp, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB40_75:                              # %if.then56
	movq	stderr(%rip), %rdi
	movl	3180(%r15), %edx
	movl	3188(%r15), %ecx
	movl	$.L.str.4.38, %esi
	xorl	%eax, %eax
	callq	fprintf
	jmp	.LBB40_76
.Lfunc_end40:
	.size	BZ2_bzDecompress, .Lfunc_end40-BZ2_bzDecompress
	.cfi_endproc

	.globl	BZ2_bzDecompressEnd
	.align	16, 0x90
	.type	BZ2_bzDecompressEnd,@function
BZ2_bzDecompressEnd:                    # @BZ2_bzDecompressEnd
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp248:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp249:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp250:
	.cfi_def_cfa_offset 32
.Ltmp251:
	.cfi_offset %rbx, -24
.Ltmp252:
	.cfi_offset %r14, -16
	movq	%rdi, %rbx
	movl	$-2, %eax
	testq	%rbx, %rbx
	je	.LBB41_10
# BB#1:                                 # %if.end
	movq	48(%rbx), %r14
	testq	%r14, %r14
	je	.LBB41_10
# BB#2:                                 # %if.end3
	cmpq	%rbx, (%r14)
	jne	.LBB41_10
# BB#3:                                 # %if.end7
	movq	3152(%r14), %rsi
	testq	%rsi, %rsi
	je	.LBB41_5
# BB#4:                                 # %if.then9
	movq	72(%rbx), %rdi
	callq	*64(%rbx)
.LBB41_5:                               # %if.end11
	movq	3160(%r14), %rsi
	testq	%rsi, %rsi
	je	.LBB41_7
# BB#6:                                 # %if.then13
	movq	72(%rbx), %rdi
	callq	*64(%rbx)
.LBB41_7:                               # %if.end17
	movq	3168(%r14), %rsi
	testq	%rsi, %rsi
	je	.LBB41_9
# BB#8:                                 # %if.then19
	movq	72(%rbx), %rdi
	callq	*64(%rbx)
.LBB41_9:                               # %if.end23
	movq	48(%rbx), %rsi
	movq	72(%rbx), %rdi
	callq	*64(%rbx)
	movq	$0, 48(%rbx)
	xorl	%eax, %eax
.LBB41_10:                              # %cleanup
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.Lfunc_end41:
	.size	BZ2_bzDecompressEnd, .Lfunc_end41-BZ2_bzDecompressEnd
	.cfi_endproc

	.globl	BZ2_bzWriteOpen
	.align	16, 0x90
	.type	BZ2_bzWriteOpen,@function
BZ2_bzWriteOpen:                        # @BZ2_bzWriteOpen
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp253:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp254:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp255:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp256:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp257:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp258:
	.cfi_def_cfa_offset 56
	pushq	%rax
.Ltmp259:
	.cfi_def_cfa_offset 64
.Ltmp260:
	.cfi_offset %rbx, -56
.Ltmp261:
	.cfi_offset %r12, -48
.Ltmp262:
	.cfi_offset %r13, -40
.Ltmp263:
	.cfi_offset %r14, -32
.Ltmp264:
	.cfi_offset %r15, -24
.Ltmp265:
	.cfi_offset %rbp, -16
	movl	%r8d, %ebp
	movl	%ecx, %r12d
	movl	%edx, %r15d
	movl	%esi, %r13d
	movq	%rdi, %r14
	testq	%r14, %r14
	je	.LBB42_2
# BB#1:                                 # %if.then
	movl	$0, (%r14)
.LBB42_2:                               # %if.end3
	cmpl	$4, %r12d
	ja	.LBB42_6
# BB#3:                                 # %if.end3
	cmpl	$250, %ebp
	ja	.LBB42_6
# BB#4:                                 # %if.end3
	testl	%r13d, %r13d
	je	.LBB42_6
# BB#5:                                 # %if.end3
	leal	-1(%r15), %eax
	cmpl	$9, %eax
	jae	.LBB42_6
# BB#8:                                 # %if.end24
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, %rbx
	testq	%rbx, %rbx
	je	.LBB42_9
# BB#11:                                # %if.end34
	testq	%r14, %r14
	je	.LBB42_13
# BB#12:                                # %if.then36
	movl	$0, (%r14)
.LBB42_13:                              # %if.end41
	movl	$0, 5096(%rbx)
	movb	$0, 5100(%rbx)
	movl	$0, 5004(%rbx)
	movl	%r13d, (%rbx)
	movb	$1, 5008(%rbx)
	movq	%rbx, %rdi
	addq	$5016, %rdi             # imm = 0x1398
	testl	%ebp, %ebp
	movl	$30, %ecx
	cmovnel	%ebp, %ecx
	xorps	%xmm0, %xmm0
	movups	%xmm0, 5072(%rbx)
	movq	$0, 5088(%rbx)
	movl	%r15d, %esi
	movl	%r12d, %edx
	callq	BZ2_bzCompressInit
	testl	%eax, %eax
	je	.LBB42_17
# BB#14:                                # %if.then50
	testq	%r14, %r14
	je	.LBB42_16
# BB#15:                                # %if.then52
	movl	%eax, (%r14)
.LBB42_16:                              # %if.end57
	movq	%rbx, %rdi
	callq	free
	xorl	%ebx, %ebx
	jmp	.LBB42_18
.LBB42_6:                               # %if.then16
	xorl	%ebx, %ebx
	testq	%r14, %r14
	je	.LBB42_18
# BB#7:                                 # %if.then18
	movl	$-2, (%r14)
	xorl	%ebx, %ebx
	jmp	.LBB42_18
.LBB42_9:                               # %if.then26
	xorl	%ebx, %ebx
	testq	%r14, %r14
	je	.LBB42_18
# BB#10:                                # %if.then28
	movl	$-3, (%r14)
	xorl	%ebx, %ebx
	jmp	.LBB42_18
.LBB42_17:                              # %if.end58
	movl	$0, 5024(%rbx)
	movb	$1, 5100(%rbx)
.LBB42_18:                              # %cleanup
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end42:
	.size	BZ2_bzWriteOpen, .Lfunc_end42-BZ2_bzWriteOpen
	.cfi_endproc

	.globl	BZ2_bzWrite
	.align	16, 0x90
	.type	BZ2_bzWrite,@function
BZ2_bzWrite:                            # @BZ2_bzWrite
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp266:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp267:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp268:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp269:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp270:
	.cfi_def_cfa_offset 48
.Ltmp271:
	.cfi_offset %rbx, -48
.Ltmp272:
	.cfi_offset %r12, -40
.Ltmp273:
	.cfi_offset %r14, -32
.Ltmp274:
	.cfi_offset %r15, -24
.Ltmp275:
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	testq	%r14, %r14
	je	.LBB43_2
# BB#1:                                 # %if.then
	movl	$0, (%r14)
.LBB43_2:                               # %if.end
	testq	%rbx, %rbx
	je	.LBB43_5
# BB#3:                                 # %if.end3
	movl	$0, 5096(%rbx)
	testq	%rdx, %rdx
	je	.LBB43_5
# BB#4:                                 # %if.end3
	testl	%ecx, %ecx
	js	.LBB43_5
# BB#9:                                 # %if.end16
	cmpb	$0, 5008(%rbx)
	je	.LBB43_10
# BB#13:                                # %if.end25
	testl	%ecx, %ecx
	je	.LBB43_33
# BB#14:                                # %if.end35
	leaq	5016(%rbx), %r15
	movl	%ecx, 5024(%rbx)
	movq	%rdx, 5016(%rbx)
	leaq	4(%rbx), %r12
	cmpl	$0, "PinFlag-48."(%rip)
	jne	.LBB43_16
# BB#15:
	movl	$.L__unnamed_114, %edi
	movl	$1, %esi
	movl	$3, %edx
	movl	$26, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-48."(%rip)
	.align	16, 0x90
.LBB43_16:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movl	$5000, 5048(%rbx)       # imm = 0x1388
	movq	%r12, 5040(%rbx)
	movq	5064(%rbx), %rax
	movl	$-2, %ebp
	testq	%rax, %rax
	je	.LBB43_23
# BB#17:                                # %if.end3.i
                                        #   in Loop: Header=BB43_16 Depth=1
	cmpq	%r15, (%rax)
	jne	.LBB43_23
# BB#18:                                # %preswitch.preheader.i
                                        #   in Loop: Header=BB43_16 Depth=1
	movl	8(%rax), %eax
	cmpl	$2, %eax
	jne	.LBB43_19
# BB#22:                                # %if.then10.i
                                        #   in Loop: Header=BB43_16 Depth=1
	movq	%r15, %rdi
	callq	handle_compress
	testb	%al, %al
	je	.LBB43_23
# BB#27:                                # %if.end50
                                        #   in Loop: Header=BB43_16 Depth=1
	movl	5048(%rbx), %eax
	cmpl	$4999, %eax             # imm = 0x1387
	ja	.LBB43_32
# BB#28:                                # %if.then54
                                        #   in Loop: Header=BB43_16 Depth=1
	movl	$5000, %ebp             # imm = 0x1388
	subl	%eax, %ebp
	movl	(%rbx), %ecx
	movl	$1, %esi
	movq	%r12, %rdi
	movl	%ebp, %edx
	callq	spec_fwrite
	cmpl	%eax, %ebp
	jne	.LBB43_29
.LBB43_32:                              # %if.end70
                                        #   in Loop: Header=BB43_16 Depth=1
	cmpl	$0, 5024(%rbx)
	jne	.LBB43_16
.LBB43_33:                              # %if.then74
	testq	%r14, %r14
	je	.LBB43_35
# BB#34:                                # %if.then76
	movl	$0, (%r14)
.LBB43_35:                              # %if.then79
	movl	$0, 5096(%rbx)
	jmp	.LBB43_36
.LBB43_5:                               # %if.then8
	testq	%r14, %r14
	je	.LBB43_7
# BB#6:                                 # %if.then10
	movl	$-2, (%r14)
.LBB43_7:                               # %if.end11
	testq	%rbx, %rbx
	je	.LBB43_36
# BB#8:                                 # %if.then13
	movl	$-2, 5096(%rbx)
	jmp	.LBB43_36
.LBB43_10:                              # %if.then17
	testq	%r14, %r14
	je	.LBB43_12
# BB#11:                                # %if.then19
	movl	$-1, (%r14)
.LBB43_12:                              # %if.then22
	movl	$-1, 5096(%rbx)
	jmp	.LBB43_36
.LBB43_19:                              # %preswitch.preheader.i
	leal	-3(%rax), %ecx
	cmpl	$2, %ecx
	jb	.LBB43_21
# BB#20:                                # %preswitch.preheader.i
	xorl	%ebp, %ebp
	cmpl	$1, %eax
	jne	.LBB43_23
.LBB43_21:                              # %if.then42.loopexit144
	movl	$48, %edi
	callq	UnPin
	movl	$0, "PinFlag-48."(%rip)
	movl	$48, %edi
	callq	UnPin
	movl	$0, "PinFlag-48."(%rip)
	movl	$-1, %ebp
	jmp	.LBB43_24
.LBB43_23:                              # %if.then42.loopexit
	movl	$48, %edi
	callq	UnPin
	movl	$0, "PinFlag-48."(%rip)
	movl	$48, %edi
	callq	UnPin
	movl	$0, "PinFlag-48."(%rip)
	movl	$48, %edi
	callq	UnPin
	movl	$0, "PinFlag-48."(%rip)
.LBB43_24:                              # %if.then42
	testq	%r14, %r14
	je	.LBB43_26
# BB#25:                                # %if.then44
	movl	%ebp, (%r14)
.LBB43_26:                              # %if.then47
	movl	%ebp, 5096(%rbx)
.LBB43_36:                              # %cleanup
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB43_29:                              # %if.then61
	testq	%r14, %r14
	je	.LBB43_31
# BB#30:                                # %if.then63
	movl	$-6, (%r14)
.LBB43_31:                              # %if.then66
	movl	$-6, 5096(%rbx)
	jmp	.LBB43_36
.Lfunc_end43:
	.size	BZ2_bzWrite, .Lfunc_end43-BZ2_bzWrite
	.cfi_endproc

	.globl	BZ2_bzWriteClose
	.align	16, 0x90
	.type	BZ2_bzWriteClose,@function
BZ2_bzWriteClose:                       # @BZ2_bzWriteClose
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
.Ltmp276:
	.cfi_def_cfa_offset 16
	movq	%r8, %rax
	movq	$0, (%rsp)
	xorl	%r8d, %r8d
	movq	%rax, %r9
	callq	BZ2_bzWriteClose64
	movl	$0, "PinFlag-164."(%rip)
	movl	$0, "PinFlag-164.0"(%rip)
	movl	$0, "PinFlag-313."(%rip)
	movl	$0, "PinFlag-161."(%rip)
	movl	$0, "PinFlag-161.0"(%rip)
	movl	$0, "PinFlag-161.1"(%rip)
	movl	$0, "PinFlag-161.10"(%rip)
	movl	$0, "PinFlag-161.11"(%rip)
	movl	$0, "PinFlag-161.12"(%rip)
	movl	$0, "PinFlag-161.2"(%rip)
	movl	$0, "PinFlag-161.3"(%rip)
	movl	$0, "PinFlag-161.30"(%rip)
	movl	$0, "PinFlag-161.31"(%rip)
	movl	$0, "PinFlag-161.4"(%rip)
	movl	$0, "PinFlag-161.5"(%rip)
	movl	$0, "PinFlag-98."(%rip)
	movl	$0, "PinFlag-225."(%rip)
	movl	$0, "PinFlag-206."(%rip)
	movl	$0, "PinFlag-203."(%rip)
	movl	$0, "PinFlag-82."(%rip)
	movl	$0, "PinFlag-82.0"(%rip)
	movl	$0, "PinFlag-82.00"(%rip)
	movl	$0, "PinFlag-82.1"(%rip)
	movl	$0, "PinFlag-82.10"(%rip)
	movl	$0, "PinFlag-82.2"(%rip)
	movl	$0, "PinFlag-82.3"(%rip)
	movl	$0, "PinFlag-82.4"(%rip)
	movl	$0, "PinFlag-82.5"(%rip)
	movl	$0, "PinFlag-82.6"(%rip)
	movl	$0, "PinFlag-82.7"(%rip)
	movl	$0, "PinFlag-82.8"(%rip)
	movl	$0, "PinFlag-82.9"(%rip)
	movl	$0, "PinFlag-83."(%rip)
	movl	$0, "PinFlag-83.0"(%rip)
	movl	$0, "PinFlag-83.00"(%rip)
	movl	$0, "PinFlag-83.01"(%rip)
	movl	$0, "PinFlag-85."(%rip)
	movl	$0, "PinFlag-85.0"(%rip)
	movl	$0, "PinFlag-87."(%rip)
	movl	$0, "PinFlag-87.0"(%rip)
	movl	$0, "PinFlag-88."(%rip)
	movl	$0, "PinFlag-89."(%rip)
	movl	$0, "PinFlag-89.0"(%rip)
	movl	$0, "PinFlag-89.1"(%rip)
	movl	$0, "PinFlag-91."(%rip)
	movl	$0, "PinFlag-91.0"(%rip)
	movl	$0, "PinFlag-91.1"(%rip)
	movl	$0, "PinFlag-92."(%rip)
	movl	$0, "PinFlag-95."(%rip)
	movl	$0, "PinFlag-95.0"(%rip)
	movl	$0, "PinFlag-95.1"(%rip)
	movl	$0, "PinFlag-95.2"(%rip)
	movl	$0, "PinFlag-95.20"(%rip)
	movl	$0, "PinFlag-95.21"(%rip)
	movl	$0, "PinFlag-95.210"(%rip)
	movl	$0, "PinFlag-95.211"(%rip)
	movl	$0, "PinFlag-95.22"(%rip)
	movl	$0, "PinFlag-95.23"(%rip)
	movl	$0, "PinFlag-95.3"(%rip)
	movl	$0, "PinFlag-95.4"(%rip)
	movl	$0, "PinFlag-96."(%rip)
	movl	$0, "PinFlag-96.0"(%rip)
	movl	$0, "PinFlag-96.1"(%rip)
	movl	$0, "PinFlag-96.2"(%rip)
	movl	$0, "PinFlag-97."(%rip)
	movl	$0, "PinFlag-97.0"(%rip)
	movl	$0, "PinFlag-78."(%rip)
	movl	$0, "PinFlag-79."(%rip)
	movl	$0, "PinFlag-80."(%rip)
	movl	$0, "PinFlag-81."(%rip)
	movl	$0, "PinFlag-55."(%rip)
	movl	$0, "PinFlag-56."(%rip)
	movl	$0, "PinFlag-57."(%rip)
	movl	$0, "PinFlag-58."(%rip)
	movl	$0, "PinFlag-59."(%rip)
	movl	$0, "PinFlag-60."(%rip)
	movl	$0, "PinFlag-61."(%rip)
	movl	$0, "PinFlag-62."(%rip)
	movl	$0, "PinFlag-63."(%rip)
	movl	$0, "PinFlag-63.0"(%rip)
	movl	$0, "PinFlag-63.1"(%rip)
	movl	$0, "PinFlag-67."(%rip)
	movl	$0, "PinFlag-68."(%rip)
	movl	$0, "PinFlag-69."(%rip)
	movl	$0, "PinFlag-70."(%rip)
	movl	$0, "PinFlag-71."(%rip)
	movl	$0, "PinFlag-72."(%rip)
	movl	$0, "PinFlag-73."(%rip)
	movl	$0, "PinFlag-74."(%rip)
	movl	$0, "PinFlag-75."(%rip)
	movl	$0, "PinFlag-76."(%rip)
	movl	$0, "PinFlag-77."(%rip)
	movl	$0, "PinFlag-49."(%rip)
	movl	$0, "PinFlag-49.0"(%rip)
	movl	$0, "PinFlag-44."(%rip)
	movl	$0, "PinFlag-43."(%rip)
	movl	$0, "PinFlag-43.0"(%rip)
	movl	$0, "PinFlag-43.1"(%rip)
	movl	$0, "PinFlag-43.2"(%rip)
	movl	$0, "PinFlag-33."(%rip)
	movl	$0, "PinFlag-24."(%rip)
	movl	$0, "PinFlag-24.0"(%rip)
	movl	$0, "PinFlag-24.1"(%rip)
	movl	$0, "PinFlag-26."(%rip)
	movl	$0, "PinFlag-26.0"(%rip)
	movl	$0, "PinFlag-26.1"(%rip)
	movl	$0, "PinFlag-26.10"(%rip)
	movl	$0, "PinFlag-26.100"(%rip)
	movl	$0, "PinFlag-26.101"(%rip)
	movl	$0, "PinFlag-26.102"(%rip)
	movl	$0, "PinFlag-26.103"(%rip)
	movl	$0, "PinFlag-26.104"(%rip)
	movl	$0, "PinFlag-26.11"(%rip)
	movl	$0, "PinFlag-26.110"(%rip)
	movl	$0, "PinFlag-26.1100"(%rip)
	movl	$0, "PinFlag-26.11000"(%rip)
	movl	$0, "PinFlag-26.1101"(%rip)
	movl	$0, "PinFlag-26.11010"(%rip)
	movl	$0, "PinFlag-26.111"(%rip)
	movl	$0, "PinFlag-26.1110"(%rip)
	movl	$0, "PinFlag-26.11100"(%rip)
	movl	$0, "PinFlag-26.1111"(%rip)
	movl	$0, "PinFlag-26.11110"(%rip)
	movl	$0, "PinFlag-26.112"(%rip)
	movl	$0, "PinFlag-26.113"(%rip)
	movl	$0, "PinFlag-26.114"(%rip)
	movl	$0, "PinFlag-26.115"(%rip)
	movl	$0, "PinFlag-26.12"(%rip)
	movl	$0, "PinFlag-27."(%rip)
	movl	$0, "PinFlag-28."(%rip)
	movl	$0, "PinFlag-29."(%rip)
	movl	$0, "PinFlag-30."(%rip)
	movl	$0, "PinFlag-31."(%rip)
	movl	$0, "PinFlag-32."(%rip)
	movl	$0, "PinFlag-14."(%rip)
	movl	$0, "PinFlag-14.0"(%rip)
	movl	$0, "PinFlag-14.00"(%rip)
	movl	$0, "PinFlag-14.000"(%rip)
	movl	$0, "PinFlag-14.0000"(%rip)
	movl	$0, "PinFlag-14.00000"(%rip)
	movl	$0, "PinFlag-14.000000"(%rip)
	movl	$0, "PinFlag-14.00001"(%rip)
	movl	$0, "PinFlag-14.000010"(%rip)
	movl	$0, "PinFlag-14.001"(%rip)
	movl	$0, "PinFlag-14.0010"(%rip)
	movl	$0, "PinFlag-14.00100"(%rip)
	movl	$0, "PinFlag-14.001000"(%rip)
	movl	$0, "PinFlag-14.00101"(%rip)
	movl	$0, "PinFlag-14.001010"(%rip)
	movl	$0, "PinFlag-14.002"(%rip)
	movl	$0, "PinFlag-14.003"(%rip)
	movl	$0, "PinFlag-14.004"(%rip)
	movl	$0, "PinFlag-14.005"(%rip)
	movl	$0, "PinFlag-14.006"(%rip)
	movl	$0, "PinFlag-14.007"(%rip)
	movl	$0, "PinFlag-14.0070"(%rip)
	movl	$0, "PinFlag-14.00700"(%rip)
	movl	$0, "PinFlag-14.00701"(%rip)
	movl	$0, "PinFlag-14.00702"(%rip)
	movl	$0, "PinFlag-14.1"(%rip)
	movl	$0, "PinFlag-14.2"(%rip)
	movl	$0, "PinFlag-14.3"(%rip)
	movl	$0, "PinFlag-14.4"(%rip)
	movl	$0, "PinFlag-14.5"(%rip)
	movl	$0, "PinFlag-14.6"(%rip)
	movl	$0, "PinFlag-15."(%rip)
	movl	$0, "PinFlag-15.0"(%rip)
	movl	$0, "PinFlag-15.00"(%rip)
	movl	$0, "PinFlag-17."(%rip)
	movl	$0, "PinFlag-18."(%rip)
	movl	$0, "PinFlag-19."(%rip)
	movl	$0, "PinFlag-20."(%rip)
	movl	$0, "PinFlag-21."(%rip)
	movl	$0, "PinFlag-22."(%rip)
	movl	$0, "PinFlag-23."(%rip)
	popq	%rax
	retq
.Lfunc_end44:
	.size	BZ2_bzWriteClose, .Lfunc_end44-BZ2_bzWriteClose
	.cfi_endproc

	.globl	BZ2_bzWriteClose64
	.align	16, 0x90
	.type	BZ2_bzWriteClose64,@function
BZ2_bzWriteClose64:                     # @BZ2_bzWriteClose64
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp277:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp278:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp279:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp280:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp281:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp282:
	.cfi_def_cfa_offset 56
	subq	$40, %rsp
.Ltmp283:
	.cfi_def_cfa_offset 96
.Ltmp284:
	.cfi_offset %rbx, -56
.Ltmp285:
	.cfi_offset %r12, -48
.Ltmp286:
	.cfi_offset %r13, -40
.Ltmp287:
	.cfi_offset %r14, -32
.Ltmp288:
	.cfi_offset %r15, -24
.Ltmp289:
	.cfi_offset %rbp, -16
	movq	%r9, %rbp
	movq	%r8, %r12
	movq	%rcx, %r13
	movq	%rsi, %rbx
	movq	%rdi, %r15
	testq	%rbx, %rbx
	je	.LBB45_1
# BB#3:                                 # %if.end6
	cmpb	$0, 5008(%rbx)
	je	.LBB45_4
# BB#7:                                 # %if.end15
	movq	96(%rsp), %r14
	testq	%r13, %r13
	je	.LBB45_9
# BB#8:                                 # %if.then17
	movl	$0, (%r13)
.LBB45_9:                               # %if.end18
	testq	%r12, %r12
	je	.LBB45_11
# BB#10:                                # %if.then20
	movl	$0, (%r12)
.LBB45_11:                              # %if.end21
	testq	%rbp, %rbp
	je	.LBB45_13
# BB#12:                                # %if.then23
	movl	$0, (%rbp)
.LBB45_13:                              # %if.end24
	testq	%r14, %r14
	je	.LBB45_15
# BB#14:                                # %if.then26
	movl	$0, (%r14)
.LBB45_15:                              # %if.end27
	testl	%edx, %edx
	jne	.LBB45_46
# BB#16:                                # %land.lhs.true
	cmpl	$0, 5096(%rbx)
	jne	.LBB45_46
# BB#17:                                # %while.body.preheader
	leaq	5016(%rbx), %rax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	leaq	4(%rbx), %rdi
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	cmpl	$0, "PinFlag-49."(%rip)
	jne	.LBB45_19
# BB#18:
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movl	$.L__unnamed_115, %edi
	movl	$1, %esi
	movl	$63, %edx
	movl	$56, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movq	16(%rsp), %rdi          # 8-byte Reload
	movl	$1, "PinFlag-49."(%rip)
.LBB45_19:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_23 Depth 2
	movq	%r14, (%rsp)            # 8-byte Spill
	movq	%rbp, 8(%rsp)           # 8-byte Spill
	movq	%r15, 32(%rsp)          # 8-byte Spill
	movl	$5000, 5048(%rbx)       # imm = 0x1388
	movq	%rdi, 5040(%rbx)
	movq	5064(%rbx), %rbp
	movl	$-2, %r14d
	testq	%rbp, %rbp
	je	.LBB45_41
# BB#20:                                # %if.end3.i
                                        #   in Loop: Header=BB45_19 Depth=1
	movq	24(%rsp), %rax          # 8-byte Reload
	cmpq	%rax, (%rbp)
	jne	.LBB45_41
# BB#21:                                # %preswitch.preheader.i
                                        #   in Loop: Header=BB45_19 Depth=1
	movl	8(%rbp), %r15d
	cmpl	$0, "PinFlag-49.0"(%rip)
	jne	.LBB45_23
# BB#22:                                #   in Loop: Header=BB45_19 Depth=1
	movl	$.L__unnamed_116, %edi
	movl	$1, %esi
	movl	$5, %edx
	movl	$6, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-49.0"(%rip)
	jmp	.LBB45_23
	.align	16, 0x90
.LBB45_25:                              # %if.then18.us133.i
                                        #   in Loop: Header=BB45_23 Depth=2
	movl	5024(%rbx), %eax
	movl	%eax, 16(%rbp)
	movl	$4, 8(%rbp)
	movl	$4, %r15d
.LBB45_23:                              # %preswitch.us131.i
                                        #   Parent Loop BB45_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%r14d, %r14d
	decl	%r15d
	cmpl	$3, %r15d
	ja	.LBB45_42
# BB#24:                                # %preswitch.us131.i
                                        #   in Loop: Header=BB45_23 Depth=2
	jmpq	*.LJTI45_0(,%r15,8)
.LBB45_26:                              # %sw.bb47.i
                                        #   in Loop: Header=BB45_19 Depth=1
	movl	16(%rbp), %eax
	movl	$-1, %r14d
	cmpl	5024(%rbx), %eax
	jne	.LBB45_41
# BB#27:                                # %if.end58.i
                                        #   in Loop: Header=BB45_19 Depth=1
	movq	24(%rsp), %rdi          # 8-byte Reload
	callq	handle_compress
	testb	%al, %al
	movq	16(%rsp), %rdi          # 8-byte Reload
	je	.LBB45_41
# BB#28:                                # %if.end62.i
                                        #   in Loop: Header=BB45_19 Depth=1
	movl	$3, %ecx
	cmpl	$0, 16(%rbp)
	je	.LBB45_30
# BB#29:                                #   in Loop: Header=BB45_19 Depth=1
	movq	32(%rsp), %r15          # 8-byte Reload
	jmp	.LBB45_34
.LBB45_30:                              # %lor.lhs.false66.i
                                        #   in Loop: Header=BB45_19 Depth=1
	cmpl	$255, 92(%rbp)
	movq	32(%rsp), %r15          # 8-byte Reload
	ja	.LBB45_32
# BB#31:                                # %land.lhs.true.i115.i
                                        #   in Loop: Header=BB45_19 Depth=1
	cmpl	$0, 96(%rbp)
	jg	.LBB45_34
.LBB45_32:                              # %lor.lhs.false69.i
                                        #   in Loop: Header=BB45_19 Depth=1
	movl	120(%rbp), %eax
	cmpl	116(%rbp), %eax
	jl	.LBB45_34
# BB#33:                                # %if.end75.i
                                        #   in Loop: Header=BB45_19 Depth=1
	movl	$1, 8(%rbp)
	movl	$4, %ecx
.LBB45_34:                              # %if.end45
                                        #   in Loop: Header=BB45_19 Depth=1
	movl	5048(%rbx), %eax
	cmpl	$4999, %eax             # imm = 0x1387
	ja	.LBB45_45
# BB#35:                                # %if.then49
                                        #   in Loop: Header=BB45_19 Depth=1
	movl	$5000, %r14d            # imm = 0x1388
	subl	%eax, %r14d
	movl	%ecx, 32(%rsp)          # 4-byte Spill
	movl	(%rbx), %ecx
	movl	$1, %esi
	movq	%rdi, %rbp
	movl	%r14d, %edx
	callq	spec_fwrite
	movl	32(%rsp), %ecx          # 4-byte Reload
	movq	%rbp, %rdi
	cmpl	%eax, %r14d
	jne	.LBB45_36
.LBB45_45:                              # %if.end65
                                        #   in Loop: Header=BB45_19 Depth=1
	cmpl	$4, %ecx
	movq	8(%rsp), %rbp           # 8-byte Reload
	movq	(%rsp), %r14            # 8-byte Reload
	jne	.LBB45_19
.LBB45_46:                              # %if.end69
	testq	%r13, %r13
	je	.LBB45_48
# BB#47:                                # %if.then74
	movl	5028(%rbx), %eax
	movl	%eax, (%r13)
.LBB45_48:                              # %if.end76
	testq	%r12, %r12
	je	.LBB45_50
# BB#49:                                # %if.then78
	movl	5032(%rbx), %eax
	movl	%eax, (%r12)
.LBB45_50:                              # %if.end80
	testq	%rbp, %rbp
	je	.LBB45_52
# BB#51:                                # %if.then82
	movl	5052(%rbx), %eax
	movl	%eax, (%rbp)
.LBB45_52:                              # %if.end84
	testq	%r14, %r14
	je	.LBB45_54
# BB#53:                                # %if.then86
	movl	5056(%rbx), %eax
	movl	%eax, (%r14)
.LBB45_54:                              # %if.end88
	testq	%r15, %r15
	je	.LBB45_56
# BB#55:                                # %if.then90
	movl	$0, (%r15)
.LBB45_56:                              # %if.end95
	movl	$0, 5096(%rbx)
	movq	5064(%rbx), %rbp
	testq	%rbp, %rbp
	je	.LBB45_65
# BB#57:                                # %if.end3.i164
	leaq	5016(%rbx), %rax
	cmpq	%rax, (%rbp)
	jne	.LBB45_65
# BB#58:                                # %if.end7.i
	movq	24(%rbp), %rsi
	testq	%rsi, %rsi
	je	.LBB45_60
# BB#59:                                # %if.then9.i
	movq	5088(%rbx), %rdi
	callq	*5080(%rbx)
.LBB45_60:                              # %if.end11.i
	movq	32(%rbp), %rsi
	testq	%rsi, %rsi
	je	.LBB45_62
# BB#61:                                # %if.then13.i
	movq	5088(%rbx), %rdi
	callq	*5080(%rbx)
.LBB45_62:                              # %if.end17.i
	movq	40(%rbp), %rsi
	testq	%rsi, %rsi
	je	.LBB45_64
# BB#63:                                # %if.then19.i
	movq	5088(%rbx), %rdi
	callq	*5080(%rbx)
.LBB45_64:                              # %if.end23.i
	movq	5064(%rbx), %rsi
	movq	5088(%rbx), %rdi
	callq	*5080(%rbx)
.LBB45_65:                              # %BZ2_bzCompressEnd.exit
	movq	%rbx, %rdi
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	free                    # TAILCALL
.LBB45_1:                               # %if.then
	testq	%r15, %r15
	je	.LBB45_39
# BB#2:                                 # %if.then2
	movl	$0, (%r15)
	jmp	.LBB45_39
.LBB45_4:                               # %if.then7
	testq	%r15, %r15
	je	.LBB45_6
# BB#5:                                 # %if.then9
	movl	$-1, (%r15)
.LBB45_6:                               # %if.then12
	movl	$-1, 5096(%rbx)
	jmp	.LBB45_39
.LBB45_40:                              # %if.then37.loopexit181
	movl	$49, %edi
	callq	UnPin
	movl	$0, "PinFlag-49.0"(%rip)
	movl	$0, "PinFlag-49."(%rip)
	movl	$-1, %r14d
.LBB45_42:                              # %if.then37
	movq	32(%rsp), %rax          # 8-byte Reload
	testq	%rax, %rax
	je	.LBB45_44
# BB#43:                                # %if.then39
	movl	%r14d, (%rax)
.LBB45_44:                              # %if.then42
	movl	%r14d, 5096(%rbx)
.LBB45_39:                              # %cleanup
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB45_41:                              # %if.then37.loopexit183
	movl	$49, %edi
	callq	UnPin
	movl	$0, "PinFlag-49.0"(%rip)
	movl	$0, "PinFlag-49."(%rip)
	movl	$49, %edi
	callq	UnPin
	movl	$0, "PinFlag-49.0"(%rip)
	movl	$0, "PinFlag-49."(%rip)
	movl	$49, %edi
	callq	UnPin
	movl	$0, "PinFlag-49.0"(%rip)
	movl	$0, "PinFlag-49."(%rip)
	jmp	.LBB45_42
.LBB45_36:                              # %if.then56
	testq	%r15, %r15
	je	.LBB45_38
# BB#37:                                # %if.then58
	movl	$-6, (%r15)
.LBB45_38:                              # %if.then61
	movl	$-6, 5096(%rbx)
	jmp	.LBB45_39
.Lfunc_end45:
	.size	BZ2_bzWriteClose64, .Lfunc_end45-BZ2_bzWriteClose64
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI45_0:
	.quad	.LBB45_40
	.quad	.LBB45_25
	.quad	.LBB45_40
	.quad	.LBB45_26

	.text
	.globl	BZ2_bzReadOpen
	.align	16, 0x90
	.type	BZ2_bzReadOpen,@function
BZ2_bzReadOpen:                         # @BZ2_bzReadOpen
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp290:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp291:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp292:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp293:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp294:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp295:
	.cfi_def_cfa_offset 56
	pushq	%rax
.Ltmp296:
	.cfi_def_cfa_offset 64
.Ltmp297:
	.cfi_offset %rbx, -56
.Ltmp298:
	.cfi_offset %r12, -48
.Ltmp299:
	.cfi_offset %r13, -40
.Ltmp300:
	.cfi_offset %r14, -32
.Ltmp301:
	.cfi_offset %r15, -24
.Ltmp302:
	.cfi_offset %rbp, -16
	movl	%r9d, %ebx
	movq	%r8, %rbp
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %r12
	testq	%r12, %r12
	je	.LBB46_2
# BB#1:                                 # %if.then
	movl	$0, (%r12)
.LBB46_2:                               # %if.end3
	testl	%r15d, %r15d
	je	.LBB46_9
# BB#3:                                 # %lor.lhs.false
	cmpl	$4, %r14d
	ja	.LBB46_9
# BB#4:                                 # %lor.lhs.false
	cmpl	$1, %ecx
	ja	.LBB46_9
# BB#5:                                 # %lor.lhs.false11
	testq	%rbp, %rbp
	jne	.LBB46_7
# BB#6:                                 # %lor.lhs.false11
	testl	%ebx, %ebx
	jne	.LBB46_9
.LBB46_7:                               # %lor.lhs.false15
	testq	%rbp, %rbp
	je	.LBB46_11
# BB#8:                                 # %lor.lhs.false15
	cmpl	$5001, %ebx             # imm = 0x1389
	jb	.LBB46_11
.LBB46_9:                               # %if.then21
	xorl	%r13d, %r13d
	testq	%r12, %r12
	je	.LBB46_30
# BB#10:                                # %if.then23
	movl	$-2, (%r12)
	xorl	%r13d, %r13d
.LBB46_30:                              # %cleanup
	movq	%r13, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB46_11:                              # %if.end29
	movl	%ecx, 4(%rsp)           # 4-byte Spill
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, %r13
	testq	%r13, %r13
	je	.LBB46_12
# BB#14:                                # %if.end39
	testq	%r12, %r12
	je	.LBB46_16
# BB#15:                                # %if.then41
	movl	$0, (%r12)
.LBB46_16:                              # %if.end46
	movl	$0, 5096(%r13)
	movb	$0, 5100(%r13)
	movl	%r15d, (%r13)
	movl	$0, 5004(%r13)
	movb	$0, 5008(%r13)
	leaq	5072(%r13), %r15
	xorps	%xmm0, %xmm0
	movups	%xmm0, 5072(%r13)
	movq	$0, 5088(%r13)
	testl	%ebx, %ebx
	jle	.LBB46_21
# BB#17:                                # %while.body.lr.ph
	movl	%ebx, %ecx
	notl	%ecx
	cmpl	$-3, %ecx
	movl	$-2, %eax
	cmovgl	%ecx, %eax
	cmpl	$0, "PinFlag-50."(%rip)
	jne	.LBB46_19
# BB#18:
	leal	1(%rbx,%rax), %eax
	movslq	%eax, %rsi
	movl	$.L__unnamed_117, %edi
	movl	$3, %edx
	movl	$14, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-50."(%rip)
.LBB46_19:
	incl	%ebx
	xorl	%eax, %eax
	.align	16, 0x90
.LBB46_20:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movb	(%rbp), %cl
	cltq
	movb	%cl, 4(%r13,%rax)
	movl	5004(%r13), %eax
	incl	%eax
	movl	%eax, 5004(%r13)
	incq	%rbp
	decl	%ebx
	cmpl	$1, %ebx
	jg	.LBB46_20
.LBB46_21:                              # %if.end10.i
	movq	(%r15), %rcx
	testq	%rcx, %rcx
	jne	.LBB46_23
# BB#22:                                # %if.then12.i
	movq	$default_bzalloc, (%r15)
	movl	$default_bzalloc, %ecx
.LBB46_23:                              # %if.end14.i
	cmpq	$0, 5080(%r13)
	jne	.LBB46_25
# BB#24:                                # %if.then16.i
	movq	$default_bzfree, 5080(%r13)
.LBB46_25:                              # %if.end18.i
	movq	5088(%r13), %rdi
	movl	$64144, %esi            # imm = 0xFA90
	movl	$1, %edx
	callq	*%rcx
	testq	%rax, %rax
	je	.LBB46_26
# BB#29:                                # %if.end63
	leaq	5016(%r13), %rcx
	movq	%rcx, (%rax)
	movq	%rax, 5064(%r13)
	movl	$10, 8(%rax)
	movl	$0, 36(%rax)
	movl	$0, 32(%rax)
	movl	$0, 3188(%rax)
	movl	$0, 5028(%r13)
	movl	$0, 5032(%r13)
	movl	$0, 5052(%r13)
	movl	$0, 5056(%r13)
	movl	4(%rsp), %ecx           # 4-byte Reload
	movb	%cl, 44(%rax)
	movl	$0, 48(%rax)
	xorps	%xmm0, %xmm0
	movups	%xmm0, 3152(%rax)
	movq	$0, 3168(%rax)
	movl	%r14d, 52(%rax)
	movl	5004(%r13), %eax
	movl	%eax, 5024(%r13)
	movq	%r13, %rax
	addq	$4, %rax
	movq	%rax, 5016(%r13)
	movb	$1, 5100(%r13)
	jmp	.LBB46_30
.LBB46_12:                              # %if.then31
	xorl	%r13d, %r13d
	testq	%r12, %r12
	je	.LBB46_30
# BB#13:                                # %if.then33
	movl	$-3, (%r12)
	xorl	%r13d, %r13d
	jmp	.LBB46_30
.LBB46_26:                              # %if.then55
	testq	%r12, %r12
	je	.LBB46_28
# BB#27:                                # %if.then57
	movl	$-3, (%r12)
.LBB46_28:                              # %if.end62
	movq	%r13, %rdi
	callq	free
	xorl	%r13d, %r13d
	jmp	.LBB46_30
.Lfunc_end46:
	.size	BZ2_bzReadOpen, .Lfunc_end46-BZ2_bzReadOpen
	.cfi_endproc

	.globl	BZ2_bzReadClose
	.align	16, 0x90
	.type	BZ2_bzReadClose,@function
BZ2_bzReadClose:                        # @BZ2_bzReadClose
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp303:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp304:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp305:
	.cfi_def_cfa_offset 32
.Ltmp306:
	.cfi_offset %rbx, -24
.Ltmp307:
	.cfi_offset %r14, -16
	movq	%rsi, %rbx
	testq	%rdi, %rdi
	je	.LBB47_2
# BB#1:                                 # %if.then
	movl	$0, (%rdi)
.LBB47_2:                               # %if.end
	testq	%rbx, %rbx
	je	.LBB47_3
# BB#5:                                 # %if.end13
	movl	$0, 5096(%rbx)
	cmpb	$0, 5008(%rbx)
	je	.LBB47_10
# BB#6:                                 # %if.then14
	testq	%rdi, %rdi
	je	.LBB47_8
# BB#7:                                 # %if.then16
	movl	$-1, (%rdi)
.LBB47_8:                               # %if.then19
	movl	$-1, 5096(%rbx)
	jmp	.LBB47_9
.LBB47_3:                               # %if.then5
	testq	%rdi, %rdi
	je	.LBB47_9
# BB#4:                                 # %if.then7
	movl	$0, (%rdi)
.LBB47_9:                               # %cleanup
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.LBB47_10:                              # %if.end22
	cmpb	$0, 5100(%rbx)
	je	.LBB47_20
# BB#11:                                # %if.then24
	movq	5064(%rbx), %r14
	testq	%r14, %r14
	je	.LBB47_20
# BB#12:                                # %if.end3.i
	leaq	5016(%rbx), %rax
	cmpq	%rax, (%r14)
	jne	.LBB47_20
# BB#13:                                # %if.end7.i
	movq	3152(%r14), %rsi
	testq	%rsi, %rsi
	je	.LBB47_15
# BB#14:                                # %if.then9.i
	movq	5088(%rbx), %rdi
	callq	*5080(%rbx)
.LBB47_15:                              # %if.end11.i
	movq	3160(%r14), %rsi
	testq	%rsi, %rsi
	je	.LBB47_17
# BB#16:                                # %if.then13.i
	movq	5088(%rbx), %rdi
	callq	*5080(%rbx)
.LBB47_17:                              # %if.end17.i
	movq	3168(%r14), %rsi
	testq	%rsi, %rsi
	je	.LBB47_19
# BB#18:                                # %if.then19.i
	movq	5088(%rbx), %rdi
	callq	*5080(%rbx)
.LBB47_19:                              # %if.end23.i
	movq	5064(%rbx), %rsi
	movq	5088(%rbx), %rdi
	callq	*5080(%rbx)
.LBB47_20:                              # %if.end25
	movq	%rbx, %rdi
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	jmp	free                    # TAILCALL
.Lfunc_end47:
	.size	BZ2_bzReadClose, .Lfunc_end47-BZ2_bzReadClose
	.cfi_endproc

	.globl	BZ2_bzRead
	.align	16, 0x90
	.type	BZ2_bzRead,@function
BZ2_bzRead:                             # @BZ2_bzRead
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp308:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp309:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp310:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp311:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp312:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp313:
	.cfi_def_cfa_offset 56
	pushq	%rax
.Ltmp314:
	.cfi_def_cfa_offset 64
.Ltmp315:
	.cfi_offset %rbx, -56
.Ltmp316:
	.cfi_offset %r12, -48
.Ltmp317:
	.cfi_offset %r13, -40
.Ltmp318:
	.cfi_offset %r14, -32
.Ltmp319:
	.cfi_offset %r15, -24
.Ltmp320:
	.cfi_offset %rbp, -16
	movl	%ecx, %r14d
	movq	%rsi, %rbx
	movq	%rdi, %r13
	testq	%r13, %r13
	je	.LBB48_2
# BB#1:                                 # %if.then
	movl	$0, (%r13)
.LBB48_2:                               # %if.end
	testq	%rbx, %rbx
	je	.LBB48_5
# BB#3:                                 # %if.end3
	movl	$0, 5096(%rbx)
	testq	%rdx, %rdx
	je	.LBB48_5
# BB#4:                                 # %if.end3
	testl	%r14d, %r14d
	js	.LBB48_5
# BB#9:                                 # %if.end16
	cmpb	$0, 5008(%rbx)
	je	.LBB48_13
# BB#10:                                # %if.then17
	testq	%r13, %r13
	je	.LBB48_12
# BB#11:                                # %if.then19
	movl	$-1, (%r13)
.LBB48_12:                              # %if.then22
	movl	$-1, 5096(%rbx)
	xorl	%r14d, %r14d
	jmp	.LBB48_41
.LBB48_5:                               # %if.then8
	testq	%r13, %r13
	je	.LBB48_7
# BB#6:                                 # %if.then10
	movl	$-2, (%r13)
.LBB48_7:                               # %if.end11
	xorl	%r14d, %r14d
	testq	%rbx, %rbx
	je	.LBB48_41
# BB#8:                                 # %if.then13
	movl	$-2, 5096(%rbx)
.LBB48_41:                              # %cleanup
	movl	%r14d, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB48_13:                              # %if.end25
	testl	%r14d, %r14d
	je	.LBB48_14
# BB#17:                                # %if.end35
	leaq	5016(%rbx), %r15
	movl	%r14d, 5048(%rbx)
	movq	%rdx, 5040(%rbx)
	leaq	4(%rbx), %r12
	cmpl	$0, "PinFlag-315."(%rip)
	jne	.LBB48_19
# BB#18:
	movl	$.L__unnamed_118, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$30, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movl	$1, "PinFlag-315."(%rip)
	.align	16, 0x90
.LBB48_19:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, 5024(%rbx)
	jne	.LBB48_22
# BB#20:                                # %land.lhs.true
                                        #   in Loop: Header=BB48_19 Depth=1
	movl	(%rbx), %ebp
	movl	%ebp, %edi
	callq	spec_getc
	cmpl	$-1, %eax
	je	.LBB48_22
# BB#21:                                # %if.then40
                                        #   in Loop: Header=BB48_19 Depth=1
	movzbl	%al, %edi
	movl	%ebp, %esi
	callq	spec_ungetc
	movl	(%rbx), %ecx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	movq	%r12, %rdi
	callq	spec_fread
	movl	%eax, 5004(%rbx)
	movl	%eax, 5024(%rbx)
	movq	%r12, 5016(%rbx)
.LBB48_22:                              # %if.end50
                                        #   in Loop: Header=BB48_19 Depth=1
	movq	%r15, %rdi
	callq	BZ2_bzDecompress
	testl	%eax, %eax
	jne	.LBB48_23
# BB#27:                                # %land.lhs.true66
                                        #   in Loop: Header=BB48_19 Depth=1
	movl	(%rbx), %ebp
	movl	%ebp, %edi
	callq	spec_getc
	cmpl	$-1, %eax
	je	.LBB48_33
# BB#28:                                # %myfeof.exit193.thread
                                        #   in Loop: Header=BB48_19 Depth=1
	movzbl	%al, %edi
	movl	%ebp, %esi
	callq	spec_ungetc
	jmp	.LBB48_29
	.align	16, 0x90
.LBB48_33:                              # %land.lhs.true70
                                        #   in Loop: Header=BB48_19 Depth=1
	cmpl	$0, 5024(%rbx)
	je	.LBB48_34
.LBB48_29:                              # %if.end105
                                        #   in Loop: Header=BB48_19 Depth=1
	cmpl	$0, 5048(%rbx)
	jne	.LBB48_19
.LBB48_30:                              # %if.then110
	testq	%r13, %r13
	je	.LBB48_32
# BB#31:                                # %if.then113
	movl	$0, (%r13)
.LBB48_32:                              # %if.then117
	movl	$0, 5096(%rbx)
	jmp	.LBB48_41
.LBB48_14:                              # %if.then27
	testq	%r13, %r13
	je	.LBB48_16
# BB#15:                                # %if.then29
	movl	$0, (%r13)
.LBB48_16:                              # %if.then32
	movl	$0, 5096(%rbx)
	xorl	%r14d, %r14d
	jmp	.LBB48_41
.LBB48_23:                              # %if.end50
	cmpl	$4, %eax
	jne	.LBB48_24
# BB#38:                                # %if.then93
	testq	%r13, %r13
	je	.LBB48_40
# BB#39:                                # %if.then96
	movl	$4, (%r13)
.LBB48_40:                              # %if.end102
	movl	$4, 5096(%rbx)
	subl	5048(%rbx), %r14d
	jmp	.LBB48_41
.LBB48_24:                              # %if.then56
	testq	%r13, %r13
	je	.LBB48_26
# BB#25:                                # %if.then58
	movl	%eax, (%r13)
.LBB48_26:                              # %if.then61
	movl	%eax, 5096(%rbx)
	xorl	%r14d, %r14d
	jmp	.LBB48_41
.LBB48_34:                              # %land.lhs.true75
	cmpl	$0, 5048(%rbx)
	je	.LBB48_30
# BB#35:                                # %if.then80
	testq	%r13, %r13
	je	.LBB48_37
# BB#36:                                # %if.then83
	movl	$-7, (%r13)
.LBB48_37:                              # %if.then87
	movl	$-7, 5096(%rbx)
	xorl	%r14d, %r14d
	jmp	.LBB48_41
.Lfunc_end48:
	.size	BZ2_bzRead, .Lfunc_end48-BZ2_bzRead
	.cfi_endproc

	.globl	BZ2_bzReadGetUnused
	.align	16, 0x90
	.type	BZ2_bzReadGetUnused,@function
BZ2_bzReadGetUnused:                    # @BZ2_bzReadGetUnused
	.cfi_startproc
# BB#0:                                 # %entry
	testq	%rsi, %rsi
	je	.LBB49_1
# BB#3:                                 # %if.end6
	cmpl	$4, 5096(%rsi)
	jne	.LBB49_4
# BB#7:                                 # %if.end17
	testq	%rdx, %rdx
	je	.LBB49_9
# BB#8:                                 # %if.end17
	testq	%rcx, %rcx
	je	.LBB49_9
# BB#12:                                # %if.end28
	testq	%rdi, %rdi
	je	.LBB49_14
# BB#13:                                # %if.then30
	movl	$0, (%rdi)
.LBB49_14:                              # %if.end35
	movl	$0, 5096(%rsi)
	movl	5024(%rsi), %eax
	movl	%eax, (%rcx)
	movq	5016(%rsi), %rax
	movq	%rax, (%rdx)
	jmp	.LBB49_15
.LBB49_1:                               # %if.then
	testq	%rdi, %rdi
	je	.LBB49_15
# BB#2:                                 # %if.then2
	movl	$-2, (%rdi)
	retq
.LBB49_4:                               # %if.then9
	testq	%rdi, %rdi
	je	.LBB49_6
# BB#5:                                 # %if.then11
	movl	$-1, (%rdi)
.LBB49_6:                               # %if.then14
	movl	$-1, 5096(%rsi)
	retq
.LBB49_15:                              # %cleanup
	retq
.LBB49_9:                               # %if.then20
	testq	%rdi, %rdi
	je	.LBB49_11
# BB#10:                                # %if.then22
	movl	$-2, (%rdi)
.LBB49_11:                              # %if.then25
	movl	$-2, 5096(%rsi)
	retq
.Lfunc_end49:
	.size	BZ2_bzReadGetUnused, .Lfunc_end49-BZ2_bzReadGetUnused
	.cfi_endproc

	.globl	BZ2_bzBuffToBuffCompress
	.align	16, 0x90
	.type	BZ2_bzBuffToBuffCompress,@function
BZ2_bzBuffToBuffCompress:               # @BZ2_bzBuffToBuffCompress
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp321:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp322:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp323:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp324:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp325:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp326:
	.cfi_def_cfa_offset 56
	subq	$88, %rsp
.Ltmp327:
	.cfi_def_cfa_offset 144
.Ltmp328:
	.cfi_offset %rbx, -56
.Ltmp329:
	.cfi_offset %r12, -48
.Ltmp330:
	.cfi_offset %r13, -40
.Ltmp331:
	.cfi_offset %r14, -32
.Ltmp332:
	.cfi_offset %r15, -24
.Ltmp333:
	.cfi_offset %rbp, -16
	movl	%ecx, %r12d
	movq	%rdx, %rbp
	movq	%rsi, %r14
	movq	%rdi, %rbx
	movl	144(%rsp), %eax
	cmpl	$250, %eax
	movl	$-2, %r13d
	ja	.LBB50_33
# BB#1:                                 # %entry
	cmpl	$4, %r9d
	ja	.LBB50_33
# BB#2:                                 # %entry
	testq	%rbx, %rbx
	je	.LBB50_33
# BB#3:                                 # %entry
	testq	%r14, %r14
	je	.LBB50_33
# BB#4:                                 # %entry
	testq	%rbp, %rbp
	je	.LBB50_33
# BB#5:                                 # %entry
	leal	-1(%r8), %ecx
	cmpl	$8, %ecx
	ja	.LBB50_33
# BB#6:                                 # %if.end
	testl	%eax, %eax
	movl	$30, %ecx
	cmovnel	%eax, %ecx
	xorps	%xmm0, %xmm0
	movups	%xmm0, 64(%rsp)
	movq	$0, 80(%rsp)
	leaq	8(%rsp), %r15
	movq	%r15, %rdi
	movl	%r8d, %esi
	movl	%r9d, %edx
	callq	BZ2_bzCompressInit
	movl	%eax, %r13d
	testl	%r13d, %r13d
	jne	.LBB50_33
# BB#7:                                 # %if.end21
	movq	%rbp, 8(%rsp)
	movq	%rbx, 32(%rsp)
	movl	%r12d, 16(%rsp)
	movl	(%r14), %eax
	movl	%eax, 40(%rsp)
	movq	56(%rsp), %rbx
	testq	%rbx, %rbx
	movl	$-2, %r13d
	je	.LBB50_33
# BB#8:                                 # %if.end3.i
	movl	$-2, %r13d
	cmpq	%r15, (%rbx)
	jne	.LBB50_24
# BB#9:                                 # %preswitch.preheader.i
	movl	8(%rbx), %eax
	movl	$-1, %r13d
	jmp	.LBB50_10
	.align	16, 0x90
.LBB50_12:                              # %if.then18.us133.i
                                        #   in Loop: Header=BB50_10 Depth=1
	movl	16(%rsp), %eax
	movl	%eax, 16(%rbx)
	movl	$4, 8(%rbx)
	movl	$4, %eax
.LBB50_10:                              # %preswitch.us131.i
                                        # =>This Inner Loop Header: Depth=1
	decl	%eax
	cmpl	$3, %eax
	ja	.LBB50_23
# BB#11:                                # %preswitch.us131.i
                                        #   in Loop: Header=BB50_10 Depth=1
	jmpq	*.LJTI50_0(,%rax,8)
.LBB50_13:                              # %sw.bb47.i
	movl	16(%rbx), %eax
	cmpl	16(%rsp), %eax
	jne	.LBB50_24
# BB#14:                                # %if.end58.i
	leaq	8(%rsp), %r12
	movq	%r12, %rdi
	callq	handle_compress
	movl	$0, "PinFlag-164."(%rip)
	movl	$0, "PinFlag-164.0"(%rip)
	movl	$0, "PinFlag-313."(%rip)
	movl	$0, "PinFlag-161."(%rip)
	movl	$0, "PinFlag-161.0"(%rip)
	movl	$0, "PinFlag-161.1"(%rip)
	movl	$0, "PinFlag-161.10"(%rip)
	movl	$0, "PinFlag-161.11"(%rip)
	movl	$0, "PinFlag-161.12"(%rip)
	movl	$0, "PinFlag-161.2"(%rip)
	movl	$0, "PinFlag-161.3"(%rip)
	movl	$0, "PinFlag-161.30"(%rip)
	movl	$0, "PinFlag-161.31"(%rip)
	movl	$0, "PinFlag-161.4"(%rip)
	movl	$0, "PinFlag-161.5"(%rip)
	movl	$0, "PinFlag-98."(%rip)
	movl	$0, "PinFlag-225."(%rip)
	movl	$0, "PinFlag-206."(%rip)
	movl	$0, "PinFlag-203."(%rip)
	movl	$0, "PinFlag-82."(%rip)
	movl	$0, "PinFlag-82.0"(%rip)
	movl	$0, "PinFlag-82.00"(%rip)
	movl	$0, "PinFlag-82.1"(%rip)
	movl	$0, "PinFlag-82.10"(%rip)
	movl	$0, "PinFlag-82.2"(%rip)
	movl	$0, "PinFlag-82.3"(%rip)
	movl	$0, "PinFlag-82.4"(%rip)
	movl	$0, "PinFlag-82.5"(%rip)
	movl	$0, "PinFlag-82.6"(%rip)
	movl	$0, "PinFlag-82.7"(%rip)
	movl	$0, "PinFlag-82.8"(%rip)
	movl	$0, "PinFlag-82.9"(%rip)
	movl	$0, "PinFlag-83."(%rip)
	movl	$0, "PinFlag-83.0"(%rip)
	movl	$0, "PinFlag-83.00"(%rip)
	movl	$0, "PinFlag-83.01"(%rip)
	movl	$0, "PinFlag-85."(%rip)
	movl	$0, "PinFlag-85.0"(%rip)
	movl	$0, "PinFlag-87."(%rip)
	movl	$0, "PinFlag-87.0"(%rip)
	movl	$0, "PinFlag-88."(%rip)
	movl	$0, "PinFlag-89."(%rip)
	movl	$0, "PinFlag-89.0"(%rip)
	movl	$0, "PinFlag-89.1"(%rip)
	movl	$0, "PinFlag-91."(%rip)
	movl	$0, "PinFlag-91.0"(%rip)
	movl	$0, "PinFlag-91.1"(%rip)
	movl	$0, "PinFlag-92."(%rip)
	movl	$0, "PinFlag-95."(%rip)
	movl	$0, "PinFlag-95.0"(%rip)
	movl	$0, "PinFlag-95.1"(%rip)
	movl	$0, "PinFlag-95.2"(%rip)
	movl	$0, "PinFlag-95.20"(%rip)
	movl	$0, "PinFlag-95.21"(%rip)
	movl	$0, "PinFlag-95.210"(%rip)
	movl	$0, "PinFlag-95.211"(%rip)
	movl	$0, "PinFlag-95.22"(%rip)
	movl	$0, "PinFlag-95.23"(%rip)
	movl	$0, "PinFlag-95.3"(%rip)
	movl	$0, "PinFlag-95.4"(%rip)
	movl	$0, "PinFlag-96."(%rip)
	movl	$0, "PinFlag-96.0"(%rip)
	movl	$0, "PinFlag-96.1"(%rip)
	movl	$0, "PinFlag-96.2"(%rip)
	movl	$0, "PinFlag-97."(%rip)
	movl	$0, "PinFlag-97.0"(%rip)
	movl	$0, "PinFlag-78."(%rip)
	movl	$0, "PinFlag-79."(%rip)
	movl	$0, "PinFlag-80."(%rip)
	movl	$0, "PinFlag-81."(%rip)
	movl	$0, "PinFlag-55."(%rip)
	movl	$0, "PinFlag-56."(%rip)
	movl	$0, "PinFlag-57."(%rip)
	movl	$0, "PinFlag-58."(%rip)
	movl	$0, "PinFlag-59."(%rip)
	movl	$0, "PinFlag-60."(%rip)
	movl	$0, "PinFlag-61."(%rip)
	movl	$0, "PinFlag-62."(%rip)
	movl	$0, "PinFlag-63."(%rip)
	movl	$0, "PinFlag-63.0"(%rip)
	movl	$0, "PinFlag-63.1"(%rip)
	movl	$0, "PinFlag-67."(%rip)
	movl	$0, "PinFlag-68."(%rip)
	movl	$0, "PinFlag-69."(%rip)
	movl	$0, "PinFlag-70."(%rip)
	movl	$0, "PinFlag-71."(%rip)
	movl	$0, "PinFlag-72."(%rip)
	movl	$0, "PinFlag-73."(%rip)
	movl	$0, "PinFlag-74."(%rip)
	movl	$0, "PinFlag-75."(%rip)
	movl	$0, "PinFlag-76."(%rip)
	movl	$0, "PinFlag-77."(%rip)
	movl	$0, "PinFlag-44."(%rip)
	movl	$0, "PinFlag-43."(%rip)
	movl	$0, "PinFlag-43.0"(%rip)
	movl	$0, "PinFlag-43.1"(%rip)
	movl	$0, "PinFlag-43.2"(%rip)
	movl	$0, "PinFlag-33."(%rip)
	movl	$0, "PinFlag-24."(%rip)
	movl	$0, "PinFlag-24.0"(%rip)
	movl	$0, "PinFlag-24.1"(%rip)
	movl	$0, "PinFlag-26."(%rip)
	movl	$0, "PinFlag-26.0"(%rip)
	movl	$0, "PinFlag-26.1"(%rip)
	movl	$0, "PinFlag-26.10"(%rip)
	movl	$0, "PinFlag-26.100"(%rip)
	movl	$0, "PinFlag-26.101"(%rip)
	movl	$0, "PinFlag-26.102"(%rip)
	movl	$0, "PinFlag-26.103"(%rip)
	movl	$0, "PinFlag-26.104"(%rip)
	movl	$0, "PinFlag-26.11"(%rip)
	movl	$0, "PinFlag-26.110"(%rip)
	movl	$0, "PinFlag-26.1100"(%rip)
	movl	$0, "PinFlag-26.11000"(%rip)
	movl	$0, "PinFlag-26.1101"(%rip)
	movl	$0, "PinFlag-26.11010"(%rip)
	movl	$0, "PinFlag-26.111"(%rip)
	movl	$0, "PinFlag-26.1110"(%rip)
	movl	$0, "PinFlag-26.11100"(%rip)
	movl	$0, "PinFlag-26.1111"(%rip)
	movl	$0, "PinFlag-26.11110"(%rip)
	movl	$0, "PinFlag-26.112"(%rip)
	movl	$0, "PinFlag-26.113"(%rip)
	movl	$0, "PinFlag-26.114"(%rip)
	movl	$0, "PinFlag-26.115"(%rip)
	movl	$0, "PinFlag-26.12"(%rip)
	movl	$0, "PinFlag-27."(%rip)
	movl	$0, "PinFlag-28."(%rip)
	movl	$0, "PinFlag-29."(%rip)
	movl	$0, "PinFlag-30."(%rip)
	movl	$0, "PinFlag-31."(%rip)
	movl	$0, "PinFlag-32."(%rip)
	movl	$0, "PinFlag-14."(%rip)
	movl	$0, "PinFlag-14.0"(%rip)
	movl	$0, "PinFlag-14.00"(%rip)
	movl	$0, "PinFlag-14.000"(%rip)
	movl	$0, "PinFlag-14.0000"(%rip)
	movl	$0, "PinFlag-14.00000"(%rip)
	movl	$0, "PinFlag-14.000000"(%rip)
	movl	$0, "PinFlag-14.00001"(%rip)
	movl	$0, "PinFlag-14.000010"(%rip)
	movl	$0, "PinFlag-14.001"(%rip)
	movl	$0, "PinFlag-14.0010"(%rip)
	movl	$0, "PinFlag-14.00100"(%rip)
	movl	$0, "PinFlag-14.001000"(%rip)
	movl	$0, "PinFlag-14.00101"(%rip)
	movl	$0, "PinFlag-14.001010"(%rip)
	movl	$0, "PinFlag-14.002"(%rip)
	movl	$0, "PinFlag-14.003"(%rip)
	movl	$0, "PinFlag-14.004"(%rip)
	movl	$0, "PinFlag-14.005"(%rip)
	movl	$0, "PinFlag-14.006"(%rip)
	movl	$0, "PinFlag-14.007"(%rip)
	movl	$0, "PinFlag-14.0070"(%rip)
	movl	$0, "PinFlag-14.00700"(%rip)
	movl	$0, "PinFlag-14.00701"(%rip)
	movl	$0, "PinFlag-14.00702"(%rip)
	movl	$0, "PinFlag-14.1"(%rip)
	movl	$0, "PinFlag-14.2"(%rip)
	movl	$0, "PinFlag-14.3"(%rip)
	movl	$0, "PinFlag-14.4"(%rip)
	movl	$0, "PinFlag-14.5"(%rip)
	movl	$0, "PinFlag-14.6"(%rip)
	movl	$0, "PinFlag-15."(%rip)
	movl	$0, "PinFlag-15.0"(%rip)
	movl	$0, "PinFlag-15.00"(%rip)
	movl	$0, "PinFlag-17."(%rip)
	movl	$0, "PinFlag-18."(%rip)
	movl	$0, "PinFlag-19."(%rip)
	movl	$0, "PinFlag-20."(%rip)
	movl	$0, "PinFlag-21."(%rip)
	movl	$0, "PinFlag-22."(%rip)
	movl	$0, "PinFlag-23."(%rip)
	testb	%al, %al
	je	.LBB50_24
# BB#15:                                # %if.end62.i
	cmpl	$0, 16(%rbx)
	jne	.LBB50_22
# BB#16:                                # %lor.lhs.false66.i
	cmpl	$255, 92(%rbx)
	ja	.LBB50_18
# BB#17:                                # %land.lhs.true.i115.i
	cmpl	$0, 96(%rbx)
	jg	.LBB50_22
.LBB50_18:                              # %lor.lhs.false69.i
	movl	120(%rbx), %eax
	cmpl	116(%rbx), %eax
	jge	.LBB50_19
.LBB50_22:                              # %output_overflow
	movq	56(%rsp), %rbx
	movl	$-8, %r13d
.LBB50_20:                              # %if.end28
	testq	%rbx, %rbx
	je	.LBB50_33
# BB#21:                                # %if.end3.i61
	cmpq	%r12, (%rbx)
	jne	.LBB50_33
	jmp	.LBB50_26
.LBB50_23:                              # %errhandler.loopexit
	xorl	%r13d, %r13d
.LBB50_24:                              # %errhandler
	movq	56(%rsp), %rbx
	testq	%rbx, %rbx
	je	.LBB50_33
# BB#25:                                # %if.end3.i97
	cmpq	%r15, (%rbx)
	jne	.LBB50_33
.LBB50_26:                              # %if.end7.i100
	movq	24(%rbx), %rsi
	testq	%rsi, %rsi
	je	.LBB50_28
# BB#27:                                # %if.then9.i103
	movq	80(%rsp), %rdi
	callq	*72(%rsp)
.LBB50_28:                              # %if.end11.i106
	movq	32(%rbx), %rsi
	testq	%rsi, %rsi
	je	.LBB50_30
# BB#29:                                # %if.then13.i109
	movq	80(%rsp), %rdi
	callq	*72(%rsp)
.LBB50_30:                              # %if.end17.i113
	movq	40(%rbx), %rsi
	testq	%rsi, %rsi
	je	.LBB50_32
# BB#31:                                # %if.then19.i117
	movq	80(%rsp), %rdi
	callq	*72(%rsp)
.LBB50_32:                              # %if.end23.i119
	movq	56(%rsp), %rsi
	movq	80(%rsp), %rdi
	callq	*72(%rsp)
	movq	$0, 56(%rsp)
.LBB50_33:                              # %cleanup
	movl	%r13d, %eax
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB50_19:                              # %if.end28
	movl	$1, 8(%rbx)
	movl	40(%rsp), %eax
	subl	%eax, (%r14)
	movq	56(%rsp), %rbx
	xorl	%r13d, %r13d
	jmp	.LBB50_20
.Lfunc_end50:
	.size	BZ2_bzBuffToBuffCompress, .Lfunc_end50-BZ2_bzBuffToBuffCompress
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI50_0:
	.quad	.LBB50_24
	.quad	.LBB50_12
	.quad	.LBB50_24
	.quad	.LBB50_13

	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI51_0:
	.zero	16
	.text
	.globl	BZ2_bzBuffToBuffDecompress
	.align	16, 0x90
	.type	BZ2_bzBuffToBuffDecompress,@function
BZ2_bzBuffToBuffDecompress:             # @BZ2_bzBuffToBuffDecompress
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp334:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp335:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp336:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp337:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp338:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp339:
	.cfi_def_cfa_offset 56
	subq	$88, %rsp
.Ltmp340:
	.cfi_def_cfa_offset 144
.Ltmp341:
	.cfi_offset %rbx, -56
.Ltmp342:
	.cfi_offset %r12, -48
.Ltmp343:
	.cfi_offset %r13, -40
.Ltmp344:
	.cfi_offset %r14, -32
.Ltmp345:
	.cfi_offset %r15, -24
.Ltmp346:
	.cfi_offset %rbp, -16
	movl	%r9d, %ebx
	movl	%r8d, %r15d
	movl	%ecx, %r13d
	movq	%rdx, %rbp
	movq	%rsi, %r12
	movq	%rdi, %r14
	testq	%r14, %r14
	movl	$-2, %ecx
	je	.LBB51_37
# BB#1:                                 # %entry
	testq	%r12, %r12
	je	.LBB51_37
# BB#2:                                 # %entry
	testq	%rbp, %rbp
	je	.LBB51_37
# BB#3:                                 # %lor.lhs.false4
	cmpl	$1, %r15d
	ja	.LBB51_37
# BB#4:                                 # %lor.lhs.false4
	cmpl	$4, %ebx
	ja	.LBB51_37
# BB#5:                                 # %if.end18.i
	xorps	%xmm0, %xmm0
	movups	%xmm0, 64(%rsp)
	movq	$0, 80(%rsp)
	movq	$default_bzalloc, 64(%rsp)
	movq	$default_bzfree, 72(%rsp)
	movl	$64144, %edi            # imm = 0xFA90
	callq	malloc
	movl	$-3, %ecx
	testq	%rax, %rax
	je	.LBB51_37
# BB#6:                                 # %if.end13
	leaq	8(%rsp), %rcx
	movq	%rcx, (%rax)
	movq	%rax, 56(%rsp)
	movl	$10, 8(%rax)
	movl	$0, 36(%rax)
	movl	$0, 32(%rax)
	movl	$0, 3188(%rax)
	movl	$0, 20(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 44(%rsp)
	movl	$0, 48(%rsp)
	movb	%r15b, 44(%rax)
	movl	$0, 48(%rax)
	xorps	%xmm0, %xmm0
	movups	%xmm0, 3152(%rax)
	movq	$0, 3168(%rax)
	movl	%ebx, 52(%rax)
	movq	%rbp, 8(%rsp)
	movq	%r14, 32(%rsp)
	movq	%rcx, %r14
	movl	%r13d, 16(%rsp)
	movl	(%r12), %eax
	movl	%eax, 40(%rsp)
	movq	%r14, %rdi
	callq	BZ2_bzDecompress
	movl	%eax, %ecx
	movl	$0, "PinFlag-165."(%rip)
	movl	$0, "PinFlag-166."(%rip)
	movl	$0, "PinFlag-167."(%rip)
	movl	$0, "PinFlag-168."(%rip)
	movl	$0, "PinFlag-169."(%rip)
	movl	$0, "PinFlag-169.0"(%rip)
	movl	$0, "PinFlag-316."(%rip)
	movl	$0, "PinFlag-100."(%rip)
	movl	$0, "PinFlag-101."(%rip)
	movl	$0, "PinFlag-102."(%rip)
	movl	$0, "PinFlag-103."(%rip)
	movl	$0, "PinFlag-104."(%rip)
	movl	$0, "PinFlag-105."(%rip)
	movl	$0, "PinFlag-106."(%rip)
	movl	$0, "PinFlag-107."(%rip)
	movl	$0, "PinFlag-108."(%rip)
	movl	$0, "PinFlag-109."(%rip)
	movl	$0, "PinFlag-110."(%rip)
	movl	$0, "PinFlag-110.0"(%rip)
	movl	$0, "PinFlag-111."(%rip)
	movl	$0, "PinFlag-112."(%rip)
	movl	$0, "PinFlag-113."(%rip)
	movl	$0, "PinFlag-114."(%rip)
	movl	$0, "PinFlag-115."(%rip)
	movl	$0, "PinFlag-116."(%rip)
	movl	$0, "PinFlag-117."(%rip)
	movl	$0, "PinFlag-120."(%rip)
	movl	$0, "PinFlag-122."(%rip)
	movl	$0, "PinFlag-123."(%rip)
	movl	$0, "PinFlag-124."(%rip)
	movl	$0, "PinFlag-125."(%rip)
	movl	$0, "PinFlag-126."(%rip)
	movl	$0, "PinFlag-127."(%rip)
	movl	$0, "PinFlag-128."(%rip)
	movl	$0, "PinFlag-129."(%rip)
	movl	$0, "PinFlag-130."(%rip)
	movl	$0, "PinFlag-131."(%rip)
	movl	$0, "PinFlag-132."(%rip)
	movl	$0, "PinFlag-133."(%rip)
	movl	$0, "PinFlag-134."(%rip)
	movl	$0, "PinFlag-136."(%rip)
	movl	$0, "PinFlag-136.0"(%rip)
	movl	$0, "PinFlag-136.1"(%rip)
	movl	$0, "PinFlag-138."(%rip)
	movl	$0, "PinFlag-138.0"(%rip)
	movl	$0, "PinFlag-138.1"(%rip)
	movl	$0, "PinFlag-140."(%rip)
	movl	$0, "PinFlag-141."(%rip)
	movl	$0, "PinFlag-142."(%rip)
	movl	$0, "PinFlag-143."(%rip)
	movl	$0, "PinFlag-144."(%rip)
	movl	$0, "PinFlag-145."(%rip)
	movl	$0, "PinFlag-146."(%rip)
	movl	$0, "PinFlag-147."(%rip)
	movl	$0, "PinFlag-148."(%rip)
	movl	$0, "PinFlag-149."(%rip)
	movl	$0, "PinFlag-150."(%rip)
	movl	$0, "PinFlag-151."(%rip)
	movl	$0, "PinFlag-152."(%rip)
	movl	$0, "PinFlag-153."(%rip)
	movl	$0, "PinFlag-154."(%rip)
	movl	$0, "PinFlag-155."(%rip)
	movl	$0, "PinFlag-156."(%rip)
	movl	$0, "PinFlag-157."(%rip)
	movl	$0, "PinFlag-158."(%rip)
	movl	$0, "PinFlag-159."(%rip)
	movl	$0, "PinFlag-160."(%rip)
	movl	$0, "PinFlag-99."(%rip)
	movl	$0, "PinFlag-47."(%rip)
	movl	$0, "PinFlag-47.0"(%rip)
	movl	$0, "PinFlag-47.00"(%rip)
	movl	$0, "PinFlag-47.01"(%rip)
	movl	$0, "PinFlag-47.02"(%rip)
	movl	$0, "PinFlag-47.03"(%rip)
	movl	$0, "PinFlag-47.04"(%rip)
	movl	$0, "PinFlag-47.1"(%rip)
	movl	$0, "PinFlag-47.10"(%rip)
	movl	$0, "PinFlag-47.11"(%rip)
	movl	$0, "PinFlag-47.12"(%rip)
	movl	$0, "PinFlag-47.13"(%rip)
	movl	$0, "PinFlag-47.14"(%rip)
	movl	$0, "PinFlag-47.2"(%rip)
	movl	$0, "PinFlag-47.3"(%rip)
	movl	$0, "PinFlag-47.30"(%rip)
	movl	$0, "PinFlag-45."(%rip)
	testl	%ecx, %ecx
	je	.LBB51_17
# BB#7:                                 # %if.end13
	cmpl	$4, %ecx
	jne	.LBB51_28
# BB#8:                                 # %if.end20
	movl	40(%rsp), %eax
	subl	%eax, (%r12)
	movq	56(%rsp), %rbx
	xorl	%ecx, %ecx
	testq	%rbx, %rbx
	je	.LBB51_37
# BB#9:                                 # %if.end3.i
	cmpq	%r14, (%rbx)
	jne	.LBB51_37
# BB#10:                                # %if.end7.i
	movq	3152(%rbx), %rsi
	testq	%rsi, %rsi
	je	.LBB51_12
# BB#11:                                # %if.then9.i
	movq	80(%rsp), %rdi
	callq	*72(%rsp)
.LBB51_12:                              # %if.end11.i
	movq	3160(%rbx), %rsi
	testq	%rsi, %rsi
	je	.LBB51_14
# BB#13:                                # %if.then13.i
	movq	80(%rsp), %rdi
	callq	*72(%rsp)
.LBB51_14:                              # %if.end17.i
	movq	3168(%rbx), %rsi
	testq	%rsi, %rsi
	je	.LBB51_16
# BB#15:                                # %if.then19.i
	movq	80(%rsp), %rdi
	callq	*72(%rsp)
.LBB51_16:                              # %if.end23.i51
	movq	56(%rsp), %rsi
	movq	80(%rsp), %rdi
	callq	*72(%rsp)
	movq	$0, 56(%rsp)
	xorl	%ecx, %ecx
	jmp	.LBB51_37
.LBB51_17:                              # %output_overflow_or_eof
	movl	40(%rsp), %ebx
	movq	56(%rsp), %rbp
	testq	%rbp, %rbp
	je	.LBB51_26
# BB#18:                                # %if.end3.i57
	cmpq	%r14, (%rbp)
	jne	.LBB51_26
# BB#19:                                # %if.end7.i60
	movq	3152(%rbp), %rsi
	testq	%rsi, %rsi
	je	.LBB51_21
# BB#20:                                # %if.then9.i63
	movq	80(%rsp), %rdi
	callq	*72(%rsp)
.LBB51_21:                              # %if.end11.i66
	movq	3160(%rbp), %rsi
	testq	%rsi, %rsi
	je	.LBB51_23
# BB#22:                                # %if.then13.i69
	movq	80(%rsp), %rdi
	callq	*72(%rsp)
.LBB51_23:                              # %if.end17.i73
	movq	3168(%rbp), %rsi
	testq	%rsi, %rsi
	je	.LBB51_25
# BB#24:                                # %if.then19.i77
	movq	80(%rsp), %rdi
	callq	*72(%rsp)
.LBB51_25:                              # %if.end23.i79
	movq	56(%rsp), %rsi
	movq	80(%rsp), %rdi
	callq	*72(%rsp)
	movq	$0, 56(%rsp)
.LBB51_26:                              # %BZ2_bzDecompressEnd.exit81
	movl	$-8, %ecx
	testl	%ebx, %ebx
	je	.LBB51_37
# BB#27:                                # %select.false
	movl	$-7, %ecx
	jmp	.LBB51_37
.LBB51_28:                              # %errhandler
	movq	56(%rsp), %rbx
	testq	%rbx, %rbx
	je	.LBB51_37
# BB#29:                                # %if.end3.i86
	cmpq	%r14, (%rbx)
	jne	.LBB51_37
# BB#30:                                # %if.end7.i89
	movl	%ecx, %ebp
	movq	3152(%rbx), %rsi
	testq	%rsi, %rsi
	je	.LBB51_32
# BB#31:                                # %if.then9.i92
	movq	80(%rsp), %rdi
	callq	*72(%rsp)
.LBB51_32:                              # %if.end11.i95
	movq	3160(%rbx), %rsi
	testq	%rsi, %rsi
	je	.LBB51_34
# BB#33:                                # %if.then13.i98
	movq	80(%rsp), %rdi
	callq	*72(%rsp)
.LBB51_34:                              # %if.end17.i102
	movq	3168(%rbx), %rsi
	testq	%rsi, %rsi
	je	.LBB51_36
# BB#35:                                # %if.then19.i106
	movq	80(%rsp), %rdi
	callq	*72(%rsp)
.LBB51_36:                              # %if.end23.i108
	movq	56(%rsp), %rsi
	movq	80(%rsp), %rdi
	callq	*72(%rsp)
	movq	$0, 56(%rsp)
	movl	%ebp, %ecx
.LBB51_37:                              # %cleanup
	movl	%ecx, %eax
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end51:
	.size	BZ2_bzBuffToBuffDecompress, .Lfunc_end51-BZ2_bzBuffToBuffDecompress
	.cfi_endproc

	.globl	BZ2_bzopen
	.align	16, 0x90
	.type	BZ2_bzopen,@function
BZ2_bzopen:                             # @BZ2_bzopen
	.cfi_startproc
# BB#0:                                 # %entry
	xorl	%edx, %edx
	jmp	bzopen_or_bzdopen       # TAILCALL
.Lfunc_end52:
	.size	BZ2_bzopen, .Lfunc_end52-BZ2_bzopen
	.cfi_endproc

	.align	16, 0x90
	.type	bzopen_or_bzdopen,@function
bzopen_or_bzdopen:                      # @bzopen_or_bzdopen
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp347:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp348:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp349:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp350:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp351:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp352:
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
.Ltmp353:
	.cfi_def_cfa_offset 80
.Ltmp354:
	.cfi_offset %rbx, -56
.Ltmp355:
	.cfi_offset %r12, -48
.Ltmp356:
	.cfi_offset %r13, -40
.Ltmp357:
	.cfi_offset %r14, -32
.Ltmp358:
	.cfi_offset %r15, -24
.Ltmp359:
	.cfi_offset %rbp, -16
	movl	%edx, %r15d
	movq	%rsi, %rbp
	movw	$0, 16(%rsp)
	movq	$0, 8(%rsp)
	xorl	%r13d, %r13d
	testq	%rbp, %rbp
	movl	$0, %eax
	je	.LBB53_22
# BB#1:                                 # %while.cond.preheader
	movq	%rdi, (%rsp)            # 8-byte Spill
	movb	(%rbp), %bl
	movl	$9, %r12d
	testb	%bl, %bl
	je	.LBB53_13
# BB#2:                                 # %while.body.preheader
	cmpl	$0, "PinFlag-53."(%rip)
	jne	.LBB53_4
# BB#3:
	movl	$.L__unnamed_119, %edi
	movl	$1, %esi
	movl	$2, %edx
	movl	$24, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-53."(%rip)
.LBB53_4:
	incq	%rbp
	xorl	%r13d, %r13d
	movl	$9, %r12d
	.align	16, 0x90
.LBB53_5:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movsbl	%bl, %ebx
	cmpl	$114, %ebx
	je	.LBB53_6
# BB#7:                                 # %while.body
                                        #   in Loop: Header=BB53_5 Depth=1
	cmpl	$115, %ebx
	je	.LBB53_11
# BB#8:                                 # %while.body
                                        #   in Loop: Header=BB53_5 Depth=1
	cmpl	$119, %ebx
	jne	.LBB53_10
# BB#9:                                 # %sw.bb1
                                        #   in Loop: Header=BB53_5 Depth=1
	movl	$1, %r13d
	jmp	.LBB53_11
	.align	16, 0x90
.LBB53_6:                               #   in Loop: Header=BB53_5 Depth=1
	xorl	%r13d, %r13d
	jmp	.LBB53_11
	.align	16, 0x90
.LBB53_10:                              # %sw.default
                                        #   in Loop: Header=BB53_5 Depth=1
	movslq	%ebx, %r14
	callq	__ctype_b_loc
	movq	(%rax), %rax
	addl	$-48, %ebx
	testb	$8, 1(%rax,%r14,2)
	cmovnel	%ebx, %r12d
.LBB53_11:                              # %sw.epilog
                                        #   in Loop: Header=BB53_5 Depth=1
	movb	(%rbp), %bl
	incq	%rbp
	testb	%bl, %bl
	jne	.LBB53_5
# BB#12:                                # %while.end.loopexit
	movl	$53, %edi
	callq	UnPin
	movl	$0, "PinFlag-53."(%rip)
.LBB53_13:                              # %while.end
	leaq	8(%rsp), %rbx
	movq	%rbx, %rdi
	callq	strlen
	testl	%r13d, %r13d
	movw	$119, %cx
	movw	$114, %dx
	cmovnew	%cx, %dx
	movw	%dx, 8(%rsp,%rax)
	movq	%rbx, %rdi
	callq	strlen
	movw	$98, 8(%rsp,%rax)
	xorl	%eax, %eax
	testl	%r15d, %r15d
	movq	(%rsp), %rcx            # 8-byte Reload
	jne	.LBB53_22
# BB#14:                                # %if.then15
	testq	%rcx, %rcx
	je	.LBB53_16
# BB#15:                                # %if.end58
	xorl	%eax, %eax
	cmpb	$0, (%rcx)
	jne	.LBB53_22
.LBB53_16:                              # %if.end70
	xorl	%eax, %eax
	testl	%r13d, %r13d
	setne	%r14b
	je	.LBB53_22
# BB#17:                                # %if.then76
	testl	%r12d, %r12d
	movl	$1, %eax
	cmovgl	%r12d, %eax
	cmpl	$9, %eax
	movl	$9, %ebx
	cmovlel	%eax, %ebx
	leal	-1(%rbx), %ecx
	xorl	%eax, %eax
	cmpl	$8, %ecx
	ja	.LBB53_22
# BB#18:                                # %if.end24.i
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, %rbp
	xorl	%eax, %eax
	testq	%rbp, %rbp
	je	.LBB53_22
# BB#19:                                # %if.end34.i
	movzbl	%r14b, %eax
	movl	$0, 5096(%rbp)
	movb	$0, 5100(%rbp)
	movl	$0, 5004(%rbp)
	movl	%eax, (%rbp)
	movb	$1, 5008(%rbp)
	movq	%rbp, %rdi
	addq	$5016, %rdi             # imm = 0x1398
	xorps	%xmm0, %xmm0
	movups	%xmm0, 5072(%rbp)
	movq	$0, 5088(%rbp)
	xorl	%edx, %edx
	movl	$30, %ecx
	movl	%ebx, %esi
	callq	BZ2_bzCompressInit
	testl	%eax, %eax
	je	.LBB53_21
# BB#20:                                # %if.then50.i
	movq	%rbp, %rdi
	callq	free
	xorl	%eax, %eax
	jmp	.LBB53_22
.LBB53_21:                              # %if.end58.i
	movl	$0, 5024(%rbp)
	movb	$1, 5100(%rbp)
	movq	%rbp, %rax
.LBB53_22:                              # %cleanup
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end53:
	.size	bzopen_or_bzdopen, .Lfunc_end53-bzopen_or_bzdopen
	.cfi_endproc

	.globl	BZ2_bzdopen
	.align	16, 0x90
	.type	BZ2_bzdopen,@function
BZ2_bzdopen:                            # @BZ2_bzdopen
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp360:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp361:
	.cfi_def_cfa_offset 24
	subq	$24, %rsp
.Ltmp362:
	.cfi_def_cfa_offset 48
.Ltmp363:
	.cfi_offset %rbx, -24
.Ltmp364:
	.cfi_offset %rbp, -16
	movw	$0, 16(%rsp)
	movq	$0, 8(%rsp)
	testq	%rsi, %rsi
	je	.LBB54_10
# BB#1:                                 # %while.cond.preheader.i
	movb	(%rsi), %al
	xorl	%ebp, %ebp
	testb	%al, %al
	je	.LBB54_9
# BB#2:                                 # %while.body.i.preheader
	incq	%rsi
	xorl	%ecx, %ecx
	.align	16, 0x90
.LBB54_3:                               # %while.body.i
                                        # =>This Inner Loop Header: Depth=1
	movsbl	%al, %eax
	cmpl	$114, %eax
	movl	$0, %ebp
	je	.LBB54_8
# BB#4:                                 # %while.body.i
                                        #   in Loop: Header=BB54_3 Depth=1
	cmpl	$115, %eax
	je	.LBB54_7
# BB#5:                                 # %while.body.i
                                        #   in Loop: Header=BB54_3 Depth=1
	cmpl	$119, %eax
	jne	.LBB54_7
# BB#6:                                 # %sw.bb1.i
                                        #   in Loop: Header=BB54_3 Depth=1
	movl	$1, %ebp
	jmp	.LBB54_8
	.align	16, 0x90
.LBB54_7:                               # %sw.default.i
                                        #   in Loop: Header=BB54_3 Depth=1
	movl	%ecx, %ebp
.LBB54_8:                               # %sw.epilog.i
                                        #   in Loop: Header=BB54_3 Depth=1
	movb	(%rsi), %al
	incq	%rsi
	testb	%al, %al
	movl	%ebp, %ecx
	jne	.LBB54_3
.LBB54_9:                               # %while.end.i
	leaq	8(%rsp), %rbx
	movq	%rbx, %rdi
	callq	strlen
	testl	%ebp, %ebp
	movw	$119, %cx
	movw	$114, %dx
	cmovnew	%cx, %dx
	movw	%dx, 8(%rsp,%rax)
	movq	%rbx, %rdi
	callq	strlen
	movw	$98, 8(%rsp,%rax)
.LBB54_10:                              # %bzopen_or_bzdopen.exit
	xorl	%eax, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end54:
	.size	BZ2_bzdopen, .Lfunc_end54-BZ2_bzdopen
	.cfi_endproc

	.globl	BZ2_bzread
	.align	16, 0x90
	.type	BZ2_bzread,@function
BZ2_bzread:                             # @BZ2_bzread
	.cfi_startproc
# BB#0:                                 # %entry
	movl	%edx, %eax
	movq	%rsi, %rcx
	movq	%rdi, %rsi
	xorl	%edx, %edx
	cmpl	$4, 5096(%rsi)
	je	.LBB55_2
# BB#1:                                 # %if.end
	pushq	%rax
.Ltmp365:
	.cfi_def_cfa_offset 16
	leaq	4(%rsp), %rdi
	movq	%rcx, %rdx
	movl	%eax, %ecx
	callq	BZ2_bzRead
	movl	$0, "PinFlag-165."(%rip)
	movl	$0, "PinFlag-166."(%rip)
	movl	$0, "PinFlag-167."(%rip)
	movl	$0, "PinFlag-168."(%rip)
	movl	$0, "PinFlag-169."(%rip)
	movl	$0, "PinFlag-169.0"(%rip)
	movl	$0, "PinFlag-316."(%rip)
	movl	$0, "PinFlag-315."(%rip)
	movl	$0, "PinFlag-314."(%rip)
	movl	$0, "PinFlag-100."(%rip)
	movl	$0, "PinFlag-101."(%rip)
	movl	$0, "PinFlag-102."(%rip)
	movl	$0, "PinFlag-103."(%rip)
	movl	$0, "PinFlag-104."(%rip)
	movl	$0, "PinFlag-105."(%rip)
	movl	$0, "PinFlag-106."(%rip)
	movl	$0, "PinFlag-107."(%rip)
	movl	$0, "PinFlag-108."(%rip)
	movl	$0, "PinFlag-109."(%rip)
	movl	$0, "PinFlag-110."(%rip)
	movl	$0, "PinFlag-110.0"(%rip)
	movl	$0, "PinFlag-111."(%rip)
	movl	$0, "PinFlag-112."(%rip)
	movl	$0, "PinFlag-113."(%rip)
	movl	$0, "PinFlag-114."(%rip)
	movl	$0, "PinFlag-115."(%rip)
	movl	$0, "PinFlag-116."(%rip)
	movl	$0, "PinFlag-117."(%rip)
	movl	$0, "PinFlag-120."(%rip)
	movl	$0, "PinFlag-122."(%rip)
	movl	$0, "PinFlag-123."(%rip)
	movl	$0, "PinFlag-124."(%rip)
	movl	$0, "PinFlag-125."(%rip)
	movl	$0, "PinFlag-126."(%rip)
	movl	$0, "PinFlag-127."(%rip)
	movl	$0, "PinFlag-128."(%rip)
	movl	$0, "PinFlag-129."(%rip)
	movl	$0, "PinFlag-130."(%rip)
	movl	$0, "PinFlag-131."(%rip)
	movl	$0, "PinFlag-132."(%rip)
	movl	$0, "PinFlag-133."(%rip)
	movl	$0, "PinFlag-134."(%rip)
	movl	$0, "PinFlag-136."(%rip)
	movl	$0, "PinFlag-136.0"(%rip)
	movl	$0, "PinFlag-136.1"(%rip)
	movl	$0, "PinFlag-138."(%rip)
	movl	$0, "PinFlag-138.0"(%rip)
	movl	$0, "PinFlag-138.1"(%rip)
	movl	$0, "PinFlag-140."(%rip)
	movl	$0, "PinFlag-141."(%rip)
	movl	$0, "PinFlag-142."(%rip)
	movl	$0, "PinFlag-143."(%rip)
	movl	$0, "PinFlag-144."(%rip)
	movl	$0, "PinFlag-145."(%rip)
	movl	$0, "PinFlag-146."(%rip)
	movl	$0, "PinFlag-147."(%rip)
	movl	$0, "PinFlag-148."(%rip)
	movl	$0, "PinFlag-149."(%rip)
	movl	$0, "PinFlag-150."(%rip)
	movl	$0, "PinFlag-151."(%rip)
	movl	$0, "PinFlag-152."(%rip)
	movl	$0, "PinFlag-153."(%rip)
	movl	$0, "PinFlag-154."(%rip)
	movl	$0, "PinFlag-155."(%rip)
	movl	$0, "PinFlag-156."(%rip)
	movl	$0, "PinFlag-157."(%rip)
	movl	$0, "PinFlag-158."(%rip)
	movl	$0, "PinFlag-159."(%rip)
	movl	$0, "PinFlag-160."(%rip)
	movl	$0, "PinFlag-99."(%rip)
	movl	$0, "PinFlag-306."(%rip)
	movl	$0, "PinFlag-47."(%rip)
	movl	$0, "PinFlag-47.0"(%rip)
	movl	$0, "PinFlag-47.00"(%rip)
	movl	$0, "PinFlag-47.01"(%rip)
	movl	$0, "PinFlag-47.02"(%rip)
	movl	$0, "PinFlag-47.03"(%rip)
	movl	$0, "PinFlag-47.04"(%rip)
	movl	$0, "PinFlag-47.1"(%rip)
	movl	$0, "PinFlag-47.10"(%rip)
	movl	$0, "PinFlag-47.11"(%rip)
	movl	$0, "PinFlag-47.12"(%rip)
	movl	$0, "PinFlag-47.13"(%rip)
	movl	$0, "PinFlag-47.14"(%rip)
	movl	$0, "PinFlag-47.2"(%rip)
	movl	$0, "PinFlag-47.3"(%rip)
	movl	$0, "PinFlag-47.30"(%rip)
	movl	$0, "PinFlag-189."(%rip)
	movl	$0, "PinFlag-45."(%rip)
	movl	$0, "PinFlag-188."(%rip)
	movl	$0, "PinFlag-187."(%rip)
	movl	4(%rsp), %ecx
	orl	$4, %ecx
	cmpl	$4, %ecx
	movl	$-1, %edx
	cmovel	%eax, %edx
	addq	$8, %rsp
.LBB55_2:                               # %cleanup
	movl	%edx, %eax
	retq
.Lfunc_end55:
	.size	BZ2_bzread, .Lfunc_end55-BZ2_bzread
	.cfi_endproc

	.globl	BZ2_bzwrite
	.align	16, 0x90
	.type	BZ2_bzwrite,@function
BZ2_bzwrite:                            # @BZ2_bzwrite
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp366:
	.cfi_def_cfa_offset 16
	subq	$16, %rsp
.Ltmp367:
	.cfi_def_cfa_offset 32
.Ltmp368:
	.cfi_offset %rbx, -16
	movl	%edx, %ebx
	movq	%rsi, %rax
	movq	%rdi, %rcx
	leaq	12(%rsp), %rdi
	movq	%rcx, %rsi
	movq	%rax, %rdx
	movl	%ebx, %ecx
	callq	BZ2_bzWrite
	movl	$0, "PinFlag-164."(%rip)
	movl	$0, "PinFlag-164.0"(%rip)
	movl	$0, "PinFlag-313."(%rip)
	movl	$0, "PinFlag-161."(%rip)
	movl	$0, "PinFlag-161.0"(%rip)
	movl	$0, "PinFlag-161.1"(%rip)
	movl	$0, "PinFlag-161.10"(%rip)
	movl	$0, "PinFlag-161.11"(%rip)
	movl	$0, "PinFlag-161.12"(%rip)
	movl	$0, "PinFlag-161.2"(%rip)
	movl	$0, "PinFlag-161.3"(%rip)
	movl	$0, "PinFlag-161.30"(%rip)
	movl	$0, "PinFlag-161.31"(%rip)
	movl	$0, "PinFlag-161.4"(%rip)
	movl	$0, "PinFlag-161.5"(%rip)
	movl	$0, "PinFlag-98."(%rip)
	movl	$0, "PinFlag-225."(%rip)
	movl	$0, "PinFlag-206."(%rip)
	movl	$0, "PinFlag-203."(%rip)
	movl	$0, "PinFlag-82."(%rip)
	movl	$0, "PinFlag-82.0"(%rip)
	movl	$0, "PinFlag-82.00"(%rip)
	movl	$0, "PinFlag-82.1"(%rip)
	movl	$0, "PinFlag-82.10"(%rip)
	movl	$0, "PinFlag-82.2"(%rip)
	movl	$0, "PinFlag-82.3"(%rip)
	movl	$0, "PinFlag-82.4"(%rip)
	movl	$0, "PinFlag-82.5"(%rip)
	movl	$0, "PinFlag-82.6"(%rip)
	movl	$0, "PinFlag-82.7"(%rip)
	movl	$0, "PinFlag-82.8"(%rip)
	movl	$0, "PinFlag-82.9"(%rip)
	movl	$0, "PinFlag-83."(%rip)
	movl	$0, "PinFlag-83.0"(%rip)
	movl	$0, "PinFlag-83.00"(%rip)
	movl	$0, "PinFlag-83.01"(%rip)
	movl	$0, "PinFlag-85."(%rip)
	movl	$0, "PinFlag-85.0"(%rip)
	movl	$0, "PinFlag-87."(%rip)
	movl	$0, "PinFlag-87.0"(%rip)
	movl	$0, "PinFlag-88."(%rip)
	movl	$0, "PinFlag-89."(%rip)
	movl	$0, "PinFlag-89.0"(%rip)
	movl	$0, "PinFlag-89.1"(%rip)
	movl	$0, "PinFlag-91."(%rip)
	movl	$0, "PinFlag-91.0"(%rip)
	movl	$0, "PinFlag-91.1"(%rip)
	movl	$0, "PinFlag-92."(%rip)
	movl	$0, "PinFlag-95."(%rip)
	movl	$0, "PinFlag-95.0"(%rip)
	movl	$0, "PinFlag-95.1"(%rip)
	movl	$0, "PinFlag-95.2"(%rip)
	movl	$0, "PinFlag-95.20"(%rip)
	movl	$0, "PinFlag-95.21"(%rip)
	movl	$0, "PinFlag-95.210"(%rip)
	movl	$0, "PinFlag-95.211"(%rip)
	movl	$0, "PinFlag-95.22"(%rip)
	movl	$0, "PinFlag-95.23"(%rip)
	movl	$0, "PinFlag-95.3"(%rip)
	movl	$0, "PinFlag-95.4"(%rip)
	movl	$0, "PinFlag-96."(%rip)
	movl	$0, "PinFlag-96.0"(%rip)
	movl	$0, "PinFlag-96.1"(%rip)
	movl	$0, "PinFlag-96.2"(%rip)
	movl	$0, "PinFlag-97."(%rip)
	movl	$0, "PinFlag-97.0"(%rip)
	movl	$0, "PinFlag-78."(%rip)
	movl	$0, "PinFlag-79."(%rip)
	movl	$0, "PinFlag-80."(%rip)
	movl	$0, "PinFlag-81."(%rip)
	movl	$0, "PinFlag-55."(%rip)
	movl	$0, "PinFlag-56."(%rip)
	movl	$0, "PinFlag-57."(%rip)
	movl	$0, "PinFlag-58."(%rip)
	movl	$0, "PinFlag-59."(%rip)
	movl	$0, "PinFlag-60."(%rip)
	movl	$0, "PinFlag-61."(%rip)
	movl	$0, "PinFlag-62."(%rip)
	movl	$0, "PinFlag-63."(%rip)
	movl	$0, "PinFlag-63.0"(%rip)
	movl	$0, "PinFlag-63.1"(%rip)
	movl	$0, "PinFlag-67."(%rip)
	movl	$0, "PinFlag-68."(%rip)
	movl	$0, "PinFlag-69."(%rip)
	movl	$0, "PinFlag-70."(%rip)
	movl	$0, "PinFlag-71."(%rip)
	movl	$0, "PinFlag-72."(%rip)
	movl	$0, "PinFlag-73."(%rip)
	movl	$0, "PinFlag-74."(%rip)
	movl	$0, "PinFlag-75."(%rip)
	movl	$0, "PinFlag-76."(%rip)
	movl	$0, "PinFlag-77."(%rip)
	movl	$0, "PinFlag-48."(%rip)
	movl	$0, "PinFlag-44."(%rip)
	movl	$0, "PinFlag-43."(%rip)
	movl	$0, "PinFlag-43.0"(%rip)
	movl	$0, "PinFlag-43.1"(%rip)
	movl	$0, "PinFlag-43.2"(%rip)
	movl	$0, "PinFlag-33."(%rip)
	movl	$0, "PinFlag-24."(%rip)
	movl	$0, "PinFlag-24.0"(%rip)
	movl	$0, "PinFlag-24.1"(%rip)
	movl	$0, "PinFlag-26."(%rip)
	movl	$0, "PinFlag-26.0"(%rip)
	movl	$0, "PinFlag-26.1"(%rip)
	movl	$0, "PinFlag-26.10"(%rip)
	movl	$0, "PinFlag-26.100"(%rip)
	movl	$0, "PinFlag-26.101"(%rip)
	movl	$0, "PinFlag-26.102"(%rip)
	movl	$0, "PinFlag-26.103"(%rip)
	movl	$0, "PinFlag-26.104"(%rip)
	movl	$0, "PinFlag-26.11"(%rip)
	movl	$0, "PinFlag-26.110"(%rip)
	movl	$0, "PinFlag-26.1100"(%rip)
	movl	$0, "PinFlag-26.11000"(%rip)
	movl	$0, "PinFlag-26.1101"(%rip)
	movl	$0, "PinFlag-26.11010"(%rip)
	movl	$0, "PinFlag-26.111"(%rip)
	movl	$0, "PinFlag-26.1110"(%rip)
	movl	$0, "PinFlag-26.11100"(%rip)
	movl	$0, "PinFlag-26.1111"(%rip)
	movl	$0, "PinFlag-26.11110"(%rip)
	movl	$0, "PinFlag-26.112"(%rip)
	movl	$0, "PinFlag-26.113"(%rip)
	movl	$0, "PinFlag-26.114"(%rip)
	movl	$0, "PinFlag-26.115"(%rip)
	movl	$0, "PinFlag-26.12"(%rip)
	movl	$0, "PinFlag-27."(%rip)
	movl	$0, "PinFlag-28."(%rip)
	movl	$0, "PinFlag-29."(%rip)
	movl	$0, "PinFlag-30."(%rip)
	movl	$0, "PinFlag-31."(%rip)
	movl	$0, "PinFlag-32."(%rip)
	movl	$0, "PinFlag-14."(%rip)
	movl	$0, "PinFlag-14.0"(%rip)
	movl	$0, "PinFlag-14.00"(%rip)
	movl	$0, "PinFlag-14.000"(%rip)
	movl	$0, "PinFlag-14.0000"(%rip)
	movl	$0, "PinFlag-14.00000"(%rip)
	movl	$0, "PinFlag-14.000000"(%rip)
	movl	$0, "PinFlag-14.00001"(%rip)
	movl	$0, "PinFlag-14.000010"(%rip)
	movl	$0, "PinFlag-14.001"(%rip)
	movl	$0, "PinFlag-14.0010"(%rip)
	movl	$0, "PinFlag-14.00100"(%rip)
	movl	$0, "PinFlag-14.001000"(%rip)
	movl	$0, "PinFlag-14.00101"(%rip)
	movl	$0, "PinFlag-14.001010"(%rip)
	movl	$0, "PinFlag-14.002"(%rip)
	movl	$0, "PinFlag-14.003"(%rip)
	movl	$0, "PinFlag-14.004"(%rip)
	movl	$0, "PinFlag-14.005"(%rip)
	movl	$0, "PinFlag-14.006"(%rip)
	movl	$0, "PinFlag-14.007"(%rip)
	movl	$0, "PinFlag-14.0070"(%rip)
	movl	$0, "PinFlag-14.00700"(%rip)
	movl	$0, "PinFlag-14.00701"(%rip)
	movl	$0, "PinFlag-14.00702"(%rip)
	movl	$0, "PinFlag-14.1"(%rip)
	movl	$0, "PinFlag-14.2"(%rip)
	movl	$0, "PinFlag-14.3"(%rip)
	movl	$0, "PinFlag-14.4"(%rip)
	movl	$0, "PinFlag-14.5"(%rip)
	movl	$0, "PinFlag-14.6"(%rip)
	movl	$0, "PinFlag-15."(%rip)
	movl	$0, "PinFlag-15.0"(%rip)
	movl	$0, "PinFlag-15.00"(%rip)
	movl	$0, "PinFlag-17."(%rip)
	movl	$0, "PinFlag-18."(%rip)
	movl	$0, "PinFlag-19."(%rip)
	movl	$0, "PinFlag-20."(%rip)
	movl	$0, "PinFlag-21."(%rip)
	movl	$0, "PinFlag-22."(%rip)
	movl	$0, "PinFlag-23."(%rip)
	cmpl	$0, 12(%rsp)
	je	.LBB56_2
# BB#1:                                 # %select.false
	movl	$-1, %ebx
.LBB56_2:                               # %select.end
	movl	%ebx, %eax
	addq	$16, %rsp
	popq	%rbx
	retq
.Lfunc_end56:
	.size	BZ2_bzwrite, .Lfunc_end56-BZ2_bzwrite
	.cfi_endproc

	.globl	BZ2_bzflush
	.align	16, 0x90
	.type	BZ2_bzflush,@function
BZ2_bzflush:                            # @BZ2_bzflush
	.cfi_startproc
# BB#0:                                 # %entry
	xorl	%eax, %eax
	retq
.Lfunc_end57:
	.size	BZ2_bzflush, .Lfunc_end57-BZ2_bzflush
	.cfi_endproc

	.globl	BZ2_bzclose
	.align	16, 0x90
	.type	BZ2_bzclose,@function
BZ2_bzclose:                            # @BZ2_bzclose
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp369:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp370:
	.cfi_def_cfa_offset 24
	subq	$24, %rsp
.Ltmp371:
	.cfi_def_cfa_offset 48
.Ltmp372:
	.cfi_offset %rbx, -24
.Ltmp373:
	.cfi_offset %r14, -16
	movq	%rdi, %rbx
	testq	%rbx, %rbx
	je	.LBB58_24
# BB#1:                                 # %if.end
	cmpb	$0, 5008(%rbx)
	je	.LBB58_12
# BB#2:                                 # %if.then1
	movq	$0, (%rsp)
	leaq	20(%rsp), %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rbx, %rsi
	callq	BZ2_bzWriteClose64
	movl	$0, "PinFlag-164."(%rip)
	movl	$0, "PinFlag-164.0"(%rip)
	movl	$0, "PinFlag-313."(%rip)
	movl	$0, "PinFlag-161."(%rip)
	movl	$0, "PinFlag-161.0"(%rip)
	movl	$0, "PinFlag-161.1"(%rip)
	movl	$0, "PinFlag-161.10"(%rip)
	movl	$0, "PinFlag-161.11"(%rip)
	movl	$0, "PinFlag-161.12"(%rip)
	movl	$0, "PinFlag-161.2"(%rip)
	movl	$0, "PinFlag-161.3"(%rip)
	movl	$0, "PinFlag-161.30"(%rip)
	movl	$0, "PinFlag-161.31"(%rip)
	movl	$0, "PinFlag-161.4"(%rip)
	movl	$0, "PinFlag-161.5"(%rip)
	movl	$0, "PinFlag-98."(%rip)
	movl	$0, "PinFlag-225."(%rip)
	movl	$0, "PinFlag-206."(%rip)
	movl	$0, "PinFlag-203."(%rip)
	movl	$0, "PinFlag-82."(%rip)
	movl	$0, "PinFlag-82.0"(%rip)
	movl	$0, "PinFlag-82.00"(%rip)
	movl	$0, "PinFlag-82.1"(%rip)
	movl	$0, "PinFlag-82.10"(%rip)
	movl	$0, "PinFlag-82.2"(%rip)
	movl	$0, "PinFlag-82.3"(%rip)
	movl	$0, "PinFlag-82.4"(%rip)
	movl	$0, "PinFlag-82.5"(%rip)
	movl	$0, "PinFlag-82.6"(%rip)
	movl	$0, "PinFlag-82.7"(%rip)
	movl	$0, "PinFlag-82.8"(%rip)
	movl	$0, "PinFlag-82.9"(%rip)
	movl	$0, "PinFlag-83."(%rip)
	movl	$0, "PinFlag-83.0"(%rip)
	movl	$0, "PinFlag-83.00"(%rip)
	movl	$0, "PinFlag-83.01"(%rip)
	movl	$0, "PinFlag-85."(%rip)
	movl	$0, "PinFlag-85.0"(%rip)
	movl	$0, "PinFlag-87."(%rip)
	movl	$0, "PinFlag-87.0"(%rip)
	movl	$0, "PinFlag-88."(%rip)
	movl	$0, "PinFlag-89."(%rip)
	movl	$0, "PinFlag-89.0"(%rip)
	movl	$0, "PinFlag-89.1"(%rip)
	movl	$0, "PinFlag-91."(%rip)
	movl	$0, "PinFlag-91.0"(%rip)
	movl	$0, "PinFlag-91.1"(%rip)
	movl	$0, "PinFlag-92."(%rip)
	movl	$0, "PinFlag-95."(%rip)
	movl	$0, "PinFlag-95.0"(%rip)
	movl	$0, "PinFlag-95.1"(%rip)
	movl	$0, "PinFlag-95.2"(%rip)
	movl	$0, "PinFlag-95.20"(%rip)
	movl	$0, "PinFlag-95.21"(%rip)
	movl	$0, "PinFlag-95.210"(%rip)
	movl	$0, "PinFlag-95.211"(%rip)
	movl	$0, "PinFlag-95.22"(%rip)
	movl	$0, "PinFlag-95.23"(%rip)
	movl	$0, "PinFlag-95.3"(%rip)
	movl	$0, "PinFlag-95.4"(%rip)
	movl	$0, "PinFlag-96."(%rip)
	movl	$0, "PinFlag-96.0"(%rip)
	movl	$0, "PinFlag-96.1"(%rip)
	movl	$0, "PinFlag-96.2"(%rip)
	movl	$0, "PinFlag-97."(%rip)
	movl	$0, "PinFlag-97.0"(%rip)
	movl	$0, "PinFlag-78."(%rip)
	movl	$0, "PinFlag-79."(%rip)
	movl	$0, "PinFlag-80."(%rip)
	movl	$0, "PinFlag-81."(%rip)
	movl	$0, "PinFlag-55."(%rip)
	movl	$0, "PinFlag-56."(%rip)
	movl	$0, "PinFlag-57."(%rip)
	movl	$0, "PinFlag-58."(%rip)
	movl	$0, "PinFlag-59."(%rip)
	movl	$0, "PinFlag-60."(%rip)
	movl	$0, "PinFlag-61."(%rip)
	movl	$0, "PinFlag-62."(%rip)
	movl	$0, "PinFlag-63."(%rip)
	movl	$0, "PinFlag-63.0"(%rip)
	movl	$0, "PinFlag-63.1"(%rip)
	movl	$0, "PinFlag-67."(%rip)
	movl	$0, "PinFlag-68."(%rip)
	movl	$0, "PinFlag-69."(%rip)
	movl	$0, "PinFlag-70."(%rip)
	movl	$0, "PinFlag-71."(%rip)
	movl	$0, "PinFlag-72."(%rip)
	movl	$0, "PinFlag-73."(%rip)
	movl	$0, "PinFlag-74."(%rip)
	movl	$0, "PinFlag-75."(%rip)
	movl	$0, "PinFlag-76."(%rip)
	movl	$0, "PinFlag-77."(%rip)
	movl	$0, "PinFlag-49."(%rip)
	movl	$0, "PinFlag-49.0"(%rip)
	movl	$0, "PinFlag-44."(%rip)
	movl	$0, "PinFlag-43."(%rip)
	movl	$0, "PinFlag-43.0"(%rip)
	movl	$0, "PinFlag-43.1"(%rip)
	movl	$0, "PinFlag-43.2"(%rip)
	movl	$0, "PinFlag-33."(%rip)
	movl	$0, "PinFlag-24."(%rip)
	movl	$0, "PinFlag-24.0"(%rip)
	movl	$0, "PinFlag-24.1"(%rip)
	movl	$0, "PinFlag-26."(%rip)
	movl	$0, "PinFlag-26.0"(%rip)
	movl	$0, "PinFlag-26.1"(%rip)
	movl	$0, "PinFlag-26.10"(%rip)
	movl	$0, "PinFlag-26.100"(%rip)
	movl	$0, "PinFlag-26.101"(%rip)
	movl	$0, "PinFlag-26.102"(%rip)
	movl	$0, "PinFlag-26.103"(%rip)
	movl	$0, "PinFlag-26.104"(%rip)
	movl	$0, "PinFlag-26.11"(%rip)
	movl	$0, "PinFlag-26.110"(%rip)
	movl	$0, "PinFlag-26.1100"(%rip)
	movl	$0, "PinFlag-26.11000"(%rip)
	movl	$0, "PinFlag-26.1101"(%rip)
	movl	$0, "PinFlag-26.11010"(%rip)
	movl	$0, "PinFlag-26.111"(%rip)
	movl	$0, "PinFlag-26.1110"(%rip)
	movl	$0, "PinFlag-26.11100"(%rip)
	movl	$0, "PinFlag-26.1111"(%rip)
	movl	$0, "PinFlag-26.11110"(%rip)
	movl	$0, "PinFlag-26.112"(%rip)
	movl	$0, "PinFlag-26.113"(%rip)
	movl	$0, "PinFlag-26.114"(%rip)
	movl	$0, "PinFlag-26.115"(%rip)
	movl	$0, "PinFlag-26.12"(%rip)
	movl	$0, "PinFlag-27."(%rip)
	movl	$0, "PinFlag-28."(%rip)
	movl	$0, "PinFlag-29."(%rip)
	movl	$0, "PinFlag-30."(%rip)
	movl	$0, "PinFlag-31."(%rip)
	movl	$0, "PinFlag-32."(%rip)
	movl	$0, "PinFlag-14."(%rip)
	movl	$0, "PinFlag-14.0"(%rip)
	movl	$0, "PinFlag-14.00"(%rip)
	movl	$0, "PinFlag-14.000"(%rip)
	movl	$0, "PinFlag-14.0000"(%rip)
	movl	$0, "PinFlag-14.00000"(%rip)
	movl	$0, "PinFlag-14.000000"(%rip)
	movl	$0, "PinFlag-14.00001"(%rip)
	movl	$0, "PinFlag-14.000010"(%rip)
	movl	$0, "PinFlag-14.001"(%rip)
	movl	$0, "PinFlag-14.0010"(%rip)
	movl	$0, "PinFlag-14.00100"(%rip)
	movl	$0, "PinFlag-14.001000"(%rip)
	movl	$0, "PinFlag-14.00101"(%rip)
	movl	$0, "PinFlag-14.001010"(%rip)
	movl	$0, "PinFlag-14.002"(%rip)
	movl	$0, "PinFlag-14.003"(%rip)
	movl	$0, "PinFlag-14.004"(%rip)
	movl	$0, "PinFlag-14.005"(%rip)
	movl	$0, "PinFlag-14.006"(%rip)
	movl	$0, "PinFlag-14.007"(%rip)
	movl	$0, "PinFlag-14.0070"(%rip)
	movl	$0, "PinFlag-14.00700"(%rip)
	movl	$0, "PinFlag-14.00701"(%rip)
	movl	$0, "PinFlag-14.00702"(%rip)
	movl	$0, "PinFlag-14.1"(%rip)
	movl	$0, "PinFlag-14.2"(%rip)
	movl	$0, "PinFlag-14.3"(%rip)
	movl	$0, "PinFlag-14.4"(%rip)
	movl	$0, "PinFlag-14.5"(%rip)
	movl	$0, "PinFlag-14.6"(%rip)
	movl	$0, "PinFlag-15."(%rip)
	movl	$0, "PinFlag-15.0"(%rip)
	movl	$0, "PinFlag-15.00"(%rip)
	movl	$0, "PinFlag-17."(%rip)
	movl	$0, "PinFlag-18."(%rip)
	movl	$0, "PinFlag-19."(%rip)
	movl	$0, "PinFlag-20."(%rip)
	movl	$0, "PinFlag-21."(%rip)
	movl	$0, "PinFlag-22."(%rip)
	movl	$0, "PinFlag-23."(%rip)
	cmpl	$0, 20(%rsp)
	je	.LBB58_24
# BB#3:                                 # %if.end6.i
	cmpb	$0, 5008(%rbx)
	je	.LBB58_4
# BB#5:                                 # %if.end15.i
	movl	$0, 5096(%rbx)
	movq	5064(%rbx), %r14
	testq	%r14, %r14
	je	.LBB58_23
# BB#6:                                 # %if.end3.i164.i
	leaq	5016(%rbx), %rax
	cmpq	%rax, (%r14)
	jne	.LBB58_23
# BB#7:                                 # %if.end7.i.i
	movq	24(%r14), %rsi
	testq	%rsi, %rsi
	je	.LBB58_9
# BB#8:                                 # %if.then9.i.i
	movq	5088(%rbx), %rdi
	callq	*5080(%rbx)
.LBB58_9:                               # %if.end11.i.i
	movq	32(%r14), %rsi
	testq	%rsi, %rsi
	je	.LBB58_11
# BB#10:                                # %if.then13.i.i
	movq	5088(%rbx), %rdi
	callq	*5080(%rbx)
.LBB58_11:                              # %if.end17.i.i
	movq	40(%r14), %rsi
	jmp	.LBB58_20
.LBB58_12:                              # %if.end22.i
	movl	$0, 20(%rsp)
	movl	$0, 5096(%rbx)
	cmpb	$0, 5100(%rbx)
	je	.LBB58_23
# BB#13:                                # %if.then24.i
	movq	5064(%rbx), %r14
	testq	%r14, %r14
	je	.LBB58_23
# BB#14:                                # %if.end3.i.i
	leaq	5016(%rbx), %rax
	cmpq	%rax, (%r14)
	jne	.LBB58_23
# BB#15:                                # %if.end7.i.i21
	movq	3152(%r14), %rsi
	testq	%rsi, %rsi
	je	.LBB58_17
# BB#16:                                # %if.then9.i.i24
	movq	5088(%rbx), %rdi
	callq	*5080(%rbx)
.LBB58_17:                              # %if.end11.i.i27
	movq	3160(%r14), %rsi
	testq	%rsi, %rsi
	je	.LBB58_19
# BB#18:                                # %if.then13.i.i29
	movq	5088(%rbx), %rdi
	callq	*5080(%rbx)
.LBB58_19:                              # %if.end17.i.i31
	movq	3168(%r14), %rsi
.LBB58_20:                              # %if.end17.i.i31
	testq	%rsi, %rsi
	je	.LBB58_22
# BB#21:                                # %if.then19.i.i35
	movq	5088(%rbx), %rdi
	callq	*5080(%rbx)
.LBB58_22:                              # %if.end23.i.i37
	movq	5064(%rbx), %rsi
	movq	5088(%rbx), %rdi
	callq	*5080(%rbx)
.LBB58_23:                              # %if.end25.i
	movq	%rbx, %rdi
	callq	free
	jmp	.LBB58_24
.LBB58_4:                               # %if.then7.i
	movl	$-1, 5096(%rbx)
.LBB58_24:                              # %cleanup
	addq	$24, %rsp
	popq	%rbx
	popq	%r14
	retq
.Lfunc_end58:
	.size	BZ2_bzclose, .Lfunc_end58-BZ2_bzclose
	.cfi_endproc

	.globl	BZ2_bzerror
	.align	16, 0x90
	.type	BZ2_bzerror,@function
BZ2_bzerror:                            # @BZ2_bzerror
	.cfi_startproc
# BB#0:                                 # %entry
	movl	5096(%rdi), %eax
	xorl	%ecx, %ecx
	testl	%eax, %eax
	cmovlel	%eax, %ecx
	movl	%ecx, (%rsi)
	negl	%ecx
	movslq	%ecx, %rax
	movq	bzerrorstrings(,%rax,8), %rax
	retq
.Lfunc_end59:
	.size	BZ2_bzerror, .Lfunc_end59-BZ2_bzerror
	.cfi_endproc

	.globl	BZ2_bsInitWrite
	.align	16, 0x90
	.type	BZ2_bsInitWrite,@function
BZ2_bsInitWrite:                        # @BZ2_bsInitWrite
	.cfi_startproc
# BB#0:                                 # %entry
	movq	$0, 640(%rdi)
	retq
.Lfunc_end60:
	.size	BZ2_bsInitWrite, .Lfunc_end60-BZ2_bsInitWrite
	.cfi_endproc

	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI61_0:
	.byte	0                       # 0x0
	.byte	1                       # 0x1
	.byte	2                       # 0x2
	.byte	3                       # 0x3
	.byte	4                       # 0x4
	.byte	5                       # 0x5
	.byte	6                       # 0x6
	.byte	7                       # 0x7
	.byte	8                       # 0x8
	.byte	9                       # 0x9
	.byte	10                      # 0xa
	.byte	11                      # 0xb
	.byte	12                      # 0xc
	.byte	13                      # 0xd
	.byte	14                      # 0xe
	.byte	15                      # 0xf
.LCPI61_1:
	.byte	16                      # 0x10
	.byte	17                      # 0x11
	.byte	18                      # 0x12
	.byte	19                      # 0x13
	.byte	20                      # 0x14
	.byte	21                      # 0x15
	.byte	22                      # 0x16
	.byte	23                      # 0x17
	.byte	24                      # 0x18
	.byte	25                      # 0x19
	.byte	26                      # 0x1a
	.byte	27                      # 0x1b
	.byte	28                      # 0x1c
	.byte	29                      # 0x1d
	.byte	30                      # 0x1e
	.byte	31                      # 0x1f
	.text
	.globl	BZ2_compressBlock
	.align	16, 0x90
	.type	BZ2_compressBlock,@function
BZ2_compressBlock:                      # @BZ2_compressBlock
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp374:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp375:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp376:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp377:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp378:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp379:
	.cfi_def_cfa_offset 56
	subq	$312, %rsp              # imm = 0x138
.Ltmp380:
	.cfi_def_cfa_offset 368
.Ltmp381:
	.cfi_offset %rbx, -56
.Ltmp382:
	.cfi_offset %r12, -48
.Ltmp383:
	.cfi_offset %r13, -40
.Ltmp384:
	.cfi_offset %r14, -32
.Ltmp385:
	.cfi_offset %r15, -24
.Ltmp386:
	.cfi_offset %rbp, -16
	movl	%esi, %r15d
	movq	%rdi, %r13
	movl	108(%r13), %r9d
	testl	%r9d, %r9d
	jle	.LBB61_6
# BB#1:                                 # %if.then
	movq	648(%r13), %r8
	movl	%r8d, %ecx
	notl	%ecx
	movl	%ecx, 648(%r13)
	movq	%r8, %rax
	shrq	$31, %rax
	andl	$-2, %eax
	shrq	$63, %r8
	orl	%eax, %r8d
	xorl	%ecx, %r8d
	movl	%r8d, 652(%r13)
	cmpl	$2, 660(%r13)
	jl	.LBB61_3
# BB#2:                                 # %if.then7
	movl	$0, 116(%r13)
.LBB61_3:                               # %if.end
	movq	656(%r13), %rdx
	cmpl	$2, %edx
	jge	.LBB61_4
.LBB61_5:                               # %if.end14
	movq	%r13, %rdi
	callq	BZ2_blockSort
	movl	108(%r13), %r9d
.LBB61_6:                               # %if.end15
	movslq	%r9d, %rax
	addq	32(%r13), %rax
	movq	%rax, 80(%r13)
	cmpl	$1, 660(%r13)
	jne	.LBB61_25
# BB#7:                                 # %if.then19
	movq	$0, 640(%r13)
	movl	$1107296256, 640(%r13)  # imm = 0x42000000
	movl	$8, 644(%r13)
	movb	$1, %cl
	testb	%cl, %cl
	je	.LBB61_8
# BB#9:                                 # %while.body.lr.ph.i.i248
	movl	$1107296256, %ecx       # imm = 0x42000000
	shrl	$24, %ecx
	movslq	116(%r13), %rdx
	movb	%cl, (%rax,%rdx)
	movl	116(%r13), %ebx
	incl	%ebx
	movl	%ebx, 116(%r13)
	movq	640(%r13), %rax
	movl	%eax, %ebp
	shll	$8, %ebp
	movl	%ebp, 640(%r13)
	shrq	$32, %rax
	addl	$-8, %eax
	movl	%eax, 644(%r13)
	cmpl	$8, %eax
	jl	.LBB61_10
# BB#11:                                # %while.body.i.i257.while.body.i.i257_crit_edge.preheader
	cmpl	$0, "PinFlag-77."(%rip)
	jne	.LBB61_13
# BB#12:
	movl	$.L__unnamed_120, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-77."(%rip)
	.align	16, 0x90
.LBB61_13:                              # %while.body.i.i257.while.body.i.i257_crit_edge
                                        # =>This Inner Loop Header: Depth=1
	movq	80(%r13), %rax
	shrl	$24, %ebp
	movslq	%ebx, %rcx
	movb	%bpl, (%rax,%rcx)
	movl	116(%r13), %ebx
	incl	%ebx
	movl	%ebx, 116(%r13)
	movq	640(%r13), %rax
	movl	%eax, %ebp
	shll	$8, %ebp
	movl	%ebp, 640(%r13)
	shrq	$32, %rax
	addl	$-8, %eax
	movl	%eax, 644(%r13)
	cmpl	$7, %eax
	movl	%eax, %edx
	jg	.LBB61_13
	jmp	.LBB61_14
.LBB61_8:                               # %entry.while.end_crit_edge.i.i243
	movl	$8, %edx
	movq	640(%r13), %rbp
	movq	%rbp, %rax
	shrq	$32, %rax
	jmp	.LBB61_14
.LBB61_10:
	movl	%eax, %edx
.LBB61_14:                              # %bsPutUChar.exit263
	movl	$24, %ecx
	subl	%edx, %ecx
	movl	$90, %ebx
	shll	%cl, %ebx
	orl	%ebp, %ebx
	movl	%ebx, 640(%r13)
	addl	$8, %eax
	movl	%eax, 644(%r13)
	cmpl	$7, %eax
	jle	.LBB61_15
# BB#16:                                # %while.body.lr.ph.i.i319
	movl	116(%r13), %ebp
	cmpl	$0, "PinFlag-76."(%rip)
	jne	.LBB61_18
# BB#17:
	movl	$.L__unnamed_121, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-76."(%rip)
	.align	16, 0x90
.LBB61_18:                              # %while.body.i.i328
                                        # =>This Inner Loop Header: Depth=1
	shrl	$24, %ebx
	movslq	%ebp, %rax
	movq	80(%r13), %rcx
	movb	%bl, (%rcx,%rax)
	movl	116(%r13), %ebp
	incl	%ebp
	movl	%ebp, 116(%r13)
	movq	640(%r13), %rdx
	movl	%edx, %ebx
	shll	$8, %ebx
	movl	%ebx, 640(%r13)
	shrq	$32, %rdx
	addl	$-8, %edx
	movl	%edx, 644(%r13)
	cmpl	$7, %edx
	movl	%edx, %eax
	jg	.LBB61_18
	jmp	.LBB61_19
.LBB61_15:                              # %entry.while.end_crit_edge.i.i314
	movq	640(%r13), %rbx
	movq	%rbx, %rdx
	shrq	$32, %rdx
.LBB61_19:                              # %bsPutUChar.exit334
	movl	$24, %ecx
	subl	%eax, %ecx
	movl	$104, %ebp
	shll	%cl, %ebp
	orl	%ebx, %ebp
	movl	%ebp, 640(%r13)
	addl	$8, %edx
	movl	%edx, 644(%r13)
	movl	664(%r13), %eax
	addl	$48, %eax
	movzbl	%al, %r14d
	cmpl	$7, %edx
	jle	.LBB61_20
# BB#21:                                # %while.body.lr.ph.i.i495
	movl	116(%r13), %ebx
	cmpl	$0, "PinFlag-75."(%rip)
	jne	.LBB61_23
# BB#22:
	movl	$.L__unnamed_122, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-75."(%rip)
	.align	16, 0x90
.LBB61_23:                              # %while.body.i.i504
                                        # =>This Inner Loop Header: Depth=1
	shrl	$24, %ebp
	movslq	%ebx, %rax
	movq	80(%r13), %rcx
	movb	%bpl, (%rcx,%rax)
	movl	116(%r13), %ebx
	incl	%ebx
	movl	%ebx, 116(%r13)
	movq	640(%r13), %rax
	movl	%eax, %ebp
	shll	$8, %ebp
	movl	%ebp, 640(%r13)
	shrq	$32, %rax
	addl	$-8, %eax
	movl	%eax, 644(%r13)
	cmpl	$7, %eax
	movl	%eax, %edx
	jg	.LBB61_23
	jmp	.LBB61_24
.LBB61_20:                              # %entry.while.end_crit_edge.i.i490
	movq	640(%r13), %rbp
	movq	%rbp, %rax
	shrq	$32, %rax
.LBB61_24:                              # %bsPutUChar.exit510
	movl	$24, %ecx
	subl	%edx, %ecx
	shll	%cl, %r14d
	orl	%ebp, %r14d
	movl	%r14d, 640(%r13)
	addl	$8, %eax
	movl	%eax, 644(%r13)
	movl	108(%r13), %r9d
.LBB61_25:                              # %if.end20
	testl	%r9d, %r9d
	jle	.LBB61_117
# BB#26:                                # %if.then24
	movl	644(%r13), %edx
	cmpl	$7, %edx
	jle	.LBB61_27
# BB#28:                                # %while.body.lr.ph.i.i469
	movl	640(%r13), %ebp
	movl	116(%r13), %ebx
	cmpl	$0, "PinFlag-74."(%rip)
	jne	.LBB61_30
# BB#29:
	movl	$.L__unnamed_123, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-74."(%rip)
	.align	16, 0x90
.LBB61_30:                              # %while.body.i.i478
                                        # =>This Inner Loop Header: Depth=1
	shrl	$24, %ebp
	movslq	%ebx, %rax
	movq	80(%r13), %rcx
	movb	%bpl, (%rcx,%rax)
	movl	116(%r13), %ebx
	incl	%ebx
	movl	%ebx, 116(%r13)
	movq	640(%r13), %rax
	movl	%eax, %ebp
	shll	$8, %ebp
	movl	%ebp, 640(%r13)
	shrq	$32, %rax
	addl	$-8, %eax
	movl	%eax, 644(%r13)
	cmpl	$7, %eax
	movl	%eax, %edx
	jg	.LBB61_30
	jmp	.LBB61_31
.LBB61_27:                              # %entry.while.end_crit_edge.i.i464
	movq	640(%r13), %rbp
	movq	%rbp, %rax
	shrq	$32, %rax
.LBB61_31:                              # %bsPutUChar.exit484
	movl	$24, %ecx
	subl	%edx, %ecx
	movl	$49, %ebx
	shll	%cl, %ebx
	orl	%ebp, %ebx
	movl	%ebx, 640(%r13)
	addl	$8, %eax
	movl	%eax, 644(%r13)
	cmpl	$7, %eax
	jle	.LBB61_32
# BB#33:                                # %while.body.lr.ph.i.i444
	movl	116(%r13), %ebp
	cmpl	$0, "PinFlag-73."(%rip)
	jne	.LBB61_35
# BB#34:
	movl	$.L__unnamed_124, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-73."(%rip)
	.align	16, 0x90
.LBB61_35:                              # %while.body.i.i453
                                        # =>This Inner Loop Header: Depth=1
	shrl	$24, %ebx
	movslq	%ebp, %rax
	movq	80(%r13), %rcx
	movb	%bl, (%rcx,%rax)
	movl	116(%r13), %ebp
	incl	%ebp
	movl	%ebp, 116(%r13)
	movq	640(%r13), %rdx
	movl	%edx, %ebx
	shll	$8, %ebx
	movl	%ebx, 640(%r13)
	shrq	$32, %rdx
	addl	$-8, %edx
	movl	%edx, 644(%r13)
	cmpl	$7, %edx
	movl	%edx, %eax
	jg	.LBB61_35
	jmp	.LBB61_36
.LBB61_32:                              # %entry.while.end_crit_edge.i.i439
	movq	640(%r13), %rbx
	movq	%rbx, %rdx
	shrq	$32, %rdx
.LBB61_36:                              # %bsPutUChar.exit459
	movl	$24, %ecx
	subl	%eax, %ecx
	movl	$65, %ebp
	shll	%cl, %ebp
	orl	%ebx, %ebp
	movl	%ebp, 640(%r13)
	addl	$8, %edx
	movl	%edx, 644(%r13)
	cmpl	$7, %edx
	jle	.LBB61_37
# BB#38:                                # %while.body.lr.ph.i.i419
	movl	116(%r13), %ebx
	cmpl	$0, "PinFlag-72."(%rip)
	jne	.LBB61_40
# BB#39:
	movl	$.L__unnamed_125, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-72."(%rip)
	.align	16, 0x90
.LBB61_40:                              # %while.body.i.i428
                                        # =>This Inner Loop Header: Depth=1
	shrl	$24, %ebp
	movslq	%ebx, %rax
	movq	80(%r13), %rcx
	movb	%bpl, (%rcx,%rax)
	movl	116(%r13), %ebx
	incl	%ebx
	movl	%ebx, 116(%r13)
	movq	640(%r13), %rax
	movl	%eax, %ebp
	shll	$8, %ebp
	movl	%ebp, 640(%r13)
	shrq	$32, %rax
	addl	$-8, %eax
	movl	%eax, 644(%r13)
	cmpl	$7, %eax
	movl	%eax, %edx
	jg	.LBB61_40
	jmp	.LBB61_41
.LBB61_37:                              # %entry.while.end_crit_edge.i.i414
	movq	640(%r13), %rbp
	movq	%rbp, %rax
	shrq	$32, %rax
.LBB61_41:                              # %bsPutUChar.exit434
	movl	$24, %ecx
	subl	%edx, %ecx
	movl	$89, %ebx
	shll	%cl, %ebx
	orl	%ebp, %ebx
	movl	%ebx, 640(%r13)
	addl	$8, %eax
	movl	%eax, 644(%r13)
	cmpl	$7, %eax
	jle	.LBB61_42
# BB#43:                                # %while.body.lr.ph.i.i394
	movl	116(%r13), %ebp
	cmpl	$0, "PinFlag-71."(%rip)
	jne	.LBB61_45
# BB#44:
	movl	$.L__unnamed_126, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-71."(%rip)
	.align	16, 0x90
.LBB61_45:                              # %while.body.i.i403
                                        # =>This Inner Loop Header: Depth=1
	shrl	$24, %ebx
	movslq	%ebp, %rax
	movq	80(%r13), %rcx
	movb	%bl, (%rcx,%rax)
	movl	116(%r13), %ebp
	incl	%ebp
	movl	%ebp, 116(%r13)
	movq	640(%r13), %rdx
	movl	%edx, %ebx
	shll	$8, %ebx
	movl	%ebx, 640(%r13)
	shrq	$32, %rdx
	addl	$-8, %edx
	movl	%edx, 644(%r13)
	cmpl	$7, %edx
	movl	%edx, %eax
	jg	.LBB61_45
	jmp	.LBB61_46
.LBB61_42:                              # %entry.while.end_crit_edge.i.i389
	movq	640(%r13), %rbx
	movq	%rbx, %rdx
	shrq	$32, %rdx
.LBB61_46:                              # %bsPutUChar.exit409
	movl	$24, %ecx
	subl	%eax, %ecx
	movl	$38, %ebp
	shll	%cl, %ebp
	orl	%ebx, %ebp
	movl	%ebp, 640(%r13)
	addl	$8, %edx
	movl	%edx, 644(%r13)
	cmpl	$7, %edx
	jle	.LBB61_47
# BB#48:                                # %while.body.lr.ph.i.i369
	movl	116(%r13), %ebx
	cmpl	$0, "PinFlag-70."(%rip)
	jne	.LBB61_50
# BB#49:
	movl	$.L__unnamed_127, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-70."(%rip)
	.align	16, 0x90
.LBB61_50:                              # %while.body.i.i378
                                        # =>This Inner Loop Header: Depth=1
	shrl	$24, %ebp
	movslq	%ebx, %rax
	movq	80(%r13), %rcx
	movb	%bpl, (%rcx,%rax)
	movl	116(%r13), %ebx
	incl	%ebx
	movl	%ebx, 116(%r13)
	movq	640(%r13), %rax
	movl	%eax, %ebp
	shll	$8, %ebp
	movl	%ebp, 640(%r13)
	shrq	$32, %rax
	addl	$-8, %eax
	movl	%eax, 644(%r13)
	cmpl	$7, %eax
	movl	%eax, %edx
	jg	.LBB61_50
	jmp	.LBB61_51
.LBB61_47:                              # %entry.while.end_crit_edge.i.i364
	movq	640(%r13), %rbp
	movq	%rbp, %rax
	shrq	$32, %rax
.LBB61_51:                              # %bsPutUChar.exit384
	movl	$24, %ecx
	subl	%edx, %ecx
	movl	$83, %ebx
	shll	%cl, %ebx
	orl	%ebp, %ebx
	movl	%ebx, 640(%r13)
	addl	$8, %eax
	movl	%eax, 644(%r13)
	cmpl	$7, %eax
	jle	.LBB61_52
# BB#53:                                # %while.body.lr.ph.i.i344
	movl	116(%r13), %ebp
	cmpl	$0, "PinFlag-69."(%rip)
	jne	.LBB61_55
# BB#54:
	movl	$.L__unnamed_128, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-69."(%rip)
	.align	16, 0x90
.LBB61_55:                              # %while.body.i.i353
                                        # =>This Inner Loop Header: Depth=1
	shrl	$24, %ebx
	movslq	%ebp, %rax
	movq	80(%r13), %rcx
	movb	%bl, (%rcx,%rax)
	movl	116(%r13), %ebp
	incl	%ebp
	movl	%ebp, 116(%r13)
	movq	640(%r13), %rdx
	movl	%edx, %ebx
	shll	$8, %ebx
	movl	%ebx, 640(%r13)
	shrq	$32, %rdx
	addl	$-8, %edx
	movl	%edx, 644(%r13)
	cmpl	$7, %edx
	movl	%edx, %eax
	jg	.LBB61_55
	jmp	.LBB61_56
.LBB61_52:                              # %entry.while.end_crit_edge.i.i339
	movq	640(%r13), %rbx
	movq	%rbx, %rdx
	shrq	$32, %rdx
.LBB61_56:                              # %bsPutUChar.exit359
	movl	$24, %ecx
	subl	%eax, %ecx
	movl	$89, %eax
	shll	%cl, %eax
	orl	%ebx, %eax
	movl	%eax, 640(%r13)
	addl	$8, %edx
	movl	%edx, 644(%r13)
	movl	648(%r13), %esi
	movq	%r13, %rdi
	callq	bsPutUInt32
	cmpl	$7, 644(%r13)
	jle	.LBB61_57
# BB#58:                                # %while.body.lr.ph.i296
	movl	640(%r13), %ebp
	movl	116(%r13), %ebx
	cmpl	$0, "PinFlag-68."(%rip)
	jne	.LBB61_60
# BB#59:
	movl	$.L__unnamed_129, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-68."(%rip)
	.align	16, 0x90
.LBB61_60:                              # %while.body.i305
                                        # =>This Inner Loop Header: Depth=1
	shrl	$24, %ebp
	movslq	%ebx, %rax
	movq	80(%r13), %rcx
	movb	%bpl, (%rcx,%rax)
	movl	116(%r13), %ebx
	incl	%ebx
	movl	%ebx, 116(%r13)
	movq	640(%r13), %rax
	movl	%eax, %ebp
	shll	$8, %ebp
	movl	%ebp, 640(%r13)
	shrq	$32, %rax
	addl	$-8, %eax
	movl	%eax, 644(%r13)
	cmpl	$7, %eax
	jg	.LBB61_60
	jmp	.LBB61_61
.LBB61_57:                              # %entry.while.end_crit_edge.i291
	movq	640(%r13), %rbp
	movq	%rbp, %rax
	shrq	$32, %rax
.LBB61_61:                              # %bsW.exit309
	movl	%ebp, 640(%r13)
	leal	1(%rax), %edx
	movl	%edx, 644(%r13)
	movl	48(%r13), %r14d
	cmpl	$6, %eax
	jle	.LBB61_62
# BB#63:                                # %while.body.lr.ph.i276
	movl	116(%r13), %ebx
	cmpl	$0, "PinFlag-67."(%rip)
	jne	.LBB61_65
# BB#64:
	movl	$.L__unnamed_130, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-67."(%rip)
	.align	16, 0x90
.LBB61_65:                              # %while.body.i285
                                        # =>This Inner Loop Header: Depth=1
	shrl	$24, %ebp
	movslq	%ebx, %rax
	movq	80(%r13), %rcx
	movb	%bpl, (%rcx,%rax)
	movl	116(%r13), %ebx
	incl	%ebx
	movl	%ebx, 116(%r13)
	movq	640(%r13), %rax
	movl	%eax, %ebp
	shll	$8, %ebp
	movl	%ebp, 640(%r13)
	shrq	$32, %rax
	addl	$-8, %eax
	movl	%eax, 644(%r13)
	cmpl	$7, %eax
	movl	%eax, %edx
	jg	.LBB61_65
	jmp	.LBB61_66
.LBB61_62:                              # %entry.while.end_crit_edge.i
	movq	640(%r13), %rbp
	movq	%rbp, %rax
	shrq	$32, %rax
.LBB61_66:                              # %bsW.exit
	movl	$8, %ecx
	subl	%edx, %ecx
	shll	%cl, %r14d
	orl	%ebp, %r14d
	movl	%r14d, 640(%r13)
	addl	$24, %eax
	movl	%eax, 644(%r13)
	movq	56(%r13), %rax
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movq	64(%r13), %rax
	movq	%rax, 32(%rsp)          # 8-byte Spill
	movq	72(%r13), %r8
	movq	%r8, 16(%rsp)           # 8-byte Spill
	movl	$0, 124(%r13)
	xorl	%ebx, %ebx
	movl	$385, %eax              # imm = 0x181
	.align	16, 0x90
.LBB61_67:                              # %for.body.i.i
                                        # =>This Inner Loop Header: Depth=1
	cmpb	$0, -257(%r13,%rax)
	je	.LBB61_69
# BB#68:                                # %if.then.i.i
                                        #   in Loop: Header=BB61_67 Depth=1
	movb	%bl, -1(%r13,%rax)
	movl	124(%r13), %ebx
	incl	%ebx
	movl	%ebx, 124(%r13)
.LBB61_69:                              # %for.inc.i.i
                                        #   in Loop: Header=BB61_67 Depth=1
	cmpb	$0, -256(%r13,%rax)
	je	.LBB61_71
# BB#70:                                # %if.then.i.i.1
                                        #   in Loop: Header=BB61_67 Depth=1
	movb	%bl, (%r13,%rax)
	movl	124(%r13), %ebx
	incl	%ebx
	movl	%ebx, 124(%r13)
.LBB61_71:                              # %for.inc.i.i.1
                                        #   in Loop: Header=BB61_67 Depth=1
	addq	$2, %rax
	cmpq	$641, %rax              # imm = 0x281
	jne	.LBB61_67
# BB#72:                                # %makeMaps_e.exit.i
	leal	1(%rbx), %r12d
	cmpl	$-1, %ebx
	jl	.LBB61_82
# BB#73:                                # %for.cond4.preheader.i
	leaq	672(%r13), %rdi
	movl	%r12d, %eax
	leaq	4(,%rax,4), %rdx
	xorl	%esi, %esi
	movq	%r8, %rbp
	callq	memset
	movq	%rbp, %r8
	testl	%ebx, %ebx
	jle	.LBB61_82
# BB#74:                                # %for.body7.lr.ph.i
	movslq	%ebx, %rax
	xorl	%edx, %edx
	cmpl	$31, %ebx
	jbe	.LBB61_89
# BB#75:                                # %min.iters.checked
	xorl	%edx, %edx
	movq	%rax, %rcx
	andq	$-32, %rcx
	je	.LBB61_89
# BB#76:                                # %vector.body.preheader
	leaq	-32(%rax), %rdi
	movq	%rdi, %rsi
	shrq	$5, %rsi
	xorl	%edx, %edx
	btq	$5, %rdi
	jb	.LBB61_78
# BB#77:                                # %vector.body.prol
	movaps	.LCPI61_0(%rip), %xmm0  # xmm0 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
	movaps	%xmm0, 48(%rsp)
	movdqa	.LCPI61_1(%rip), %xmm0  # xmm0 = [16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]
	movdqa	%xmm0, 64(%rsp)
	movl	$32, %edx
.LBB61_78:                              # %vector.body.preheader.split
	testq	%rsi, %rsi
	je	.LBB61_81
# BB#79:                                # %vector.body.preheader.split.split
	movdqa	.LCPI61_0(%rip), %xmm0  # xmm0 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
	movdqa	.LCPI61_1(%rip), %xmm1  # xmm1 = [16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]
	.align	16, 0x90
.LBB61_80:                              # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	movd	%edx, %xmm2
	punpcklbw	%xmm2, %xmm2    # xmm2 = xmm2[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]
	pshufd	$196, %xmm2, %xmm2      # xmm2 = xmm2[0,1,0,3]
	pshuflw	$0, %xmm2, %xmm2        # xmm2 = xmm2[0,0,0,0,4,5,6,7]
	pshufhw	$0, %xmm2, %xmm2        # xmm2 = xmm2[0,1,2,3,4,4,4,4]
	movdqa	%xmm2, %xmm3
	paddb	%xmm0, %xmm3
	paddb	%xmm1, %xmm2
	movdqa	%xmm3, 48(%rsp,%rdx)
	movdqa	%xmm2, 64(%rsp,%rdx)
	leal	32(%rdx), %esi
	movd	%esi, %xmm2
	punpcklbw	%xmm2, %xmm2    # xmm2 = xmm2[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]
	pshufd	$196, %xmm2, %xmm2      # xmm2 = xmm2[0,1,0,3]
	pshuflw	$0, %xmm2, %xmm2        # xmm2 = xmm2[0,0,0,0,4,5,6,7]
	pshufhw	$0, %xmm2, %xmm2        # xmm2 = xmm2[0,1,2,3,4,4,4,4]
	movdqa	%xmm2, %xmm3
	paddb	%xmm0, %xmm3
	paddb	%xmm1, %xmm2
	movdqa	%xmm3, 80(%rsp,%rdx)
	movdqa	%xmm2, 96(%rsp,%rdx)
	addq	$64, %rdx
	cmpq	%rcx, %rdx
	jne	.LBB61_80
.LBB61_81:                              # %middle.block
	cmpq	%rcx, %rax
	movq	%rcx, %rdx
	je	.LBB61_82
	.align	16, 0x90
.LBB61_89:                              # %for.body7.i
                                        # =>This Inner Loop Header: Depth=1
	movb	%dl, 48(%rsp,%rdx)
	incq	%rdx
	cmpq	%rdx, %rax
	jne	.LBB61_89
.LBB61_82:                              # %for.cond13.preheader.i
	movl	108(%r13), %ebx
	xorl	%r14d, %r14d
	testl	%ebx, %ebx
	jle	.LBB61_116
# BB#83:                                # %for.body16.lr.ph.i
	movl	%r12d, 12(%rsp)         # 4-byte Spill
	xorl	%r12d, %r12d
	cmpl	$0, "PinFlag-63."(%rip)
	je	.LBB61_88
# BB#84:
	movl	%r15d, 8(%rsp)          # 4-byte Spill
	jmp	.LBB61_85
.LBB61_88:
	movl	%r15d, 8(%rsp)          # 4-byte Spill
	xorl	%r12d, %r12d
	movl	$.L__unnamed_131, %edi
	movl	$1, %esi
	movl	$19, %edx
	movl	$80, %ecx
	movq	%r8, %rbp
	xorl	%r8d, %r8d
	callq	Pin
	movq	%rbp, %r8
	movl	$1, "PinFlag-63."(%rip)
.LBB61_85:                              # %for.body16.i
	xorl	%r15d, %r15d
	xorl	%r14d, %r14d
	.align	16, 0x90
.LBB61_86:                              # %for.body16.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_94 Depth 2
                                        #     Child Loop BB61_104 Depth 2
	movq	40(%rsp), %rax          # 8-byte Reload
	movl	(%rax,%r12,4), %eax
	leal	-1(%rax), %ecx
	sarl	$31, %ecx
	andl	%ebx, %ecx
	leal	-1(%rcx,%rax), %eax
	cltq
	movq	32(%rsp), %rcx          # 8-byte Reload
	movzbl	(%rcx,%rax), %eax
	movzbl	384(%r13,%rax), %edx
	movzwl	48(%rsp), %eax
	movzbl	%al, %ecx
	cmpl	%edx, %ecx
	jne	.LBB61_90
# BB#87:                                # %if.then32.i
                                        #   in Loop: Header=BB61_86 Depth=1
	incl	%r15d
	jmp	.LBB61_106
	.align	16, 0x90
.LBB61_90:                              # %if.else.i
                                        #   in Loop: Header=BB61_86 Depth=1
	testl	%r15d, %r15d
	jle	.LBB61_91
# BB#92:                                # %if.then36.i
                                        #   in Loop: Header=BB61_86 Depth=1
	decl	%r15d
	movslq	%r14d, %r14
	cmpl	$0, "PinFlag-63.0"(%rip)
	jne	.LBB61_94
# BB#93:                                #   in Loop: Header=BB61_86 Depth=1
	movl	$.L__unnamed_132, %edi
	movl	$1, %esi
	movl	%edx, %ebp
	movl	$10, %edx
	movl	$24, %ecx
	movq	%r8, %rbx
	movl	$1, %r8d
	callq	Pin
	movl	%ebp, %edx
	movq	%rbx, %r8
	movl	$1, "PinFlag-63.0"(%rip)
	jmp	.LBB61_94
	.align	16, 0x90
.LBB61_98:                              # %if.end55.i
                                        #   in Loop: Header=BB61_94 Depth=2
	leal	-2(%r15), %eax
	shrl	$31, %eax
	leal	-2(%r15,%rax), %r15d
	sarl	%r15d
	incq	%r14
.LBB61_94:                              # %while.body.i269
                                        #   Parent Loop BB61_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testb	$1, %r15b
	jne	.LBB61_95
# BB#96:                                # %if.else44.i
                                        #   in Loop: Header=BB61_94 Depth=2
	movw	$0, (%r8,%r14,2)
	incl	672(%r13)
	jmp	.LBB61_97
	.align	16, 0x90
.LBB61_95:                              # %if.then37.i
                                        #   in Loop: Header=BB61_94 Depth=2
	movw	$1, (%r8,%r14,2)
	incl	676(%r13)
.LBB61_97:                              # %if.end51.i
                                        #   in Loop: Header=BB61_94 Depth=2
	cmpl	$2, %r15d
	jge	.LBB61_98
# BB#99:                                # %if.end57.loopexit.i
                                        #   in Loop: Header=BB61_86 Depth=1
	incl	%r14d
	movb	48(%rsp), %al
	movb	49(%rsp), %bl
	xorl	%r15d, %r15d
	jmp	.LBB61_100
.LBB61_91:                              #   in Loop: Header=BB61_86 Depth=1
	movl	%eax, %ebx
	shrl	$8, %ebx
.LBB61_100:                             # %if.end57.i
                                        #   in Loop: Header=BB61_86 Depth=1
	movb	%al, 49(%rsp)
	movzbl	%bl, %eax
	movzbl	%dl, %ebp
	cmpl	%eax, %ebp
	leaq	49(%rsp), %rax
	je	.LBB61_105
# BB#101:                               # %while.body67.i.preheader
                                        #   in Loop: Header=BB61_86 Depth=1
	movl	%edx, 28(%rsp)          # 4-byte Spill
	cmpl	$0, "PinFlag-63.1"(%rip)
	jne	.LBB61_103
# BB#102:                               #   in Loop: Header=BB61_86 Depth=1
	movl	$.L__unnamed_133, %edi
	movl	$1, %esi
	movl	$4, %edx
	movl	$7, %ecx
	movl	$1, %r8d
	callq	Pin
	movq	16(%rsp), %r8           # 8-byte Reload
	movl	$1, "PinFlag-63.1"(%rip)
.LBB61_103:                             # %while.body67.i
                                        #   in Loop: Header=BB61_86 Depth=1
	leaq	49(%rsp), %rax
	movl	28(%rsp), %edx          # 4-byte Reload
	.align	16, 0x90
.LBB61_104:                             # %while.body67.i
                                        #   Parent Loop BB61_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	1(%rax), %ecx
	movb	%bl, 1(%rax)
	incq	%rax
	cmpl	%ecx, %ebp
	movb	%cl, %bl
	jne	.LBB61_104
.LBB61_105:                             # %while.end68.i
                                        #   in Loop: Header=BB61_86 Depth=1
	movb	%dl, 48(%rsp)
	leaq	48(%rsp), %rcx
	subq	%rcx, %rax
	leal	1(%rax), %ecx
	movslq	%r14d, %r14
	movw	%cx, (%r8,%r14,2)
	incl	%r14d
	cltq
	incl	676(%r13,%rax,4)
	movl	108(%r13), %ebx
.LBB61_106:                             # %if.end82.i
                                        #   in Loop: Header=BB61_86 Depth=1
	incq	%r12
	movslq	%ebx, %rax
	cmpq	%rax, %r12
	jl	.LBB61_86
# BB#107:                               # %for.end85.i
	testl	%r15d, %r15d
	jle	.LBB61_108
# BB#109:                               # %if.then88.i
	decl	%r15d
	movslq	%r14d, %r14
	cmpl	$0, "PinFlag-62."(%rip)
	movl	12(%rsp), %r12d         # 4-byte Reload
	jne	.LBB61_111
# BB#110:
	movl	$.L__unnamed_134, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$24, %ecx
	movq	%r8, %rbx
	movl	$1, %r8d
	callq	Pin
	movq	%rbx, %r8
	movl	$1, "PinFlag-62."(%rip)
	jmp	.LBB61_111
	.align	16, 0x90
.LBB61_155:                             # %if.end112.i
                                        #   in Loop: Header=BB61_111 Depth=1
	leal	-2(%r15), %eax
	shrl	$31, %eax
	leal	-2(%r15,%rax), %r15d
	sarl	%r15d
	incq	%r14
.LBB61_111:                             # %while.body91.i
                                        # =>This Inner Loop Header: Depth=1
	testb	$1, %r15b
	jne	.LBB61_112
# BB#113:                               # %if.else101.i
                                        #   in Loop: Header=BB61_111 Depth=1
	movw	$0, (%r8,%r14,2)
	incl	672(%r13)
	jmp	.LBB61_114
	.align	16, 0x90
.LBB61_112:                             # %if.then94.i
                                        #   in Loop: Header=BB61_111 Depth=1
	movw	$1, (%r8,%r14,2)
	incl	676(%r13)
.LBB61_114:                             # %if.end108.i
                                        #   in Loop: Header=BB61_111 Depth=1
	cmpl	$2, %r15d
	jge	.LBB61_155
# BB#115:
	incl	%r14d
	movl	8(%rsp), %r15d          # 4-byte Reload
	jmp	.LBB61_116
.LBB61_108:
	movl	8(%rsp), %r15d          # 4-byte Reload
	movl	12(%rsp), %r12d         # 4-byte Reload
.LBB61_116:                             # %generateMTFValues.exit
	movslq	%r14d, %rax
	movw	%r12w, (%r8,%rax,2)
	incl	%eax
	movslq	%r12d, %rcx
	incl	672(%r13,%rcx,4)
	movl	%eax, 668(%r13)
	movq	%r13, %rdi
	callq	sendMTFValues
.LBB61_117:                             # %if.end26
	testb	%r15b, %r15b
	je	.LBB61_154
# BB#118:                               # %if.then27
	movl	644(%r13), %edx
	cmpl	$7, %edx
	jle	.LBB61_119
# BB#120:                               # %while.body.lr.ph.i.i223
	movl	640(%r13), %ebp
	movl	116(%r13), %ebx
	cmpl	$0, "PinFlag-61."(%rip)
	jne	.LBB61_122
# BB#121:
	movl	$.L__unnamed_135, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-61."(%rip)
	.align	16, 0x90
.LBB61_122:                             # %while.body.i.i232
                                        # =>This Inner Loop Header: Depth=1
	shrl	$24, %ebp
	movslq	%ebx, %rax
	movq	80(%r13), %rcx
	movb	%bpl, (%rcx,%rax)
	movl	116(%r13), %ebx
	incl	%ebx
	movl	%ebx, 116(%r13)
	movq	640(%r13), %rax
	movl	%eax, %ebp
	shll	$8, %ebp
	movl	%ebp, 640(%r13)
	shrq	$32, %rax
	addl	$-8, %eax
	movl	%eax, 644(%r13)
	cmpl	$7, %eax
	movl	%eax, %edx
	jg	.LBB61_122
	jmp	.LBB61_123
.LBB61_119:                             # %entry.while.end_crit_edge.i.i218
	movq	640(%r13), %rbp
	movq	%rbp, %rax
	shrq	$32, %rax
.LBB61_123:                             # %bsPutUChar.exit238
	movl	$24, %ecx
	subl	%edx, %ecx
	movl	$23, %ebx
	shll	%cl, %ebx
	orl	%ebp, %ebx
	movl	%ebx, 640(%r13)
	addl	$8, %eax
	movl	%eax, 644(%r13)
	cmpl	$7, %eax
	jle	.LBB61_124
# BB#125:                               # %while.body.lr.ph.i.i198
	movl	116(%r13), %ebp
	cmpl	$0, "PinFlag-60."(%rip)
	jne	.LBB61_127
# BB#126:
	movl	$.L__unnamed_136, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-60."(%rip)
	.align	16, 0x90
.LBB61_127:                             # %while.body.i.i207
                                        # =>This Inner Loop Header: Depth=1
	shrl	$24, %ebx
	movslq	%ebp, %rax
	movq	80(%r13), %rcx
	movb	%bl, (%rcx,%rax)
	movl	116(%r13), %ebp
	incl	%ebp
	movl	%ebp, 116(%r13)
	movq	640(%r13), %rdx
	movl	%edx, %ebx
	shll	$8, %ebx
	movl	%ebx, 640(%r13)
	shrq	$32, %rdx
	addl	$-8, %edx
	movl	%edx, 644(%r13)
	cmpl	$7, %edx
	movl	%edx, %eax
	jg	.LBB61_127
	jmp	.LBB61_128
.LBB61_124:                             # %entry.while.end_crit_edge.i.i193
	movq	640(%r13), %rbx
	movq	%rbx, %rdx
	shrq	$32, %rdx
.LBB61_128:                             # %bsPutUChar.exit213
	movl	$24, %ecx
	subl	%eax, %ecx
	movl	$114, %ebp
	shll	%cl, %ebp
	orl	%ebx, %ebp
	movl	%ebp, 640(%r13)
	addl	$8, %edx
	movl	%edx, 644(%r13)
	cmpl	$7, %edx
	jle	.LBB61_129
# BB#130:                               # %while.body.lr.ph.i.i173
	movl	116(%r13), %ebx
	cmpl	$0, "PinFlag-59."(%rip)
	jne	.LBB61_132
# BB#131:
	movl	$.L__unnamed_137, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-59."(%rip)
	.align	16, 0x90
.LBB61_132:                             # %while.body.i.i182
                                        # =>This Inner Loop Header: Depth=1
	shrl	$24, %ebp
	movslq	%ebx, %rax
	movq	80(%r13), %rcx
	movb	%bpl, (%rcx,%rax)
	movl	116(%r13), %ebx
	incl	%ebx
	movl	%ebx, 116(%r13)
	movq	640(%r13), %rax
	movl	%eax, %ebp
	shll	$8, %ebp
	movl	%ebp, 640(%r13)
	shrq	$32, %rax
	addl	$-8, %eax
	movl	%eax, 644(%r13)
	cmpl	$7, %eax
	movl	%eax, %edx
	jg	.LBB61_132
	jmp	.LBB61_133
.LBB61_129:                             # %entry.while.end_crit_edge.i.i168
	movq	640(%r13), %rbp
	movq	%rbp, %rax
	shrq	$32, %rax
.LBB61_133:                             # %bsPutUChar.exit188
	movl	$24, %ecx
	subl	%edx, %ecx
	movl	$69, %ebx
	shll	%cl, %ebx
	orl	%ebp, %ebx
	movl	%ebx, 640(%r13)
	addl	$8, %eax
	movl	%eax, 644(%r13)
	cmpl	$7, %eax
	jle	.LBB61_134
# BB#135:                               # %while.body.lr.ph.i.i148
	movl	116(%r13), %ebp
	cmpl	$0, "PinFlag-58."(%rip)
	jne	.LBB61_137
# BB#136:
	movl	$.L__unnamed_138, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-58."(%rip)
	.align	16, 0x90
.LBB61_137:                             # %while.body.i.i157
                                        # =>This Inner Loop Header: Depth=1
	shrl	$24, %ebx
	movslq	%ebp, %rax
	movq	80(%r13), %rcx
	movb	%bl, (%rcx,%rax)
	movl	116(%r13), %ebp
	incl	%ebp
	movl	%ebp, 116(%r13)
	movq	640(%r13), %rdx
	movl	%edx, %ebx
	shll	$8, %ebx
	movl	%ebx, 640(%r13)
	shrq	$32, %rdx
	addl	$-8, %edx
	movl	%edx, 644(%r13)
	cmpl	$7, %edx
	movl	%edx, %eax
	jg	.LBB61_137
	jmp	.LBB61_138
.LBB61_134:                             # %entry.while.end_crit_edge.i.i143
	movq	640(%r13), %rbx
	movq	%rbx, %rdx
	shrq	$32, %rdx
.LBB61_138:                             # %bsPutUChar.exit163
	movl	$24, %ecx
	subl	%eax, %ecx
	movl	$56, %ebp
	shll	%cl, %ebp
	orl	%ebx, %ebp
	movl	%ebp, 640(%r13)
	addl	$8, %edx
	movl	%edx, 644(%r13)
	cmpl	$7, %edx
	jle	.LBB61_139
# BB#140:                               # %while.body.lr.ph.i.i123
	movl	116(%r13), %ebx
	cmpl	$0, "PinFlag-57."(%rip)
	jne	.LBB61_142
# BB#141:
	movl	$.L__unnamed_139, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-57."(%rip)
	.align	16, 0x90
.LBB61_142:                             # %while.body.i.i132
                                        # =>This Inner Loop Header: Depth=1
	shrl	$24, %ebp
	movslq	%ebx, %rax
	movq	80(%r13), %rcx
	movb	%bpl, (%rcx,%rax)
	movl	116(%r13), %ebx
	incl	%ebx
	movl	%ebx, 116(%r13)
	movq	640(%r13), %rax
	movl	%eax, %ebp
	shll	$8, %ebp
	movl	%ebp, 640(%r13)
	shrq	$32, %rax
	addl	$-8, %eax
	movl	%eax, 644(%r13)
	cmpl	$7, %eax
	movl	%eax, %edx
	jg	.LBB61_142
	jmp	.LBB61_143
.LBB61_139:                             # %entry.while.end_crit_edge.i.i118
	movq	640(%r13), %rbp
	movq	%rbp, %rax
	shrq	$32, %rax
.LBB61_143:                             # %bsPutUChar.exit138
	movl	$24, %ecx
	subl	%edx, %ecx
	movl	$80, %ebx
	shll	%cl, %ebx
	orl	%ebp, %ebx
	movl	%ebx, 640(%r13)
	addl	$8, %eax
	movl	%eax, 644(%r13)
	cmpl	$7, %eax
	jle	.LBB61_144
# BB#145:                               # %while.body.lr.ph.i.i98
	movl	116(%r13), %ebp
	cmpl	$0, "PinFlag-56."(%rip)
	jne	.LBB61_147
# BB#146:
	movl	$.L__unnamed_140, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-56."(%rip)
	.align	16, 0x90
.LBB61_147:                             # %while.body.i.i107
                                        # =>This Inner Loop Header: Depth=1
	shrl	$24, %ebx
	movslq	%ebp, %rax
	movq	80(%r13), %rcx
	movb	%bl, (%rcx,%rax)
	movl	116(%r13), %ebp
	incl	%ebp
	movl	%ebp, 116(%r13)
	movq	640(%r13), %rdx
	movl	%edx, %ebx
	shll	$8, %ebx
	movl	%ebx, 640(%r13)
	shrq	$32, %rdx
	addl	$-8, %edx
	movl	%edx, 644(%r13)
	cmpl	$7, %edx
	movl	%edx, %eax
	jg	.LBB61_147
	jmp	.LBB61_148
.LBB61_144:                             # %entry.while.end_crit_edge.i.i93
	movq	640(%r13), %rbx
	movq	%rbx, %rdx
	shrq	$32, %rdx
.LBB61_148:                             # %bsPutUChar.exit113
	movl	$24, %ecx
	subl	%eax, %ecx
	movl	$144, %eax
	shll	%cl, %eax
	orl	%ebx, %eax
	movl	%eax, 640(%r13)
	addl	$8, %edx
	movl	%edx, 644(%r13)
	movl	652(%r13), %esi
	movq	%r13, %rdi
	callq	bsPutUInt32
	cmpl	$2, 656(%r13)
	jge	.LBB61_149
.LBB61_150:                             # %if.end35
	cmpl	$0, 644(%r13)
	jle	.LBB61_154
# BB#151:                               # %while.body.lr.ph.i
	movl	640(%r13), %ebp
	movl	116(%r13), %ebx
	cmpl	$0, "PinFlag-55."(%rip)
	jne	.LBB61_153
# BB#152:
	movl	$.L__unnamed_141, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-55."(%rip)
	.align	16, 0x90
.LBB61_153:                             # %while.body.i
                                        # =>This Inner Loop Header: Depth=1
	shrl	$24, %ebp
	movslq	%ebx, %rax
	movq	80(%r13), %rcx
	movb	%bpl, (%rcx,%rax)
	movl	116(%r13), %ebx
	incl	%ebx
	movl	%ebx, 116(%r13)
	movq	640(%r13), %rax
	movl	%eax, %ebp
	shll	$8, %ebp
	movl	%ebp, 640(%r13)
	shrq	$32, %rax
	leal	-8(%rax), %ecx
	movl	%ecx, 644(%r13)
	cmpl	$8, %eax
	jg	.LBB61_153
.LBB61_154:                             # %if.end36
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB61_4:                               # %if.then9
	shrq	$32, %rdx
	movq	stderr(%rip), %rdi
	movl	$.L.str.66, %esi
	xorl	%eax, %eax
	callq	fprintf
	jmp	.LBB61_5
.LBB61_149:                             # %if.then32
	movq	stderr(%rip), %rdi
	movl	652(%r13), %edx
	movl	$.L.str.1.75, %esi
	xorl	%eax, %eax
	callq	fprintf
	jmp	.LBB61_150
.Lfunc_end61:
	.size	BZ2_compressBlock, .Lfunc_end61-BZ2_compressBlock
	.cfi_endproc

	.align	16, 0x90
	.type	bsPutUInt32,@function
bsPutUInt32:                            # @bsPutUInt32
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp387:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp388:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp389:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp390:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp391:
	.cfi_def_cfa_offset 48
.Ltmp392:
	.cfi_offset %rbx, -48
.Ltmp393:
	.cfi_offset %r12, -40
.Ltmp394:
	.cfi_offset %r14, -32
.Ltmp395:
	.cfi_offset %r15, -24
.Ltmp396:
	.cfi_offset %rbp, -16
	movq	%rdi, %r14
	movl	%esi, %r15d
	movl	%esi, %r12d
	shrl	$24, %r15d
	movl	644(%r14), %edx
	cmpl	$7, %edx
	jle	.LBB62_1
# BB#2:                                 # %while.body.lr.ph.i
	movl	640(%r14), %ebx
	movl	116(%r14), %ebp
	cmpl	$0, "PinFlag-81."(%rip)
	jne	.LBB62_4
# BB#3:
	movl	$.L__unnamed_142, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-81."(%rip)
	.align	16, 0x90
.LBB62_4:                               # %while.body.i
                                        # =>This Inner Loop Header: Depth=1
	shrl	$24, %ebx
	movslq	%ebp, %rax
	movq	80(%r14), %rcx
	movb	%bl, (%rcx,%rax)
	movl	116(%r14), %ebp
	incl	%ebp
	movl	%ebp, 116(%r14)
	movq	640(%r14), %rax
	movl	%eax, %ebx
	shll	$8, %ebx
	movl	%ebx, 640(%r14)
	shrq	$32, %rax
	addl	$-8, %eax
	movl	%eax, 644(%r14)
	cmpl	$7, %eax
	movl	%eax, %edx
	jg	.LBB62_4
	jmp	.LBB62_5
.LBB62_1:                               # %entry.while.end_crit_edge.i
	movq	640(%r14), %rbx
	movq	%rbx, %rax
	shrq	$32, %rax
.LBB62_5:                               # %bsW.exit
	movl	$24, %ecx
	subl	%edx, %ecx
	shll	%cl, %r15d
	orl	%ebx, %r15d
	movl	%r15d, 640(%r14)
	addl	$8, %eax
	movl	%eax, 644(%r14)
	movl	%r12d, %ecx
	movl	%r12d, %ebx
	shrl	$16, %ecx
	movzbl	%cl, %r12d
	cmpl	$7, %eax
	jle	.LBB62_6
# BB#7:                                 # %while.body.lr.ph.i78
	movl	116(%r14), %ebp
	cmpl	$0, "PinFlag-80."(%rip)
	jne	.LBB62_9
# BB#8:
	movl	$.L__unnamed_143, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-80."(%rip)
	.align	16, 0x90
.LBB62_9:                               # %while.body.i87
                                        # =>This Inner Loop Header: Depth=1
	shrl	$24, %r15d
	movslq	%ebp, %rax
	movq	80(%r14), %rcx
	movb	%r15b, (%rcx,%rax)
	movl	116(%r14), %ebp
	incl	%ebp
	movl	%ebp, 116(%r14)
	movq	640(%r14), %rdx
	movl	%edx, %r15d
	shll	$8, %r15d
	movl	%r15d, 640(%r14)
	shrq	$32, %rdx
	addl	$-8, %edx
	movl	%edx, 644(%r14)
	cmpl	$7, %edx
	movl	%edx, %eax
	jg	.LBB62_9
	jmp	.LBB62_10
.LBB62_6:                               # %entry.while.end_crit_edge.i73
	movq	640(%r14), %r15
	movq	%r15, %rdx
	shrq	$32, %rdx
.LBB62_10:                              # %bsW.exit93
	movl	$24, %ecx
	subl	%eax, %ecx
	shll	%cl, %r12d
	orl	%r15d, %r12d
	movl	%r12d, 640(%r14)
	addl	$8, %edx
	movl	%edx, 644(%r14)
	movzbl	%bh, %ebp  # NOREX
	movl	%ebx, %r15d
	cmpl	$7, %edx
	jle	.LBB62_11
# BB#12:                                # %while.body.lr.ph.i53
	movl	116(%r14), %ebx
	cmpl	$0, "PinFlag-79."(%rip)
	jne	.LBB62_14
# BB#13:
	movl	$.L__unnamed_144, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-79."(%rip)
	.align	16, 0x90
.LBB62_14:                              # %while.body.i62
                                        # =>This Inner Loop Header: Depth=1
	shrl	$24, %r12d
	movslq	%ebx, %rax
	movq	80(%r14), %rcx
	movb	%r12b, (%rcx,%rax)
	movl	116(%r14), %ebx
	incl	%ebx
	movl	%ebx, 116(%r14)
	movq	640(%r14), %rax
	movl	%eax, %r12d
	shll	$8, %r12d
	movl	%r12d, 640(%r14)
	shrq	$32, %rax
	addl	$-8, %eax
	movl	%eax, 644(%r14)
	cmpl	$7, %eax
	movl	%eax, %edx
	jg	.LBB62_14
	jmp	.LBB62_15
.LBB62_11:                              # %entry.while.end_crit_edge.i48
	movq	640(%r14), %r12
	movq	%r12, %rax
	shrq	$32, %rax
.LBB62_15:                              # %bsW.exit68
	movl	$24, %ecx
	subl	%edx, %ecx
	shll	%cl, %ebp
	orl	%r12d, %ebp
	movl	%ebp, 640(%r14)
	addl	$8, %eax
	movl	%eax, 644(%r14)
	movzbl	%r15b, %r15d
	cmpl	$7, %eax
	jle	.LBB62_16
# BB#17:                                # %while.body.lr.ph.i28
	movl	116(%r14), %ebx
	cmpl	$0, "PinFlag-78."(%rip)
	jne	.LBB62_19
# BB#18:
	movl	$.L__unnamed_145, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-78."(%rip)
	.align	16, 0x90
.LBB62_19:                              # %while.body.i37
                                        # =>This Inner Loop Header: Depth=1
	shrl	$24, %ebp
	movslq	%ebx, %rax
	movq	80(%r14), %rcx
	movb	%bpl, (%rcx,%rax)
	movl	116(%r14), %ebx
	incl	%ebx
	movl	%ebx, 116(%r14)
	movq	640(%r14), %rdx
	movl	%edx, %ebp
	shll	$8, %ebp
	movl	%ebp, 640(%r14)
	shrq	$32, %rdx
	addl	$-8, %edx
	movl	%edx, 644(%r14)
	cmpl	$7, %edx
	movl	%edx, %eax
	jg	.LBB62_19
	jmp	.LBB62_20
.LBB62_16:                              # %entry.while.end_crit_edge.i23
	movq	640(%r14), %rbp
	movq	%rbp, %rdx
	shrq	$32, %rdx
.LBB62_20:                              # %bsW.exit43
	movl	$24, %ecx
	subl	%eax, %ecx
	shll	%cl, %r15d
	orl	%ebp, %r15d
	movl	%r15d, 640(%r14)
	addl	$8, %edx
	movl	%edx, 644(%r14)
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end62:
	.size	bsPutUInt32, .Lfunc_end62-bsPutUInt32
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI63_0:
	.quad	4636737291354636288     # double 100
	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI63_1:
	.long	2147483648              # 0x80000000
	.long	0                       # 0x0
	.long	2147483648              # 0x80000000
	.long	0                       # 0x0
.LCPI63_2:
	.quad	4                       # 0x4
	.quad	5                       # 0x5
.LCPI63_3:
	.quad	6                       # 0x6
	.quad	7                       # 0x7
.LCPI63_4:
	.quad	2                       # 0x2
	.quad	3                       # 0x3
.LCPI63_5:
	.short	255                     # 0xff
	.short	255                     # 0xff
	.short	255                     # 0xff
	.short	255                     # 0xff
	.short	255                     # 0xff
	.short	255                     # 0xff
	.short	255                     # 0xff
	.short	255                     # 0xff
.LCPI63_6:
	.quad	8                       # 0x8
	.quad	9                       # 0x9
.LCPI63_7:
	.quad	10                      # 0xa
	.quad	11                      # 0xb
.LCPI63_8:
	.quad	12                      # 0xc
	.quad	13                      # 0xd
.LCPI63_9:
	.quad	14                      # 0xe
	.quad	15                      # 0xf
.LCPI63_10:
	.zero	16,128
.LCPI63_11:
	.zero	16,15
.LCPI63_12:
	.byte	0                       # 0x0
	.byte	1                       # 0x1
	.byte	2                       # 0x2
	.byte	3                       # 0x3
	.byte	4                       # 0x4
	.byte	5                       # 0x5
	.byte	6                       # 0x6
	.byte	7                       # 0x7
	.byte	8                       # 0x8
	.byte	9                       # 0x9
	.byte	10                      # 0xa
	.byte	11                      # 0xb
	.byte	12                      # 0xc
	.byte	13                      # 0xd
	.byte	14                      # 0xe
	.byte	15                      # 0xf
.LCPI63_13:
	.byte	16                      # 0x10
	.byte	17                      # 0x11
	.byte	18                      # 0x12
	.byte	19                      # 0x13
	.byte	20                      # 0x14
	.byte	21                      # 0x15
	.byte	22                      # 0x16
	.byte	23                      # 0x17
	.byte	24                      # 0x18
	.byte	25                      # 0x19
	.byte	26                      # 0x1a
	.byte	27                      # 0x1b
	.byte	28                      # 0x1c
	.byte	29                      # 0x1d
	.byte	30                      # 0x1e
	.byte	31                      # 0x1f
.LCPI63_14:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
.LCPI63_15:
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
.LCPI63_16:
	.long	8                       # 0x8
	.long	9                       # 0x9
	.long	10                      # 0xa
	.long	11                      # 0xb
.LCPI63_17:
	.long	12                      # 0xc
	.long	13                      # 0xd
	.long	14                      # 0xe
	.long	15                      # 0xf
.LCPI63_18:
	.long	16                      # 0x10
	.long	17                      # 0x11
	.long	18                      # 0x12
	.long	19                      # 0x13
.LCPI63_19:
	.long	20                      # 0x14
	.long	21                      # 0x15
	.long	22                      # 0x16
	.long	23                      # 0x17
.LCPI63_20:
	.long	24                      # 0x18
	.long	25                      # 0x19
	.long	26                      # 0x1a
	.long	27                      # 0x1b
.LCPI63_21:
	.long	28                      # 0x1c
	.long	29                      # 0x1d
	.long	30                      # 0x1e
	.long	31                      # 0x1f
.LCPI63_22:
	.byte	255                     # 0xff
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	255                     # 0xff
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	255                     # 0xff
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	255                     # 0xff
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
.LCPI63_23:
	.long	32                      # 0x20
	.long	32                      # 0x20
	.long	32                      # 0x20
	.long	32                      # 0x20
	.text
	.align	16, 0x90
	.type	sendMTFValues,@function
sendMTFValues:                          # @sendMTFValues
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp397:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp398:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp399:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp400:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp401:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp402:
	.cfi_def_cfa_offset 56
	subq	$424, %rsp              # imm = 0x1A8
.Ltmp403:
	.cfi_def_cfa_offset 480
.Ltmp404:
	.cfi_offset %rbx, -56
.Ltmp405:
	.cfi_offset %r12, -48
.Ltmp406:
	.cfi_offset %r13, -40
.Ltmp407:
	.cfi_offset %r14, -32
.Ltmp408:
	.cfi_offset %r15, -24
.Ltmp409:
	.cfi_offset %rbp, -16
	movq	%rdi, %rsi
	movq	72(%rsi), %rax
	cmpl	$2, 656(%rsi)
	jg	.LBB63_2
# BB#1:                                 # %entry.if.end_crit_edge
	leaq	124(%rsi), %rbx
	movq	%rsi, 256(%rsp)         # 8-byte Spill
.LBB63_3:                               # %if.end
	movq	%rax, 240(%rsp)         # 8-byte Spill
	movslq	(%rbx), %rsi
	movq	%rsi, 144(%rsp)         # 8-byte Spill
	leal	2(%rsi), %r14d
	cmpq	$-1, %rsi
	jl	.LBB63_5
# BB#4:                                 # %for.body6.lr.ph.us.preheader
	testl	%r14d, %r14d
	movl	$1, %ebx
	cmovgl	%r14d, %ebx
	decl	%ebx
	incq	%rbx
	movq	256(%rsp), %rbp         # 8-byte Reload
	leaq	37708(%rbp), %rdi
	movq	%rsi, %r15
	movl	$15, %esi
	movq	%rbx, %rdx
	callq	memset
	leaq	37966(%rbp), %rdi
	movl	$15, %esi
	movq	%rbx, %rdx
	callq	memset
	leaq	38224(%rbp), %rdi
	movl	$15, %esi
	movq	%rbx, %rdx
	callq	memset
	leaq	38482(%rbp), %rdi
	movl	$15, %esi
	movq	%rbx, %rdx
	callq	memset
	leaq	38740(%rbp), %rdi
	movl	$15, %esi
	movq	%rbx, %rdx
	callq	memset
	leaq	38998(%rbp), %rdi
	movl	$15, %esi
	movq	%rbx, %rdx
	callq	memset
	movq	%r15, %rsi
.LBB63_5:                               # %for.end11
	movq	256(%rsp), %rax         # 8-byte Reload
	movl	668(%rax), %r8d
	testl	%r8d, %r8d
	jg	.LBB63_7
# BB#6:                                 # %if.then14
	movl	$3001, %edi             # imm = 0xBB9
	movq	%rsi, %rbx
	callq	BZ2_bz__AssertH__fail
	movq	%rbx, %rsi
	movq	256(%rsp), %rax         # 8-byte Reload
	movl	668(%rax), %r8d
.LBB63_7:                               # %if.end15
	movl	$2, %ebx
	cmpl	$200, %r8d
	jl	.LBB63_11
# BB#8:                                 # %if.else
	movl	$3, %ebx
	cmpl	$600, %r8d              # imm = 0x258
	jl	.LBB63_11
# BB#9:                                 # %if.else22
	movl	$4, %ebx
	cmpl	$1200, %r8d             # imm = 0x4B0
	jl	.LBB63_11
# BB#10:                                # %if.else26
	cmpl	$2399, %r8d             # imm = 0x95F
	setg	%al
	movzbl	%al, %ebx
	addl	$5, %ebx
.LBB63_11:                              # %if.end34
	cmpl	$-2, %esi
	jle	.LBB63_12
# BB#17:                                # %while.body.us.preheader
	movq	%rbx, 232(%rsp)         # 8-byte Spill
	movl	%ebx, %r15d
	leal	2(%rsi), %eax
	cltq
	movq	%rax, 192(%rsp)         # 8-byte Spill
	testq	%rax, %rax
	movl	$1, %r9d
	cmovgq	%rax, %r9
	leaq	-16(%r9), %rax
	shrq	$4, %rax
	movq	%rax, 128(%rsp)         # 8-byte Spill
	andl	$1, %eax
	movq	%rax, 120(%rsp)         # 8-byte Spill
	movq	%r15, %rcx
	notq	%rcx
	cmpq	$-3, %rcx
	movq	$-2, %rax
	cmovgq	%rcx, %rax
	cmpl	$0, "PinFlag-96."(%rip)
	jne	.LBB63_19
# BB#18:
	movq	%rsi, %r12
	leaq	1(%rax,%r15), %rsi
	movl	$.L__unnamed_146, %edi
	movl	$20, %edx
	movl	$102, %ecx
	movl	%r8d, %ebp
	xorl	%r8d, %r8d
	movq	%r9, %rbx
	callq	Pin
	movq	%rbx, %r9
	movl	%ebp, %r8d
	movq	%r12, %rsi
	movl	$1, "PinFlag-96."(%rip)
.LBB63_19:
	movslq	%r14d, %rdi
	movq	%rdi, 160(%rsp)         # 8-byte Spill
	movl	%r14d, 156(%rsp)        # 4-byte Spill
	movq	%r9, %r10
	andq	$-16, %r10
	movq	%r10, 136(%rsp)         # 8-byte Spill
	movq	256(%rsp), %rcx         # 8-byte Reload
	leaq	672(%rcx), %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	imulq	$258, %r15, %rax        # imm = 0x102
	leaq	37466(%rax,%rcx), %r11
	leaq	37450(%rax,%rcx), %r14
	xorl	%r12d, %r12d
	movdqa	.LCPI63_1(%rip), %xmm15 # xmm15 = [2147483648,0,2147483648,0]
	movq	%r15, %r13
	jmp	.LBB63_20
.LBB63_28:                              # %if.then61.us
                                        #   in Loop: Header=BB63_20 Depth=1
	movq	stderr(%rip), %rdi
	cvtsi2ssl	%ebp, %xmm0
	cvtss2sd	%xmm0, %xmm0
	mulsd	.LCPI63_0(%rip), %xmm0
	movq	256(%rsp), %rax         # 8-byte Reload
	cvtsi2ssl	668(%rax), %xmm1
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movl	$.L.str.3.68, %esi
	movb	$1, %al
	movq	%rdx, 328(%rsp)         # 8-byte Spill
	movl	%r13d, %edx
	movq	328(%rsp), %rcx         # 8-byte Reload
	movl	%r8d, 304(%rsp)         # 4-byte Spill
	movl	%r12d, %r8d
	movq	%r13, 264(%rsp)         # 8-byte Spill
	movq	%r9, %r13
	movl	%ebp, %r9d
	movq	%r14, 208(%rsp)         # 8-byte Spill
	movq	%r10, %r14
	movq	%r11, %rbx
	callq	fprintf
	movq	328(%rsp), %rdx         # 8-byte Reload
	movdqa	.LCPI63_1(%rip), %xmm15 # xmm15 = [2147483648,0,2147483648,0]
	movq	%rbx, %r11
	movq	%r14, %r10
	movq	208(%rsp), %r14         # 8-byte Reload
	movq	%r13, %r9
	movq	264(%rsp), %r13         # 8-byte Reload
	movl	304(%rsp), %r8d         # 4-byte Reload
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	144(%rsp), %rsi         # 8-byte Reload
	jmp	.LBB63_29
	.align	16, 0x90
.LBB63_20:                              # %while.body.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_42 Depth 2
                                        #     Child Loop BB63_51 Depth 2
                                        #     Child Loop BB63_33 Depth 2
	movl	%r8d, %eax
	cltd
	idivl	%r13d
	movq	%r12, %rdx
	movl	%eax, %ebx
	leal	-1(%rdx), %r12d
	testl	%ebx, %ebx
	jle	.LBB63_21
# BB#38:                                # %while.body.us
                                        #   in Loop: Header=BB63_20 Depth=1
	cmpl	%esi, %r12d
	jg	.LBB63_21
# BB#39:                                # %while.body41.us.preheader
                                        #   in Loop: Header=BB63_20 Depth=1
	cmpl	$0, "PinFlag-96.0"(%rip)
	jne	.LBB63_41
# BB#40:                                #   in Loop: Header=BB63_20 Depth=1
	movl	$.L__unnamed_147, %edi
	movl	$1, %esi
	movq	%rdx, 328(%rsp)         # 8-byte Spill
	xorl	%edx, %edx
	movl	$13, %ecx
	movl	%r8d, 304(%rsp)         # 4-byte Spill
	movl	$1, %r8d
	movq	%r14, 208(%rsp)         # 8-byte Spill
	movq	%r9, %r14
	movq	%r10, %rbp
	movq	%r13, 264(%rsp)         # 8-byte Spill
	movq	%r11, %r13
	callq	Pin
	movq	328(%rsp), %rdx         # 8-byte Reload
	movdqa	.LCPI63_1(%rip), %xmm15 # xmm15 = [2147483648,0,2147483648,0]
	movq	%r13, %r11
	movq	264(%rsp), %r13         # 8-byte Reload
	movq	%rbp, %r10
	movq	%r14, %r9
	movq	208(%rsp), %r14         # 8-byte Reload
	movl	304(%rsp), %r8d         # 4-byte Reload
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	144(%rsp), %rsi         # 8-byte Reload
	movl	$1, "PinFlag-96.0"(%rip)
.LBB63_41:                              #   in Loop: Header=BB63_20 Depth=1
	movslq	%r12d, %rcx
	movslq	%edx, %rax
	movq	%rdx, %rbp
	movq	168(%rsp), %rdx         # 8-byte Reload
	leaq	(%rdx,%rax,4), %rax
	movq	%rbp, %rdx
	xorl	%ebp, %ebp
	.align	16, 0x90
.LBB63_42:                              # %while.body41.us
                                        #   Parent Loop BB63_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addl	(%rax), %ebp
	leaq	1(%rcx), %r12
	cmpl	%ebx, %ebp
	jge	.LBB63_22
# BB#43:                                # %while.body41.us
                                        #   in Loop: Header=BB63_42 Depth=2
	addq	$4, %rax
	cmpq	%rsi, %rcx
	movq	%r12, %rcx
	jl	.LBB63_42
	jmp	.LBB63_22
	.align	16, 0x90
.LBB63_21:                              #   in Loop: Header=BB63_20 Depth=1
	xorl	%ebp, %ebp
.LBB63_22:                              # %while.end.us
                                        #   in Loop: Header=BB63_20 Depth=1
	cmpl	%edx, %r12d
	jle	.LBB63_27
# BB#23:                                # %land.lhs.true.us
                                        #   in Loop: Header=BB63_20 Depth=1
	movq	232(%rsp), %rax         # 8-byte Reload
	cmpl	%r13d, %eax
	je	.LBB63_27
# BB#24:                                # %land.lhs.true.us
                                        #   in Loop: Header=BB63_20 Depth=1
	cmpl	$1, %r13d
	je	.LBB63_27
# BB#25:                                # %land.lhs.true50.us
                                        #   in Loop: Header=BB63_20 Depth=1
	movl	%r15d, %eax
	subl	%r13d, %eax
	movl	%eax, %ecx
	shrl	$31, %ecx
	addl	%eax, %ecx
	andl	$-2, %ecx
	subl	%ecx, %eax
	cmpl	$1, %eax
	jne	.LBB63_27
# BB#26:                                # %if.then53.us
                                        #   in Loop: Header=BB63_20 Depth=1
	movslq	%r12d, %rax
	movq	256(%rsp), %rcx         # 8-byte Reload
	subl	672(%rcx,%rax,4), %ebp
	decl	%r12d
	.align	16, 0x90
.LBB63_27:                              # %if.end58.us
                                        #   in Loop: Header=BB63_20 Depth=1
	movq	256(%rsp), %rax         # 8-byte Reload
	cmpl	$3, 656(%rax)
	jge	.LBB63_28
.LBB63_29:                              # %for.body72.lr.ph.us
                                        #   in Loop: Header=BB63_20 Depth=1
	leaq	-1(%r13), %rax
	movq	%rax, 248(%rsp)         # 8-byte Spill
	movslq	%edx, %rax
	movq	%rax, 328(%rsp)         # 8-byte Spill
	movslq	%r12d, %rax
	movq	%rax, 320(%rsp)         # 8-byte Spill
	cmpq	$15, %r9
	movl	$0, %ebx
	jbe	.LBB63_30
# BB#44:                                # %min.iters.checked
                                        #   in Loop: Header=BB63_20 Depth=1
	testq	%r10, %r10
	movl	$0, %ebx
	je	.LBB63_30
# BB#45:                                # %vector.ph
                                        #   in Loop: Header=BB63_20 Depth=1
	movq	328(%rsp), %xmm0        # 8-byte Folded Reload
                                        # xmm0 = mem[0],zero
	pshufd	$68, %xmm0, %xmm1       # xmm1 = xmm0[0,1,0,1]
	movdqa	%xmm1, 272(%rsp)        # 16-byte Spill
	movq	320(%rsp), %xmm0        # 8-byte Folded Reload
                                        # xmm0 = mem[0],zero
	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
	movdqa	%xmm0, 288(%rsp)        # 16-byte Spill
	cmpq	$0, 120(%rsp)           # 8-byte Folded Reload
	movl	$0, %ebx
	movl	$1, %edx
	jne	.LBB63_47
# BB#46:                                # %vector.body.prol
                                        #   in Loop: Header=BB63_20 Depth=1
	movdqa	%xmm1, %xmm8
	pxor	%xmm15, %xmm8
	movdqa	%xmm15, %xmm10
	pxor	.LCPI63_2(%rip), %xmm10
	movdqa	%xmm8, %xmm0
	pcmpgtd	%xmm10, %xmm0
	pshufd	$160, %xmm0, %xmm1      # xmm1 = xmm0[0,0,2,2]
	movdqa	%xmm8, %xmm2
	pcmpeqd	%xmm10, %xmm2
	pshufd	$245, %xmm2, %xmm2      # xmm2 = xmm2[1,1,3,3]
	pand	%xmm1, %xmm2
	pshufd	$245, %xmm0, %xmm0      # xmm0 = xmm0[1,1,3,3]
	por	%xmm2, %xmm0
	pshufd	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3]
	movdqa	%xmm15, %xmm11
	pxor	.LCPI63_3(%rip), %xmm11
	movdqa	%xmm8, %xmm1
	pcmpgtd	%xmm11, %xmm1
	pshufd	$160, %xmm1, %xmm2      # xmm2 = xmm1[0,0,2,2]
	movdqa	%xmm8, %xmm3
	pcmpeqd	%xmm11, %xmm3
	pshufd	$245, %xmm3, %xmm3      # xmm3 = xmm3[1,1,3,3]
	pand	%xmm2, %xmm3
	pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
	por	%xmm3, %xmm1
	pshufd	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3]
	punpcklqdq	%xmm1, %xmm0    # xmm0 = xmm0[0],xmm1[0]
	pslld	$31, %xmm0
	psrad	$31, %xmm0
	pshuflw	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm0, %xmm1      # xmm1 = xmm0[0,2,2,3]
	movd	%rdx, %xmm2
	pslldq	$8, %xmm2               # xmm2 = zero,zero,zero,zero,zero,zero,zero,zero,xmm2[0,1,2,3,4,5,6,7]
	pxor	%xmm15, %xmm2
	movdqa	%xmm8, %xmm0
	pcmpgtd	%xmm2, %xmm0
	pshufd	$160, %xmm0, %xmm3      # xmm3 = xmm0[0,0,2,2]
	movdqa	%xmm8, %xmm4
	pcmpeqd	%xmm2, %xmm4
	pshufd	$245, %xmm4, %xmm4      # xmm4 = xmm4[1,1,3,3]
	pand	%xmm3, %xmm4
	pshufd	$245, %xmm0, %xmm0      # xmm0 = xmm0[1,1,3,3]
	por	%xmm4, %xmm0
	pshufd	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3]
	movdqa	%xmm15, %xmm12
	pxor	.LCPI63_4(%rip), %xmm12
	movdqa	%xmm8, %xmm4
	pcmpgtd	%xmm12, %xmm4
	pshufd	$160, %xmm4, %xmm3      # xmm3 = xmm4[0,0,2,2]
	movdqa	%xmm8, %xmm6
	pcmpeqd	%xmm12, %xmm6
	pshufd	$245, %xmm6, %xmm6      # xmm6 = xmm6[1,1,3,3]
	pand	%xmm3, %xmm6
	pshufd	$245, %xmm4, %xmm4      # xmm4 = xmm4[1,1,3,3]
	por	%xmm6, %xmm4
	pshufd	$232, %xmm4, %xmm4      # xmm4 = xmm4[0,2,2,3]
	punpcklqdq	%xmm4, %xmm0    # xmm0 = xmm0[0],xmm4[0]
	pslld	$31, %xmm0
	psrad	$31, %xmm0
	pshuflw	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3]
	punpcklqdq	%xmm1, %xmm0    # xmm0 = xmm0[0],xmm1[0]
	movdqa	%xmm15, %xmm13
	pxor	.LCPI63_6(%rip), %xmm13
	movdqa	%xmm8, %xmm1
	pcmpgtd	%xmm13, %xmm1
	pshufd	$160, %xmm1, %xmm3      # xmm3 = xmm1[0,0,2,2]
	movdqa	%xmm8, %xmm6
	pcmpeqd	%xmm13, %xmm6
	pshufd	$245, %xmm6, %xmm6      # xmm6 = xmm6[1,1,3,3]
	pand	%xmm3, %xmm6
	pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
	por	%xmm6, %xmm1
	pshufd	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3]
	movdqa	%xmm15, %xmm14
	pxor	.LCPI63_7(%rip), %xmm14
	movdqa	%xmm8, %xmm6
	pcmpgtd	%xmm14, %xmm6
	pshufd	$160, %xmm6, %xmm3      # xmm3 = xmm6[0,0,2,2]
	movdqa	%xmm8, %xmm7
	pcmpeqd	%xmm14, %xmm7
	pshufd	$245, %xmm7, %xmm7      # xmm7 = xmm7[1,1,3,3]
	pand	%xmm3, %xmm7
	pshufd	$245, %xmm6, %xmm3      # xmm3 = xmm6[1,1,3,3]
	por	%xmm7, %xmm3
	pshufd	$232, %xmm3, %xmm3      # xmm3 = xmm3[0,2,2,3]
	punpcklqdq	%xmm3, %xmm1    # xmm1 = xmm1[0],xmm3[0]
	movdqa	%xmm15, %xmm6
	pxor	.LCPI63_8(%rip), %xmm6
	movdqa	%xmm8, %xmm3
	pcmpgtd	%xmm6, %xmm3
	pshufd	$160, %xmm3, %xmm7      # xmm7 = xmm3[0,0,2,2]
	movdqa	%xmm8, %xmm5
	pcmpeqd	%xmm6, %xmm5
	pshufd	$245, %xmm5, %xmm5      # xmm5 = xmm5[1,1,3,3]
	pand	%xmm7, %xmm5
	pshufd	$245, %xmm3, %xmm3      # xmm3 = xmm3[1,1,3,3]
	por	%xmm5, %xmm3
	movdqa	%xmm15, %xmm9
	pxor	.LCPI63_9(%rip), %xmm9
	movdqa	%xmm8, %xmm5
	pcmpgtd	%xmm9, %xmm5
	pshufd	$160, %xmm5, %xmm7      # xmm7 = xmm5[0,0,2,2]
	pcmpeqd	%xmm9, %xmm8
	pshufd	$245, %xmm8, %xmm4      # xmm4 = xmm8[1,1,3,3]
	pand	%xmm7, %xmm4
	pshufd	$245, %xmm5, %xmm5      # xmm5 = xmm5[1,1,3,3]
	por	%xmm4, %xmm5
	psllw	$15, %xmm0
	psraw	$15, %xmm0
	movdqa	.LCPI63_5(%rip), %xmm8  # xmm8 = [255,255,255,255,255,255,255,255]
	pand	%xmm8, %xmm0
	pslld	$31, %xmm1
	psrad	$31, %xmm1
	pshuflw	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3]
	pshufd	$232, %xmm3, %xmm3      # xmm3 = xmm3[0,2,2,3]
	pshufd	$232, %xmm5, %xmm4      # xmm4 = xmm5[0,2,2,3]
	punpcklqdq	%xmm4, %xmm3    # xmm3 = xmm3[0],xmm4[0]
	pslld	$31, %xmm3
	psrad	$31, %xmm3
	pshuflw	$232, %xmm3, %xmm3      # xmm3 = xmm3[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm3, %xmm3      # xmm3 = xmm3[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm3, %xmm3      # xmm3 = xmm3[0,2,2,3]
	punpcklqdq	%xmm3, %xmm1    # xmm1 = xmm1[0],xmm3[0]
	psllw	$15, %xmm1
	psraw	$15, %xmm1
	pand	%xmm8, %xmm1
	packuswb	%xmm1, %xmm0
	psllw	$7, %xmm0
	movdqa	.LCPI63_10(%rip), %xmm1 # xmm1 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	%xmm1, %xmm0
	pxor	%xmm1, %xmm1
	pcmpgtb	%xmm0, %xmm1
	movdqa	%xmm1, 304(%rsp)        # 16-byte Spill
	movdqa	288(%rsp), %xmm7        # 16-byte Reload
	pxor	%xmm15, %xmm7
	movdqa	%xmm10, %xmm0
	pcmpgtd	%xmm7, %xmm0
	pshufd	$160, %xmm0, %xmm1      # xmm1 = xmm0[0,0,2,2]
	pcmpeqd	%xmm7, %xmm10
	pshufd	$245, %xmm10, %xmm3     # xmm3 = xmm10[1,1,3,3]
	pand	%xmm1, %xmm3
	pshufd	$245, %xmm0, %xmm0      # xmm0 = xmm0[1,1,3,3]
	por	%xmm3, %xmm0
	movdqa	%xmm11, %xmm1
	pcmpgtd	%xmm7, %xmm1
	pshufd	$160, %xmm1, %xmm3      # xmm3 = xmm1[0,0,2,2]
	pcmpeqd	%xmm7, %xmm11
	pshufd	$245, %xmm11, %xmm4     # xmm4 = xmm11[1,1,3,3]
	pand	%xmm3, %xmm4
	pshufd	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3]
	pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
	por	%xmm4, %xmm1
	pshufd	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3]
	punpcklqdq	%xmm1, %xmm0    # xmm0 = xmm0[0],xmm1[0]
	movdqa	%xmm2, %xmm1
	pcmpgtd	%xmm7, %xmm1
	pshufd	$160, %xmm1, %xmm3      # xmm3 = xmm1[0,0,2,2]
	pcmpeqd	%xmm7, %xmm2
	pshufd	$245, %xmm2, %xmm2      # xmm2 = xmm2[1,1,3,3]
	pand	%xmm3, %xmm2
	pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
	por	%xmm2, %xmm1
	movdqa	%xmm12, %xmm2
	pcmpgtd	%xmm7, %xmm2
	pshufd	$160, %xmm2, %xmm3      # xmm3 = xmm2[0,0,2,2]
	pcmpeqd	%xmm7, %xmm12
	pshufd	$245, %xmm12, %xmm4     # xmm4 = xmm12[1,1,3,3]
	pand	%xmm3, %xmm4
	pshufd	$245, %xmm2, %xmm2      # xmm2 = xmm2[1,1,3,3]
	por	%xmm4, %xmm2
	pslld	$31, %xmm0
	psrad	$31, %xmm0
	pshuflw	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm0, %xmm3      # xmm3 = xmm0[0,2,2,3]
	pshufd	$232, %xmm1, %xmm0      # xmm0 = xmm1[0,2,2,3]
	pshufd	$232, %xmm2, %xmm1      # xmm1 = xmm2[0,2,2,3]
	punpcklqdq	%xmm1, %xmm0    # xmm0 = xmm0[0],xmm1[0]
	pslld	$31, %xmm0
	psrad	$31, %xmm0
	pshuflw	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3]
	punpcklqdq	%xmm3, %xmm0    # xmm0 = xmm0[0],xmm3[0]
	movdqa	%xmm13, %xmm1
	pcmpgtd	%xmm7, %xmm1
	pshufd	$160, %xmm1, %xmm2      # xmm2 = xmm1[0,0,2,2]
	pcmpeqd	%xmm7, %xmm13
	pshufd	$245, %xmm13, %xmm3     # xmm3 = xmm13[1,1,3,3]
	pand	%xmm2, %xmm3
	pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
	por	%xmm3, %xmm1
	movdqa	%xmm14, %xmm2
	pcmpgtd	%xmm7, %xmm2
	pshufd	$160, %xmm2, %xmm3      # xmm3 = xmm2[0,0,2,2]
	pcmpeqd	%xmm7, %xmm14
	pshufd	$245, %xmm14, %xmm4     # xmm4 = xmm14[1,1,3,3]
	pand	%xmm3, %xmm4
	pshufd	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3]
	pshufd	$245, %xmm2, %xmm2      # xmm2 = xmm2[1,1,3,3]
	por	%xmm4, %xmm2
	pshufd	$232, %xmm2, %xmm2      # xmm2 = xmm2[0,2,2,3]
	punpcklqdq	%xmm2, %xmm1    # xmm1 = xmm1[0],xmm2[0]
	movdqa	%xmm6, %xmm2
	pcmpgtd	%xmm7, %xmm2
	pshufd	$160, %xmm2, %xmm3      # xmm3 = xmm2[0,0,2,2]
	pcmpeqd	%xmm7, %xmm6
	pshufd	$245, %xmm6, %xmm4      # xmm4 = xmm6[1,1,3,3]
	pand	%xmm3, %xmm4
	pshufd	$245, %xmm2, %xmm2      # xmm2 = xmm2[1,1,3,3]
	por	%xmm4, %xmm2
	movdqa	%xmm9, %xmm3
	pcmpgtd	%xmm7, %xmm3
	pcmpeqd	%xmm9, %xmm7
	pshufd	$160, %xmm3, %xmm4      # xmm4 = xmm3[0,0,2,2]
	pshufd	$245, %xmm7, %xmm5      # xmm5 = xmm7[1,1,3,3]
	pand	%xmm4, %xmm5
	pshufd	$245, %xmm3, %xmm3      # xmm3 = xmm3[1,1,3,3]
	por	%xmm5, %xmm3
	pshufd	$232, %xmm2, %xmm2      # xmm2 = xmm2[0,2,2,3]
	pshufd	$232, %xmm3, %xmm3      # xmm3 = xmm3[0,2,2,3]
	punpcklqdq	%xmm3, %xmm2    # xmm2 = xmm2[0],xmm3[0]
	pslld	$31, %xmm1
	psrad	$31, %xmm1
	pshuflw	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3]
	pslld	$31, %xmm2
	psrad	$31, %xmm2
	pshuflw	$232, %xmm2, %xmm2      # xmm2 = xmm2[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm2, %xmm2      # xmm2 = xmm2[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm2, %xmm2      # xmm2 = xmm2[0,2,2,3]
	punpcklqdq	%xmm2, %xmm1    # xmm1 = xmm1[0],xmm2[0]
	psllw	$15, %xmm0
	psraw	$15, %xmm0
	pand	%xmm8, %xmm0
	psllw	$15, %xmm1
	psraw	$15, %xmm1
	pand	%xmm8, %xmm1
	packuswb	%xmm1, %xmm0
	psllw	$7, %xmm0
	pand	.LCPI63_10(%rip), %xmm0
	pxor	%xmm1, %xmm1
	pcmpgtb	%xmm0, %xmm1
	por	304(%rsp), %xmm1        # 16-byte Folded Reload
	imulq	$258, 248(%rsp), %rax   # 8-byte Folded Reload
                                        # imm = 0x102
	pand	.LCPI63_11(%rip), %xmm1
	movq	256(%rsp), %rcx         # 8-byte Reload
	movdqu	%xmm1, 37708(%rcx,%rax)
	movl	$16, %ebx
.LBB63_47:                              # %vector.ph.split
                                        #   in Loop: Header=BB63_20 Depth=1
	cmpq	$0, 128(%rsp)           # 8-byte Folded Reload
	movdqa	%xmm15, %xmm9
	je	.LBB63_52
# BB#48:                                # %vector.ph.split.split
                                        #   in Loop: Header=BB63_20 Depth=1
	cmpl	$0, "PinFlag-96.1"(%rip)
	jne	.LBB63_50
# BB#49:                                #   in Loop: Header=BB63_20 Depth=1
	movl	$.L__unnamed_148, %edi
	movl	$1, %esi
	movl	$6, %edx
	movl	$25, %ecx
	movl	%r8d, 304(%rsp)         # 4-byte Spill
	movl	$1, %r8d
	movq	%r13, 264(%rsp)         # 8-byte Spill
	movq	%r9, %r13
	movq	%r14, 208(%rsp)         # 8-byte Spill
	movq	%r10, %r14
	movq	%r11, 176(%rsp)         # 8-byte Spill
	callq	Pin
	movl	$1, %edx
	movq	176(%rsp), %r11         # 8-byte Reload
	movq	%r14, %r10
	movq	208(%rsp), %r14         # 8-byte Reload
	movq	%r13, %r9
	movq	264(%rsp), %r13         # 8-byte Reload
	movl	304(%rsp), %r8d         # 4-byte Reload
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	144(%rsp), %rsi         # 8-byte Reload
	movl	$1, "PinFlag-96.1"(%rip)
.LBB63_50:                              #   in Loop: Header=BB63_20 Depth=1
	leaq	(%r11,%rbx), %rax
	movdqa	.LCPI63_1(%rip), %xmm9  # xmm9 = [2147483648,0,2147483648,0]
	.align	16, 0x90
.LBB63_51:                              # %vector.body
                                        #   Parent Loop BB63_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movd	%rbx, %xmm0
	pshufd	$68, %xmm0, %xmm3       # xmm3 = xmm0[0,1,0,1]
	movdqa	%xmm3, %xmm11
	movdqa	.LCPI63_9(%rip), %xmm0  # xmm0 = [14,15]
	paddq	%xmm0, %xmm11
	movdqa	%xmm3, %xmm10
	movdqa	.LCPI63_8(%rip), %xmm0  # xmm0 = [12,13]
	paddq	%xmm0, %xmm10
	movdqa	%xmm3, %xmm12
	movdqa	.LCPI63_7(%rip), %xmm0  # xmm0 = [10,11]
	paddq	%xmm0, %xmm12
	movdqa	%xmm3, %xmm13
	movdqa	.LCPI63_6(%rip), %xmm0  # xmm0 = [8,9]
	paddq	%xmm0, %xmm13
	movd	%rdx, %xmm0
	pslldq	$8, %xmm0               # xmm0 = zero,zero,zero,zero,zero,zero,zero,zero,xmm0[0,1,2,3,4,5,6,7]
	movdqa	%xmm0, 304(%rsp)        # 16-byte Spill
	movdqa	%xmm3, %xmm15
	paddq	%xmm0, %xmm15
	movdqa	%xmm3, %xmm8
	movdqa	.LCPI63_4(%rip), %xmm0  # xmm0 = [2,3]
	paddq	%xmm0, %xmm8
	movdqa	%xmm3, %xmm4
	movdqa	.LCPI63_2(%rip), %xmm0  # xmm0 = [4,5]
	paddq	%xmm0, %xmm4
	movdqa	.LCPI63_3(%rip), %xmm0  # xmm0 = [6,7]
	paddq	%xmm0, %xmm3
	pxor	%xmm9, %xmm3
	movdqa	272(%rsp), %xmm14       # 16-byte Reload
	pxor	%xmm9, %xmm14
	movdqa	%xmm14, %xmm2
	pcmpgtd	%xmm3, %xmm2
	pshufd	$160, %xmm2, %xmm5      # xmm5 = xmm2[0,0,2,2]
	movdqa	%xmm14, %xmm1
	pcmpeqd	%xmm3, %xmm1
	pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
	pand	%xmm5, %xmm1
	pshufd	$245, %xmm2, %xmm2      # xmm2 = xmm2[1,1,3,3]
	por	%xmm1, %xmm2
	pshufd	$232, %xmm2, %xmm1      # xmm1 = xmm2[0,2,2,3]
	pxor	%xmm9, %xmm4
	movdqa	%xmm14, %xmm2
	pcmpgtd	%xmm4, %xmm2
	pshufd	$160, %xmm2, %xmm5      # xmm5 = xmm2[0,0,2,2]
	movdqa	%xmm14, %xmm6
	pcmpeqd	%xmm4, %xmm6
	pshufd	$245, %xmm6, %xmm6      # xmm6 = xmm6[1,1,3,3]
	pand	%xmm5, %xmm6
	pshufd	$245, %xmm2, %xmm2      # xmm2 = xmm2[1,1,3,3]
	por	%xmm6, %xmm2
	pshufd	$232, %xmm2, %xmm2      # xmm2 = xmm2[0,2,2,3]
	punpcklqdq	%xmm1, %xmm2    # xmm2 = xmm2[0],xmm1[0]
	pslld	$31, %xmm2
	psrad	$31, %xmm2
	pshuflw	$232, %xmm2, %xmm1      # xmm1 = xmm2[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm1, %xmm0      # xmm0 = xmm1[0,2,2,3]
	pxor	%xmm9, %xmm8
	movdqa	%xmm14, %xmm1
	pcmpgtd	%xmm8, %xmm1
	pshufd	$160, %xmm1, %xmm2      # xmm2 = xmm1[0,0,2,2]
	movdqa	%xmm14, %xmm6
	pcmpeqd	%xmm8, %xmm6
	pshufd	$245, %xmm6, %xmm6      # xmm6 = xmm6[1,1,3,3]
	pand	%xmm2, %xmm6
	pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
	por	%xmm6, %xmm1
	pshufd	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3]
	pxor	%xmm9, %xmm15
	movdqa	%xmm14, %xmm2
	pcmpgtd	%xmm15, %xmm2
	pshufd	$160, %xmm2, %xmm6      # xmm6 = xmm2[0,0,2,2]
	movdqa	%xmm14, %xmm5
	pcmpeqd	%xmm15, %xmm5
	pshufd	$245, %xmm5, %xmm5      # xmm5 = xmm5[1,1,3,3]
	pand	%xmm6, %xmm5
	pshufd	$245, %xmm2, %xmm2      # xmm2 = xmm2[1,1,3,3]
	por	%xmm5, %xmm2
	pshufd	$232, %xmm2, %xmm2      # xmm2 = xmm2[0,2,2,3]
	punpcklqdq	%xmm1, %xmm2    # xmm2 = xmm2[0],xmm1[0]
	pslld	$31, %xmm2
	psrad	$31, %xmm2
	pshuflw	$232, %xmm2, %xmm1      # xmm1 = xmm2[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm1, %xmm2      # xmm2 = xmm1[0,2,2,3]
	punpcklqdq	%xmm0, %xmm2    # xmm2 = xmm2[0],xmm0[0]
	pxor	%xmm9, %xmm13
	movdqa	%xmm14, %xmm1
	pcmpgtd	%xmm13, %xmm1
	pshufd	$160, %xmm1, %xmm5      # xmm5 = xmm1[0,0,2,2]
	movdqa	%xmm14, %xmm6
	pcmpeqd	%xmm13, %xmm6
	pshufd	$245, %xmm6, %xmm6      # xmm6 = xmm6[1,1,3,3]
	pand	%xmm5, %xmm6
	pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
	por	%xmm6, %xmm1
	pshufd	$232, %xmm1, %xmm5      # xmm5 = xmm1[0,2,2,3]
	pxor	%xmm9, %xmm12
	movdqa	%xmm14, %xmm1
	pcmpgtd	%xmm12, %xmm1
	pshufd	$160, %xmm1, %xmm6      # xmm6 = xmm1[0,0,2,2]
	movdqa	%xmm14, %xmm7
	pcmpeqd	%xmm12, %xmm7
	pshufd	$245, %xmm7, %xmm7      # xmm7 = xmm7[1,1,3,3]
	pand	%xmm6, %xmm7
	pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
	por	%xmm7, %xmm1
	pshufd	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3]
	punpcklqdq	%xmm1, %xmm5    # xmm5 = xmm5[0],xmm1[0]
	pxor	%xmm9, %xmm10
	movdqa	%xmm14, %xmm1
	pcmpgtd	%xmm10, %xmm1
	pshufd	$160, %xmm1, %xmm6      # xmm6 = xmm1[0,0,2,2]
	movdqa	%xmm14, %xmm7
	pcmpeqd	%xmm10, %xmm7
	pshufd	$245, %xmm7, %xmm7      # xmm7 = xmm7[1,1,3,3]
	pand	%xmm6, %xmm7
	pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
	por	%xmm7, %xmm1
	pxor	%xmm9, %xmm11
	movdqa	%xmm14, %xmm6
	pcmpgtd	%xmm11, %xmm6
	pshufd	$160, %xmm6, %xmm7      # xmm7 = xmm6[0,0,2,2]
	movdqa	%xmm14, %xmm0
	pcmpeqd	%xmm11, %xmm0
	pshufd	$245, %xmm0, %xmm0      # xmm0 = xmm0[1,1,3,3]
	pand	%xmm7, %xmm0
	psllw	$15, %xmm2
	psraw	$15, %xmm2
	movdqa	.LCPI63_5(%rip), %xmm7  # xmm7 = [255,255,255,255,255,255,255,255]
	pand	%xmm7, %xmm2
	pslld	$31, %xmm5
	psrad	$31, %xmm5
	pshuflw	$232, %xmm5, %xmm5      # xmm5 = xmm5[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm5, %xmm5      # xmm5 = xmm5[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm5, %xmm5      # xmm5 = xmm5[0,2,2,3]
	pshufd	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3]
	pshufd	$245, %xmm6, %xmm6      # xmm6 = xmm6[1,1,3,3]
	por	%xmm0, %xmm6
	pshufd	$232, %xmm6, %xmm0      # xmm0 = xmm6[0,2,2,3]
	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
	pslld	$31, %xmm1
	psrad	$31, %xmm1
	pshuflw	$232, %xmm1, %xmm0      # xmm0 = xmm1[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3]
	punpcklqdq	%xmm0, %xmm5    # xmm5 = xmm5[0],xmm0[0]
	psllw	$15, %xmm5
	psraw	$15, %xmm5
	pand	%xmm7, %xmm5
	movdqa	%xmm7, %xmm6
	packuswb	%xmm5, %xmm2
	psllw	$7, %xmm2
	movdqa	.LCPI63_10(%rip), %xmm0 # xmm0 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	%xmm0, %xmm2
	pxor	%xmm7, %xmm7
	pcmpgtb	%xmm2, %xmm7
	movdqa	288(%rsp), %xmm2        # 16-byte Reload
	pxor	%xmm9, %xmm2
	movdqa	%xmm3, %xmm0
	pcmpgtd	%xmm2, %xmm0
	pshufd	$160, %xmm0, %xmm1      # xmm1 = xmm0[0,0,2,2]
	pcmpeqd	%xmm2, %xmm3
	pshufd	$245, %xmm3, %xmm3      # xmm3 = xmm3[1,1,3,3]
	pand	%xmm1, %xmm3
	pshufd	$245, %xmm0, %xmm0      # xmm0 = xmm0[1,1,3,3]
	por	%xmm3, %xmm0
	pshufd	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3]
	movdqa	%xmm4, %xmm1
	pcmpgtd	%xmm2, %xmm1
	pshufd	$160, %xmm1, %xmm3      # xmm3 = xmm1[0,0,2,2]
	pcmpeqd	%xmm2, %xmm4
	pshufd	$245, %xmm4, %xmm4      # xmm4 = xmm4[1,1,3,3]
	pand	%xmm3, %xmm4
	pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
	por	%xmm4, %xmm1
	pshufd	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3]
	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
	pslld	$31, %xmm1
	psrad	$31, %xmm1
	pshuflw	$232, %xmm1, %xmm0      # xmm0 = xmm1[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm0, %xmm3      # xmm3 = xmm0[0,2,2,3]
	movdqa	%xmm8, %xmm0
	pcmpgtd	%xmm2, %xmm0
	pshufd	$160, %xmm0, %xmm1      # xmm1 = xmm0[0,0,2,2]
	pcmpeqd	%xmm2, %xmm8
	pshufd	$245, %xmm8, %xmm4      # xmm4 = xmm8[1,1,3,3]
	pand	%xmm1, %xmm4
	pshufd	$245, %xmm0, %xmm0      # xmm0 = xmm0[1,1,3,3]
	por	%xmm4, %xmm0
	pshufd	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3]
	movdqa	%xmm15, %xmm1
	pcmpgtd	%xmm2, %xmm1
	pshufd	$160, %xmm1, %xmm4      # xmm4 = xmm1[0,0,2,2]
	pcmpeqd	%xmm2, %xmm15
	pshufd	$245, %xmm15, %xmm5     # xmm5 = xmm15[1,1,3,3]
	pand	%xmm4, %xmm5
	pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
	por	%xmm5, %xmm1
	pshufd	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3]
	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
	pslld	$31, %xmm1
	psrad	$31, %xmm1
	pshuflw	$232, %xmm1, %xmm0      # xmm0 = xmm1[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3]
	punpcklqdq	%xmm3, %xmm0    # xmm0 = xmm0[0],xmm3[0]
	psllw	$15, %xmm0
	psraw	$15, %xmm0
	movdqa	%xmm6, %xmm8
	pand	%xmm8, %xmm0
	movdqa	%xmm13, %xmm1
	pcmpgtd	%xmm2, %xmm1
	pshufd	$160, %xmm1, %xmm3      # xmm3 = xmm1[0,0,2,2]
	pcmpeqd	%xmm2, %xmm13
	pshufd	$245, %xmm13, %xmm4     # xmm4 = xmm13[1,1,3,3]
	pand	%xmm3, %xmm4
	pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
	por	%xmm4, %xmm1
	pshufd	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3]
	movdqa	%xmm12, %xmm3
	pcmpgtd	%xmm2, %xmm3
	pshufd	$160, %xmm3, %xmm4      # xmm4 = xmm3[0,0,2,2]
	pcmpeqd	%xmm2, %xmm12
	pshufd	$245, %xmm12, %xmm5     # xmm5 = xmm12[1,1,3,3]
	pand	%xmm4, %xmm5
	pshufd	$245, %xmm3, %xmm3      # xmm3 = xmm3[1,1,3,3]
	por	%xmm5, %xmm3
	pshufd	$232, %xmm3, %xmm3      # xmm3 = xmm3[0,2,2,3]
	punpcklqdq	%xmm3, %xmm1    # xmm1 = xmm1[0],xmm3[0]
	pslld	$31, %xmm1
	psrad	$31, %xmm1
	pshuflw	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm1, %xmm3      # xmm3 = xmm1[0,2,2,3]
	movdqa	%xmm10, %xmm1
	pcmpgtd	%xmm2, %xmm1
	pshufd	$160, %xmm1, %xmm4      # xmm4 = xmm1[0,0,2,2]
	pcmpeqd	%xmm2, %xmm10
	pshufd	$245, %xmm10, %xmm5     # xmm5 = xmm10[1,1,3,3]
	pand	%xmm4, %xmm5
	pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
	por	%xmm5, %xmm1
	pshufd	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3]
	movdqa	%xmm11, %xmm4
	pcmpgtd	%xmm2, %xmm4
	pshufd	$160, %xmm4, %xmm5      # xmm5 = xmm4[0,0,2,2]
	pcmpeqd	%xmm2, %xmm11
	pshufd	$245, %xmm11, %xmm6     # xmm6 = xmm11[1,1,3,3]
	pand	%xmm5, %xmm6
	pshufd	$245, %xmm4, %xmm4      # xmm4 = xmm4[1,1,3,3]
	por	%xmm6, %xmm4
	pshufd	$232, %xmm4, %xmm4      # xmm4 = xmm4[0,2,2,3]
	punpcklqdq	%xmm4, %xmm1    # xmm1 = xmm1[0],xmm4[0]
	pslld	$31, %xmm1
	psrad	$31, %xmm1
	pshuflw	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3]
	punpcklqdq	%xmm1, %xmm3    # xmm3 = xmm3[0],xmm1[0]
	psllw	$15, %xmm3
	psraw	$15, %xmm3
	pand	%xmm8, %xmm3
	packuswb	%xmm3, %xmm0
	psllw	$7, %xmm0
	pand	.LCPI63_10(%rip), %xmm0
	pxor	%xmm1, %xmm1
	pcmpgtb	%xmm0, %xmm1
	por	%xmm7, %xmm1
	movdqa	.LCPI63_11(%rip), %xmm0 # xmm0 = [15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15]
	pand	%xmm0, %xmm1
	movdqu	%xmm1, -16(%rax)
	leaq	16(%rbx), %rcx
	movd	%rcx, %xmm0
	pshufd	$68, %xmm0, %xmm7       # xmm7 = xmm0[0,1,0,1]
	movdqa	%xmm7, %xmm12
	paddq	.LCPI63_9(%rip), %xmm12
	movdqa	%xmm7, %xmm10
	paddq	.LCPI63_8(%rip), %xmm10
	movdqa	%xmm7, %xmm11
	paddq	.LCPI63_7(%rip), %xmm11
	movdqa	%xmm7, %xmm8
	paddq	.LCPI63_6(%rip), %xmm8
	movdqa	304(%rsp), %xmm3        # 16-byte Reload
	paddq	%xmm7, %xmm3
	movdqa	%xmm7, %xmm13
	paddq	.LCPI63_4(%rip), %xmm13
	movdqa	%xmm7, %xmm15
	paddq	.LCPI63_2(%rip), %xmm15
	paddq	.LCPI63_3(%rip), %xmm7
	pxor	%xmm9, %xmm7
	movdqa	%xmm14, %xmm4
	pcmpgtd	%xmm7, %xmm4
	pshufd	$160, %xmm4, %xmm5      # xmm5 = xmm4[0,0,2,2]
	movdqa	%xmm14, %xmm6
	pcmpeqd	%xmm7, %xmm6
	pshufd	$245, %xmm6, %xmm6      # xmm6 = xmm6[1,1,3,3]
	pand	%xmm5, %xmm6
	pshufd	$245, %xmm4, %xmm4      # xmm4 = xmm4[1,1,3,3]
	por	%xmm6, %xmm4
	pshufd	$232, %xmm4, %xmm4      # xmm4 = xmm4[0,2,2,3]
	pxor	%xmm9, %xmm15
	movdqa	%xmm14, %xmm5
	pcmpgtd	%xmm15, %xmm5
	pshufd	$160, %xmm5, %xmm6      # xmm6 = xmm5[0,0,2,2]
	movdqa	%xmm14, %xmm1
	pcmpeqd	%xmm15, %xmm1
	pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
	pand	%xmm6, %xmm1
	pshufd	$245, %xmm5, %xmm5      # xmm5 = xmm5[1,1,3,3]
	por	%xmm1, %xmm5
	pshufd	$232, %xmm5, %xmm1      # xmm1 = xmm5[0,2,2,3]
	punpcklqdq	%xmm4, %xmm1    # xmm1 = xmm1[0],xmm4[0]
	pslld	$31, %xmm1
	psrad	$31, %xmm1
	pshuflw	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm1, %xmm0      # xmm0 = xmm1[0,2,2,3]
	pxor	%xmm9, %xmm13
	movdqa	%xmm14, %xmm1
	pcmpgtd	%xmm13, %xmm1
	pshufd	$160, %xmm1, %xmm4      # xmm4 = xmm1[0,0,2,2]
	movdqa	%xmm14, %xmm6
	pcmpeqd	%xmm13, %xmm6
	pshufd	$245, %xmm6, %xmm6      # xmm6 = xmm6[1,1,3,3]
	pand	%xmm4, %xmm6
	pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
	por	%xmm6, %xmm1
	pshufd	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3]
	pxor	%xmm9, %xmm3
	movdqa	%xmm3, 304(%rsp)        # 16-byte Spill
	movdqa	%xmm14, %xmm4
	pcmpgtd	%xmm3, %xmm4
	pshufd	$160, %xmm4, %xmm6      # xmm6 = xmm4[0,0,2,2]
	movdqa	%xmm14, %xmm5
	pcmpeqd	%xmm3, %xmm5
	pshufd	$245, %xmm5, %xmm5      # xmm5 = xmm5[1,1,3,3]
	pand	%xmm6, %xmm5
	pshufd	$245, %xmm4, %xmm4      # xmm4 = xmm4[1,1,3,3]
	por	%xmm5, %xmm4
	pshufd	$232, %xmm4, %xmm4      # xmm4 = xmm4[0,2,2,3]
	punpcklqdq	%xmm1, %xmm4    # xmm4 = xmm4[0],xmm1[0]
	pslld	$31, %xmm4
	psrad	$31, %xmm4
	pshuflw	$232, %xmm4, %xmm1      # xmm1 = xmm4[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm1, %xmm4      # xmm4 = xmm1[0,2,2,3]
	punpcklqdq	%xmm0, %xmm4    # xmm4 = xmm4[0],xmm0[0]
	pxor	%xmm9, %xmm8
	movdqa	%xmm14, %xmm1
	pcmpgtd	%xmm8, %xmm1
	pshufd	$160, %xmm1, %xmm5      # xmm5 = xmm1[0,0,2,2]
	movdqa	%xmm14, %xmm6
	pcmpeqd	%xmm8, %xmm6
	pshufd	$245, %xmm6, %xmm6      # xmm6 = xmm6[1,1,3,3]
	pand	%xmm5, %xmm6
	pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
	por	%xmm6, %xmm1
	pshufd	$232, %xmm1, %xmm5      # xmm5 = xmm1[0,2,2,3]
	pxor	%xmm9, %xmm11
	movdqa	%xmm14, %xmm1
	pcmpgtd	%xmm11, %xmm1
	pshufd	$160, %xmm1, %xmm6      # xmm6 = xmm1[0,0,2,2]
	movdqa	%xmm14, %xmm0
	pcmpeqd	%xmm11, %xmm0
	pshufd	$245, %xmm0, %xmm0      # xmm0 = xmm0[1,1,3,3]
	pand	%xmm6, %xmm0
	pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
	por	%xmm0, %xmm1
	pshufd	$232, %xmm1, %xmm0      # xmm0 = xmm1[0,2,2,3]
	punpcklqdq	%xmm0, %xmm5    # xmm5 = xmm5[0],xmm0[0]
	pxor	%xmm9, %xmm10
	movdqa	%xmm14, %xmm0
	pcmpgtd	%xmm10, %xmm0
	pshufd	$160, %xmm0, %xmm1      # xmm1 = xmm0[0,0,2,2]
	movdqa	%xmm14, %xmm6
	pcmpeqd	%xmm10, %xmm6
	pshufd	$245, %xmm6, %xmm6      # xmm6 = xmm6[1,1,3,3]
	pand	%xmm1, %xmm6
	pshufd	$245, %xmm0, %xmm0      # xmm0 = xmm0[1,1,3,3]
	por	%xmm6, %xmm0
	pxor	%xmm9, %xmm12
	movdqa	%xmm14, %xmm1
	pcmpgtd	%xmm12, %xmm1
	pshufd	$160, %xmm1, %xmm6      # xmm6 = xmm1[0,0,2,2]
	pcmpeqd	%xmm12, %xmm14
	pshufd	$245, %xmm14, %xmm3     # xmm3 = xmm14[1,1,3,3]
	pand	%xmm6, %xmm3
	pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
	por	%xmm3, %xmm1
	pshufd	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3]
	pshufd	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3]
	punpcklqdq	%xmm1, %xmm0    # xmm0 = xmm0[0],xmm1[0]
	psllw	$15, %xmm4
	psraw	$15, %xmm4
	movdqa	.LCPI63_5(%rip), %xmm3  # xmm3 = [255,255,255,255,255,255,255,255]
	pand	%xmm3, %xmm4
	pslld	$31, %xmm5
	psrad	$31, %xmm5
	pshuflw	$232, %xmm5, %xmm1      # xmm1 = xmm5[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3]
	pslld	$31, %xmm0
	psrad	$31, %xmm0
	pshuflw	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3]
	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
	psllw	$15, %xmm1
	psraw	$15, %xmm1
	pand	%xmm3, %xmm1
	packuswb	%xmm1, %xmm4
	psllw	$7, %xmm4
	movdqa	.LCPI63_10(%rip), %xmm14 # xmm14 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	%xmm14, %xmm4
	pxor	%xmm5, %xmm5
	pcmpgtb	%xmm4, %xmm5
	movdqa	%xmm7, %xmm0
	pcmpgtd	%xmm2, %xmm0
	pshufd	$160, %xmm0, %xmm1      # xmm1 = xmm0[0,0,2,2]
	pcmpeqd	%xmm2, %xmm7
	pshufd	$245, %xmm7, %xmm3      # xmm3 = xmm7[1,1,3,3]
	pand	%xmm1, %xmm3
	pshufd	$245, %xmm0, %xmm0      # xmm0 = xmm0[1,1,3,3]
	por	%xmm3, %xmm0
	movdqa	%xmm15, %xmm1
	pcmpgtd	%xmm2, %xmm1
	pshufd	$160, %xmm1, %xmm3      # xmm3 = xmm1[0,0,2,2]
	pcmpeqd	%xmm2, %xmm15
	pshufd	$245, %xmm15, %xmm4     # xmm4 = xmm15[1,1,3,3]
	pand	%xmm3, %xmm4
	pshufd	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3]
	pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
	por	%xmm4, %xmm1
	pshufd	$232, %xmm1, %xmm3      # xmm3 = xmm1[0,2,2,3]
	punpcklqdq	%xmm0, %xmm3    # xmm3 = xmm3[0],xmm0[0]
	movdqa	%xmm13, %xmm0
	pcmpgtd	%xmm2, %xmm0
	pshufd	$160, %xmm0, %xmm1      # xmm1 = xmm0[0,0,2,2]
	pcmpeqd	%xmm2, %xmm13
	pshufd	$245, %xmm13, %xmm4     # xmm4 = xmm13[1,1,3,3]
	pand	%xmm1, %xmm4
	pshufd	$245, %xmm0, %xmm0      # xmm0 = xmm0[1,1,3,3]
	por	%xmm4, %xmm0
	movdqa	304(%rsp), %xmm6        # 16-byte Reload
	movdqa	%xmm6, %xmm1
	pcmpgtd	%xmm2, %xmm1
	pshufd	$160, %xmm1, %xmm4      # xmm4 = xmm1[0,0,2,2]
	pcmpeqd	%xmm2, %xmm6
	pshufd	$245, %xmm6, %xmm6      # xmm6 = xmm6[1,1,3,3]
	pand	%xmm4, %xmm6
	pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
	por	%xmm6, %xmm1
	pslld	$31, %xmm3
	psrad	$31, %xmm3
	pshuflw	$232, %xmm3, %xmm3      # xmm3 = xmm3[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm3, %xmm3      # xmm3 = xmm3[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm3, %xmm3      # xmm3 = xmm3[0,2,2,3]
	pshufd	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3]
	pshufd	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3]
	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
	pslld	$31, %xmm1
	psrad	$31, %xmm1
	pshuflw	$232, %xmm1, %xmm0      # xmm0 = xmm1[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm0, %xmm0      # xmm0 = xmm0[0,2,2,3]
	punpcklqdq	%xmm3, %xmm0    # xmm0 = xmm0[0],xmm3[0]
	movdqa	%xmm8, %xmm1
	pcmpgtd	%xmm2, %xmm1
	pshufd	$160, %xmm1, %xmm3      # xmm3 = xmm1[0,0,2,2]
	pcmpeqd	%xmm2, %xmm8
	pshufd	$245, %xmm8, %xmm4      # xmm4 = xmm8[1,1,3,3]
	pand	%xmm3, %xmm4
	pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
	por	%xmm4, %xmm1
	movdqa	%xmm11, %xmm4
	pcmpgtd	%xmm2, %xmm4
	pshufd	$160, %xmm4, %xmm3      # xmm3 = xmm4[0,0,2,2]
	pcmpeqd	%xmm2, %xmm11
	pshufd	$245, %xmm11, %xmm6     # xmm6 = xmm11[1,1,3,3]
	pand	%xmm3, %xmm6
	pshufd	$232, %xmm1, %xmm3      # xmm3 = xmm1[0,2,2,3]
	pshufd	$245, %xmm4, %xmm1      # xmm1 = xmm4[1,1,3,3]
	por	%xmm6, %xmm1
	pshufd	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3]
	punpcklqdq	%xmm1, %xmm3    # xmm3 = xmm3[0],xmm1[0]
	movdqa	%xmm10, %xmm1
	pcmpgtd	%xmm2, %xmm1
	pshufd	$160, %xmm1, %xmm4      # xmm4 = xmm1[0,0,2,2]
	pcmpeqd	%xmm2, %xmm10
	pshufd	$245, %xmm10, %xmm6     # xmm6 = xmm10[1,1,3,3]
	pand	%xmm4, %xmm6
	pshufd	$245, %xmm1, %xmm1      # xmm1 = xmm1[1,1,3,3]
	por	%xmm6, %xmm1
	movdqa	%xmm12, %xmm4
	pcmpgtd	%xmm2, %xmm4
	pcmpeqd	%xmm2, %xmm12
	pshufd	$160, %xmm4, %xmm2      # xmm2 = xmm4[0,0,2,2]
	pshufd	$245, %xmm12, %xmm6     # xmm6 = xmm12[1,1,3,3]
	pand	%xmm2, %xmm6
	pshufd	$245, %xmm4, %xmm2      # xmm2 = xmm4[1,1,3,3]
	por	%xmm6, %xmm2
	pshufd	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3]
	pshufd	$232, %xmm2, %xmm2      # xmm2 = xmm2[0,2,2,3]
	punpcklqdq	%xmm2, %xmm1    # xmm1 = xmm1[0],xmm2[0]
	pslld	$31, %xmm3
	psrad	$31, %xmm3
	pshuflw	$232, %xmm3, %xmm2      # xmm2 = xmm3[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm2, %xmm2      # xmm2 = xmm2[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm2, %xmm2      # xmm2 = xmm2[0,2,2,3]
	pslld	$31, %xmm1
	psrad	$31, %xmm1
	pshuflw	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3,4,5,6,7]
	pshufhw	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,1,2,3,4,6,6,7]
	pshufd	$232, %xmm1, %xmm1      # xmm1 = xmm1[0,2,2,3]
	punpcklqdq	%xmm1, %xmm2    # xmm2 = xmm2[0],xmm1[0]
	psllw	$15, %xmm0
	psraw	$15, %xmm0
	movdqa	.LCPI63_5(%rip), %xmm1  # xmm1 = [255,255,255,255,255,255,255,255]
	pand	%xmm1, %xmm0
	psllw	$15, %xmm2
	psraw	$15, %xmm2
	pand	%xmm1, %xmm2
	packuswb	%xmm2, %xmm0
	psllw	$7, %xmm0
	pand	%xmm14, %xmm0
	pxor	%xmm1, %xmm1
	pcmpgtb	%xmm0, %xmm1
	por	%xmm5, %xmm1
	pand	.LCPI63_11(%rip), %xmm1
	movdqu	%xmm1, (%rax)
	addq	$32, %rax
	addq	$32, %rbx
	cmpq	%r10, %rbx
	jne	.LBB63_51
.LBB63_52:                              # %middle.block
                                        #   in Loop: Header=BB63_20 Depth=1
	cmpq	%r10, %r9
	movq	%r10, %rbx
	movdqa	%xmm9, %xmm15
	je	.LBB63_53
	.align	16, 0x90
.LBB63_30:                              # %for.body72.us.preheader
                                        #   in Loop: Header=BB63_20 Depth=1
	movq	%r13, 264(%rsp)         # 8-byte Spill
	movq	%rsi, %r13
	leaq	1(%rbx), %rsi
	movq	192(%rsp), %rax         # 8-byte Reload
	cmpq	%rax, %rsi
	cmovlq	%rax, %rsi
	cmpl	$0, "PinFlag-96.2"(%rip)
	jne	.LBB63_32
# BB#31:                                #   in Loop: Header=BB63_20 Depth=1
	decq	%rsi
	subq	%rbx, %rsi
	movl	$.L__unnamed_149, %edi
	xorl	%edx, %edx
	movl	$10, %ecx
	movl	%r8d, 304(%rsp)         # 4-byte Spill
	movl	$1, %r8d
	movq	%r14, 208(%rsp)         # 8-byte Spill
	movq	%r9, %r14
	movq	%r11, 176(%rsp)         # 8-byte Spill
	callq	Pin
	movdqa	.LCPI63_1(%rip), %xmm15 # xmm15 = [2147483648,0,2147483648,0]
	movq	176(%rsp), %r11         # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r14, %r9
	movq	208(%rsp), %r14         # 8-byte Reload
	movl	304(%rsp), %r8d         # 4-byte Reload
	movq	160(%rsp), %rdi         # 8-byte Reload
	movl	$1, "PinFlag-96.2"(%rip)
.LBB63_32:                              #   in Loop: Header=BB63_20 Depth=1
	leaq	(%r14,%rbx), %rax
	movq	%r13, %rsi
	movq	264(%rsp), %r13         # 8-byte Reload
	.align	16, 0x90
.LBB63_33:                              # %for.body72.us
                                        #   Parent Loop BB63_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	320(%rsp), %rbx         # 8-byte Folded Reload
	movb	$15, %cl
	movb	$15, %dl
	jg	.LBB63_35
# BB#34:                                # %for.body72.us
                                        #   in Loop: Header=BB63_33 Depth=2
	xorl	%edx, %edx
.LBB63_35:                              # %for.body72.us
                                        #   in Loop: Header=BB63_33 Depth=2
	cmpq	328(%rsp), %rbx         # 8-byte Folded Reload
	jl	.LBB63_37
# BB#36:                                # %for.body72.us
                                        #   in Loop: Header=BB63_33 Depth=2
	movb	%dl, %cl
.LBB63_37:                              # %for.body72.us
                                        #   in Loop: Header=BB63_33 Depth=2
	movb	%cl, (%rax)
	incq	%rbx
	incq	%rax
	cmpq	%rdi, %rbx
	jl	.LBB63_33
.LBB63_53:                              # %for.cond69.for.end95_crit_edge.us
                                        #   in Loop: Header=BB63_20 Depth=1
	incl	%r12d
	subl	%ebp, %r8d
	addq	$-258, %r11             # imm = 0xFFFFFFFFFFFFFEFE
	addq	$-258, %r14             # imm = 0xFFFFFFFFFFFFFEFE
	cmpq	$1, %r13
	movq	248(%rsp), %r13         # 8-byte Reload
	jg	.LBB63_20
# BB#54:
	movq	232(%rsp), %rax         # 8-byte Reload
	movl	156(%rsp), %ecx         # 4-byte Reload
	jmp	.LBB63_56
.LBB63_12:                              # %while.body.preheader
	movl	%r14d, 156(%rsp)        # 4-byte Spill
	movl	%ebx, %ecx
	notl	%ecx
	cmpl	$-3, %ecx
	movl	$-2, %eax
	cmovgl	%ecx, %eax
	cmpl	$0, "PinFlag-97."(%rip)
	jne	.LBB63_14
# BB#13:
	leal	1(%rbx,%rax), %eax
	movq	%rsi, %r14
	movslq	%eax, %rsi
	movl	$.L__unnamed_150, %edi
	movl	$6, %edx
	movl	$58, %ecx
	movl	%r8d, %ebp
	xorl	%r8d, %r8d
	callq	Pin
	movl	%ebp, %r8d
	movq	%r14, %rsi
	movl	$1, "PinFlag-97."(%rip)
.LBB63_14:
	movq	256(%rsp), %rax         # 8-byte Reload
	leaq	672(%rax), %rdi
	movq	%rdi, 328(%rsp)         # 8-byte Spill
	xorl	%r13d, %r13d
	movl	%ebx, %r12d
	movq	%rbx, 232(%rsp)         # 8-byte Spill
	jmp	.LBB63_15
.LBB63_103:                             # %if.then61
                                        #   in Loop: Header=BB63_15 Depth=1
	movq	stderr(%rip), %rdi
	cvtsi2ssl	%ebx, %xmm0
	cvtss2sd	%xmm0, %xmm0
	mulsd	.LCPI63_0(%rip), %xmm0
	movq	256(%rsp), %rax         # 8-byte Reload
	cvtsi2ssl	668(%rax), %xmm1
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movq	%rsi, %r14
	movl	$.L.str.3.68, %esi
	movb	$1, %al
	movl	%r12d, %edx
	movl	%r13d, %ecx
	movl	%r8d, %r15d
	movl	%ebp, %r8d
	movl	%ebx, %r9d
	callq	fprintf
	movq	328(%rsp), %rdi         # 8-byte Reload
	movl	%r15d, %r8d
	movq	%r14, %rsi
	jmp	.LBB63_104
	.align	16, 0x90
.LBB63_15:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_95 Depth 2
	movl	%r8d, %eax
	cltd
	idivl	%r12d
	movl	%eax, %r15d
	leal	-1(%r13), %ebp
	testl	%r15d, %r15d
	jle	.LBB63_16
# BB#90:                                # %while.body
                                        #   in Loop: Header=BB63_15 Depth=1
	cmpl	%esi, %ebp
	jg	.LBB63_91
# BB#92:                                # %while.body41.preheader
                                        #   in Loop: Header=BB63_15 Depth=1
	cmpl	$0, "PinFlag-97.0"(%rip)
	jne	.LBB63_94
# BB#93:                                #   in Loop: Header=BB63_15 Depth=1
	movl	$.L__unnamed_151, %edi
	movq	%rsi, %r14
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$13, %ecx
	movl	%r8d, %ebx
	movl	$1, %r8d
	callq	Pin
	movq	328(%rsp), %rdi         # 8-byte Reload
	movl	%ebx, %r8d
	movq	%r14, %rsi
	movl	$1, "PinFlag-97.0"(%rip)
.LBB63_94:                              #   in Loop: Header=BB63_15 Depth=1
	movslq	%ebp, %rcx
	movslq	%r13d, %rax
	leaq	(%rdi,%rax,4), %rax
	xorl	%ebx, %ebx
	.align	16, 0x90
.LBB63_95:                              # %while.body41
                                        #   Parent Loop BB63_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addl	(%rax), %ebx
	leaq	1(%rcx), %rbp
	cmpl	%r15d, %ebx
	jge	.LBB63_97
# BB#96:                                # %while.body41
                                        #   in Loop: Header=BB63_95 Depth=2
	addq	$4, %rax
	cmpq	%rsi, %rcx
	movq	%rbp, %rcx
	jl	.LBB63_95
	jmp	.LBB63_97
	.align	16, 0x90
.LBB63_16:                              #   in Loop: Header=BB63_15 Depth=1
	xorl	%ebx, %ebx
	jmp	.LBB63_97
	.align	16, 0x90
.LBB63_91:                              #   in Loop: Header=BB63_15 Depth=1
	xorl	%ebx, %ebx
.LBB63_97:                              # %while.end
                                        #   in Loop: Header=BB63_15 Depth=1
	cmpl	%r13d, %ebp
	jle	.LBB63_102
# BB#98:                                # %land.lhs.true
                                        #   in Loop: Header=BB63_15 Depth=1
	movq	232(%rsp), %rax         # 8-byte Reload
	subl	%r12d, %eax
	je	.LBB63_102
# BB#99:                                # %land.lhs.true
                                        #   in Loop: Header=BB63_15 Depth=1
	cmpl	$1, %r12d
	je	.LBB63_102
# BB#100:                               # %land.lhs.true50
                                        #   in Loop: Header=BB63_15 Depth=1
	movl	%eax, %ecx
	shrl	$31, %ecx
	addl	%eax, %ecx
	andl	$-2, %ecx
	subl	%ecx, %eax
	cmpl	$1, %eax
	jne	.LBB63_102
# BB#101:                               # %if.then53
                                        #   in Loop: Header=BB63_15 Depth=1
	movslq	%ebp, %rax
	movq	256(%rsp), %rcx         # 8-byte Reload
	subl	672(%rcx,%rax,4), %ebx
	decl	%ebp
	.align	16, 0x90
.LBB63_102:                             # %if.end58
                                        #   in Loop: Header=BB63_15 Depth=1
	movq	256(%rsp), %rax         # 8-byte Reload
	cmpl	$3, 656(%rax)
	jge	.LBB63_103
.LBB63_104:                             # %for.end95
                                        #   in Loop: Header=BB63_15 Depth=1
	incl	%ebp
	subl	%ebx, %r8d
	cmpl	$1, %r12d
	leal	-1(%r12), %eax
	movl	%ebp, %r13d
	movl	%eax, %r12d
	jg	.LBB63_15
# BB#55:                                # %for.cond100.preheader.loopexit4277
	movq	232(%rsp), %rax         # 8-byte Reload
	movl	%eax, %r15d
	movl	156(%rsp), %ecx         # 4-byte Reload
	movslq	%ecx, %rdi
.LBB63_56:                              # %for.cond100.preheader
	movl	%ecx, 156(%rsp)         # 4-byte Spill
	movq	%rdi, 160(%rsp)         # 8-byte Spill
	movq	%rsi, 144(%rsp)         # 8-byte Spill
	movq	%rax, 232(%rsp)         # 8-byte Spill
	leal	-1(%rax), %r14d
	testl	%ecx, %ecx
	movl	$1, %ebp
	cmovgl	%ecx, %ebp
	decl	%ebp
	cmpl	$6, %eax
	setne	%r12b
	cmpl	$-1, %esi
	setl	%bl
	testq	%r15, %r15
	movl	$1, %eax
	movl	$1, %ecx
	cmovgq	%r15, %rcx
	decq	%rcx
	movq	%rcx, 320(%rsp)         # 8-byte Spill
	testq	%rdi, %rdi
	cmovgq	%rdi, %rax
	movq	%rdi, %r13
	cmpl	$0, "PinFlag-95."(%rip)
	jne	.LBB63_58
# BB#57:
	movl	$.L__unnamed_152, %edi
	movq	%rax, 80(%rsp)          # 8-byte Spill
	movl	$3, %esi
	movl	$518, %edx              # imm = 0x206
	movl	$63, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movq	80(%rsp), %rax          # 8-byte Reload
	movl	$1, "PinFlag-95."(%rip)
.LBB63_58:
	leaq	4(,%r14,4), %rcx
	movq	%rcx, 136(%rsp)         # 8-byte Spill
	leaq	4(,%rbp,4), %rcx
	movq	%rcx, 120(%rsp)         # 8-byte Spill
	leaq	2(%r14,%r14), %rcx
	movq	%rcx, 208(%rsp)         # 8-byte Spill
	orb	%r12b, %bl
	movb	%bl, 128(%rsp)          # 1-byte Spill
	decq	%rax
	movq	%rax, 80(%rsp)          # 8-byte Spill
	movq	256(%rsp), %rax         # 8-byte Reload
	leaq	45448(%rax), %rcx
	movq	%rcx, 168(%rsp)         # 8-byte Spill
	leaq	51648(%rax), %rcx
	movq	%rcx, 96(%rsp)          # 8-byte Spill
	leaq	37708(%rax), %rax
	movq	%rax, 192(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	jmp	.LBB63_59
.LBB63_123:                             # %if.then1671
                                        #   in Loop: Header=BB63_59 Depth=1
	movq	stderr(%rip), %rdi
	movq	176(%rsp), %rax         # 8-byte Reload
	leal	1(%rax), %edx
	movl	%ebp, %ecx
	sarl	$31, %ecx
	shrl	$29, %ecx
	addl	%ebp, %ecx
	sarl	$3, %ecx
	movl	$.L.str.4.69, %esi
	xorl	%eax, %eax
	callq	fprintf
	movq	stderr(%rip), %rbx
	cmpl	$0, "PinFlag-95.3"(%rip)
	jne	.LBB63_125
# BB#124:                               #   in Loop: Header=BB63_59 Depth=1
	movl	$.L__unnamed_153, %edi
	movl	$1, %edx
	movl	$9, %ecx
	movl	$1, %r8d
	movq	320(%rsp), %rsi         # 8-byte Reload
	callq	Pin
	movl	$1, "PinFlag-95.3"(%rip)
.LBB63_125:                             # %for.body1678
                                        #   in Loop: Header=BB63_59 Depth=1
	xorl	%ebp, %ebp
	.align	16, 0x90
.LBB63_126:                             # %for.body1678
                                        #   Parent Loop BB63_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	384(%rsp,%rbp,4), %edx
	movl	$.L.str.5.70, %esi
	xorl	%eax, %eax
	movq	%rbx, %rdi
	callq	fprintf
	incq	%rbp
	movq	stderr(%rip), %rbx
	cmpq	%r15, %rbp
	jl	.LBB63_126
# BB#127:                               # %for.end1684
                                        #   in Loop: Header=BB63_59 Depth=1
	movl	$10, %edi
	movq	%rbx, %rsi
	callq	fputc
	jmp	.LBB63_128
	.align	16, 0x90
.LBB63_59:                              # %for.cond104.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_62 Depth 2
                                        #     Child Loop BB63_66 Depth 2
                                        #     Child Loop BB63_70 Depth 2
                                        #       Child Loop BB63_76 Depth 3
                                        #       Child Loop BB63_81 Depth 3
                                        #         Child Loop BB63_84 Depth 4
                                        #         Child Loop BB63_88 Depth 4
                                        #       Child Loop BB63_110 Depth 3
                                        #       Child Loop BB63_119 Depth 3
                                        #     Child Loop BB63_126 Depth 2
                                        #     Child Loop BB63_131 Depth 2
	xorl	%esi, %esi
	leaq	384(%rsp), %rdi
	movq	136(%rsp), %rdx         # 8-byte Reload
	callq	memset
	movq	144(%rsp), %rax         # 8-byte Reload
	cmpl	$-1, %eax
	movq	256(%rsp), %rbx         # 8-byte Reload
	jl	.LBB63_67
# BB#60:                                # %for.body120.lr.ph.us.preheader
                                        #   in Loop: Header=BB63_59 Depth=1
	movq	%rbx, %r14
	cmpl	$0, "PinFlag-95.0"(%rip)
	movq	168(%rsp), %rbx         # 8-byte Reload
	movl	$0, %ebp
	movq	120(%rsp), %r12         # 8-byte Reload
	jne	.LBB63_62
# BB#61:                                #   in Loop: Header=BB63_59 Depth=1
	movl	$.L__unnamed_154, %edi
	xorl	%edx, %edx
	movl	$7, %ecx
	movl	$1, %r8d
	movq	320(%rsp), %rsi         # 8-byte Reload
	callq	Pin
	movl	$1, "PinFlag-95.0"(%rip)
	movq	168(%rsp), %rbx         # 8-byte Reload
	xorl	%ebp, %ebp
	.align	16, 0x90
.LBB63_62:                              # %for.body120.lr.ph.us
                                        #   Parent Loop BB63_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%esi, %esi
	movq	%rbx, %rdi
	movq	%r12, %rdx
	callq	memset
	incq	%rbp
	addq	$1032, %rbx             # imm = 0x408
	cmpq	%r15, %rbp
	jl	.LBB63_62
# BB#63:                                # %for.end130
                                        #   in Loop: Header=BB63_59 Depth=1
	cmpb	$0, 128(%rsp)           # 1-byte Folded Reload
	movq	%r14, %rbx
	jne	.LBB63_67
# BB#64:                                # %for.body137.preheader
                                        #   in Loop: Header=BB63_59 Depth=1
	cmpl	$0, "PinFlag-95.1"(%rip)
	movq	96(%rsp), %rax          # 8-byte Reload
	movl	$0, %ecx
	jne	.LBB63_66
# BB#65:                                #   in Loop: Header=BB63_59 Depth=1
	movl	$.L__unnamed_155, %edi
	xorl	%edx, %edx
	movl	$34, %ecx
	movl	$1, %r8d
	movq	80(%rsp), %rsi          # 8-byte Reload
	callq	Pin
	movl	$1, "PinFlag-95.1"(%rip)
	movq	96(%rsp), %rax          # 8-byte Reload
	xorl	%ecx, %ecx
	.align	16, 0x90
.LBB63_66:                              # %for.body137
                                        #   Parent Loop BB63_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	37966(%rbx,%rcx), %edx
	shll	$16, %edx
	movzbl	37708(%rbx,%rcx), %esi
	orl	%edx, %esi
	movl	%esi, -8(%rax)
	movzbl	38482(%rbx,%rcx), %edx
	shll	$16, %edx
	movzbl	38224(%rbx,%rcx), %esi
	orl	%edx, %esi
	movl	%esi, -4(%rax)
	movzbl	38998(%rbx,%rcx), %edx
	shll	$16, %edx
	movzbl	38740(%rbx,%rcx), %esi
	orl	%edx, %esi
	movl	%esi, (%rax)
	incq	%rcx
	addq	$16, %rax
	cmpq	%r13, %rcx
	jl	.LBB63_66
.LBB63_67:                              # %while.body188.preheader
                                        #   in Loop: Header=BB63_59 Depth=1
	movl	668(%rbx), %r14d
	xorl	%ebp, %ebp
	testl	%r14d, %r14d
	movl	$0, %eax
	movq	%rax, 288(%rsp)         # 8-byte Spill
	jle	.LBB63_122
# BB#68:                                # %if.end193.preheader
                                        #   in Loop: Header=BB63_59 Depth=1
	xorl	%eax, %eax
	movq	%rax, 288(%rsp)         # 8-byte Spill
	cmpl	$0, "PinFlag-95.2"(%rip)
	jne	.LBB63_69
# BB#105:                               #   in Loop: Header=BB63_59 Depth=1
	xorl	%eax, %eax
	movq	%rax, 288(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_156, %edi
	movl	$1, %esi
	movl	$91887, %edx            # imm = 0x166EF
	movl	$1276, %ecx             # imm = 0x4FC
	xorl	%r8d, %r8d
	callq	Pin
	movl	$1, "PinFlag-95.2"(%rip)
.LBB63_69:                              #   in Loop: Header=BB63_59 Depth=1
	xorl	%r12d, %r12d
	xorl	%ebp, %ebp
	.align	16, 0x90
.LBB63_70:                              # %if.end193
                                        #   Parent Loop BB63_59 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_76 Depth 3
                                        #       Child Loop BB63_81 Depth 3
                                        #         Child Loop BB63_84 Depth 4
                                        #         Child Loop BB63_88 Depth 4
                                        #       Child Loop BB63_110 Depth 3
                                        #       Child Loop BB63_119 Depth 3
	movl	%ebp, 272(%rsp)         # 4-byte Spill
	movq	232(%rsp), %rax         # 8-byte Reload
	cmpl	$6, %eax
	sete	%r13b
	leal	49(%r12), %ebx
	leal	-1(%r14), %ebp
	xorl	%esi, %esi
	leaq	412(%rsp), %rdi
	movq	208(%rsp), %rdx         # 8-byte Reload
	callq	memset
	movq	%rbp, %rcx
	cmpl	%r14d, %ebx
	cmovll	%ebx, %ecx
	movl	%ecx, %eax
	subl	%r12d, %eax
	cmpl	$49, %eax
	sete	%al
	andb	%r13b, %al
	je	.LBB63_71
# BB#106:                               # %if.then219
                                        #   in Loop: Header=BB63_70 Depth=2
	movb	%al, 264(%rsp)          # 1-byte Spill
	movq	%rcx, 328(%rsp)         # 8-byte Spill
	movslq	%r12d, %rsi
	movq	%r12, 304(%rsp)         # 8-byte Spill
	movq	240(%rsp), %r8          # 8-byte Reload
	movzwl	(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	movzwl	2(%r8,%rsi,2), %eax
	shlq	$4, %rax
	movq	256(%rsp), %rbp         # 8-byte Reload
	movl	51640(%rbp,%rax), %edx
	movl	51644(%rbp,%rax), %ecx
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	movl	51648(%rbp,%rax), %eax
	addl	51648(%rbp,%rdi), %eax
	movzwl	4(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	6(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	8(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	10(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	12(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	14(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	16(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	18(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	20(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	22(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	24(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	26(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	28(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	30(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	32(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	34(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	36(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	38(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	40(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	42(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	44(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	46(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	48(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	50(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	52(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	54(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	56(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	58(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	60(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	62(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	64(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	66(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	68(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	70(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	72(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	74(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	76(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	78(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	80(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	82(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	84(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	86(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	88(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	90(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	92(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	94(%r8,%rsi,2), %edi
	shlq	$4, %rdi
	addl	51640(%rbp,%rdi), %edx
	addl	51644(%rbp,%rdi), %ecx
	addl	51648(%rbp,%rdi), %eax
	movzwl	96(%r8,%rsi,2), %esi
	shlq	$4, %rsi
	addl	51640(%rbp,%rsi), %edx
	addl	51644(%rbp,%rsi), %ecx
	addl	51648(%rbp,%rsi), %eax
	movslq	%ebx, %rsi
	movl	%ebx, 248(%rsp)         # 4-byte Spill
	movzwl	(%r8,%rsi,2), %esi
	shlq	$4, %rsi
	addl	51640(%rbp,%rsi), %edx
	addl	51644(%rbp,%rsi), %ecx
	addl	51648(%rbp,%rsi), %eax
	movw	%dx, 412(%rsp)
	shrl	$16, %edx
	movw	%dx, 414(%rsp)
	movw	%cx, 416(%rsp)
	shrl	$16, %ecx
	movw	%cx, 418(%rsp)
	movw	%ax, 420(%rsp)
	shrl	$16, %eax
	movw	%ax, 422(%rsp)
	jmp	.LBB63_107
	.align	16, 0x90
.LBB63_71:                              # %for.cond1137.preheader
                                        #   in Loop: Header=BB63_70 Depth=2
	movb	%al, 264(%rsp)          # 1-byte Spill
	movl	%ebx, 248(%rsp)         # 4-byte Spill
	cmpl	%r12d, %ecx
	movq	%r12, 304(%rsp)         # 8-byte Spill
	movq	%rcx, 328(%rsp)         # 8-byte Spill
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %r14         # 8-byte Reload
	jl	.LBB63_107
# BB#72:                                # %for.body1140.preheader
                                        #   in Loop: Header=BB63_70 Depth=2
	movq	304(%rsp), %rdx         # 8-byte Reload
	movslq	%edx, %rbp
	movq	328(%rsp), %rcx         # 8-byte Reload
	leal	1(%rcx), %eax
	subl	%edx, %eax
	testb	$1, %al
	je	.LBB63_78
# BB#73:                                # %for.body1140.prol
                                        #   in Loop: Header=BB63_70 Depth=2
	movq	%rcx, %r13
	movzwl	(%r8,%rbp,2), %ebx
	cmpl	$0, "PinFlag-95.20"(%rip)
	jne	.LBB63_75
# BB#74:                                #   in Loop: Header=BB63_70 Depth=2
	movl	$.L__unnamed_157, %edi
	movl	$11, %edx
	movl	$11, %ecx
	movq	%r8, %r12
	movl	$1, %r8d
	movq	320(%rsp), %rsi         # 8-byte Reload
	callq	Pin
	movq	%r12, %r8
	movl	$1, "PinFlag-95.20"(%rip)
.LBB63_75:                              #   in Loop: Header=BB63_70 Depth=2
	addq	%r14, %rbx
	xorl	%eax, %eax
	.align	16, 0x90
.LBB63_76:                              # %for.body1147.prol
                                        #   Parent Loop BB63_59 Depth=1
                                        #     Parent Loop BB63_70 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movzbl	(%rbx), %ecx
	addw	%cx, 412(%rsp,%rax,2)
	incq	%rax
	addq	$258, %rbx              # imm = 0x102
	cmpq	%r15, %rax
	jl	.LBB63_76
# BB#77:                                # %for.end1161.prol
                                        #   in Loop: Header=BB63_70 Depth=2
	incq	%rbp
	movq	%r13, %rcx
.LBB63_78:                              # %for.body1140.preheader.split
                                        #   in Loop: Header=BB63_70 Depth=2
	movq	%rcx, 328(%rsp)         # 8-byte Spill
	movq	304(%rsp), %rax         # 8-byte Reload
	cmpl	%eax, %ecx
	je	.LBB63_107
# BB#79:                                # %for.body1140.preheader.split.split
                                        #   in Loop: Header=BB63_70 Depth=2
	movq	328(%rsp), %rax         # 8-byte Reload
	movslq	%eax, %r12
	leaq	1(%rbp), %rsi
	cmpq	%r12, %rsi
	cmovlq	%r12, %rsi
	cmpl	$0, "PinFlag-95.21"(%rip)
	jne	.LBB63_81
# BB#80:                                #   in Loop: Header=BB63_70 Depth=2
	subq	%rbp, %rsi
	shrq	%rsi
	movl	$.L__unnamed_158, %edi
	movl	$26, %edx
	movl	$25, %ecx
	movq	%r8, %rbx
	xorl	%r8d, %r8d
	callq	Pin
	movq	%rbx, %r8
	movl	$1, "PinFlag-95.21"(%rip)
	.align	16, 0x90
.LBB63_81:                              # %for.body1140
                                        #   Parent Loop BB63_59 Depth=1
                                        #     Parent Loop BB63_70 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB63_84 Depth 4
                                        #         Child Loop BB63_88 Depth 4
	movzwl	(%r8,%rbp,2), %ebx
	cmpl	$0, "PinFlag-95.210"(%rip)
	jne	.LBB63_83
# BB#82:                                #   in Loop: Header=BB63_81 Depth=3
	movl	$.L__unnamed_159, %edi
	movl	$20, %edx
	movl	$11, %ecx
	movq	%r8, %r13
	movl	$1, %r8d
	movq	320(%rsp), %rsi         # 8-byte Reload
	callq	Pin
	movq	%r13, %r8
	movl	$1, "PinFlag-95.210"(%rip)
.LBB63_83:                              #   in Loop: Header=BB63_81 Depth=3
	addq	%r14, %rbx
	xorl	%eax, %eax
	.align	16, 0x90
.LBB63_84:                              # %for.body1147
                                        #   Parent Loop BB63_59 Depth=1
                                        #     Parent Loop BB63_70 Depth=2
                                        #       Parent Loop BB63_81 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movzbl	(%rbx), %ecx
	addw	%cx, 412(%rsp,%rax,2)
	incq	%rax
	addq	$258, %rbx              # imm = 0x102
	cmpq	%r15, %rax
	jl	.LBB63_84
# BB#85:                                # %for.end1161
                                        #   in Loop: Header=BB63_81 Depth=3
	movzwl	2(%r8,%rbp,2), %ebx
	cmpl	$0, "PinFlag-95.211"(%rip)
	jne	.LBB63_87
# BB#86:                                #   in Loop: Header=BB63_81 Depth=3
	movl	$.L__unnamed_160, %edi
	movl	$20, %edx
	movl	$11, %ecx
	movq	%r8, %r13
	movl	$1, %r8d
	movq	320(%rsp), %rsi         # 8-byte Reload
	callq	Pin
	movq	%r13, %r8
	movl	$1, "PinFlag-95.211"(%rip)
.LBB63_87:                              #   in Loop: Header=BB63_81 Depth=3
	leaq	1(%rbp), %rax
	addq	%r14, %rbx
	xorl	%ecx, %ecx
	.align	16, 0x90
.LBB63_88:                              # %for.body1147.1
                                        #   Parent Loop BB63_59 Depth=1
                                        #     Parent Loop BB63_70 Depth=2
                                        #       Parent Loop BB63_81 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movzbl	(%rbx), %edx
	addw	%dx, 412(%rsp,%rcx,2)
	incq	%rcx
	addq	$258, %rbx              # imm = 0x102
	cmpq	%r15, %rcx
	jl	.LBB63_88
# BB#89:                                # %for.end1161.1
                                        #   in Loop: Header=BB63_81 Depth=3
	addq	$2, %rbp
	cmpq	%r12, %rax
	jl	.LBB63_81
	.align	16, 0x90
.LBB63_107:                             # %for.body1169.preheader
                                        #   in Loop: Header=BB63_70 Depth=2
	movl	$999999999, %ebp        # imm = 0x3B9AC9FF
	movl	$-1, %ebx
	cmpl	$0, "PinFlag-95.22"(%rip)
	jne	.LBB63_109
# BB#108:                               #   in Loop: Header=BB63_70 Depth=2
	movl	$.L__unnamed_161, %edi
	movl	$1, %edx
	movl	$13, %ecx
	movq	%r8, %r12
	movl	$1, %r8d
	movq	320(%rsp), %rsi         # 8-byte Reload
	callq	Pin
	movq	%r12, %r8
	movl	$1, "PinFlag-95.22"(%rip)
.LBB63_109:                             # %for.body1169
                                        #   in Loop: Header=BB63_70 Depth=2
	xorl	%eax, %eax
	movq	304(%rsp), %rdi         # 8-byte Reload
	movb	264(%rsp), %dl          # 1-byte Reload
	.align	16, 0x90
.LBB63_110:                             # %for.body1169
                                        #   Parent Loop BB63_59 Depth=1
                                        #     Parent Loop BB63_70 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movzwl	412(%rsp,%rax,2), %ecx
	cmpl	%ebp, %ecx
	cmovlel	%ecx, %ebp
	cmovll	%eax, %ebx
	incq	%rax
	cmpq	%r15, %rax
	jl	.LBB63_110
# BB#111:                               # %for.end1182
                                        #   in Loop: Header=BB63_70 Depth=2
	movslq	%ebx, %r12
	incl	384(%rsp,%r12,4)
	movq	288(%rsp), %rax         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movb	%r12b, 1704(%rsi,%rax)
	testb	$1, %dl
	je	.LBB63_112
# BB#365:                               # %if.then1198
                                        #   in Loop: Header=BB63_70 Depth=2
	movslq	%edi, %rcx
	movzwl	(%r8,%rcx,2), %edx
	imulq	$1032, %r12, %rax       # imm = 0x408
	addq	%rsi, %rax
	incl	45448(%rax,%rdx,4)
	movzwl	2(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	4(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	6(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	8(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	10(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	12(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	14(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	16(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	18(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	20(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	22(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	24(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	26(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	28(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	30(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	32(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	34(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	36(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	38(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	40(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	42(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	44(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	46(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	48(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	50(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	52(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	54(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	56(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	58(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	60(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	62(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	64(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	66(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	68(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	70(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	72(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	74(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	76(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	78(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	80(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	82(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	84(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	86(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	88(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	90(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	92(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	94(%r8,%rcx,2), %edx
	incl	45448(%rax,%rdx,4)
	movzwl	96(%r8,%rcx,2), %ecx
	incl	45448(%rax,%rcx,4)
	movslq	248(%rsp), %rcx         # 4-byte Folded Reload
	movzwl	(%r8,%rcx,2), %ecx
	incl	45448(%rax,%rcx,4)
	jmp	.LBB63_120
	.align	16, 0x90
.LBB63_112:                             # %for.cond1650.preheader
                                        #   in Loop: Header=BB63_70 Depth=2
	movq	328(%rsp), %rax         # 8-byte Reload
	cmpl	%edi, %eax
	jl	.LBB63_120
# BB#113:                               # %for.body1653.preheader
                                        #   in Loop: Header=BB63_70 Depth=2
	movslq	%edi, %rbx
	movq	328(%rsp), %rcx         # 8-byte Reload
	leal	1(%rcx), %eax
	subl	%edi, %eax
	testb	$1, %al
	je	.LBB63_115
# BB#114:                               # %for.body1653.prol
                                        #   in Loop: Header=BB63_70 Depth=2
	movzwl	(%r8,%rbx,2), %eax
	movq	%rcx, %rdx
	imulq	$1032, %r12, %rcx       # imm = 0x408
	addq	%rsi, %rcx
	incl	45448(%rcx,%rax,4)
	movq	%rdx, %rcx
	incq	%rbx
.LBB63_115:                             # %for.body1653.preheader.split
                                        #   in Loop: Header=BB63_70 Depth=2
	movq	%rcx, 328(%rsp)         # 8-byte Spill
	cmpl	%edi, %ecx
	je	.LBB63_120
# BB#116:                               # %for.body1653.preheader.split.split
                                        #   in Loop: Header=BB63_70 Depth=2
	movq	%rsi, %r14
	movq	328(%rsp), %rax         # 8-byte Reload
	movslq	%eax, %r13
	leaq	1(%rbx), %rsi
	cmpq	%r13, %rsi
	cmovlq	%r13, %rsi
	cmpl	$0, "PinFlag-95.23"(%rip)
	jne	.LBB63_118
# BB#117:                               #   in Loop: Header=BB63_70 Depth=2
	subq	%rbx, %rsi
	shrq	%rsi
	movl	$.L__unnamed_162, %edi
	movl	$126, %edx
	movl	$19, %ecx
	movl	$1, %r8d
	callq	Pin
	movq	240(%rsp), %r8          # 8-byte Reload
	movl	$1, "PinFlag-95.23"(%rip)
.LBB63_118:                             #   in Loop: Header=BB63_70 Depth=2
	decq	%rbx
	movq	%r14, %rsi
	.align	16, 0x90
.LBB63_119:                             # %for.body1653
                                        #   Parent Loop BB63_59 Depth=1
                                        #     Parent Loop BB63_70 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movzwl	2(%r8,%rbx,2), %eax
	imulq	$1032, %r12, %rcx       # imm = 0x408
	addq	%rsi, %rcx
	incl	45448(%rcx,%rax,4)
	movzwl	4(%r8,%rbx,2), %eax
	incl	45448(%rcx,%rax,4)
	addq	$2, %rbx
	cmpq	%r13, %rbx
	jl	.LBB63_119
	.align	16, 0x90
.LBB63_120:                             # %if.end1665
                                        #   in Loop: Header=BB63_70 Depth=2
	addl	272(%rsp), %ebp         # 4-byte Folded Reload
	incq	288(%rsp)               # 8-byte Folded Spill
	movq	328(%rsp), %rax         # 8-byte Reload
	incl	%eax
	movl	668(%rsi), %r14d
	cmpl	%r14d, %eax
	movl	%eax, %r12d
	jl	.LBB63_70
# BB#121:                               # %while.end1667.loopexit
                                        #   in Loop: Header=BB63_59 Depth=1
	movq	160(%rsp), %r13         # 8-byte Reload
.LBB63_122:                             # %while.end1667
                                        #   in Loop: Header=BB63_59 Depth=1
	movq	256(%rsp), %rax         # 8-byte Reload
	cmpl	$3, 656(%rax)
	jge	.LBB63_123
.LBB63_128:                             # %for.body1690.preheader
                                        #   in Loop: Header=BB63_59 Depth=1
	cmpl	$0, "PinFlag-95.4"(%rip)
	movq	192(%rsp), %rbx         # 8-byte Reload
	jne	.LBB63_130
# BB#129:                               #   in Loop: Header=BB63_59 Depth=1
	movl	$.L__unnamed_163, %edi
	xorl	%edx, %edx
	movl	$7, %ecx
	movl	$1, %r8d
	movq	320(%rsp), %rsi         # 8-byte Reload
	callq	Pin
	movl	$1, "PinFlag-95.4"(%rip)
.LBB63_130:                             # %for.body1690
                                        #   in Loop: Header=BB63_59 Depth=1
	movq	168(%rsp), %r12         # 8-byte Reload
	xorl	%ebp, %ebp
	movl	156(%rsp), %r14d        # 4-byte Reload
	.align	16, 0x90
.LBB63_131:                             # %for.body1690
                                        #   Parent Loop BB63_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	$17, %ecx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r14d, %edx
	callq	BZ2_hbMakeCodeLengths
	incq	%rbp
	addq	$1032, %r12             # imm = 0x408
	addq	$258, %rbx              # imm = 0x102
	cmpq	%r15, %rbp
	jl	.LBB63_131
# BB#132:                               # %for.inc1702
                                        #   in Loop: Header=BB63_59 Depth=1
	movq	176(%rsp), %rax         # 8-byte Reload
	incl	%eax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	cmpl	$4, %eax
	jne	.LBB63_59
# BB#133:                               # %if.end1708
	movq	288(%rsp), %rax         # 8-byte Reload
	cmpl	$18003, %eax            # imm = 0x4653
	jl	.LBB63_135
# BB#134:                               # %if.then1714
	movl	$3003, %edi             # imm = 0xBBB
	callq	BZ2_bz__AssertH__fail
.LBB63_135:                             # %if.end1715
	cmpq	$1, %r15
	movl	$1, %eax
	cmovaq	%r15, %rax
	xorl	%edx, %edx
	cmpq	$31, %rax
	movl	$0, %esi
	jbe	.LBB63_159
# BB#136:                               # %min.iters.checked4396
	movl	$4294967264, %ecx       # imm = 0xFFFFFFE0
	xorl	%edx, %edx
	andq	%rax, %rcx
	movl	$0, %esi
	je	.LBB63_159
# BB#137:                               # %vector.body4391.preheader
	cmpq	$1, %r15
	movl	$1, %edi
	cmovaq	%r15, %rdi
	andl	$-32, %edi
	addq	$-32, %rdi
	movq	%rdi, %rsi
	shrq	$5, %rsi
	xorl	%edx, %edx
	btq	$5, %rdi
	jb	.LBB63_139
# BB#138:                               # %vector.body4391.prol
	movaps	.LCPI63_12(%rip), %xmm0 # xmm0 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
	movaps	%xmm0, 368(%rsp)
	movapd	.LCPI63_13(%rip), %xmm0 # xmm0 = [16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]
	movapd	%xmm0, 384(%rsp)
	movl	$32, %edx
.LBB63_139:                             # %vector.body4391.preheader.split
	testq	%rsi, %rsi
	je	.LBB63_142
# BB#140:                               # %vector.body4391.preheader.split.split
	movdqa	.LCPI63_14(%rip), %xmm8 # xmm8 = [0,1,2,3]
	movdqa	.LCPI63_15(%rip), %xmm9 # xmm9 = [4,5,6,7]
	movdqa	.LCPI63_16(%rip), %xmm10 # xmm10 = [8,9,10,11]
	movdqa	.LCPI63_17(%rip), %xmm11 # xmm11 = [12,13,14,15]
	movdqa	.LCPI63_18(%rip), %xmm12 # xmm12 = [16,17,18,19]
	movdqa	.LCPI63_19(%rip), %xmm13 # xmm13 = [20,21,22,23]
	movdqa	.LCPI63_20(%rip), %xmm6 # xmm6 = [24,25,26,27]
	movdqa	.LCPI63_21(%rip), %xmm7 # xmm7 = [28,29,30,31]
	movdqa	.LCPI63_22(%rip), %xmm0 # xmm0 = [255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0]
	.align	16, 0x90
.LBB63_141:                             # %vector.body4391
                                        # =>This Inner Loop Header: Depth=1
	movd	%edx, %xmm1
	pshufd	$0, %xmm1, %xmm1        # xmm1 = xmm1[0,0,0,0]
	movdqa	%xmm1, %xmm2
	paddd	%xmm8, %xmm2
	movdqa	%xmm1, %xmm3
	paddd	%xmm9, %xmm3
	movdqa	%xmm1, %xmm4
	paddd	%xmm10, %xmm4
	movdqa	%xmm1, %xmm5
	paddd	%xmm11, %xmm5
	pand	%xmm0, %xmm5
	pand	%xmm0, %xmm4
	packuswb	%xmm5, %xmm4
	movdqa	%xmm1, %xmm5
	paddd	%xmm12, %xmm5
	pand	%xmm0, %xmm3
	pand	%xmm0, %xmm2
	packuswb	%xmm3, %xmm2
	movdqa	%xmm1, %xmm3
	paddd	%xmm13, %xmm3
	packuswb	%xmm4, %xmm2
	movdqa	%xmm1, %xmm4
	paddd	%xmm6, %xmm4
	paddd	%xmm7, %xmm1
	pand	%xmm0, %xmm1
	pand	%xmm0, %xmm4
	packuswb	%xmm1, %xmm4
	pand	%xmm0, %xmm3
	pand	%xmm0, %xmm5
	packuswb	%xmm3, %xmm5
	packuswb	%xmm4, %xmm5
	movdqa	%xmm2, 368(%rsp,%rdx)
	movdqa	%xmm5, 384(%rsp,%rdx)
	leal	32(%rdx), %esi
	movd	%esi, %xmm1
	pshufd	$0, %xmm1, %xmm2        # xmm2 = xmm1[0,0,0,0]
	movdqa	%xmm2, %xmm1
	paddd	%xmm8, %xmm1
	movdqa	%xmm2, %xmm3
	paddd	%xmm9, %xmm3
	movdqa	%xmm2, %xmm4
	paddd	%xmm10, %xmm4
	movdqa	%xmm2, %xmm5
	paddd	%xmm11, %xmm5
	pand	%xmm0, %xmm5
	pand	%xmm0, %xmm4
	packuswb	%xmm5, %xmm4
	movdqa	%xmm2, %xmm5
	pand	%xmm0, %xmm3
	pand	%xmm0, %xmm1
	packuswb	%xmm3, %xmm1
	movdqa	%xmm2, %xmm3
	packuswb	%xmm4, %xmm1
	movdqa	%xmm2, %xmm4
	paddd	%xmm6, %xmm4
	paddd	%xmm7, %xmm2
	pand	%xmm0, %xmm2
	pand	%xmm0, %xmm4
	packuswb	%xmm2, %xmm4
	paddd	%xmm12, %xmm5
	paddd	%xmm13, %xmm3
	pand	%xmm0, %xmm3
	pand	%xmm0, %xmm5
	packuswb	%xmm3, %xmm5
	packuswb	%xmm4, %xmm5
	movdqa	%xmm1, 400(%rsp,%rdx)
	movdqu	%xmm5, 416(%rsp,%rdx)
	addq	$64, %rdx
	cmpq	%rcx, %rdx
	jne	.LBB63_141
.LBB63_142:                             # %middle.block4392
	cmpq	%rcx, %rax
	movq	%rcx, %rdx
	movl	%ecx, %esi
	je	.LBB63_143
	.align	16, 0x90
.LBB63_159:                             # %for.body1719
                                        # =>This Inner Loop Header: Depth=1
	movb	%sil, 368(%rsp,%rdx)
	incq	%rdx
	incb	%sil
	cmpq	%r15, %rdx
	jl	.LBB63_159
.LBB63_143:                             # %for.cond1726.preheader
	movq	288(%rsp), %rax         # 8-byte Reload
	testl	%eax, %eax
	movq	144(%rsp), %rsi         # 8-byte Reload
	movq	%r13, %rdi
	movq	%rdi, 160(%rsp)         # 8-byte Spill
	movq	256(%rsp), %r13         # 8-byte Reload
	jle	.LBB63_165
# BB#144:                               # %for.body1729.preheader
	movb	368(%rsp), %bpl
	xorl	%r12d, %r12d
	movq	288(%rsp), %rax         # 8-byte Reload
	testb	$1, %al
	jne	.LBB63_146
# BB#145:
	movb	%bpl, %bl
	jmp	.LBB63_153
.LBB63_146:                             # %for.body1729.prol
	movzbl	1704(%r13), %ebx
	movzbl	%bpl, %eax
	cmpl	%eax, %ebx
	jne	.LBB63_148
# BB#147:
	xorl	%eax, %eax
	jmp	.LBB63_152
.LBB63_148:                             # %while.body1740.preheader.prol
	cmpl	$0, "PinFlag-92."(%rip)
	jne	.LBB63_150
# BB#149:
	movq	%rdi, 160(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_164, %edi
	movq	%rsi, %r12
	movl	$1, %esi
	movl	$1, %edx
	movl	$8, %ecx
	movl	$1, %r8d
	callq	Pin
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	%r12, %rsi
	movl	$1, "PinFlag-92."(%rip)
.LBB63_150:
	xorl	%eax, %eax
	movzbl	%bl, %ecx
	.align	16, 0x90
.LBB63_151:                             # %while.body1740.prol
                                        # =>This Inner Loop Header: Depth=1
	movzbl	369(%rsp,%rax), %edx
	movb	%bpl, 369(%rsp,%rax)
	incq	%rax
	cmpl	%edx, %ecx
	movb	%dl, %bpl
	jne	.LBB63_151
.LBB63_152:                             # %while.end1746.prol
	movb	%bl, 368(%rsp)
	movb	%al, 19706(%r13)
	movl	$1, %r12d
.LBB63_153:                             # %for.body1729.preheader.split
	movq	288(%rsp), %rax         # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB63_165
# BB#154:                               # %for.body1729.preheader.split.split
	movq	%r13, %r14
	movq	%rsi, %rbp
	cmpl	$0, "PinFlag-91."(%rip)
	jne	.LBB63_155
# BB#158:
	movq	%rdi, %r13
	movl	$.L__unnamed_165, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$43, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movq	%r13, %rdi
	movl	$1, "PinFlag-91."(%rip)
.LBB63_155:
	movq	%rbp, %rsi
	movq	%r14, %r13
	.align	16, 0x90
.LBB63_156:                             # %for.body1729
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_162 Depth 2
                                        #     Child Loop BB63_363 Depth 2
	movzbl	1704(%r13,%r12), %ebp
	movzbl	%bl, %eax
	cmpl	%eax, %ebp
	jne	.LBB63_160
# BB#157:                               #   in Loop: Header=BB63_156 Depth=1
	xorl	%eax, %eax
	jmp	.LBB63_163
	.align	16, 0x90
.LBB63_160:                             # %while.body1740.preheader
                                        #   in Loop: Header=BB63_156 Depth=1
	xorl	%eax, %eax
	cmpl	$0, "PinFlag-91.0"(%rip)
	jne	.LBB63_162
# BB#161:                               #   in Loop: Header=BB63_156 Depth=1
	movl	$.L__unnamed_166, %edi
	movq	%rsi, %r14
	movl	$1, %esi
	movl	$4, %edx
	movl	$8, %ecx
	movl	$1, %r8d
	callq	Pin
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	%r14, %rsi
	movl	$1, "PinFlag-91.0"(%rip)
	xorl	%eax, %eax
	.align	16, 0x90
.LBB63_162:                             # %while.body1740
                                        #   Parent Loop BB63_156 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	369(%rsp,%rax), %ecx
	movb	%bl, 369(%rsp,%rax)
	incq	%rax
	movzbl	%bpl, %edx
	cmpl	%ecx, %edx
	movb	%cl, %bl
	jne	.LBB63_162
.LBB63_163:                             # %while.end1746
                                        #   in Loop: Header=BB63_156 Depth=1
	movb	%bpl, 368(%rsp)
	movb	%al, 19706(%r12,%r13)
	movzbl	1705(%r12,%r13), %ebx
	movq	%r13, %r14
	movzbl	%bpl, %eax
	cmpl	%eax, %ebx
	jne	.LBB63_360
# BB#164:                               #   in Loop: Header=BB63_156 Depth=1
	xorl	%eax, %eax
	jmp	.LBB63_364
	.align	16, 0x90
.LBB63_360:                             # %while.body1740.preheader.1
                                        #   in Loop: Header=BB63_156 Depth=1
	movq	%rsi, %r13
	xorl	%eax, %eax
	cmpl	$0, "PinFlag-91.1"(%rip)
	jne	.LBB63_362
# BB#361:                               #   in Loop: Header=BB63_156 Depth=1
	movl	$.L__unnamed_167, %edi
	movl	$1, %esi
	movl	$4, %edx
	movl	$8, %ecx
	movl	$1, %r8d
	callq	Pin
	movq	160(%rsp), %rdi         # 8-byte Reload
	movl	$1, "PinFlag-91.1"(%rip)
	xorl	%eax, %eax
.LBB63_362:                             # %while.body1740.1
                                        #   in Loop: Header=BB63_156 Depth=1
	movq	%r13, %rsi
	.align	16, 0x90
.LBB63_363:                             # %while.body1740.1
                                        #   Parent Loop BB63_156 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	369(%rsp,%rax), %ecx
	movb	%bpl, 369(%rsp,%rax)
	incq	%rax
	movzbl	%bl, %edx
	cmpl	%ecx, %edx
	movb	%cl, %bpl
	jne	.LBB63_363
.LBB63_364:                             # %while.end1746.1
                                        #   in Loop: Header=BB63_156 Depth=1
	movb	%bl, 368(%rsp)
	movq	%r14, %r13
	movb	%al, 19707(%r13,%r12)
	addq	$2, %r12
	movq	288(%rsp), %rax         # 8-byte Reload
	cmpl	%eax, %r12d
	jne	.LBB63_156
.LBB63_165:                             # %for.end1753
	cmpl	$-2, %esi
	jle	.LBB63_166
# BB#208:                               # %for.body1761.lr.ph.us.preheader
	testq	%rdi, %rdi
	movl	$1, %esi
	movl	$1, %eax
	cmovgq	%rdi, %rax
	movq	%rax, 304(%rsp)         # 8-byte Spill
	andq	$-8, %rax
	movq	%rax, 264(%rsp)         # 8-byte Spill
	leaq	-8(%rax), %rbx
	testq	%r15, %r15
	cmovgq	%r15, %rsi
	cmpl	$0, "PinFlag-89."(%rip)
	jne	.LBB63_210
# BB#209:
	decq	%rsi
	movq	%rdi, %r14
	movl	$.L__unnamed_168, %edi
	xorl	%edx, %edx
	movl	$71, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movq	%r14, %rdi
	movl	$1, "PinFlag-89."(%rip)
.LBB63_210:
	movq	%rdi, 160(%rsp)         # 8-byte Spill
	shrq	$3, %rbx
	movq	%rbx, 208(%rsp)         # 8-byte Spill
	testq	%rdi, %rdi
	movl	$1, %eax
	cmovgq	%rdi, %rax
	andq	$-8, %rax
	movq	%rax, 248(%rsp)         # 8-byte Spill
	leaq	37712(%r13), %rax
	movq	%rax, 272(%rsp)         # 8-byte Spill
	leaq	37708(%r13), %rdi
	xorl	%eax, %eax
	movq	%rax, 328(%rsp)         # 8-byte Spill
	.align	16, 0x90
.LBB63_215:                             # %for.body1761.lr.ph.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_225 Depth 2
                                        #     Child Loop BB63_220 Depth 2
	movl	$32, %ebx
	cmpq	$7, 304(%rsp)           # 8-byte Folded Reload
	ja	.LBB63_221
# BB#216:                               #   in Loop: Header=BB63_215 Depth=1
	xorl	%r12d, %r12d
	xorl	%ebp, %ebp
	movq	160(%rsp), %rdx         # 8-byte Reload
	jmp	.LBB63_217
	.align	16, 0x90
.LBB63_221:                             # %min.iters.checked4421
                                        #   in Loop: Header=BB63_215 Depth=1
	xorl	%r12d, %r12d
	cmpq	$0, 264(%rsp)           # 8-byte Folded Reload
	movl	$0, %ebp
	movq	160(%rsp), %rdx         # 8-byte Reload
	je	.LBB63_217
# BB#222:                               # %vector.body4416.preheader
                                        #   in Loop: Header=BB63_215 Depth=1
	xorpd	%xmm1, %xmm1
	cmpl	$0, "PinFlag-89.0"(%rip)
	jne	.LBB63_224
# BB#223:                               #   in Loop: Header=BB63_215 Depth=1
	movq	%rdx, %rbx
	movq	%rdi, %rbp
	movl	$.L__unnamed_169, %edi
	movl	$6, %edx
	movl	$24, %ecx
	movl	$1, %r8d
	movq	208(%rsp), %rsi         # 8-byte Reload
	callq	Pin
	xorpd	%xmm1, %xmm1
	movq	%rbp, %rdi
	movq	%rbx, %rdx
	movl	$1, "PinFlag-89.0"(%rip)
.LBB63_224:                             # %vector.body4416
                                        #   in Loop: Header=BB63_215 Depth=1
	movq	272(%rsp), %rax         # 8-byte Reload
	movq	248(%rsp), %rcx         # 8-byte Reload
	movdqa	.LCPI63_23(%rip), %xmm0 # xmm0 = [32,32,32,32]
	movdqa	%xmm0, %xmm9
	pxor	%xmm2, %xmm2
	pxor	%xmm8, %xmm8
	.align	16, 0x90
.LBB63_225:                             # %vector.body4416
                                        #   Parent Loop BB63_215 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movd	-4(%rax), %xmm4         # xmm4 = mem[0],zero,zero,zero
	movd	(%rax), %xmm3           # xmm3 = mem[0],zero,zero,zero
	punpcklbw	%xmm8, %xmm4    # xmm4 = xmm4[0],xmm8[0],xmm4[1],xmm8[1],xmm4[2],xmm8[2],xmm4[3],xmm8[3],xmm4[4],xmm8[4],xmm4[5],xmm8[5],xmm4[6],xmm8[6],xmm4[7],xmm8[7]
	punpcklwd	%xmm8, %xmm4    # xmm4 = xmm4[0],xmm8[0],xmm4[1],xmm8[1],xmm4[2],xmm8[2],xmm4[3],xmm8[3]
	punpcklbw	%xmm8, %xmm3    # xmm3 = xmm3[0],xmm8[0],xmm3[1],xmm8[1],xmm3[2],xmm8[2],xmm3[3],xmm8[3],xmm3[4],xmm8[4],xmm3[5],xmm8[5],xmm3[6],xmm8[6],xmm3[7],xmm8[7]
	punpcklwd	%xmm8, %xmm3    # xmm3 = xmm3[0],xmm8[0],xmm3[1],xmm8[1],xmm3[2],xmm8[2],xmm3[3],xmm8[3]
	movdqa	%xmm4, %xmm5
	pcmpgtd	%xmm1, %xmm5
	movdqa	%xmm3, %xmm6
	pcmpgtd	%xmm2, %xmm6
	movdqa	%xmm4, %xmm7
	pand	%xmm5, %xmm7
	pandn	%xmm1, %xmm5
	movdqa	%xmm5, %xmm1
	por	%xmm7, %xmm1
	movdqa	%xmm3, %xmm5
	pand	%xmm6, %xmm5
	pandn	%xmm2, %xmm6
	movdqa	%xmm6, %xmm2
	por	%xmm5, %xmm2
	movdqa	%xmm9, %xmm5
	pcmpgtd	%xmm4, %xmm5
	movdqa	%xmm0, %xmm6
	pcmpgtd	%xmm3, %xmm6
	pand	%xmm5, %xmm4
	pandn	%xmm9, %xmm5
	movdqa	%xmm5, %xmm9
	por	%xmm4, %xmm9
	pand	%xmm6, %xmm3
	pandn	%xmm0, %xmm6
	movdqa	%xmm6, %xmm0
	por	%xmm3, %xmm0
	addq	$8, %rax
	addq	$-8, %rcx
	jne	.LBB63_225
# BB#226:                               # %middle.block4417
                                        #   in Loop: Header=BB63_215 Depth=1
	movdqa	%xmm1, %xmm3
	pcmpgtd	%xmm2, %xmm3
	pand	%xmm3, %xmm1
	pandn	%xmm2, %xmm3
	por	%xmm1, %xmm3
	pshufd	$78, %xmm3, %xmm2       # xmm2 = xmm3[2,3,0,1]
	movdqa	%xmm3, %xmm4
	pcmpgtd	%xmm2, %xmm4
	pand	%xmm4, %xmm3
	pandn	%xmm2, %xmm4
	por	%xmm3, %xmm4
	pshufd	$229, %xmm4, %xmm2      # xmm2 = xmm4[1,1,2,3]
	movd	%xmm4, %eax
	pcmpgtd	%xmm2, %xmm4
	movdqa	%xmm4, 336(%rsp)
	testb	$1, 336(%rsp)
	movd	%xmm2, %ebp
	cmovnel	%eax, %ebp
	movdqa	%xmm0, %xmm2
	pcmpgtd	%xmm9, %xmm2
	pand	%xmm2, %xmm9
	pandn	%xmm0, %xmm2
	por	%xmm9, %xmm2
	pshufd	$78, %xmm2, %xmm0       # xmm0 = xmm2[2,3,0,1]
	movdqa	%xmm0, %xmm1
	pcmpgtd	%xmm2, %xmm1
	pand	%xmm1, %xmm2
	pandn	%xmm0, %xmm1
	por	%xmm2, %xmm1
	pshufd	$229, %xmm1, %xmm0      # xmm0 = xmm1[1,1,2,3]
	movd	%xmm0, %eax
	pcmpgtd	%xmm1, %xmm0
	movdqa	%xmm0, 352(%rsp)
	movd	%xmm1, %ebx
	testb	$1, 352(%rsp)
	cmovel	%eax, %ebx
	movq	264(%rsp), %r12         # 8-byte Reload
	cmpq	%r12, 304(%rsp)         # 8-byte Folded Reload
	je	.LBB63_227
	.align	16, 0x90
.LBB63_217:                             # %for.body1761.us.preheader
                                        #   in Loop: Header=BB63_215 Depth=1
	leaq	1(%r12), %rsi
	cmpq	%rsi, %rdx
	cmovgeq	%rdx, %rsi
	cmpl	$0, "PinFlag-89.1"(%rip)
	jne	.LBB63_219
# BB#218:                               #   in Loop: Header=BB63_215 Depth=1
	decq	%rsi
	subq	%r12, %rsi
	movq	%rdx, %r13
	movq	%rdi, %r14
	movl	$.L__unnamed_170, %edi
	xorl	%edx, %edx
	movl	$13, %ecx
	movl	$1, %r8d
	callq	Pin
	movq	%r14, %rdi
	movq	%r13, %rdx
	movl	$1, "PinFlag-89.1"(%rip)
.LBB63_219:                             #   in Loop: Header=BB63_215 Depth=1
	leaq	(%rdi,%r12), %rax
	.align	16, 0x90
.LBB63_220:                             # %for.body1761.us
                                        #   Parent Loop BB63_215 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	(%rax), %ecx
	cmpl	%ebp, %ecx
	cmovgel	%ecx, %ebp
	cmpl	%ebx, %ecx
	cmovlel	%ecx, %ebx
	incq	%r12
	incq	%rax
	cmpq	%rdx, %r12
	jl	.LBB63_220
.LBB63_227:                             # %for.cond1758.for.end1796_crit_edge.us
                                        #   in Loop: Header=BB63_215 Depth=1
	movq	%rdi, 320(%rsp)         # 8-byte Spill
	cmpl	$17, %ebp
	jle	.LBB63_212
# BB#211:                               # %if.then1799.us
                                        #   in Loop: Header=BB63_215 Depth=1
	movl	$3004, %edi             # imm = 0xBBC
	callq	BZ2_bz__AssertH__fail
.LBB63_212:                             # %if.end1800.us
                                        #   in Loop: Header=BB63_215 Depth=1
	testl	%ebx, %ebx
	movl	156(%rsp), %r12d        # 4-byte Reload
	jg	.LBB63_214
# BB#213:                               # %if.then1803.us
                                        #   in Loop: Header=BB63_215 Depth=1
	movl	$3005, %edi             # imm = 0xBBD
	callq	BZ2_bz__AssertH__fail
.LBB63_214:                             # %if.end1804.us
                                        #   in Loop: Header=BB63_215 Depth=1
	movq	328(%rsp), %r13         # 8-byte Reload
	imulq	$1032, %r13, %rax       # imm = 0x408
	movq	256(%rsp), %r14         # 8-byte Reload
	leaq	39256(%r14,%rax), %rdi
	imulq	$258, %r13, %rax        # imm = 0x102
	leaq	37708(%r14,%rax), %rsi
	movl	%ebx, %edx
	movl	%ebp, %ecx
	movl	%r12d, %r8d
	callq	BZ2_hbAssignCodes
	incq	%r13
	movq	%r13, 328(%rsp)         # 8-byte Spill
	addq	$258, 272(%rsp)         # 8-byte Folded Spill
                                        # imm = 0x102
	movq	320(%rsp), %rdi         # 8-byte Reload
	addq	$258, %rdi              # imm = 0x102
	cmpq	%r15, %r13
	jl	.LBB63_215
	jmp	.LBB63_170
.LBB63_166:                             # %if.end1804.preheader
	movq	%rdi, 160(%rsp)         # 8-byte Spill
	testq	%r15, %r15
	movl	$1, %esi
	cmovgq	%r15, %rsi
	cmpl	$0, "PinFlag-313."(%rip)
	movl	156(%rsp), %r12d        # 4-byte Reload
	jne	.LBB63_168
# BB#167:
	decq	%rsi
	movl	$.L__unnamed_171, %edi
	xorl	%edx, %edx
	movl	$7, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movl	$1, "PinFlag-313."(%rip)
.LBB63_168:
	movq	%r13, %r14
	leaq	39256(%r14), %r13
	xorl	%ebp, %ebp
	movq	192(%rsp), %rbx         # 8-byte Reload
	.align	16, 0x90
.LBB63_169:                             # %if.end1804
                                        # =>This Inner Loop Header: Depth=1
	movl	$32, %edx
	xorl	%ecx, %ecx
	movq	%r13, %rdi
	movq	%rbx, %rsi
	movl	%r12d, %r8d
	callq	BZ2_hbAssignCodes
	incq	%rbp
	addq	$258, %rbx              # imm = 0x102
	addq	$1032, %r13             # imm = 0x408
	cmpq	%r15, %rbp
	jl	.LBB63_169
.LBB63_170:                             # %for.end1814
	leaq	368(%rsp), %rbx
	movl	$143, %eax
	cmpl	$0, "PinFlag-88."(%rip)
	jne	.LBB63_172
# BB#171:
	movl	$.L__unnamed_172, %edi
	movl	$15, %esi
	movl	$136, %edx
	movl	$102, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-88."(%rip)
	movl	$143, %eax
	.align	16, 0x90
.LBB63_172:                             # %for.body1819
                                        # =>This Inner Loop Header: Depth=1
	movb	$0, (%rbx)
	cmpb	$0, -15(%r14,%rax)
	setne	%cl
	setne	(%rbx)
	cmpb	$0, -14(%r14,%rax)
	je	.LBB63_174
# BB#173:                               # %select.false
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	$1, %cl
.LBB63_174:                             # %select.end
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	%cl, (%rbx)
	cmpb	$0, -13(%r14,%rax)
	je	.LBB63_176
# BB#175:                               # %select.false728
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	$1, %cl
.LBB63_176:                             # %select.end727
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	%cl, (%rbx)
	cmpb	$0, -12(%r14,%rax)
	je	.LBB63_178
# BB#177:                               # %select.false730
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	$1, %cl
.LBB63_178:                             # %select.end729
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	%cl, (%rbx)
	cmpb	$0, -11(%r14,%rax)
	je	.LBB63_180
# BB#179:                               # %select.false732
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	$1, %cl
.LBB63_180:                             # %select.end731
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	%cl, (%rbx)
	cmpb	$0, -10(%r14,%rax)
	je	.LBB63_182
# BB#181:                               # %select.false734
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	$1, %cl
.LBB63_182:                             # %select.end733
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	%cl, (%rbx)
	cmpb	$0, -9(%r14,%rax)
	je	.LBB63_184
# BB#183:                               # %select.false736
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	$1, %cl
.LBB63_184:                             # %select.end735
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	%cl, (%rbx)
	cmpb	$0, -8(%r14,%rax)
	je	.LBB63_186
# BB#185:                               # %select.false738
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	$1, %cl
.LBB63_186:                             # %select.end737
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	%cl, (%rbx)
	cmpb	$0, -7(%r14,%rax)
	je	.LBB63_188
# BB#187:                               # %select.false740
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	$1, %cl
.LBB63_188:                             # %select.end739
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	%cl, (%rbx)
	cmpb	$0, -6(%r14,%rax)
	je	.LBB63_190
# BB#189:                               # %select.false742
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	$1, %cl
.LBB63_190:                             # %select.end741
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	%cl, (%rbx)
	cmpb	$0, -5(%r14,%rax)
	je	.LBB63_192
# BB#191:                               # %select.false744
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	$1, %cl
.LBB63_192:                             # %select.end743
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	%cl, (%rbx)
	cmpb	$0, -4(%r14,%rax)
	je	.LBB63_194
# BB#193:                               # %select.false746
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	$1, %cl
.LBB63_194:                             # %select.end745
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	%cl, (%rbx)
	cmpb	$0, -3(%r14,%rax)
	je	.LBB63_196
# BB#195:                               # %select.false748
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	$1, %cl
.LBB63_196:                             # %select.end747
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	%cl, (%rbx)
	cmpb	$0, -2(%r14,%rax)
	je	.LBB63_198
# BB#197:                               # %select.false750
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	$1, %cl
.LBB63_198:                             # %select.end749
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	%cl, (%rbx)
	cmpb	$0, -1(%r14,%rax)
	je	.LBB63_200
# BB#199:                               # %select.false752
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	$1, %cl
.LBB63_200:                             # %select.end751
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	%cl, (%rbx)
	cmpb	$0, (%r14,%rax)
	je	.LBB63_202
# BB#201:                               # %select.false754
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	$1, %cl
.LBB63_202:                             # %select.end753
                                        #   in Loop: Header=BB63_172 Depth=1
	movb	%cl, (%rbx)
	addq	$16, %rax
	incq	%rbx
	cmpq	$399, %rax              # imm = 0x18F
	jne	.LBB63_172
# BB#203:                               # %for.end1839
	movl	116(%r14), %eax
	movl	%eax, 328(%rsp)         # 4-byte Spill
	xorl	%ebp, %ebp
	cmpl	$0, "PinFlag-87."(%rip)
	jne	.LBB63_205
# BB#204:
	xorl	%ebp, %ebp
	movl	$.L__unnamed_173, %edi
	movl	$15, %esi
	xorl	%edx, %edx
	movl	$40, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movl	$1, "PinFlag-87."(%rip)
	.align	16, 0x90
.LBB63_205:                             # %for.body1843
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_230 Depth 2
	cmpb	$0, 368(%rsp,%rbp)
	je	.LBB63_232
# BB#206:                               # %if.then1847
                                        #   in Loop: Header=BB63_205 Depth=1
	movl	644(%r14), %edx
	cmpl	$7, %edx
	jle	.LBB63_207
# BB#228:                               # %while.body.lr.ph.i
                                        #   in Loop: Header=BB63_205 Depth=1
	movl	640(%r14), %ebx
	movl	116(%r14), %r12d
	cmpl	$0, "PinFlag-87.0"(%rip)
	jne	.LBB63_230
# BB#229:                               #   in Loop: Header=BB63_205 Depth=1
	movl	$.L__unnamed_174, %edi
	movl	$1, %esi
	movl	$6, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-87.0"(%rip)
	.align	16, 0x90
.LBB63_230:                             # %while.body.i
                                        #   Parent Loop BB63_205 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	shrl	$24, %ebx
	movslq	%r12d, %rax
	movq	80(%r14), %rcx
	movb	%bl, (%rcx,%rax)
	movl	116(%r14), %r12d
	incl	%r12d
	movl	%r12d, 116(%r14)
	movq	640(%r14), %rax
	movl	%eax, %ebx
	shll	$8, %ebx
	movl	%ebx, 640(%r14)
	shrq	$32, %rax
	addl	$-8, %eax
	movl	%eax, 644(%r14)
	cmpl	$7, %eax
	movl	%eax, %edx
	jg	.LBB63_230
	jmp	.LBB63_231
	.align	16, 0x90
.LBB63_232:                             # %if.else1848
                                        #   in Loop: Header=BB63_205 Depth=1
	movl	$1, %esi
	xorl	%edx, %edx
	movq	%r14, %rdi
	callq	bsW
	jmp	.LBB63_233
	.align	16, 0x90
.LBB63_207:                             # %entry.while.end_crit_edge.i
                                        #   in Loop: Header=BB63_205 Depth=1
	movq	640(%r14), %rbx
	movq	%rbx, %rax
	shrq	$32, %rax
.LBB63_231:                             # %bsW.exit
                                        #   in Loop: Header=BB63_205 Depth=1
	movl	$31, %ecx
	subl	%edx, %ecx
	movl	$1, %edx
	shll	%cl, %edx
	orl	%ebx, %edx
	movl	%edx, 640(%r14)
	incl	%eax
	movl	%eax, 644(%r14)
.LBB63_233:                             # %for.inc1850
                                        #   in Loop: Header=BB63_205 Depth=1
	incq	%rbp
	cmpq	$16, %rbp
	jne	.LBB63_205
# BB#234:                               # %for.body1856.preheader
	movq	%r14, %r12
	subq	$-128, %r12
	xorl	%r13d, %r13d
	.align	16, 0x90
.LBB63_235:                             # %for.body1856
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_236 Depth 2
	cmpb	$0, 368(%rsp,%r13)
	movq	%r12, %rbx
	movl	$16, %ebp
	je	.LBB63_240
	.align	16, 0x90
.LBB63_236:                             # %for.body1864
                                        #   Parent Loop BB63_235 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpb	$0, (%rbx)
	je	.LBB63_238
# BB#237:                               # %if.then1871
                                        #   in Loop: Header=BB63_236 Depth=2
	movl	$1, %esi
	movl	$1, %edx
	jmp	.LBB63_239
	.align	16, 0x90
.LBB63_238:                             # %if.else1872
                                        #   in Loop: Header=BB63_236 Depth=2
	movl	$1, %esi
	xorl	%edx, %edx
.LBB63_239:                             # %for.inc1874
                                        #   in Loop: Header=BB63_236 Depth=2
	movq	%r14, %rdi
	callq	bsW
	incq	%rbx
	decq	%rbp
	jne	.LBB63_236
.LBB63_240:                             # %for.inc1878
                                        #   in Loop: Header=BB63_235 Depth=1
	incq	%r13
	addq	$16, %r12
	cmpq	$16, %r13
	jne	.LBB63_235
# BB#241:                               # %for.end1880
	cmpl	$3, 656(%r14)
	jge	.LBB63_242
.LBB63_243:                             # %if.end1888
	movl	116(%r14), %r12d
	movl	$3, %esi
	movq	%r14, %rdi
	movq	232(%rsp), %rdx         # 8-byte Reload
	callq	bsW
	movl	$15, %esi
	movq	%r14, %rdi
	movq	288(%rsp), %rbx         # 8-byte Reload
	movl	%ebx, %edx
	callq	bsW
	testl	%ebx, %ebx
	jle	.LBB63_251
# BB#244:                               # %for.cond1894.preheader.preheader
	xorl	%ebp, %ebp
	cmpl	$0, "PinFlag-85."(%rip)
	jne	.LBB63_246
# BB#245:
	movq	288(%rsp), %rax         # 8-byte Reload
	leal	-1(%rax), %eax
	movslq	%eax, %rsi
	xorl	%ebp, %ebp
	movl	$.L__unnamed_175, %edi
	movl	$1, %edx
	movl	$18, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movl	$1, "PinFlag-85."(%rip)
	.align	16, 0x90
.LBB63_246:                             # %for.cond1894.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_249 Depth 2
	cmpb	$0, 19706(%r14,%rbp)
	je	.LBB63_250
# BB#247:                               # %for.body1901.preheader
                                        #   in Loop: Header=BB63_246 Depth=1
	xorl	%ebx, %ebx
	cmpl	$0, "PinFlag-85.0"(%rip)
	jne	.LBB63_249
# BB#248:                               #   in Loop: Header=BB63_246 Depth=1
	movl	$.L__unnamed_176, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$7, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-85.0"(%rip)
	.align	16, 0x90
.LBB63_249:                             # %for.body1901
                                        #   Parent Loop BB63_246 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	$1, %esi
	movl	$1, %edx
	movq	%r14, %rdi
	callq	bsW
	incl	%ebx
	movzbl	19706(%r14,%rbp), %eax
	cmpl	%eax, %ebx
	jl	.LBB63_249
.LBB63_250:                             # %for.end1904
                                        #   in Loop: Header=BB63_246 Depth=1
	movl	$1, %esi
	xorl	%edx, %edx
	movq	%r14, %rdi
	callq	bsW
	incq	%rbp
	movq	288(%rsp), %rax         # 8-byte Reload
	cmpl	%eax, %ebp
	jne	.LBB63_246
.LBB63_251:                             # %for.end1907
	cmpl	$3, 656(%r14)
	jge	.LBB63_252
.LBB63_253:                             # %if.end1915
	movq	144(%rsp), %rax         # 8-byte Reload
	cmpl	$-2, %eax
	movl	116(%r14), %eax
	movl	%eax, 272(%rsp)         # 4-byte Spill
	jle	.LBB63_254
# BB#274:                               # %for.body1920.us.preheader
	movq	160(%rsp), %r13         # 8-byte Reload
	testq	%r13, %r13
	movl	$1, %esi
	movl	$1, %eax
	cmovgq	%r13, %rax
	decq	%rax
	movq	%rax, 304(%rsp)         # 8-byte Spill
	testq	%r15, %r15
	cmovgq	%r15, %rsi
	xorl	%ebx, %ebx
	cmpl	$0, "PinFlag-83."(%rip)
	jne	.LBB63_276
# BB#275:
	decq	%rsi
	xorl	%ebx, %ebx
	movl	$.L__unnamed_177, %edi
	movl	$3, %edx
	movl	$15, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movl	$1, "PinFlag-83."(%rip)
	.align	16, 0x90
.LBB63_276:                             # %for.body1920.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_278 Depth 2
                                        #       Child Loop BB63_281 Depth 3
                                        #       Child Loop BB63_284 Depth 3
	movq	%rbx, 320(%rsp)         # 8-byte Spill
	imulq	$258, %rbx, %rax        # imm = 0x102
	movq	%rax, 328(%rsp)         # 8-byte Spill
	movzbl	37708(%r14,%rax), %ebp
	movl	$5, %esi
	movq	%r14, %rdi
	movl	%ebp, %edx
	callq	bsW
	xorl	%r12d, %r12d
	cmpl	$0, "PinFlag-83.0"(%rip)
	jne	.LBB63_278
# BB#277:                               #   in Loop: Header=BB63_276 Depth=1
	xorl	%r12d, %r12d
	movl	$.L__unnamed_178, %edi
	movl	$16, %edx
	movl	$36, %ecx
	xorl	%r8d, %r8d
	movq	304(%rsp), %rsi         # 8-byte Reload
	callq	Pin
	movl	$1, "PinFlag-83.0"(%rip)
	.align	16, 0x90
.LBB63_278:                             # %while.cond1931.preheader.us
                                        #   Parent Loop BB63_276 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_281 Depth 3
                                        #       Child Loop BB63_284 Depth 3
	movq	328(%rsp), %rax         # 8-byte Reload
	leaq	(%r14,%rax), %rax
	leaq	37708(%r12,%rax), %rbx
	movzbl	37708(%r12,%rax), %eax
	cmpl	%eax, %ebp
	jge	.LBB63_282
# BB#279:                               # %while.body1940.us.preheader
                                        #   in Loop: Header=BB63_278 Depth=2
	cmpl	$0, "PinFlag-83.00"(%rip)
	jne	.LBB63_281
# BB#280:                               #   in Loop: Header=BB63_278 Depth=2
	movl	$.L__unnamed_179, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$7, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-83.00"(%rip)
	.align	16, 0x90
.LBB63_281:                             # %while.body1940.us
                                        #   Parent Loop BB63_276 Depth=1
                                        #     Parent Loop BB63_278 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	$2, %esi
	movl	$2, %edx
	movq	%r14, %rdi
	callq	bsW
	incl	%ebp
	movzbl	(%rbx), %eax
	cmpl	%eax, %ebp
	jl	.LBB63_281
.LBB63_282:                             # %while.cond1943.preheader.us
                                        #   in Loop: Header=BB63_278 Depth=2
	movzbl	%al, %eax
	cmpl	%eax, %ebp
	jle	.LBB63_285
# BB#283:                               # %while.body1952.us.preheader
                                        #   in Loop: Header=BB63_278 Depth=2
	cmpl	$0, "PinFlag-83.01"(%rip)
	jne	.LBB63_284
# BB#287:                               #   in Loop: Header=BB63_278 Depth=2
	movl	$.L__unnamed_180, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$7, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-83.01"(%rip)
	.align	16, 0x90
.LBB63_284:                             # %while.body1952.us
                                        #   Parent Loop BB63_276 Depth=1
                                        #     Parent Loop BB63_278 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	$2, %esi
	movl	$3, %edx
	movq	%r14, %rdi
	callq	bsW
	decl	%ebp
	movzbl	(%rbx), %eax
	cmpl	%eax, %ebp
	jg	.LBB63_284
.LBB63_285:                             # %while.end1954.us
                                        #   in Loop: Header=BB63_278 Depth=2
	movl	$1, %esi
	xorl	%edx, %edx
	movq	%r14, %rdi
	callq	bsW
	incq	%r12
	cmpq	%r13, %r12
	jl	.LBB63_278
# BB#286:                               # %for.cond1927.for.end1957_crit_edge.us
                                        #   in Loop: Header=BB63_276 Depth=1
	movq	320(%rsp), %rbx         # 8-byte Reload
	incq	%rbx
	cmpq	%r15, %rbx
	jl	.LBB63_276
	jmp	.LBB63_258
.LBB63_254:                             # %for.body1920.preheader
	testq	%r15, %r15
	movl	$1, %esi
	cmovgq	%r15, %rsi
	cmpl	$0, "PinFlag-225."(%rip)
	jne	.LBB63_256
# BB#255:
	decq	%rsi
	movl	$.L__unnamed_181, %edi
	xorl	%edx, %edx
	movl	$8, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movl	$1, "PinFlag-225."(%rip)
.LBB63_256:
	leaq	37708(%r14), %rbx
	xorl	%ebp, %ebp
	.align	16, 0x90
.LBB63_257:                             # %for.body1920
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rbx), %edx
	movl	$5, %esi
	movq	%r14, %rdi
	callq	bsW
	incq	%rbp
	addq	$258, %rbx              # imm = 0x102
	cmpq	%r15, %rbp
	jl	.LBB63_257
.LBB63_258:                             # %for.end1960
	cmpl	$3, 656(%r14)
	jge	.LBB63_259
.LBB63_260:                             # %if.end1968
	movl	116(%r14), %eax
	movl	%eax, 208(%rsp)         # 4-byte Spill
	movl	668(%r14), %ebx
	xorl	%esi, %esi
	testl	%ebx, %ebx
	movq	232(%rsp), %r15         # 8-byte Reload
	jle	.LBB63_355
# BB#261:                               # %if.end1976.preheader
	xorl	%esi, %esi
	cmpl	$0, "PinFlag-82."(%rip)
	jne	.LBB63_263
# BB#262:
	movl	$.L__unnamed_182, %edi
	movl	$1, %esi
	movl	$15870, %edx            # imm = 0x3DFE
	movl	$862, %ecx              # imm = 0x35E
	xorl	%r8d, %r8d
	callq	Pin
	xorl	%esi, %esi
	movl	$1, "PinFlag-82."(%rip)
.LBB63_263:                             # %if.end1976
	xorl	%ebp, %ebp
	movq	240(%rsp), %r8          # 8-byte Reload
	.align	16, 0x90
.LBB63_264:                             # %if.end1976
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_272 Depth 2
                                        #       Child Loop BB63_352 Depth 3
                                        #     Child Loop BB63_293 Depth 2
                                        #     Child Loop BB63_299 Depth 2
                                        #     Child Loop BB63_305 Depth 2
                                        #     Child Loop BB63_311 Depth 2
                                        #     Child Loop BB63_317 Depth 2
                                        #     Child Loop BB63_323 Depth 2
                                        #     Child Loop BB63_329 Depth 2
                                        #     Child Loop BB63_335 Depth 2
                                        #     Child Loop BB63_341 Depth 2
                                        #     Child Loop BB63_347 Depth 2
	movq	%rsi, 320(%rsp)         # 8-byte Spill
	leal	49(%rbp), %ecx
	movl	%ecx, 264(%rsp)         # 4-byte Spill
	leal	-1(%rbx), %eax
	cmpl	%ebx, %ecx
	cmovll	%ecx, %eax
	movl	%eax, 304(%rsp)         # 4-byte Spill
	movzbl	1704(%r14,%rsi), %eax
	cmpl	%r15d, %eax
	jb	.LBB63_266
# BB#265:                               # %if.then1992
                                        #   in Loop: Header=BB63_264 Depth=1
	movl	$3006, %edi             # imm = 0xBBE
	movq	%r8, %r12
	movq	%rsi, %rbx
	callq	BZ2_bz__AssertH__fail
	movq	%rbx, %rsi
	movq	%r12, %r8
.LBB63_266:                             # %if.end1993
                                        #   in Loop: Header=BB63_264 Depth=1
	cmpl	$6, %r15d
	jne	.LBB63_268
# BB#267:                               # %if.end1993
                                        #   in Loop: Header=BB63_264 Depth=1
	movl	304(%rsp), %eax         # 4-byte Reload
	subl	%ebp, %eax
	cmpl	$49, %eax
	jne	.LBB63_268
# BB#288:                               # %if.then2001
                                        #   in Loop: Header=BB63_264 Depth=1
	movzbl	1704(%r14,%rsi), %eax
	movq	%rsi, 320(%rsp)         # 8-byte Spill
	movslq	%ebp, %r12
	movzwl	(%r8,%r12,2), %ecx
	imulq	$258, %rax, %rbp        # imm = 0x102
	addq	%r14, %rbp
	movzbl	37708(%rcx,%rbp), %esi
	imulq	$1032, %rax, %rbx       # imm = 0x408
	addq	%r14, %rbx
	movl	39256(%rbx,%rcx,4), %edx
	movq	%r14, %rdi
	movq	%r8, %r15
	callq	bsW
	movzwl	2(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	4(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	6(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	8(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	10(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	12(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	14(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	16(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	18(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	20(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	22(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	24(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	26(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	28(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	30(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	32(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	34(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	36(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	38(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	40(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	42(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	44(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	46(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	48(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	50(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	52(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	54(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	56(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	58(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	60(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	62(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	64(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	66(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	68(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	70(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	72(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	74(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	76(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movzwl	78(%r15,%r12,2), %eax
	movzbl	37708(%rax,%rbp), %esi
	movl	39256(%rbx,%rax,4), %edx
	movq	%r14, %rdi
	callq	bsW
	movq	%rbx, %r9
	movq	%rbp, %r10
	movq	%r15, %r8
	movzwl	80(%r8,%r12,2), %eax
	movzbl	37708(%rax,%r10), %edi
	movl	39256(%r9,%rax,4), %ebp
	movl	644(%r14), %edx
	cmpl	$7, %edx
	jle	.LBB63_289
# BB#290:                               # %while.body.lr.ph.i4172
                                        #   in Loop: Header=BB63_264 Depth=1
	movl	%edi, 248(%rsp)         # 4-byte Spill
	movq	%r8, %r13
	movl	640(%r14), %ebx
	movl	116(%r14), %r15d
	cmpl	$0, "PinFlag-82.1"(%rip)
	jne	.LBB63_292
# BB#291:                               #   in Loop: Header=BB63_264 Depth=1
	movq	%r10, 328(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_183, %edi
	movl	$1, %esi
	movl	$6, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	movq	%r9, 272(%rsp)          # 8-byte Spill
	callq	Pin
	movq	272(%rsp), %r9          # 8-byte Reload
	movq	328(%rsp), %r10         # 8-byte Reload
	movl	$1, "PinFlag-82.1"(%rip)
.LBB63_292:                             # %while.body.i4181
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	%r13, %r8
	movq	320(%rsp), %rsi         # 8-byte Reload
	movl	248(%rsp), %edi         # 4-byte Reload
	.align	16, 0x90
.LBB63_293:                             # %while.body.i4181
                                        #   Parent Loop BB63_264 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	shrl	$24, %ebx
	movslq	%r15d, %rax
	movq	80(%r14), %rcx
	movb	%bl, (%rcx,%rax)
	movl	116(%r14), %r15d
	incl	%r15d
	movl	%r15d, 116(%r14)
	movq	640(%r14), %rax
	movl	%eax, %ebx
	shll	$8, %ebx
	movl	%ebx, 640(%r14)
	shrq	$32, %rax
	addl	$-8, %eax
	movl	%eax, 644(%r14)
	cmpl	$7, %eax
	movl	%eax, %edx
	jg	.LBB63_293
	jmp	.LBB63_294
	.align	16, 0x90
.LBB63_268:                             # %for.cond2420.preheader
                                        #   in Loop: Header=BB63_264 Depth=1
	cmpl	%ebp, 304(%rsp)         # 4-byte Folded Reload
	jl	.LBB63_354
# BB#269:                               # %for.body2423.preheader
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	%r8, %r15
	movslq	%ebp, %rbx
	movslq	304(%rsp), %rdi         # 4-byte Folded Reload
	movl	644(%r14), %r12d
	cmpl	$0, "PinFlag-82.0"(%rip)
	jne	.LBB63_271
# BB#270:                               #   in Loop: Header=BB63_264 Depth=1
	movq	%rsi, %r13
	movq	%rdi, %rsi
	subq	%rbx, %rsi
	movq	%rdi, %rbp
	movl	$.L__unnamed_184, %edi
	movl	$152, %edx
	movl	$44, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movq	%rbp, %rdi
	movq	%r13, %rsi
	movl	$1, "PinFlag-82.0"(%rip)
.LBB63_271:                             # %for.body2423
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	%r15, %r8
	.align	16, 0x90
.LBB63_272:                             # %for.body2423
                                        #   Parent Loop BB63_264 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_352 Depth 3
	movzwl	(%r8,%rbx,2), %eax
	movzbl	1704(%r14,%rsi), %ecx
	imulq	$258, %rcx, %rdx        # imm = 0x102
	addq	%r14, %rdx
	movzbl	37708(%rax,%rdx), %edx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%r14, %rcx
	movl	39256(%rcx,%rax,4), %ebp
	cmpl	$7, %r12d
	jle	.LBB63_273
# BB#349:                               # %while.body.lr.ph.i3913
                                        #   in Loop: Header=BB63_272 Depth=2
	movl	%edx, 328(%rsp)         # 4-byte Spill
	movq	%rdi, %r12
	movl	640(%r14), %r15d
	movl	116(%r14), %r13d
	cmpl	$0, "PinFlag-82.00"(%rip)
	jne	.LBB63_351
# BB#350:                               #   in Loop: Header=BB63_272 Depth=2
	movl	$.L__unnamed_185, %edi
	movl	$1, %esi
	movl	$12, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movl	$1, "PinFlag-82.00"(%rip)
.LBB63_351:                             # %while.body.i3922
                                        #   in Loop: Header=BB63_272 Depth=2
	movq	%r12, %rdi
	movl	328(%rsp), %edx         # 4-byte Reload
	.align	16, 0x90
.LBB63_352:                             # %while.body.i3922
                                        #   Parent Loop BB63_264 Depth=1
                                        #     Parent Loop BB63_272 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	shrl	$24, %r15d
	movslq	%r13d, %rax
	movq	80(%r14), %rcx
	movb	%r15b, (%rcx,%rax)
	movl	116(%r14), %r13d
	incl	%r13d
	movl	%r13d, 116(%r14)
	movq	640(%r14), %rax
	movl	%eax, %r15d
	shll	$8, %r15d
	movl	%r15d, 640(%r14)
	shrq	$32, %rax
	addl	$-8, %eax
	movl	%eax, 644(%r14)
	cmpl	$7, %eax
	movl	%eax, %r12d
	jg	.LBB63_352
	jmp	.LBB63_353
	.align	16, 0x90
.LBB63_273:                             # %entry.while.end_crit_edge.i3908
                                        #   in Loop: Header=BB63_272 Depth=2
	movq	640(%r14), %r15
	movq	%r15, %rax
	shrq	$32, %rax
.LBB63_353:                             # %bsW.exit3928
                                        #   in Loop: Header=BB63_272 Depth=2
	movl	$32, %ecx
	subl	%edx, %ecx
	subl	%r12d, %ecx
	shll	%cl, %ebp
	orl	%r15d, %ebp
	movl	%ebp, 640(%r14)
	addl	%edx, %eax
	movl	%eax, 644(%r14)
	cmpq	%rdi, %rbx
	leaq	1(%rbx), %rbx
	movl	%eax, %r12d
	jl	.LBB63_272
	jmp	.LBB63_354
	.align	16, 0x90
.LBB63_289:                             # %entry.while.end_crit_edge.i4167
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	640(%r14), %rbx
	movq	%rbx, %rax
	shrq	$32, %rax
	movq	320(%rsp), %rsi         # 8-byte Reload
.LBB63_294:                             # %bsW.exit4188
                                        #   in Loop: Header=BB63_264 Depth=1
	movl	$32, %ecx
	subl	%edi, %ecx
	subl	%edx, %ecx
	shll	%cl, %ebp
	orl	%ebx, %ebp
	movl	%ebp, 640(%r14)
	addl	%edi, %eax
	movl	%eax, 644(%r14)
	movzwl	82(%r8,%r12,2), %ecx
	movzbl	37708(%rcx,%r10), %edi
	movl	39256(%r9,%rcx,4), %r15d
	cmpl	$7, %eax
	jle	.LBB63_295
# BB#296:                               # %while.body.lr.ph.i4146
                                        #   in Loop: Header=BB63_264 Depth=1
	movl	%edi, 248(%rsp)         # 4-byte Spill
	movq	%rsi, %r13
	movl	116(%r14), %ebx
	cmpl	$0, "PinFlag-82.2"(%rip)
	jne	.LBB63_298
# BB#297:                               #   in Loop: Header=BB63_264 Depth=1
	movq	%r10, 328(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_186, %edi
	movl	$1, %esi
	movl	$6, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	movq	%r9, 272(%rsp)          # 8-byte Spill
	callq	Pin
	movq	272(%rsp), %r9          # 8-byte Reload
	movq	328(%rsp), %r10         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movl	$1, "PinFlag-82.2"(%rip)
.LBB63_298:                             # %while.body.i4155
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	%r13, %rsi
	movl	248(%rsp), %edi         # 4-byte Reload
	.align	16, 0x90
.LBB63_299:                             # %while.body.i4155
                                        #   Parent Loop BB63_264 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	shrl	$24, %ebp
	movslq	%ebx, %rax
	movq	80(%r14), %rcx
	movb	%bpl, (%rcx,%rax)
	movl	116(%r14), %ebx
	incl	%ebx
	movl	%ebx, 116(%r14)
	movq	640(%r14), %rdx
	movl	%edx, %ebp
	shll	$8, %ebp
	movl	%ebp, 640(%r14)
	shrq	$32, %rdx
	addl	$-8, %edx
	movl	%edx, 644(%r14)
	cmpl	$7, %edx
	movl	%edx, %eax
	jg	.LBB63_299
	jmp	.LBB63_300
	.align	16, 0x90
.LBB63_295:                             # %entry.while.end_crit_edge.i4141
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	640(%r14), %rbp
	movq	%rbp, %rdx
	shrq	$32, %rdx
.LBB63_300:                             # %bsW.exit4162
                                        #   in Loop: Header=BB63_264 Depth=1
	movl	$32, %ecx
	subl	%edi, %ecx
	subl	%eax, %ecx
	shll	%cl, %r15d
	orl	%ebp, %r15d
	movl	%r15d, 640(%r14)
	addl	%edi, %edx
	movl	%edx, 644(%r14)
	movzwl	84(%r8,%r12,2), %eax
	movzbl	37708(%rax,%r10), %edi
	movl	39256(%r9,%rax,4), %ebp
	cmpl	$7, %edx
	jle	.LBB63_301
# BB#302:                               # %while.body.lr.ph.i4120
                                        #   in Loop: Header=BB63_264 Depth=1
	movl	%edi, 248(%rsp)         # 4-byte Spill
	movq	%rsi, %r13
	movl	116(%r14), %ebx
	cmpl	$0, "PinFlag-82.3"(%rip)
	jne	.LBB63_304
# BB#303:                               #   in Loop: Header=BB63_264 Depth=1
	movq	%r10, 328(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_187, %edi
	movl	$1, %esi
	movl	$6, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	movq	%r9, 272(%rsp)          # 8-byte Spill
	callq	Pin
	movq	272(%rsp), %r9          # 8-byte Reload
	movq	328(%rsp), %r10         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movl	$1, "PinFlag-82.3"(%rip)
.LBB63_304:                             # %while.body.i4129
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	%r13, %rsi
	movl	248(%rsp), %edi         # 4-byte Reload
	.align	16, 0x90
.LBB63_305:                             # %while.body.i4129
                                        #   Parent Loop BB63_264 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	shrl	$24, %r15d
	movslq	%ebx, %rax
	movq	80(%r14), %rcx
	movb	%r15b, (%rcx,%rax)
	movl	116(%r14), %ebx
	incl	%ebx
	movl	%ebx, 116(%r14)
	movq	640(%r14), %rax
	movl	%eax, %r15d
	shll	$8, %r15d
	movl	%r15d, 640(%r14)
	shrq	$32, %rax
	addl	$-8, %eax
	movl	%eax, 644(%r14)
	cmpl	$7, %eax
	movl	%eax, %edx
	jg	.LBB63_305
	jmp	.LBB63_306
	.align	16, 0x90
.LBB63_301:                             # %entry.while.end_crit_edge.i4115
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	640(%r14), %r15
	movq	%r15, %rax
	shrq	$32, %rax
.LBB63_306:                             # %bsW.exit4136
                                        #   in Loop: Header=BB63_264 Depth=1
	movl	$32, %ecx
	subl	%edi, %ecx
	subl	%edx, %ecx
	shll	%cl, %ebp
	orl	%r15d, %ebp
	movl	%ebp, 640(%r14)
	addl	%edi, %eax
	movl	%eax, 644(%r14)
	movzwl	86(%r8,%r12,2), %ecx
	movzbl	37708(%rcx,%r10), %edi
	movl	39256(%r9,%rcx,4), %ebx
	cmpl	$7, %eax
	jle	.LBB63_307
# BB#308:                               # %while.body.lr.ph.i4094
                                        #   in Loop: Header=BB63_264 Depth=1
	movl	%edi, 248(%rsp)         # 4-byte Spill
	movq	%rsi, %r13
	movl	116(%r14), %r15d
	cmpl	$0, "PinFlag-82.4"(%rip)
	jne	.LBB63_310
# BB#309:                               #   in Loop: Header=BB63_264 Depth=1
	movq	%r10, 328(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_188, %edi
	movl	$1, %esi
	movl	$6, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	movq	%r9, 272(%rsp)          # 8-byte Spill
	callq	Pin
	movq	272(%rsp), %r9          # 8-byte Reload
	movq	328(%rsp), %r10         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movl	$1, "PinFlag-82.4"(%rip)
.LBB63_310:                             # %while.body.i4103
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	%r13, %rsi
	movl	248(%rsp), %edi         # 4-byte Reload
	.align	16, 0x90
.LBB63_311:                             # %while.body.i4103
                                        #   Parent Loop BB63_264 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	shrl	$24, %ebp
	movslq	%r15d, %rax
	movq	80(%r14), %rcx
	movb	%bpl, (%rcx,%rax)
	movl	116(%r14), %r15d
	incl	%r15d
	movl	%r15d, 116(%r14)
	movq	640(%r14), %rdx
	movl	%edx, %ebp
	shll	$8, %ebp
	movl	%ebp, 640(%r14)
	shrq	$32, %rdx
	addl	$-8, %edx
	movl	%edx, 644(%r14)
	cmpl	$7, %edx
	movl	%edx, %eax
	jg	.LBB63_311
	jmp	.LBB63_312
	.align	16, 0x90
.LBB63_307:                             # %entry.while.end_crit_edge.i4089
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	640(%r14), %rbp
	movq	%rbp, %rdx
	shrq	$32, %rdx
.LBB63_312:                             # %bsW.exit4110
                                        #   in Loop: Header=BB63_264 Depth=1
	movl	$32, %ecx
	subl	%edi, %ecx
	subl	%eax, %ecx
	shll	%cl, %ebx
	orl	%ebp, %ebx
	movl	%ebx, 640(%r14)
	addl	%edi, %edx
	movl	%edx, 644(%r14)
	movzwl	88(%r8,%r12,2), %eax
	movzbl	37708(%rax,%r10), %edi
	movl	39256(%r9,%rax,4), %ebp
	cmpl	$7, %edx
	jle	.LBB63_313
# BB#314:                               # %while.body.lr.ph.i4068
                                        #   in Loop: Header=BB63_264 Depth=1
	movl	%edi, 248(%rsp)         # 4-byte Spill
	movq	%rsi, %r13
	movl	116(%r14), %r15d
	cmpl	$0, "PinFlag-82.5"(%rip)
	jne	.LBB63_316
# BB#315:                               #   in Loop: Header=BB63_264 Depth=1
	movq	%r10, 328(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_189, %edi
	movl	$1, %esi
	movl	$6, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	movq	%r9, 272(%rsp)          # 8-byte Spill
	callq	Pin
	movq	272(%rsp), %r9          # 8-byte Reload
	movq	328(%rsp), %r10         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movl	$1, "PinFlag-82.5"(%rip)
.LBB63_316:                             # %while.body.i4077
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	%r13, %rsi
	movl	248(%rsp), %edi         # 4-byte Reload
	.align	16, 0x90
.LBB63_317:                             # %while.body.i4077
                                        #   Parent Loop BB63_264 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	shrl	$24, %ebx
	movslq	%r15d, %rax
	movq	80(%r14), %rcx
	movb	%bl, (%rcx,%rax)
	movl	116(%r14), %r15d
	incl	%r15d
	movl	%r15d, 116(%r14)
	movq	640(%r14), %rax
	movl	%eax, %ebx
	shll	$8, %ebx
	movl	%ebx, 640(%r14)
	shrq	$32, %rax
	addl	$-8, %eax
	movl	%eax, 644(%r14)
	cmpl	$7, %eax
	movl	%eax, %edx
	jg	.LBB63_317
	jmp	.LBB63_318
	.align	16, 0x90
.LBB63_313:                             # %entry.while.end_crit_edge.i4063
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	640(%r14), %rbx
	movq	%rbx, %rax
	shrq	$32, %rax
.LBB63_318:                             # %bsW.exit4084
                                        #   in Loop: Header=BB63_264 Depth=1
	movl	$32, %ecx
	subl	%edi, %ecx
	subl	%edx, %ecx
	shll	%cl, %ebp
	orl	%ebx, %ebp
	movl	%ebp, 640(%r14)
	addl	%edi, %eax
	movl	%eax, 644(%r14)
	movzwl	90(%r8,%r12,2), %ecx
	movzbl	37708(%rcx,%r10), %edi
	movl	39256(%r9,%rcx,4), %ebx
	cmpl	$7, %eax
	jle	.LBB63_319
# BB#320:                               # %while.body.lr.ph.i4042
                                        #   in Loop: Header=BB63_264 Depth=1
	movl	%edi, 248(%rsp)         # 4-byte Spill
	movq	%rsi, %r13
	movl	116(%r14), %r15d
	cmpl	$0, "PinFlag-82.6"(%rip)
	jne	.LBB63_322
# BB#321:                               #   in Loop: Header=BB63_264 Depth=1
	movq	%r10, 328(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_190, %edi
	movl	$1, %esi
	movl	$6, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	movq	%r9, 272(%rsp)          # 8-byte Spill
	callq	Pin
	movq	272(%rsp), %r9          # 8-byte Reload
	movq	328(%rsp), %r10         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movl	$1, "PinFlag-82.6"(%rip)
.LBB63_322:                             # %while.body.i4051
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	%r13, %rsi
	movl	248(%rsp), %edi         # 4-byte Reload
	.align	16, 0x90
.LBB63_323:                             # %while.body.i4051
                                        #   Parent Loop BB63_264 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	shrl	$24, %ebp
	movslq	%r15d, %rax
	movq	80(%r14), %rcx
	movb	%bpl, (%rcx,%rax)
	movl	116(%r14), %r15d
	incl	%r15d
	movl	%r15d, 116(%r14)
	movq	640(%r14), %rdx
	movl	%edx, %ebp
	shll	$8, %ebp
	movl	%ebp, 640(%r14)
	shrq	$32, %rdx
	addl	$-8, %edx
	movl	%edx, 644(%r14)
	cmpl	$7, %edx
	movl	%edx, %eax
	jg	.LBB63_323
	jmp	.LBB63_324
	.align	16, 0x90
.LBB63_319:                             # %entry.while.end_crit_edge.i4037
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	640(%r14), %rbp
	movq	%rbp, %rdx
	shrq	$32, %rdx
.LBB63_324:                             # %bsW.exit4058
                                        #   in Loop: Header=BB63_264 Depth=1
	movl	$32, %ecx
	subl	%edi, %ecx
	subl	%eax, %ecx
	shll	%cl, %ebx
	orl	%ebp, %ebx
	movl	%ebx, 640(%r14)
	addl	%edi, %edx
	movl	%edx, 644(%r14)
	movzwl	92(%r8,%r12,2), %eax
	movzbl	37708(%rax,%r10), %edi
	movl	39256(%r9,%rax,4), %ebp
	cmpl	$7, %edx
	jle	.LBB63_325
# BB#326:                               # %while.body.lr.ph.i4016
                                        #   in Loop: Header=BB63_264 Depth=1
	movl	%edi, 248(%rsp)         # 4-byte Spill
	movq	%r9, 272(%rsp)          # 8-byte Spill
	movq	%r10, 328(%rsp)         # 8-byte Spill
	movq	%rsi, %r13
	movl	116(%r14), %r15d
	cmpl	$0, "PinFlag-82.7"(%rip)
	jne	.LBB63_328
# BB#327:                               #   in Loop: Header=BB63_264 Depth=1
	movl	$.L__unnamed_191, %edi
	movl	$1, %esi
	movl	$6, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movq	240(%rsp), %r8          # 8-byte Reload
	movl	$1, "PinFlag-82.7"(%rip)
.LBB63_328:                             # %while.body.i4025
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	%r13, %rsi
	movq	328(%rsp), %r10         # 8-byte Reload
	movq	272(%rsp), %r9          # 8-byte Reload
	movl	248(%rsp), %edi         # 4-byte Reload
	.align	16, 0x90
.LBB63_329:                             # %while.body.i4025
                                        #   Parent Loop BB63_264 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	shrl	$24, %ebx
	movslq	%r15d, %rax
	movq	80(%r14), %rcx
	movb	%bl, (%rcx,%rax)
	movl	116(%r14), %r15d
	incl	%r15d
	movl	%r15d, 116(%r14)
	movq	640(%r14), %rax
	movl	%eax, %ebx
	shll	$8, %ebx
	movl	%ebx, 640(%r14)
	shrq	$32, %rax
	addl	$-8, %eax
	movl	%eax, 644(%r14)
	cmpl	$7, %eax
	movl	%eax, %edx
	jg	.LBB63_329
	jmp	.LBB63_330
	.align	16, 0x90
.LBB63_325:                             # %entry.while.end_crit_edge.i4011
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	640(%r14), %rbx
	movq	%rbx, %rax
	shrq	$32, %rax
.LBB63_330:                             # %bsW.exit4032
                                        #   in Loop: Header=BB63_264 Depth=1
	movl	$32, %ecx
	subl	%edi, %ecx
	subl	%edx, %ecx
	shll	%cl, %ebp
	orl	%ebx, %ebp
	movl	%ebp, 640(%r14)
	addl	%edi, %eax
	movl	%eax, 644(%r14)
	movzwl	94(%r8,%r12,2), %ecx
	movzbl	37708(%rcx,%r10), %edi
	movl	39256(%r9,%rcx,4), %ebx
	cmpl	$7, %eax
	jle	.LBB63_331
# BB#332:                               # %while.body.lr.ph.i3990
                                        #   in Loop: Header=BB63_264 Depth=1
	movl	%edi, 248(%rsp)         # 4-byte Spill
	movq	%r9, 272(%rsp)          # 8-byte Spill
	movq	%r10, 328(%rsp)         # 8-byte Spill
	movq	%rsi, 320(%rsp)         # 8-byte Spill
	movq	%r8, %r13
	movl	116(%r14), %r15d
	cmpl	$0, "PinFlag-82.8"(%rip)
	jne	.LBB63_334
# BB#333:                               #   in Loop: Header=BB63_264 Depth=1
	movl	$.L__unnamed_192, %edi
	movl	$1, %esi
	movl	$6, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-82.8"(%rip)
.LBB63_334:                             # %while.body.i3999
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	%r13, %r8
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %r10         # 8-byte Reload
	movq	272(%rsp), %r9          # 8-byte Reload
	movl	248(%rsp), %edi         # 4-byte Reload
	.align	16, 0x90
.LBB63_335:                             # %while.body.i3999
                                        #   Parent Loop BB63_264 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	shrl	$24, %ebp
	movslq	%r15d, %rax
	movq	80(%r14), %rcx
	movb	%bpl, (%rcx,%rax)
	movl	116(%r14), %r15d
	incl	%r15d
	movl	%r15d, 116(%r14)
	movq	640(%r14), %rdx
	movl	%edx, %ebp
	shll	$8, %ebp
	movl	%ebp, 640(%r14)
	shrq	$32, %rdx
	addl	$-8, %edx
	movl	%edx, 644(%r14)
	cmpl	$7, %edx
	movl	%edx, %eax
	jg	.LBB63_335
	jmp	.LBB63_336
	.align	16, 0x90
.LBB63_331:                             # %entry.while.end_crit_edge.i3985
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	640(%r14), %rbp
	movq	%rbp, %rdx
	shrq	$32, %rdx
.LBB63_336:                             # %bsW.exit4006
                                        #   in Loop: Header=BB63_264 Depth=1
	movl	$32, %ecx
	subl	%edi, %ecx
	subl	%eax, %ecx
	shll	%cl, %ebx
	orl	%ebp, %ebx
	movl	%ebx, 640(%r14)
	addl	%edi, %edx
	movl	%edx, 644(%r14)
	movzwl	96(%r8,%r12,2), %eax
	movzbl	37708(%rax,%r10), %r15d
	movl	39256(%r9,%rax,4), %r12d
	cmpl	$7, %edx
	jle	.LBB63_337
# BB#338:                               # %while.body.lr.ph.i3964
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	%r9, 272(%rsp)          # 8-byte Spill
	movq	%r10, 328(%rsp)         # 8-byte Spill
	movq	%rsi, 320(%rsp)         # 8-byte Spill
	movq	%r8, %r13
	movl	116(%r14), %ebp
	cmpl	$0, "PinFlag-82.9"(%rip)
	jne	.LBB63_340
# BB#339:                               #   in Loop: Header=BB63_264 Depth=1
	movl	$.L__unnamed_193, %edi
	movl	$1, %esi
	movl	$6, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-82.9"(%rip)
.LBB63_340:                             # %while.body.i3973
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	%r13, %r8
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %r10         # 8-byte Reload
	movq	272(%rsp), %r9          # 8-byte Reload
	.align	16, 0x90
.LBB63_341:                             # %while.body.i3973
                                        #   Parent Loop BB63_264 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	shrl	$24, %ebx
	movslq	%ebp, %rax
	movq	80(%r14), %rcx
	movb	%bl, (%rcx,%rax)
	movl	116(%r14), %ebp
	incl	%ebp
	movl	%ebp, 116(%r14)
	movq	640(%r14), %rax
	movl	%eax, %ebx
	shll	$8, %ebx
	movl	%ebx, 640(%r14)
	shrq	$32, %rax
	addl	$-8, %eax
	movl	%eax, 644(%r14)
	cmpl	$7, %eax
	movl	%eax, %edx
	jg	.LBB63_341
	jmp	.LBB63_342
	.align	16, 0x90
.LBB63_337:                             # %entry.while.end_crit_edge.i3959
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	640(%r14), %rbx
	movq	%rbx, %rax
	shrq	$32, %rax
.LBB63_342:                             # %bsW.exit3980
                                        #   in Loop: Header=BB63_264 Depth=1
	movl	$32, %ecx
	subl	%r15d, %ecx
	subl	%edx, %ecx
	shll	%cl, %r12d
	orl	%ebx, %r12d
	movl	%r12d, 640(%r14)
	addl	%r15d, %eax
	movl	%eax, 644(%r14)
	movslq	264(%rsp), %rcx         # 4-byte Folded Reload
	movzwl	(%r8,%rcx,2), %ecx
	movzbl	37708(%rcx,%r10), %r15d
	movl	39256(%r9,%rcx,4), %ebx
	cmpl	$7, %eax
	jle	.LBB63_343
# BB#344:                               # %while.body.lr.ph.i3938
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	%rsi, %r13
	movl	116(%r14), %ebp
	cmpl	$0, "PinFlag-82.10"(%rip)
	jne	.LBB63_346
# BB#345:                               #   in Loop: Header=BB63_264 Depth=1
	movl	$.L__unnamed_194, %edi
	movl	$1, %esi
	movl	$6, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movq	240(%rsp), %r8          # 8-byte Reload
	movl	$1, "PinFlag-82.10"(%rip)
.LBB63_346:                             # %while.body.i3947
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	%r13, %rsi
	.align	16, 0x90
.LBB63_347:                             # %while.body.i3947
                                        #   Parent Loop BB63_264 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	shrl	$24, %r12d
	movslq	%ebp, %rax
	movq	80(%r14), %rcx
	movb	%r12b, (%rcx,%rax)
	movl	116(%r14), %ebp
	incl	%ebp
	movl	%ebp, 116(%r14)
	movq	640(%r14), %rdx
	movl	%edx, %r12d
	shll	$8, %r12d
	movl	%r12d, 640(%r14)
	shrq	$32, %rdx
	addl	$-8, %edx
	movl	%edx, 644(%r14)
	cmpl	$7, %edx
	movl	%edx, %eax
	jg	.LBB63_347
	jmp	.LBB63_348
	.align	16, 0x90
.LBB63_343:                             # %entry.while.end_crit_edge.i3933
                                        #   in Loop: Header=BB63_264 Depth=1
	movq	640(%r14), %r12
	movq	%r12, %rdx
	shrq	$32, %rdx
.LBB63_348:                             # %bsW.exit3954
                                        #   in Loop: Header=BB63_264 Depth=1
	movl	$32, %ecx
	subl	%r15d, %ecx
	subl	%eax, %ecx
	shll	%cl, %ebx
	orl	%r12d, %ebx
	movl	%ebx, 640(%r14)
	addl	%r15d, %edx
	movl	%edx, 644(%r14)
.LBB63_354:                             # %if.end2448
                                        #   in Loop: Header=BB63_264 Depth=1
	movl	304(%rsp), %eax         # 4-byte Reload
	incl	%eax
	incq	%rsi
	movl	668(%r14), %ebx
	cmpl	%ebx, %eax
	movl	%eax, %ebp
	movq	232(%rsp), %r15         # 8-byte Reload
	jl	.LBB63_264
.LBB63_355:                             # %while.end2451
	movq	288(%rsp), %rax         # 8-byte Reload
	cmpl	%eax, %esi
	je	.LBB63_357
# BB#356:                               # %if.then2454
	movl	$3007, %edi             # imm = 0xBBF
	callq	BZ2_bz__AssertH__fail
.LBB63_357:                             # %if.end2455
	cmpl	$3, 656(%r14)
	jge	.LBB63_358
.LBB63_359:                             # %if.end2463
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB63_2:                               # %if.then
	movq	stderr(%rip), %rdi
	movl	668(%rsi), %ecx
	leaq	124(%rsi), %rbx
	movl	108(%rsi), %edx
	movq	%rax, %rbp
	movl	124(%rsi), %r8d
	movq	%rsi, 256(%rsp)         # 8-byte Spill
	movl	$.L.str.2.67, %esi
	xorl	%eax, %eax
	callq	fprintf
	movq	%rbp, %rax
	jmp	.LBB63_3
.LBB63_242:                             # %if.then1884
	movq	stderr(%rip), %rdi
	movl	116(%r14), %edx
	subl	328(%rsp), %edx         # 4-byte Folded Reload
	movl	$.L.str.7.71, %esi
	xorl	%eax, %eax
	callq	fprintf
	jmp	.LBB63_243
.LBB63_252:                             # %if.then1911
	movq	stderr(%rip), %rdi
	movl	116(%r14), %edx
	subl	%r12d, %edx
	movl	$.L.str.8.72, %esi
	xorl	%eax, %eax
	callq	fprintf
	jmp	.LBB63_253
.LBB63_259:                             # %if.then1964
	movq	stderr(%rip), %rdi
	movl	116(%r14), %edx
	subl	272(%rsp), %edx         # 4-byte Folded Reload
	movl	$.L.str.9.73, %esi
	xorl	%eax, %eax
	callq	fprintf
	jmp	.LBB63_260
.LBB63_358:                             # %if.then2459
	movq	stderr(%rip), %rdi
	movl	116(%r14), %edx
	subl	208(%rsp), %edx         # 4-byte Folded Reload
	movl	$.L.str.10.74, %esi
	xorl	%eax, %eax
	callq	fprintf
	jmp	.LBB63_359
.Lfunc_end63:
	.size	sendMTFValues, .Lfunc_end63-sendMTFValues
	.cfi_endproc

	.align	16, 0x90
	.type	bsW,@function
bsW:                                    # @bsW
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp410:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp411:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp412:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp413:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp414:
	.cfi_def_cfa_offset 48
.Ltmp415:
	.cfi_offset %rbx, -48
.Ltmp416:
	.cfi_offset %r12, -40
.Ltmp417:
	.cfi_offset %r14, -32
.Ltmp418:
	.cfi_offset %r15, -24
.Ltmp419:
	.cfi_offset %rbp, -16
	movl	%edx, %r15d
	movl	%esi, %r14d
	movq	%rdi, %r12
	movl	644(%r12), %edx
	cmpl	$7, %edx
	jle	.LBB64_1
# BB#2:                                 # %while.body.lr.ph
	movl	640(%r12), %ebp
	movl	116(%r12), %ebx
	cmpl	$0, "PinFlag-98."(%rip)
	jne	.LBB64_4
# BB#3:
	movl	$.L__unnamed_195, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-98."(%rip)
	.align	16, 0x90
.LBB64_4:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	shrl	$24, %ebp
	movslq	%ebx, %rax
	movq	80(%r12), %rcx
	movb	%bpl, (%rcx,%rax)
	movl	116(%r12), %ebx
	incl	%ebx
	movl	%ebx, 116(%r12)
	movq	640(%r12), %rax
	movl	%eax, %ebp
	shll	$8, %ebp
	movl	%ebp, 640(%r12)
	shrq	$32, %rax
	addl	$-8, %eax
	movl	%eax, 644(%r12)
	cmpl	$7, %eax
	movl	%eax, %edx
	jg	.LBB64_4
	jmp	.LBB64_5
.LBB64_1:                               # %entry.while.end_crit_edge
	movq	640(%r12), %rbp
	movq	%rbp, %rax
	shrq	$32, %rax
.LBB64_5:                               # %while.end
	movl	$32, %ecx
	subl	%r14d, %ecx
	subl	%edx, %ecx
	shll	%cl, %r15d
	orl	%ebp, %r15d
	movl	%r15d, 640(%r12)
	addl	%r14d, %eax
	movl	%eax, 644(%r12)
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end64:
	.size	bsW, .Lfunc_end64-bsW
	.cfi_endproc

	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI65_0:
	.long	32                      # 0x20
	.long	32                      # 0x20
	.long	32                      # 0x20
	.long	32                      # 0x20
	.text
	.globl	BZ2_decompress
	.align	16, 0x90
	.type	BZ2_decompress,@function
BZ2_decompress:                         # @BZ2_decompress
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp420:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp421:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp422:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp423:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp424:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp425:
	.cfi_def_cfa_offset 56
	subq	$536, %rsp              # imm = 0x218
.Ltmp426:
	.cfi_def_cfa_offset 592
.Ltmp427:
	.cfi_offset %rbx, -56
.Ltmp428:
	.cfi_offset %r12, -48
.Ltmp429:
	.cfi_offset %r13, -40
.Ltmp430:
	.cfi_offset %r14, -32
.Ltmp431:
	.cfi_offset %r15, -24
.Ltmp432:
	.cfi_offset %rbp, -16
	movq	%rdi, %r13
	movq	(%r13), %rax
	movq	%rax, 160(%rsp)         # 8-byte Spill
	movl	8(%r13), %eax
	leaq	64036(%r13), %rcx
	cmpl	$10, %eax
	jne	.LBB65_4
# BB#1:                                 # %if.end.thread
	leaq	64040(%r13), %rax
	movq	%rax, 248(%rsp)         # 8-byte Spill
	leaq	64048(%r13), %rax
	movq	%rax, 256(%rsp)         # 8-byte Spill
	leaq	64056(%r13), %rax
	movq	%rax, 264(%rsp)         # 8-byte Spill
	leaq	64064(%r13), %rax
	movq	%rax, 152(%rsp)         # 8-byte Spill
	leaq	64072(%r13), %r12
	leaq	64080(%r13), %r15
	leaq	64088(%r13), %rbp
	leaq	64096(%r13), %r14
	leaq	64104(%r13), %r11
	leaq	64112(%r13), %r8
	leaq	64120(%r13), %rdi
	leaq	64128(%r13), %r9
	leaq	64136(%r13), %r10
	pxor	%xmm0, %xmm0
	movdqu	%xmm0, 92(%rcx)
	movdqu	%xmm0, 80(%rcx)
	movdqu	%xmm0, 64(%rcx)
	movdqu	%xmm0, 48(%rcx)
	movdqu	%xmm0, 32(%rcx)
	movdqu	%xmm0, 16(%rcx)
	movdqu	%xmm0, (%rcx)
	movq	%rcx, 288(%rsp)         # 8-byte Spill
	leaq	64044(%r13), %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	movl	$10, 8(%r13)
	movl	36(%r13), %ecx
	cmpl	$7, %ecx
	leaq	64052(%r13), %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	leaq	64060(%r13), %rax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	leaq	64068(%r13), %rax
	movq	%rax, 184(%rsp)         # 8-byte Spill
	leaq	64076(%r13), %rax
	movq	%rax, 192(%rsp)         # 8-byte Spill
	leaq	64084(%r13), %rax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	leaq	64092(%r13), %rax
	movq	%rax, 208(%rsp)         # 8-byte Spill
	leaq	64100(%r13), %rax
	movq	%rax, 216(%rsp)         # 8-byte Spill
	leaq	64108(%r13), %rax
	movq	%rax, 224(%rsp)         # 8-byte Spill
	leaq	64116(%r13), %rax
	movq	%rax, 232(%rsp)         # 8-byte Spill
	leaq	36(%r13), %rbx
	jg	.LBB65_618
# BB#2:                                 # %if.end33.lr.ph
	movq	160(%rsp), %rax         # 8-byte Reload
	cmpl	$0, 8(%rax)
	je	.LBB65_3
# BB#12:                                # %if.end38.preheader
	cmpl	$0, "PinFlag-160."(%rip)
	jne	.LBB65_14
# BB#13:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%r9, 312(%rsp)          # 8-byte Spill
	movq	%rbp, 304(%rsp)         # 8-byte Spill
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_196, %edi
	movl	$1, %esi
	movl	$20, %edx
	movl	$45, %ecx
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movl	$1, %r8d
	movq	%r11, %rbp
	movq	%r10, %r14
	callq	Pin
	movq	%r14, %r10
	movq	%rbp, %r11
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	304(%rsp), %rbp         # 8-byte Reload
	movq	312(%rsp), %r9          # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-160."(%rip)
	movq	160(%rsp), %rax         # 8-byte Reload
	.align	16, 0x90
.LBB65_14:                              # %if.end38
                                        # =>This Inner Loop Header: Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, 36(%r13)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_16
# BB#15:                                # %if.then53
                                        #   in Loop: Header=BB65_14 Depth=1
	incl	16(%rax)
.LBB65_16:                              # %while.body.backedge
                                        #   in Loop: Header=BB65_14 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jg	.LBB65_618
# BB#17:                                # %while.body.backedge.if.end33_crit_edge
                                        #   in Loop: Header=BB65_14 Depth=1
	movq	(%r13), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB65_14
.LBB65_3:
	xorl	%eax, %eax
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movq	%rbp, 304(%rsp)         # 8-byte Spill
	movq	%r9, 312(%rsp)          # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 272(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 280(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 296(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 376(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 344(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 456(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 360(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 392(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 400(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 352(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 408(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 384(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 368(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 320(%rsp)         # 8-byte Spill
	xorl	%ebp, %ebp
	movq	%r11, %r9
	movq	%r15, %r11
.LBB65_616:                             # %save_state_and_return
	movq	152(%rsp), %r15         # 8-byte Reload
	jmp	.LBB65_617
.LBB65_4:                               # %if.end
	movq	%rcx, 288(%rsp)         # 8-byte Spill
	movq	64040(%r13), %rcx
	movq	%rcx, 472(%rsp)         # 8-byte Spill
	shrq	$32, %rcx
	movq	%rcx, 424(%rsp)         # 8-byte Spill
	movq	64048(%r13), %rcx
	movq	%rcx, 488(%rsp)         # 8-byte Spill
	shrq	$32, %rcx
	movq	%rcx, 480(%rsp)         # 8-byte Spill
	movq	64056(%r13), %rcx
	movq	%rcx, 440(%rsp)         # 8-byte Spill
	shrq	$32, %rcx
	movq	%rcx, 368(%rsp)         # 8-byte Spill
	movq	64064(%r13), %rcx
	movq	%rcx, 384(%rsp)         # 8-byte Spill
	shrq	$32, %rcx
	movq	%rcx, 416(%rsp)         # 8-byte Spill
	movq	64072(%r13), %rcx
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	shrq	$32, %rcx
	movq	%rcx, 352(%rsp)         # 8-byte Spill
	movq	64080(%r13), %rcx
	movq	%rcx, 400(%rsp)         # 8-byte Spill
	shrq	$32, %rcx
	movq	%rcx, 392(%rsp)         # 8-byte Spill
	movq	64088(%r13), %rcx
	movq	%rcx, 360(%rsp)         # 8-byte Spill
	shrq	$32, %rcx
	movq	%rcx, 448(%rsp)         # 8-byte Spill
	movq	64096(%r13), %rcx
	movq	%rcx, 336(%rsp)         # 8-byte Spill
	shrq	$32, %rcx
	movq	%rcx, 464(%rsp)         # 8-byte Spill
	movq	64104(%r13), %rcx
	movq	%rcx, 456(%rsp)         # 8-byte Spill
	shrq	$32, %rcx
	movq	%rcx, 432(%rsp)         # 8-byte Spill
	movq	64112(%r13), %rcx
	movq	%rcx, 344(%rsp)         # 8-byte Spill
	shrq	$32, %rcx
	movq	%rcx, 376(%rsp)         # 8-byte Spill
	addl	$-11, %eax
	cmpl	$39, %eax
	movl	64036(%r13), %ecx
	movq	%rcx, 320(%rsp)         # 8-byte Spill
	leaq	64040(%r13), %rcx
	movq	%rcx, 248(%rsp)         # 8-byte Spill
	leaq	64048(%r13), %rcx
	movq	%rcx, 256(%rsp)         # 8-byte Spill
	leaq	64056(%r13), %rcx
	movq	%rcx, 264(%rsp)         # 8-byte Spill
	leaq	64064(%r13), %r15
	leaq	64072(%r13), %r12
	leaq	64080(%r13), %r11
	leaq	64088(%r13), %rcx
	movq	%rcx, 304(%rsp)         # 8-byte Spill
	leaq	64096(%r13), %r14
	leaq	64104(%r13), %r9
	leaq	64112(%r13), %r8
	leaq	64120(%r13), %rdi
	movq	64120(%r13), %rcx
	movq	%rcx, 296(%rsp)         # 8-byte Spill
	leaq	64128(%r13), %rcx
	movq	%rcx, 312(%rsp)         # 8-byte Spill
	movq	64128(%r13), %rcx
	movq	%rcx, 280(%rsp)         # 8-byte Spill
	leaq	64136(%r13), %r10
	movq	64136(%r13), %rcx
	movq	%rcx, 272(%rsp)         # 8-byte Spill
	leaq	64044(%r13), %rcx
	movq	%rcx, 240(%rsp)         # 8-byte Spill
	leaq	64052(%r13), %rcx
	movq	%rcx, 168(%rsp)         # 8-byte Spill
	leaq	64060(%r13), %rcx
	movq	%rcx, 176(%rsp)         # 8-byte Spill
	leaq	64068(%r13), %rcx
	movq	%rcx, 184(%rsp)         # 8-byte Spill
	leaq	64076(%r13), %rcx
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	leaq	64084(%r13), %rcx
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	leaq	64092(%r13), %rcx
	movq	%rcx, 208(%rsp)         # 8-byte Spill
	leaq	64100(%r13), %rcx
	movq	%rcx, 216(%rsp)         # 8-byte Spill
	leaq	64108(%r13), %rcx
	movq	%rcx, 224(%rsp)         # 8-byte Spill
	leaq	64116(%r13), %rcx
	movq	%rcx, 232(%rsp)         # 8-byte Spill
	ja	.LBB65_611
# BB#5:                                 # %if.end
	jmpq	*.LJTI65_0(,%rax,8)
.LBB65_18:                              # %if.end.sw.bb62_crit_edge
	movq	472(%rsp), %rax         # 8-byte Reload
	movl	%eax, 128(%rsp)         # 4-byte Spill
	movq	424(%rsp), %rax         # 8-byte Reload
	movl	%eax, 120(%rsp)         # 4-byte Spill
	movq	488(%rsp), %rax         # 8-byte Reload
	movl	%eax, 112(%rsp)         # 4-byte Spill
	movq	480(%rsp), %rax         # 8-byte Reload
	movl	%eax, 108(%rsp)         # 4-byte Spill
	movq	440(%rsp), %rax         # 8-byte Reload
	movl	%eax, 104(%rsp)         # 4-byte Spill
	movq	368(%rsp), %rax         # 8-byte Reload
	movl	%eax, 100(%rsp)         # 4-byte Spill
	movq	384(%rsp), %rax         # 8-byte Reload
	movl	%eax, 96(%rsp)          # 4-byte Spill
	movq	416(%rsp), %rax         # 8-byte Reload
	movl	%eax, 92(%rsp)          # 4-byte Spill
	movq	408(%rsp), %rax         # 8-byte Reload
	movl	%eax, 88(%rsp)          # 4-byte Spill
	movq	352(%rsp), %rax         # 8-byte Reload
	movl	%eax, 84(%rsp)          # 4-byte Spill
	movq	400(%rsp), %rax         # 8-byte Reload
	movl	%eax, 80(%rsp)          # 4-byte Spill
	movq	392(%rsp), %rax         # 8-byte Reload
	movl	%eax, 76(%rsp)          # 4-byte Spill
	movq	360(%rsp), %rax         # 8-byte Reload
	movl	%eax, 72(%rsp)          # 4-byte Spill
	movq	448(%rsp), %rax         # 8-byte Reload
	movl	%eax, 68(%rsp)          # 4-byte Spill
	movq	336(%rsp), %rax         # 8-byte Reload
	movl	%eax, 44(%rsp)          # 4-byte Spill
	movq	464(%rsp), %rax         # 8-byte Reload
	movl	%eax, 64(%rsp)          # 4-byte Spill
	movq	456(%rsp), %rax         # 8-byte Reload
	movl	%eax, 60(%rsp)          # 4-byte Spill
	movq	432(%rsp), %rax         # 8-byte Reload
	movl	%eax, 56(%rsp)          # 4-byte Spill
	movq	344(%rsp), %rax         # 8-byte Reload
	movl	%eax, 52(%rsp)          # 4-byte Spill
	movq	376(%rsp), %rax         # 8-byte Reload
	movl	%eax, 48(%rsp)          # 4-byte Spill
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
	jmp	.LBB65_19
.LBB65_618:                             # %if.then29
	movq	%rbp, 304(%rsp)         # 8-byte Spill
	movq	%r9, 312(%rsp)          # 8-byte Spill
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, 36(%r13)
	movzbl	%al, %eax
	movl	$-5, %ebp
	xorl	%edx, %edx
	movq	%rdx, 320(%rsp)         # 8-byte Spill
	cmpl	$66, %eax
	movl	$0, 128(%rsp)           # 4-byte Folded Spill
	movl	$0, 120(%rsp)           # 4-byte Folded Spill
	movl	$0, 112(%rsp)           # 4-byte Folded Spill
	movl	$0, 108(%rsp)           # 4-byte Folded Spill
	movl	$0, 104(%rsp)           # 4-byte Folded Spill
	movl	$0, 100(%rsp)           # 4-byte Folded Spill
	movl	$0, 96(%rsp)            # 4-byte Folded Spill
	movl	$0, 92(%rsp)            # 4-byte Folded Spill
	movl	$0, 88(%rsp)            # 4-byte Folded Spill
	movl	$0, 84(%rsp)            # 4-byte Folded Spill
	movl	$0, 80(%rsp)            # 4-byte Folded Spill
	movl	$0, 76(%rsp)            # 4-byte Folded Spill
	movl	$0, 72(%rsp)            # 4-byte Folded Spill
	movl	$0, 68(%rsp)            # 4-byte Folded Spill
	movl	$0, 44(%rsp)            # 4-byte Folded Spill
	movl	$0, 64(%rsp)            # 4-byte Folded Spill
	movl	$0, 60(%rsp)            # 4-byte Folded Spill
	movl	$0, 56(%rsp)            # 4-byte Folded Spill
	movl	$0, 52(%rsp)            # 4-byte Folded Spill
	movl	$0, 48(%rsp)            # 4-byte Folded Spill
	movl	$0, %eax
	movq	%rax, 296(%rsp)         # 8-byte Spill
	movl	$0, %eax
	movq	%rax, 280(%rsp)         # 8-byte Spill
	movl	$0, %eax
	movq	%rax, 272(%rsp)         # 8-byte Spill
	movl	$0, %eax
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movl	$0, %eax
	movq	%rax, 376(%rsp)         # 8-byte Spill
	movl	$0, %eax
	movq	%rax, 344(%rsp)         # 8-byte Spill
	movl	$0, %eax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	movl	$0, %eax
	movq	%rax, 456(%rsp)         # 8-byte Spill
	movl	$0, %eax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	movl	$0, %eax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	movl	$0, %eax
	movq	%rax, 360(%rsp)         # 8-byte Spill
	movl	$0, %eax
	movq	%rax, 392(%rsp)         # 8-byte Spill
	movl	$0, %eax
	movq	%rax, 400(%rsp)         # 8-byte Spill
	movl	$0, %eax
	movq	%rax, 352(%rsp)         # 8-byte Spill
	movl	$0, %eax
	movq	%rax, 408(%rsp)         # 8-byte Spill
	movl	$0, %eax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	movl	$0, %eax
	movq	%rax, 384(%rsp)         # 8-byte Spill
	movl	$0, %eax
	movq	%rax, 368(%rsp)         # 8-byte Spill
	movl	$0, %eax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movl	$0, %eax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	movl	$0, %eax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	movl	$0, %eax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	movl	$0, %eax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	movq	%r11, %r9
	movq	%r15, %r11
	movq	152(%rsp), %r15         # 8-byte Reload
	jne	.LBB65_617
.LBB65_19:                              # %sw.bb62
	movl	$11, 8(%r13)
	cmpl	$7, %ecx
	jg	.LBB65_27
# BB#20:                                # %if.end79.lr.ph
	cmpl	$0, "PinFlag-159."(%rip)
	jne	.LBB65_22
# BB#21:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_197, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movl	$1, %r8d
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r9, %r12
	movq	%r10, %r14
	movq	%rbx, %rbp
	movq	%r15, %rbx
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%rbx, %r15
	movq	%rbp, %rbx
	movq	%r14, %r10
	movq	%r12, %r9
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-159."(%rip)
	.align	16, 0x90
.LBB65_22:                              # %if.end79
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_23
# BB#24:                                # %if.end85
                                        #   in Loop: Header=BB65_22 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, 36(%r13)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_26
# BB#25:                                # %if.then108
                                        #   in Loop: Header=BB65_22 Depth=1
	incl	16(%rax)
.LBB65_26:                              # %while.body65.backedge
                                        #   in Loop: Header=BB65_22 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_22
.LBB65_27:                              # %if.then69
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, 36(%r13)
	movzbl	%al, %eax
	movl	$-5, %ebp
	cmpl	$90, %eax
	movl	44(%rsp), %eax          # 4-byte Reload
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movl	48(%rsp), %eax          # 4-byte Reload
	movq	%rax, 376(%rsp)         # 8-byte Spill
	movl	52(%rsp), %eax          # 4-byte Reload
	movq	%rax, 344(%rsp)         # 8-byte Spill
	movl	56(%rsp), %eax          # 4-byte Reload
	movq	%rax, 432(%rsp)         # 8-byte Spill
	movl	60(%rsp), %eax          # 4-byte Reload
	movq	%rax, 456(%rsp)         # 8-byte Spill
	movl	64(%rsp), %eax          # 4-byte Reload
	movq	%rax, 464(%rsp)         # 8-byte Spill
	movl	68(%rsp), %eax          # 4-byte Reload
	movq	%rax, 448(%rsp)         # 8-byte Spill
	movl	72(%rsp), %eax          # 4-byte Reload
	movq	%rax, 360(%rsp)         # 8-byte Spill
	movl	76(%rsp), %eax          # 4-byte Reload
	movq	%rax, 392(%rsp)         # 8-byte Spill
	movl	80(%rsp), %eax          # 4-byte Reload
	movq	%rax, 400(%rsp)         # 8-byte Spill
	movl	84(%rsp), %eax          # 4-byte Reload
	movq	%rax, 352(%rsp)         # 8-byte Spill
	movl	88(%rsp), %eax          # 4-byte Reload
	movq	%rax, 408(%rsp)         # 8-byte Spill
	movl	92(%rsp), %eax          # 4-byte Reload
	movq	%rax, 416(%rsp)         # 8-byte Spill
	movl	96(%rsp), %eax          # 4-byte Reload
	movq	%rax, 384(%rsp)         # 8-byte Spill
	movl	100(%rsp), %eax         # 4-byte Reload
	movq	%rax, 368(%rsp)         # 8-byte Spill
	movl	104(%rsp), %eax         # 4-byte Reload
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movl	108(%rsp), %eax         # 4-byte Reload
	movq	%rax, 480(%rsp)         # 8-byte Spill
	movl	112(%rsp), %eax         # 4-byte Reload
	movq	%rax, 488(%rsp)         # 8-byte Spill
	movl	120(%rsp), %eax         # 4-byte Reload
	movq	%rax, 424(%rsp)         # 8-byte Spill
	movl	128(%rsp), %eax         # 4-byte Reload
	movq	%rax, 472(%rsp)         # 8-byte Spill
	je	.LBB65_29
	jmp	.LBB65_617
.LBB65_611:                             # %sw.default
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, %r14
	movl	$4001, %edi             # imm = 0xFA1
	movq	%r15, 152(%rsp)         # 8-byte Spill
	movq	%r12, %r15
	movq	%r8, %r12
	movq	%r9, %r13
	movq	%r10, %rbx
	movq	%r11, %rbp
	callq	BZ2_bz__AssertH__fail
	movl	$4002, %edi             # imm = 0xFA2
	callq	BZ2_bz__AssertH__fail
	movq	%rbp, %r11
	movq	%rbx, %r10
	movq	%r13, %r9
	movq	%r12, %r8
	movq	%r15, %r12
	movq	152(%rsp), %r15         # 8-byte Reload
	movq	%r14, %rdi
	movq	32(%rsp), %r14          # 8-byte Reload
	xorl	%ebp, %ebp
	jmp	.LBB65_617
.LBB65_28:                              # %if.end.sw.bb119_crit_edge
	movq	472(%rsp), %rax         # 8-byte Reload
	movl	%eax, 128(%rsp)         # 4-byte Spill
	movq	424(%rsp), %rax         # 8-byte Reload
	movl	%eax, 120(%rsp)         # 4-byte Spill
	movq	488(%rsp), %rax         # 8-byte Reload
	movl	%eax, 112(%rsp)         # 4-byte Spill
	movq	480(%rsp), %rax         # 8-byte Reload
	movl	%eax, 108(%rsp)         # 4-byte Spill
	movq	440(%rsp), %rax         # 8-byte Reload
	movl	%eax, 104(%rsp)         # 4-byte Spill
	movq	368(%rsp), %rax         # 8-byte Reload
	movl	%eax, 100(%rsp)         # 4-byte Spill
	movq	384(%rsp), %rax         # 8-byte Reload
	movl	%eax, 96(%rsp)          # 4-byte Spill
	movq	416(%rsp), %rax         # 8-byte Reload
	movl	%eax, 92(%rsp)          # 4-byte Spill
	movq	408(%rsp), %rax         # 8-byte Reload
	movl	%eax, 88(%rsp)          # 4-byte Spill
	movq	352(%rsp), %rax         # 8-byte Reload
	movl	%eax, 84(%rsp)          # 4-byte Spill
	movq	400(%rsp), %rax         # 8-byte Reload
	movl	%eax, 80(%rsp)          # 4-byte Spill
	movq	392(%rsp), %rax         # 8-byte Reload
	movl	%eax, 76(%rsp)          # 4-byte Spill
	movq	360(%rsp), %rax         # 8-byte Reload
	movl	%eax, 72(%rsp)          # 4-byte Spill
	movq	448(%rsp), %rax         # 8-byte Reload
	movl	%eax, 68(%rsp)          # 4-byte Spill
	movq	336(%rsp), %rax         # 8-byte Reload
	movl	%eax, 44(%rsp)          # 4-byte Spill
	movq	464(%rsp), %rax         # 8-byte Reload
	movl	%eax, 64(%rsp)          # 4-byte Spill
	movq	456(%rsp), %rax         # 8-byte Reload
	movl	%eax, 60(%rsp)          # 4-byte Spill
	movq	432(%rsp), %rax         # 8-byte Reload
	movl	%eax, 56(%rsp)          # 4-byte Spill
	movq	344(%rsp), %rax         # 8-byte Reload
	movl	%eax, 52(%rsp)          # 4-byte Spill
	movq	376(%rsp), %rax         # 8-byte Reload
	movl	%eax, 48(%rsp)          # 4-byte Spill
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
.LBB65_29:                              # %sw.bb119
	movl	$12, 8(%r13)
	cmpl	$7, %ecx
	jg	.LBB65_36
# BB#30:                                # %if.end136.lr.ph
	cmpl	$0, "PinFlag-158."(%rip)
	jne	.LBB65_32
# BB#31:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_198, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r8, %rbx
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%r10, %r14
	movq	%r15, %r12
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r12, %r15
	movq	%r14, %r10
	movq	%rbp, %r9
	movq	%rbx, %r8
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-158."(%rip)
	.align	16, 0x90
.LBB65_32:                              # %if.end136
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_23
# BB#33:                                # %if.end142
                                        #   in Loop: Header=BB65_32 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, 36(%r13)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_35
# BB#34:                                # %if.then165
                                        #   in Loop: Header=BB65_32 Depth=1
	incl	16(%rax)
.LBB65_35:                              # %while.body122.backedge
                                        #   in Loop: Header=BB65_32 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_32
.LBB65_36:                              # %if.then126
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, 36(%r13)
	movzbl	%al, %eax
	movl	$-5, %ebp
	cmpl	$104, %eax
	movl	44(%rsp), %eax          # 4-byte Reload
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movl	48(%rsp), %eax          # 4-byte Reload
	movq	%rax, 376(%rsp)         # 8-byte Spill
	movl	52(%rsp), %eax          # 4-byte Reload
	movq	%rax, 344(%rsp)         # 8-byte Spill
	movl	56(%rsp), %eax          # 4-byte Reload
	movq	%rax, 432(%rsp)         # 8-byte Spill
	movl	60(%rsp), %eax          # 4-byte Reload
	movq	%rax, 456(%rsp)         # 8-byte Spill
	movl	64(%rsp), %eax          # 4-byte Reload
	movq	%rax, 464(%rsp)         # 8-byte Spill
	movl	68(%rsp), %eax          # 4-byte Reload
	movq	%rax, 448(%rsp)         # 8-byte Spill
	movl	72(%rsp), %eax          # 4-byte Reload
	movq	%rax, 360(%rsp)         # 8-byte Spill
	movl	76(%rsp), %eax          # 4-byte Reload
	movq	%rax, 392(%rsp)         # 8-byte Spill
	movl	80(%rsp), %eax          # 4-byte Reload
	movq	%rax, 400(%rsp)         # 8-byte Spill
	movl	84(%rsp), %eax          # 4-byte Reload
	movq	%rax, 352(%rsp)         # 8-byte Spill
	movl	88(%rsp), %eax          # 4-byte Reload
	movq	%rax, 408(%rsp)         # 8-byte Spill
	movl	92(%rsp), %eax          # 4-byte Reload
	movq	%rax, 416(%rsp)         # 8-byte Spill
	movl	96(%rsp), %eax          # 4-byte Reload
	movq	%rax, 384(%rsp)         # 8-byte Spill
	movl	100(%rsp), %eax         # 4-byte Reload
	movq	%rax, 368(%rsp)         # 8-byte Spill
	movl	104(%rsp), %eax         # 4-byte Reload
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movl	108(%rsp), %eax         # 4-byte Reload
	movq	%rax, 480(%rsp)         # 8-byte Spill
	movl	112(%rsp), %eax         # 4-byte Reload
	movq	%rax, 488(%rsp)         # 8-byte Spill
	movl	120(%rsp), %eax         # 4-byte Reload
	movq	%rax, 424(%rsp)         # 8-byte Spill
	movl	128(%rsp), %eax         # 4-byte Reload
	movq	%rax, 472(%rsp)         # 8-byte Spill
	je	.LBB65_38
	jmp	.LBB65_617
.LBB65_37:                              # %if.end.sw.bb176_crit_edge
	movq	472(%rsp), %rax         # 8-byte Reload
	movl	%eax, 128(%rsp)         # 4-byte Spill
	movq	424(%rsp), %rax         # 8-byte Reload
	movl	%eax, 120(%rsp)         # 4-byte Spill
	movq	488(%rsp), %rax         # 8-byte Reload
	movl	%eax, 112(%rsp)         # 4-byte Spill
	movq	480(%rsp), %rax         # 8-byte Reload
	movl	%eax, 108(%rsp)         # 4-byte Spill
	movq	440(%rsp), %rax         # 8-byte Reload
	movl	%eax, 104(%rsp)         # 4-byte Spill
	movq	368(%rsp), %rax         # 8-byte Reload
	movl	%eax, 100(%rsp)         # 4-byte Spill
	movq	384(%rsp), %rax         # 8-byte Reload
	movl	%eax, 96(%rsp)          # 4-byte Spill
	movq	416(%rsp), %rax         # 8-byte Reload
	movl	%eax, 92(%rsp)          # 4-byte Spill
	movq	408(%rsp), %rax         # 8-byte Reload
	movl	%eax, 88(%rsp)          # 4-byte Spill
	movq	352(%rsp), %rax         # 8-byte Reload
	movl	%eax, 84(%rsp)          # 4-byte Spill
	movq	400(%rsp), %rax         # 8-byte Reload
	movl	%eax, 80(%rsp)          # 4-byte Spill
	movq	392(%rsp), %rax         # 8-byte Reload
	movl	%eax, 76(%rsp)          # 4-byte Spill
	movq	360(%rsp), %rax         # 8-byte Reload
	movl	%eax, 72(%rsp)          # 4-byte Spill
	movq	448(%rsp), %rax         # 8-byte Reload
	movl	%eax, 68(%rsp)          # 4-byte Spill
	movq	336(%rsp), %rax         # 8-byte Reload
	movl	%eax, 44(%rsp)          # 4-byte Spill
	movq	464(%rsp), %rax         # 8-byte Reload
	movl	%eax, 64(%rsp)          # 4-byte Spill
	movq	456(%rsp), %rax         # 8-byte Reload
	movl	%eax, 60(%rsp)          # 4-byte Spill
	movq	432(%rsp), %rax         # 8-byte Reload
	movl	%eax, 56(%rsp)          # 4-byte Spill
	movq	344(%rsp), %rax         # 8-byte Reload
	movl	%eax, 52(%rsp)          # 4-byte Spill
	movq	376(%rsp), %rax         # 8-byte Reload
	movl	%eax, 48(%rsp)          # 4-byte Spill
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
.LBB65_38:                              # %sw.bb176
	movl	$13, 8(%r13)
	cmpl	$7, %ecx
	jg	.LBB65_45
# BB#39:                                # %if.end192.lr.ph
	cmpl	$0, "PinFlag-157."(%rip)
	jne	.LBB65_41
# BB#40:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_199, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r8, %rbx
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%r10, %r14
	movq	%r15, %r12
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r12, %r15
	movq	%r14, %r10
	movq	%rbp, %r9
	movq	%rbx, %r8
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-157."(%rip)
	.align	16, 0x90
.LBB65_41:                              # %if.end192
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_23
# BB#42:                                # %if.end198
                                        #   in Loop: Header=BB65_41 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, 36(%r13)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_44
# BB#43:                                # %if.then221
                                        #   in Loop: Header=BB65_41 Depth=1
	incl	16(%rax)
.LBB65_44:                              # %while.body179.backedge
                                        #   in Loop: Header=BB65_41 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_41
.LBB65_45:                              # %if.then183
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movzbl	%al, %eax
	movl	%ecx, 36(%r13)
	movl	%eax, 40(%r13)
	leal	-49(%rax), %ecx
	movl	$-5, %ebp
	cmpl	$8, %ecx
	ja	.LBB65_23
# BB#46:                                # %if.end234
	movq	%r15, 152(%rsp)         # 8-byte Spill
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r11, %r12
	movq	%r10, 16(%rsp)          # 8-byte Spill
	movq	%r9, %r15
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	addl	$-48, %eax
	movl	%eax, 40(%r13)
	cmpb	$0, 44(%r13)
	movq	160(%rsp), %rbp         # 8-byte Reload
	movq	56(%rbp), %rcx
	movq	72(%rbp), %rdi
	je	.LBB65_50
# BB#47:                                # %if.then237
	imull	$200000, %eax, %esi     # imm = 0x30D40
	movl	$1, %edx
	callq	*%rcx
	movq	%rax, 3160(%r13)
	movq	72(%rbp), %rdi
	imull	$100000, 40(%r13), %esi # imm = 0x186A0
	sarl	%esi
	movl	$1, %edx
	callq	*56(%rbp)
	movq	%rax, 3168(%r13)
	testq	%rax, %rax
	movl	$-3, %ebp
	je	.LBB65_48
# BB#49:                                # %if.then237
	movq	3160(%r13), %rax
	jmp	.LBB65_51
.LBB65_6:                               # %if.end.sw.bb275_crit_edge
	movq	472(%rsp), %rax         # 8-byte Reload
	movl	%eax, 128(%rsp)         # 4-byte Spill
	movq	424(%rsp), %rax         # 8-byte Reload
	movl	%eax, 120(%rsp)         # 4-byte Spill
	movq	488(%rsp), %rax         # 8-byte Reload
	movl	%eax, 112(%rsp)         # 4-byte Spill
	movq	480(%rsp), %rax         # 8-byte Reload
	movl	%eax, 108(%rsp)         # 4-byte Spill
	movq	440(%rsp), %rax         # 8-byte Reload
	movl	%eax, 104(%rsp)         # 4-byte Spill
	movq	368(%rsp), %rax         # 8-byte Reload
	movl	%eax, 100(%rsp)         # 4-byte Spill
	movq	384(%rsp), %rax         # 8-byte Reload
	movl	%eax, 96(%rsp)          # 4-byte Spill
	movq	416(%rsp), %rax         # 8-byte Reload
	movl	%eax, 92(%rsp)          # 4-byte Spill
	movq	408(%rsp), %rax         # 8-byte Reload
	movl	%eax, 88(%rsp)          # 4-byte Spill
	movq	352(%rsp), %rax         # 8-byte Reload
	movl	%eax, 84(%rsp)          # 4-byte Spill
	movq	400(%rsp), %rax         # 8-byte Reload
	movl	%eax, 80(%rsp)          # 4-byte Spill
	movq	392(%rsp), %rax         # 8-byte Reload
	movl	%eax, 76(%rsp)          # 4-byte Spill
	movq	360(%rsp), %rax         # 8-byte Reload
	movl	%eax, 72(%rsp)          # 4-byte Spill
	movq	448(%rsp), %rax         # 8-byte Reload
	movl	%eax, 68(%rsp)          # 4-byte Spill
	movq	336(%rsp), %rax         # 8-byte Reload
	movl	%eax, 44(%rsp)          # 4-byte Spill
	movq	464(%rsp), %rax         # 8-byte Reload
	movl	%eax, 64(%rsp)          # 4-byte Spill
	movq	456(%rsp), %rax         # 8-byte Reload
	movl	%eax, 60(%rsp)          # 4-byte Spill
	movq	432(%rsp), %rax         # 8-byte Reload
	movl	%eax, 56(%rsp)          # 4-byte Spill
	movq	344(%rsp), %rax         # 8-byte Reload
	movl	%eax, 52(%rsp)          # 4-byte Spill
	movq	376(%rsp), %rax         # 8-byte Reload
	movl	%eax, 48(%rsp)          # 4-byte Spill
	leaq	36(%r13), %rbx
	jmp	.LBB65_52
.LBB65_62:                              # %if.end.sw.bb337_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
	jmp	.LBB65_63
.LBB65_71:                              # %if.end.sw.bb394_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
	jmp	.LBB65_72
.LBB65_80:                              # %if.end.sw.bb451_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
	jmp	.LBB65_81
.LBB65_89:                              # %if.end.sw.bb508_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
	jmp	.LBB65_90
.LBB65_98:                              # %if.end.sw.bb565_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
	jmp	.LBB65_99
.LBB65_7:                               # %if.end.sw.bb629_crit_edge
	leaq	36(%r13), %rbx
	jmp	.LBB65_110
.LBB65_118:                             # %if.end.sw.bb686_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
	jmp	.LBB65_119
.LBB65_127:                             # %if.end.sw.bb743_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
	jmp	.LBB65_128
.LBB65_136:                             # %if.end.sw.bb800_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
	jmp	.LBB65_137
.LBB65_145:                             # %if.end.sw.bb857_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
	jmp	.LBB65_146
.LBB65_154:                             # %if.end.sw.bb909_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
	jmp	.LBB65_155
.LBB65_163:                             # %if.end.sw.bb966_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
	jmp	.LBB65_164
.LBB65_172:                             # %if.end.sw.bb1023_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
	jmp	.LBB65_173
.LBB65_228:                             # %if.end.sw.bb1312_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
.LBB65_229:                             # %sw.bb1312
	movl	$31, 8(%r13)
	cmpl	$14, %ecx
	jg	.LBB65_236
# BB#230:                               # %if.end1328.lr.ph
	cmpl	$0, "PinFlag-140."(%rip)
	jne	.LBB65_232
# BB#231:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_200, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r15, 152(%rsp)         # 8-byte Spill
	movq	%r8, %r15
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r10, %r12
	movq	%r11, %r14
	callq	Pin
	movq	%r14, %r11
	movq	%r12, %r10
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r15, %r8
	movq	152(%rsp), %r15         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-140."(%rip)
.LBB65_232:                             # %if.end1328
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#233:                               # %if.end1334
                                        #   in Loop: Header=BB65_232 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, 36(%r13)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_235
# BB#234:                               # %if.then1357
                                        #   in Loop: Header=BB65_232 Depth=1
	incl	16(%rax)
.LBB65_235:                             # %while.body1315.backedge
                                        #   in Loop: Header=BB65_232 Depth=1
	movl	(%rbx), %ecx
	cmpl	$14, %ecx
	jle	.LBB65_232
.LBB65_236:                             # %if.then1319
	movl	32(%r13), %edx
	addl	$-15, %ecx
	shrl	%cl, %edx
	xorl	%eax, %eax
	andl	$32767, %edx            # imm = 0x7FFF
	movl	%ecx, 36(%r13)
	movl	$-4, %ebp
	movl	$0, %ecx
	movq	%rcx, 440(%rsp)         # 8-byte Spill
	jne	.LBB65_237
	jmp	.LBB65_617
.LBB65_320:                             # %if.end.sw.bb1609_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %eax
	jmp	.LBB65_321
.LBB65_9:                               # %if.end.sw.bb1878_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %eax
	jmp	.LBB65_346
.LBB65_10:                              # %if.end.sw.bb2073_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %eax
	jmp	.LBB65_382
.LBB65_11:                              # %if.end.sw.bb2499_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %eax
	jmp	.LBB65_468
.LBB65_530:                             # %if.end.sw.bb2965_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
	jmp	.LBB65_531
.LBB65_539:                             # %if.end.sw.bb3023_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
	jmp	.LBB65_540
.LBB65_548:                             # %if.end.sw.bb3081_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
	jmp	.LBB65_549
.LBB65_557:                             # %if.end.sw.bb3139_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
	jmp	.LBB65_558
.LBB65_566:                             # %if.end.sw.bb3197_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
	jmp	.LBB65_567
.LBB65_8:                               # %if.end.sw.bb3255_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
	jmp	.LBB65_576
.LBB65_584:                             # %if.end.sw.bb3313_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
	jmp	.LBB65_585
.LBB65_593:                             # %if.end.sw.bb3371_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
	jmp	.LBB65_594
.LBB65_602:                             # %if.end.sw.bb3429_crit_edge
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
	jmp	.LBB65_603
.LBB65_50:                              # %if.else
	imull	$400000, %eax, %esi     # imm = 0x61A80
	movl	$1, %edx
	callq	*%rcx
	movq	%rax, 3152(%r13)
	movl	$-3, %ebp
.LBB65_51:                              # %if.else
	testq	%rax, %rax
	movl	44(%rsp), %eax          # 4-byte Reload
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movl	48(%rsp), %eax          # 4-byte Reload
	movq	%rax, 376(%rsp)         # 8-byte Spill
	movl	52(%rsp), %eax          # 4-byte Reload
	movq	%rax, 344(%rsp)         # 8-byte Spill
	movl	56(%rsp), %eax          # 4-byte Reload
	movq	%rax, 432(%rsp)         # 8-byte Spill
	movl	60(%rsp), %eax          # 4-byte Reload
	movq	%rax, 456(%rsp)         # 8-byte Spill
	movl	64(%rsp), %eax          # 4-byte Reload
	movq	%rax, 464(%rsp)         # 8-byte Spill
	movl	68(%rsp), %eax          # 4-byte Reload
	movq	%rax, 448(%rsp)         # 8-byte Spill
	movl	72(%rsp), %eax          # 4-byte Reload
	movq	%rax, 360(%rsp)         # 8-byte Spill
	movl	76(%rsp), %eax          # 4-byte Reload
	movq	%rax, 392(%rsp)         # 8-byte Spill
	movl	80(%rsp), %eax          # 4-byte Reload
	movq	%rax, 400(%rsp)         # 8-byte Spill
	movl	84(%rsp), %eax          # 4-byte Reload
	movq	%rax, 352(%rsp)         # 8-byte Spill
	movl	88(%rsp), %eax          # 4-byte Reload
	movq	%rax, 408(%rsp)         # 8-byte Spill
	movl	92(%rsp), %eax          # 4-byte Reload
	movq	%rax, 416(%rsp)         # 8-byte Spill
	movl	96(%rsp), %eax          # 4-byte Reload
	movq	%rax, 384(%rsp)         # 8-byte Spill
	movl	100(%rsp), %eax         # 4-byte Reload
	movq	%rax, 368(%rsp)         # 8-byte Spill
	movl	104(%rsp), %eax         # 4-byte Reload
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movl	108(%rsp), %eax         # 4-byte Reload
	movq	%rax, 480(%rsp)         # 8-byte Spill
	movl	112(%rsp), %eax         # 4-byte Reload
	movq	%rax, 488(%rsp)         # 8-byte Spill
	movl	120(%rsp), %eax         # 4-byte Reload
	movq	%rax, 424(%rsp)         # 8-byte Spill
	movl	128(%rsp), %eax         # 4-byte Reload
	movq	%rax, 472(%rsp)         # 8-byte Spill
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	%r15, %r9
	movq	16(%rsp), %r10          # 8-byte Reload
	movq	%r12, %r11
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	152(%rsp), %r15         # 8-byte Reload
	je	.LBB65_617
.LBB65_52:                              # %sw.bb275
	movl	$14, 8(%r13)
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jg	.LBB65_59
# BB#53:                                # %if.end292.lr.ph
	cmpl	$0, "PinFlag-156."(%rip)
	jne	.LBB65_55
# BB#54:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_201, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r8, %rbx
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r10, %r12
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%r12, %r10
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	%rbp, %r9
	movq	%rbx, %r8
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-156."(%rip)
.LBB65_55:                              # %if.end292
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_23
# BB#56:                                # %if.end298
                                        #   in Loop: Header=BB65_55 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, (%rbx)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_58
# BB#57:                                # %if.then321
                                        #   in Loop: Header=BB65_55 Depth=1
	incl	16(%rax)
.LBB65_58:                              # %while.body278.backedge
                                        #   in Loop: Header=BB65_55 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_55
.LBB65_59:                              # %if.then282
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, (%rbx)
	movzbl	%al, %eax
	cmpl	$23, %eax
	je	.LBB65_60
# BB#61:                                # %if.then282
	cmpl	$49, %eax
	movl	128(%rsp), %eax         # 4-byte Reload
	movq	%rax, 472(%rsp)         # 8-byte Spill
	movl	120(%rsp), %eax         # 4-byte Reload
	movq	%rax, 424(%rsp)         # 8-byte Spill
	movl	112(%rsp), %eax         # 4-byte Reload
	movq	%rax, 488(%rsp)         # 8-byte Spill
	movl	108(%rsp), %eax         # 4-byte Reload
	movq	%rax, 480(%rsp)         # 8-byte Spill
	movl	104(%rsp), %eax         # 4-byte Reload
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movl	100(%rsp), %eax         # 4-byte Reload
	movq	%rax, 368(%rsp)         # 8-byte Spill
	movl	96(%rsp), %eax          # 4-byte Reload
	movq	%rax, 384(%rsp)         # 8-byte Spill
	movl	92(%rsp), %eax          # 4-byte Reload
	movq	%rax, 416(%rsp)         # 8-byte Spill
	movl	88(%rsp), %eax          # 4-byte Reload
	movq	%rax, 408(%rsp)         # 8-byte Spill
	movl	84(%rsp), %eax          # 4-byte Reload
	movq	%rax, 352(%rsp)         # 8-byte Spill
	movl	80(%rsp), %eax          # 4-byte Reload
	movq	%rax, 400(%rsp)         # 8-byte Spill
	movl	76(%rsp), %eax          # 4-byte Reload
	movq	%rax, 392(%rsp)         # 8-byte Spill
	movl	72(%rsp), %eax          # 4-byte Reload
	movq	%rax, 360(%rsp)         # 8-byte Spill
	movl	68(%rsp), %eax          # 4-byte Reload
	movq	%rax, 448(%rsp)         # 8-byte Spill
	movl	44(%rsp), %eax          # 4-byte Reload
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movl	64(%rsp), %eax          # 4-byte Reload
	movq	%rax, 464(%rsp)         # 8-byte Spill
	movl	60(%rsp), %eax          # 4-byte Reload
	movq	%rax, 456(%rsp)         # 8-byte Spill
	movl	56(%rsp), %eax          # 4-byte Reload
	movq	%rax, 432(%rsp)         # 8-byte Spill
	movl	52(%rsp), %eax          # 4-byte Reload
	movq	%rax, 344(%rsp)         # 8-byte Spill
	movl	48(%rsp), %eax          # 4-byte Reload
	movq	%rax, 376(%rsp)         # 8-byte Spill
	movl	$-4, %ebp
	jne	.LBB65_617
.LBB65_63:                              # %sw.bb337
	movl	$15, 8(%r13)
	cmpl	$7, %ecx
	jg	.LBB65_70
# BB#64:                                # %if.end354.lr.ph
	cmpl	$0, "PinFlag-155."(%rip)
	jne	.LBB65_66
# BB#65:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_202, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r10, %rbx
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbx, %r10
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-155."(%rip)
.LBB65_66:                              # %if.end354
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#67:                                # %if.end360
                                        #   in Loop: Header=BB65_66 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, (%rbx)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_69
# BB#68:                                # %if.then383
                                        #   in Loop: Header=BB65_66 Depth=1
	incl	16(%rax)
.LBB65_69:                              # %while.body340.backedge
                                        #   in Loop: Header=BB65_66 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_66
.LBB65_70:                              # %if.then344
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, (%rbx)
	movzbl	%al, %eax
	movl	$-4, %ebp
	cmpl	$65, %eax
	jne	.LBB65_617
.LBB65_72:                              # %sw.bb394
	movl	$16, 8(%r13)
	cmpl	$7, %ecx
	jg	.LBB65_79
# BB#73:                                # %if.end411.lr.ph
	cmpl	$0, "PinFlag-154."(%rip)
	jne	.LBB65_75
# BB#74:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_203, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r10, %rbx
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbx, %r10
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-154."(%rip)
.LBB65_75:                              # %if.end411
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#76:                                # %if.end417
                                        #   in Loop: Header=BB65_75 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, (%rbx)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_78
# BB#77:                                # %if.then440
                                        #   in Loop: Header=BB65_75 Depth=1
	incl	16(%rax)
.LBB65_78:                              # %while.body397.backedge
                                        #   in Loop: Header=BB65_75 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_75
.LBB65_79:                              # %if.then401
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, (%rbx)
	movzbl	%al, %eax
	movl	$-4, %ebp
	cmpl	$89, %eax
	jne	.LBB65_617
.LBB65_81:                              # %sw.bb451
	movl	$17, 8(%r13)
	cmpl	$7, %ecx
	jg	.LBB65_88
# BB#82:                                # %if.end468.lr.ph
	cmpl	$0, "PinFlag-153."(%rip)
	jne	.LBB65_84
# BB#83:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_204, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r10, %rbx
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbx, %r10
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-153."(%rip)
.LBB65_84:                              # %if.end468
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#85:                                # %if.end474
                                        #   in Loop: Header=BB65_84 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, (%rbx)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_87
# BB#86:                                # %if.then497
                                        #   in Loop: Header=BB65_84 Depth=1
	incl	16(%rax)
.LBB65_87:                              # %while.body454.backedge
                                        #   in Loop: Header=BB65_84 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_84
.LBB65_88:                              # %if.then458
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, (%rbx)
	movzbl	%al, %eax
	movl	$-4, %ebp
	cmpl	$38, %eax
	jne	.LBB65_617
.LBB65_90:                              # %sw.bb508
	movl	$18, 8(%r13)
	cmpl	$7, %ecx
	jg	.LBB65_97
# BB#91:                                # %if.end525.lr.ph
	cmpl	$0, "PinFlag-152."(%rip)
	jne	.LBB65_93
# BB#92:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_205, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r10, %rbx
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbx, %r10
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-152."(%rip)
.LBB65_93:                              # %if.end525
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#94:                                # %if.end531
                                        #   in Loop: Header=BB65_93 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, (%rbx)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_96
# BB#95:                                # %if.then554
                                        #   in Loop: Header=BB65_93 Depth=1
	incl	16(%rax)
.LBB65_96:                              # %while.body511.backedge
                                        #   in Loop: Header=BB65_93 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_93
.LBB65_97:                              # %if.then515
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, (%rbx)
	movzbl	%al, %eax
	movl	$-4, %ebp
	cmpl	$83, %eax
	jne	.LBB65_617
.LBB65_99:                              # %sw.bb565
	movl	$19, 8(%r13)
	cmpl	$7, %ecx
	jg	.LBB65_106
# BB#100:                               # %if.end582.lr.ph
	cmpl	$0, "PinFlag-151."(%rip)
	jne	.LBB65_102
# BB#101:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_206, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r10, %rbx
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbx, %r10
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-151."(%rip)
.LBB65_102:                             # %if.end582
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#103:                               # %if.end588
                                        #   in Loop: Header=BB65_102 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, (%rbx)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_105
# BB#104:                               # %if.then611
                                        #   in Loop: Header=BB65_102 Depth=1
	incl	16(%rax)
.LBB65_105:                             # %while.body568.backedge
                                        #   in Loop: Header=BB65_102 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_102
.LBB65_106:                             # %if.then572
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, (%rbx)
	movzbl	%al, %eax
	movl	$-4, %ebp
	cmpl	$89, %eax
	jne	.LBB65_617
# BB#107:                               # %if.end621
	movq	48(%r13), %rax
	leal	1(%rax), %edx
	movl	%edx, 48(%r13)
	shrq	$32, %rax
	cmpl	$2, %eax
	jge	.LBB65_108
.LBB65_109:                             # %if.end628
	movl	$0, 3176(%r13)
.LBB65_110:                             # %sw.bb629
	movl	$20, 8(%r13)
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jg	.LBB65_117
# BB#111:                               # %if.end646.lr.ph
	cmpl	$0, "PinFlag-150."(%rip)
	jne	.LBB65_113
# BB#112:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_207, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r10, %rbx
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbx, %r10
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-150."(%rip)
.LBB65_113:                             # %if.end646
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#114:                               # %if.end652
                                        #   in Loop: Header=BB65_113 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, (%rbx)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_116
# BB#115:                               # %if.then675
                                        #   in Loop: Header=BB65_113 Depth=1
	incl	16(%rax)
.LBB65_116:                             # %while.body632.backedge
                                        #   in Loop: Header=BB65_113 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_113
.LBB65_117:                             # %if.then636
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, (%rbx)
	movl	3176(%r13), %edx
	shll	$8, %edx
	movzbl	%al, %eax
	orl	%edx, %eax
	movl	%eax, 3176(%r13)
.LBB65_119:                             # %sw.bb686
	movl	$21, 8(%r13)
	cmpl	$7, %ecx
	jg	.LBB65_126
# BB#120:                               # %if.end703.lr.ph
	cmpl	$0, "PinFlag-149."(%rip)
	jne	.LBB65_122
# BB#121:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_208, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r10, %rbx
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbx, %r10
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-149."(%rip)
	.align	16, 0x90
.LBB65_122:                             # %if.end703
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#123:                               # %if.end709
                                        #   in Loop: Header=BB65_122 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, (%rbx)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_125
# BB#124:                               # %if.then732
                                        #   in Loop: Header=BB65_122 Depth=1
	incl	16(%rax)
.LBB65_125:                             # %while.body689.backedge
                                        #   in Loop: Header=BB65_122 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_122
.LBB65_126:                             # %if.then693
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, (%rbx)
	movl	3176(%r13), %edx
	shll	$8, %edx
	movzbl	%al, %eax
	orl	%edx, %eax
	movl	%eax, 3176(%r13)
.LBB65_128:                             # %sw.bb743
	movl	$22, 8(%r13)
	cmpl	$7, %ecx
	jg	.LBB65_135
# BB#129:                               # %if.end760.lr.ph
	cmpl	$0, "PinFlag-148."(%rip)
	jne	.LBB65_131
# BB#130:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_209, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r10, %rbx
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbx, %r10
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-148."(%rip)
	.align	16, 0x90
.LBB65_131:                             # %if.end760
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#132:                               # %if.end766
                                        #   in Loop: Header=BB65_131 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, (%rbx)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_134
# BB#133:                               # %if.then789
                                        #   in Loop: Header=BB65_131 Depth=1
	incl	16(%rax)
.LBB65_134:                             # %while.body746.backedge
                                        #   in Loop: Header=BB65_131 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_131
.LBB65_135:                             # %if.then750
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, (%rbx)
	movl	3176(%r13), %edx
	shll	$8, %edx
	movzbl	%al, %eax
	orl	%edx, %eax
	movl	%eax, 3176(%r13)
.LBB65_137:                             # %sw.bb800
	movl	$23, 8(%r13)
	cmpl	$7, %ecx
	jg	.LBB65_144
# BB#138:                               # %if.end817.lr.ph
	cmpl	$0, "PinFlag-147."(%rip)
	jne	.LBB65_140
# BB#139:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_210, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r10, %rbx
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbx, %r10
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-147."(%rip)
	.align	16, 0x90
.LBB65_140:                             # %if.end817
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#141:                               # %if.end823
                                        #   in Loop: Header=BB65_140 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, (%rbx)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_143
# BB#142:                               # %if.then846
                                        #   in Loop: Header=BB65_140 Depth=1
	incl	16(%rax)
.LBB65_143:                             # %while.body803.backedge
                                        #   in Loop: Header=BB65_140 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_140
.LBB65_144:                             # %if.then807
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, (%rbx)
	movl	3176(%r13), %edx
	shll	$8, %edx
	movzbl	%al, %eax
	orl	%edx, %eax
	movl	%eax, 3176(%r13)
.LBB65_146:                             # %sw.bb857
	movl	$24, 8(%r13)
	testl	%ecx, %ecx
	jg	.LBB65_153
# BB#147:                               # %if.end874.lr.ph
	cmpl	$0, "PinFlag-146."(%rip)
	jne	.LBB65_149
# BB#148:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_211, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r10, %rbx
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbx, %r10
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-146."(%rip)
	.align	16, 0x90
.LBB65_149:                             # %if.end874
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#150:                               # %if.end880
                                        #   in Loop: Header=BB65_149 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, (%rbx)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_152
# BB#151:                               # %if.then903
                                        #   in Loop: Header=BB65_149 Depth=1
	incl	16(%rax)
.LBB65_152:                             # %while.body860.backedge
                                        #   in Loop: Header=BB65_149 Depth=1
	movl	(%rbx), %ecx
	testl	%ecx, %ecx
	jle	.LBB65_149
.LBB65_153:                             # %if.then864
	movl	32(%r13), %eax
	decl	%ecx
	shrl	%cl, %eax
	movl	%ecx, (%rbx)
	andb	$1, %al
	movb	%al, 20(%r13)
	movl	$0, 56(%r13)
.LBB65_155:                             # %sw.bb909
	movl	$25, 8(%r13)
	cmpl	$7, %ecx
	jg	.LBB65_162
# BB#156:                               # %if.end926.lr.ph
	cmpl	$0, "PinFlag-145."(%rip)
	jne	.LBB65_158
# BB#157:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_212, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r10, %rbx
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbx, %r10
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-145."(%rip)
	.align	16, 0x90
.LBB65_158:                             # %if.end926
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#159:                               # %if.end932
                                        #   in Loop: Header=BB65_158 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, (%rbx)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_161
# BB#160:                               # %if.then955
                                        #   in Loop: Header=BB65_158 Depth=1
	incl	16(%rax)
.LBB65_161:                             # %while.body912.backedge
                                        #   in Loop: Header=BB65_158 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_158
.LBB65_162:                             # %if.then916
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, (%rbx)
	movl	56(%r13), %edx
	shll	$8, %edx
	movzbl	%al, %eax
	orl	%edx, %eax
	movl	%eax, 56(%r13)
.LBB65_164:                             # %sw.bb966
	movl	$26, 8(%r13)
	cmpl	$7, %ecx
	jg	.LBB65_171
# BB#165:                               # %if.end983.lr.ph
	cmpl	$0, "PinFlag-144."(%rip)
	jne	.LBB65_167
# BB#166:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_213, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r10, %rbx
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbx, %r10
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-144."(%rip)
	.align	16, 0x90
.LBB65_167:                             # %if.end983
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#168:                               # %if.end989
                                        #   in Loop: Header=BB65_167 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, (%rbx)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_170
# BB#169:                               # %if.then1012
                                        #   in Loop: Header=BB65_167 Depth=1
	incl	16(%rax)
.LBB65_170:                             # %while.body969.backedge
                                        #   in Loop: Header=BB65_167 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_167
.LBB65_171:                             # %if.then973
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, (%rbx)
	movl	56(%r13), %edx
	shll	$8, %edx
	movzbl	%al, %eax
	orl	%edx, %eax
	movl	%eax, 56(%r13)
.LBB65_173:                             # %sw.bb1023
	movl	$27, 8(%r13)
	cmpl	$7, %ecx
	jg	.LBB65_180
# BB#174:                               # %if.end1040.lr.ph
	cmpl	$0, "PinFlag-143."(%rip)
	jne	.LBB65_176
# BB#175:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_214, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r10, %rbx
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbx, %r10
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-143."(%rip)
	.align	16, 0x90
.LBB65_176:                             # %if.end1040
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#177:                               # %if.end1046
                                        #   in Loop: Header=BB65_176 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, (%rbx)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_179
# BB#178:                               # %if.then1069
                                        #   in Loop: Header=BB65_176 Depth=1
	incl	16(%rax)
.LBB65_179:                             # %while.body1026.backedge
                                        #   in Loop: Header=BB65_176 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_176
.LBB65_180:                             # %if.then1030
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, (%rbx)
	movl	56(%r13), %edx
	shll	$8, %edx
	movzbl	%al, %ecx
	orl	%edx, %ecx
	movl	%ecx, 56(%r13)
	movl	$-4, %ebp
	testl	%ecx, %ecx
	js	.LBB65_617
# BB#181:                               # %if.end1084
	imull	$100000, 40(%r13), %edx # imm = 0x186A0
	orl	$10, %edx
	xorl	%eax, %eax
	cmpl	%edx, %ecx
	jg	.LBB65_617
	jmp	.LBB65_182
.LBB65_23:
	movl	44(%rsp), %eax          # 4-byte Reload
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movl	48(%rsp), %eax          # 4-byte Reload
	movq	%rax, 376(%rsp)         # 8-byte Spill
	movl	52(%rsp), %eax          # 4-byte Reload
	movq	%rax, 344(%rsp)         # 8-byte Spill
	movl	56(%rsp), %eax          # 4-byte Reload
	movq	%rax, 432(%rsp)         # 8-byte Spill
	movl	60(%rsp), %eax          # 4-byte Reload
	movq	%rax, 456(%rsp)         # 8-byte Spill
	movl	64(%rsp), %eax          # 4-byte Reload
	movq	%rax, 464(%rsp)         # 8-byte Spill
	movl	68(%rsp), %eax          # 4-byte Reload
	movq	%rax, 448(%rsp)         # 8-byte Spill
	movl	72(%rsp), %eax          # 4-byte Reload
	movq	%rax, 360(%rsp)         # 8-byte Spill
	movl	76(%rsp), %eax          # 4-byte Reload
	movq	%rax, 392(%rsp)         # 8-byte Spill
	movl	80(%rsp), %eax          # 4-byte Reload
	movq	%rax, 400(%rsp)         # 8-byte Spill
	movl	84(%rsp), %eax          # 4-byte Reload
	movq	%rax, 352(%rsp)         # 8-byte Spill
	movl	88(%rsp), %eax          # 4-byte Reload
	movq	%rax, 408(%rsp)         # 8-byte Spill
	movl	92(%rsp), %eax          # 4-byte Reload
	movq	%rax, 416(%rsp)         # 8-byte Spill
	movl	96(%rsp), %eax          # 4-byte Reload
	movq	%rax, 384(%rsp)         # 8-byte Spill
	movl	100(%rsp), %eax         # 4-byte Reload
	movq	%rax, 368(%rsp)         # 8-byte Spill
	movl	104(%rsp), %eax         # 4-byte Reload
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movl	108(%rsp), %eax         # 4-byte Reload
	movq	%rax, 480(%rsp)         # 8-byte Spill
	movl	112(%rsp), %eax         # 4-byte Reload
	movq	%rax, 488(%rsp)         # 8-byte Spill
	movl	120(%rsp), %eax         # 4-byte Reload
	movq	%rax, 424(%rsp)         # 8-byte Spill
	movl	128(%rsp), %eax         # 4-byte Reload
	movq	%rax, 472(%rsp)         # 8-byte Spill
	jmp	.LBB65_617
.LBB65_60:
	movl	128(%rsp), %eax         # 4-byte Reload
	movq	%rax, 472(%rsp)         # 8-byte Spill
	movl	120(%rsp), %eax         # 4-byte Reload
	movq	%rax, 424(%rsp)         # 8-byte Spill
	movl	112(%rsp), %eax         # 4-byte Reload
	movq	%rax, 488(%rsp)         # 8-byte Spill
	movl	108(%rsp), %eax         # 4-byte Reload
	movq	%rax, 480(%rsp)         # 8-byte Spill
	movl	104(%rsp), %eax         # 4-byte Reload
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movl	100(%rsp), %eax         # 4-byte Reload
	movq	%rax, 368(%rsp)         # 8-byte Spill
	movl	96(%rsp), %eax          # 4-byte Reload
	movq	%rax, 384(%rsp)         # 8-byte Spill
	movl	92(%rsp), %eax          # 4-byte Reload
	movq	%rax, 416(%rsp)         # 8-byte Spill
	movl	88(%rsp), %eax          # 4-byte Reload
	movq	%rax, 408(%rsp)         # 8-byte Spill
	movl	84(%rsp), %eax          # 4-byte Reload
	movq	%rax, 352(%rsp)         # 8-byte Spill
	movl	80(%rsp), %eax          # 4-byte Reload
	movq	%rax, 400(%rsp)         # 8-byte Spill
	movl	76(%rsp), %eax          # 4-byte Reload
	movq	%rax, 392(%rsp)         # 8-byte Spill
	movl	72(%rsp), %eax          # 4-byte Reload
	movq	%rax, 360(%rsp)         # 8-byte Spill
	movl	68(%rsp), %eax          # 4-byte Reload
	movq	%rax, 448(%rsp)         # 8-byte Spill
	movl	44(%rsp), %eax          # 4-byte Reload
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movl	64(%rsp), %eax          # 4-byte Reload
	movq	%rax, 464(%rsp)         # 8-byte Spill
	movl	60(%rsp), %eax          # 4-byte Reload
	movq	%rax, 456(%rsp)         # 8-byte Spill
	movl	56(%rsp), %eax          # 4-byte Reload
	movq	%rax, 432(%rsp)         # 8-byte Spill
	movl	52(%rsp), %eax          # 4-byte Reload
	movq	%rax, 344(%rsp)         # 8-byte Spill
	movl	48(%rsp), %eax          # 4-byte Reload
	movq	%rax, 376(%rsp)         # 8-byte Spill
.LBB65_531:                             # %sw.bb2965
	movl	$42, 8(%r13)
	cmpl	$7, %ecx
	jg	.LBB65_538
# BB#532:                               # %if.end2983.lr.ph
	cmpl	$0, "PinFlag-107."(%rip)
	jne	.LBB65_534
# BB#533:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_215, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r10, %rbx
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbx, %r10
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-107."(%rip)
.LBB65_534:                             # %if.end2983
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#535:                               # %if.end2989
                                        #   in Loop: Header=BB65_534 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, (%rbx)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_537
# BB#536:                               # %if.then3012
                                        #   in Loop: Header=BB65_534 Depth=1
	incl	16(%rax)
.LBB65_537:                             # %while.body2968.backedge
                                        #   in Loop: Header=BB65_534 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_534
.LBB65_538:                             # %if.then2972
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, (%rbx)
	movzbl	%al, %eax
	movl	$-4, %ebp
	cmpl	$114, %eax
	jne	.LBB65_617
.LBB65_540:                             # %sw.bb3023
	movl	$43, 8(%r13)
	cmpl	$7, %ecx
	jg	.LBB65_547
# BB#541:                               # %if.end3041.lr.ph
	cmpl	$0, "PinFlag-106."(%rip)
	jne	.LBB65_543
# BB#542:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_216, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r10, %rbx
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbx, %r10
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-106."(%rip)
.LBB65_543:                             # %if.end3041
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#544:                               # %if.end3047
                                        #   in Loop: Header=BB65_543 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, (%rbx)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_546
# BB#545:                               # %if.then3070
                                        #   in Loop: Header=BB65_543 Depth=1
	incl	16(%rax)
.LBB65_546:                             # %while.body3026.backedge
                                        #   in Loop: Header=BB65_543 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_543
.LBB65_547:                             # %if.then3030
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, (%rbx)
	movzbl	%al, %eax
	movl	$-4, %ebp
	cmpl	$69, %eax
	jne	.LBB65_617
.LBB65_549:                             # %sw.bb3081
	movl	$44, 8(%r13)
	cmpl	$7, %ecx
	jg	.LBB65_556
# BB#550:                               # %if.end3099.lr.ph
	cmpl	$0, "PinFlag-105."(%rip)
	jne	.LBB65_552
# BB#551:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_217, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r10, %rbx
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbx, %r10
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-105."(%rip)
.LBB65_552:                             # %if.end3099
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#553:                               # %if.end3105
                                        #   in Loop: Header=BB65_552 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, (%rbx)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_555
# BB#554:                               # %if.then3128
                                        #   in Loop: Header=BB65_552 Depth=1
	incl	16(%rax)
.LBB65_555:                             # %while.body3084.backedge
                                        #   in Loop: Header=BB65_552 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_552
.LBB65_556:                             # %if.then3088
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, (%rbx)
	movzbl	%al, %eax
	movl	$-4, %ebp
	cmpl	$56, %eax
	jne	.LBB65_617
.LBB65_558:                             # %sw.bb3139
	movl	$45, 8(%r13)
	cmpl	$7, %ecx
	jg	.LBB65_565
# BB#559:                               # %if.end3157.lr.ph
	cmpl	$0, "PinFlag-104."(%rip)
	jne	.LBB65_561
# BB#560:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_218, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r10, %rbx
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbx, %r10
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-104."(%rip)
.LBB65_561:                             # %if.end3157
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#562:                               # %if.end3163
                                        #   in Loop: Header=BB65_561 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, (%rbx)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_564
# BB#563:                               # %if.then3186
                                        #   in Loop: Header=BB65_561 Depth=1
	incl	16(%rax)
.LBB65_564:                             # %while.body3142.backedge
                                        #   in Loop: Header=BB65_561 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_561
.LBB65_565:                             # %if.then3146
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, (%rbx)
	movzbl	%al, %eax
	movl	$-4, %ebp
	cmpl	$80, %eax
	jne	.LBB65_617
.LBB65_567:                             # %sw.bb3197
	movl	$46, 8(%r13)
	cmpl	$7, %ecx
	jg	.LBB65_574
# BB#568:                               # %if.end3215.lr.ph
	cmpl	$0, "PinFlag-103."(%rip)
	jne	.LBB65_570
# BB#569:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_219, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r10, %rbx
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbx, %r10
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-103."(%rip)
.LBB65_570:                             # %if.end3215
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#571:                               # %if.end3221
                                        #   in Loop: Header=BB65_570 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, (%rbx)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_573
# BB#572:                               # %if.then3244
                                        #   in Loop: Header=BB65_570 Depth=1
	incl	16(%rax)
.LBB65_573:                             # %while.body3200.backedge
                                        #   in Loop: Header=BB65_570 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_570
.LBB65_574:                             # %if.then3204
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, (%rbx)
	movzbl	%al, %eax
	movl	$-4, %ebp
	cmpl	$144, %eax
	jne	.LBB65_617
# BB#575:                               # %if.end3254
	movl	$0, 3180(%r13)
.LBB65_576:                             # %sw.bb3255
	movl	$47, 8(%r13)
	cmpl	$7, %ecx
	jg	.LBB65_583
# BB#577:                               # %if.end3273.lr.ph
	cmpl	$0, "PinFlag-102."(%rip)
	jne	.LBB65_579
# BB#578:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_220, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r10, %rbx
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbx, %r10
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-102."(%rip)
.LBB65_579:                             # %if.end3273
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#580:                               # %if.end3279
                                        #   in Loop: Header=BB65_579 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, (%rbx)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_582
# BB#581:                               # %if.then3302
                                        #   in Loop: Header=BB65_579 Depth=1
	incl	16(%rax)
.LBB65_582:                             # %while.body3258.backedge
                                        #   in Loop: Header=BB65_579 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_579
.LBB65_583:                             # %if.then3262
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, (%rbx)
	movl	3180(%r13), %edx
	shll	$8, %edx
	movzbl	%al, %eax
	orl	%edx, %eax
	movl	%eax, 3180(%r13)
.LBB65_585:                             # %sw.bb3313
	movl	$48, 8(%r13)
	cmpl	$7, %ecx
	jg	.LBB65_592
# BB#586:                               # %if.end3331.lr.ph
	cmpl	$0, "PinFlag-101."(%rip)
	jne	.LBB65_588
# BB#587:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_221, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r10, %rbx
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbx, %r10
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-101."(%rip)
	.align	16, 0x90
.LBB65_588:                             # %if.end3331
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#589:                               # %if.end3337
                                        #   in Loop: Header=BB65_588 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, (%rbx)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_591
# BB#590:                               # %if.then3360
                                        #   in Loop: Header=BB65_588 Depth=1
	incl	16(%rax)
.LBB65_591:                             # %while.body3316.backedge
                                        #   in Loop: Header=BB65_588 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_588
.LBB65_592:                             # %if.then3320
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, (%rbx)
	movl	3180(%r13), %edx
	shll	$8, %edx
	movzbl	%al, %eax
	orl	%edx, %eax
	movl	%eax, 3180(%r13)
.LBB65_594:                             # %sw.bb3371
	movl	$49, 8(%r13)
	cmpl	$7, %ecx
	jg	.LBB65_601
# BB#595:                               # %if.end3389.lr.ph
	cmpl	$0, "PinFlag-100."(%rip)
	jne	.LBB65_597
# BB#596:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_222, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r10, %rbx
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbx, %r10
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-100."(%rip)
	.align	16, 0x90
.LBB65_597:                             # %if.end3389
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#598:                               # %if.end3395
                                        #   in Loop: Header=BB65_597 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, (%rbx)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_600
# BB#599:                               # %if.then3418
                                        #   in Loop: Header=BB65_597 Depth=1
	incl	16(%rax)
.LBB65_600:                             # %while.body3374.backedge
                                        #   in Loop: Header=BB65_597 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_597
.LBB65_601:                             # %if.then3378
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, (%rbx)
	movl	3180(%r13), %edx
	shll	$8, %edx
	movzbl	%al, %eax
	orl	%edx, %eax
	movl	%eax, 3180(%r13)
.LBB65_603:                             # %sw.bb3429
	movl	$50, 8(%r13)
	cmpl	$7, %ecx
	jg	.LBB65_610
# BB#604:                               # %if.end3447.lr.ph
	cmpl	$0, "PinFlag-99."(%rip)
	jne	.LBB65_606
# BB#605:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_223, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r10, %rbx
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbx, %r10
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-99."(%rip)
	.align	16, 0x90
.LBB65_606:                             # %if.end3447
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#607:                               # %if.end3453
                                        #   in Loop: Header=BB65_606 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, (%rbx)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_609
# BB#608:                               # %if.then3476
                                        #   in Loop: Header=BB65_606 Depth=1
	incl	16(%rax)
.LBB65_609:                             # %while.body3432.backedge
                                        #   in Loop: Header=BB65_606 Depth=1
	movl	(%rbx), %ecx
	cmpl	$7, %ecx
	jle	.LBB65_606
.LBB65_610:                             # %if.then3436
	movl	32(%r13), %eax
	addl	$-8, %ecx
	shrl	%cl, %eax
	movl	%ecx, (%rbx)
	movl	3180(%r13), %ecx
	shll	$8, %ecx
	movzbl	%al, %eax
	orl	%ecx, %eax
	movl	%eax, 3180(%r13)
	movl	$1, 8(%r13)
	movl	$4, %ebp
	jmp	.LBB65_617
.LBB65_48:
	movl	44(%rsp), %eax          # 4-byte Reload
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movl	48(%rsp), %eax          # 4-byte Reload
	movq	%rax, 376(%rsp)         # 8-byte Spill
	movl	52(%rsp), %eax          # 4-byte Reload
	movq	%rax, 344(%rsp)         # 8-byte Spill
	movl	56(%rsp), %eax          # 4-byte Reload
	movq	%rax, 432(%rsp)         # 8-byte Spill
	movl	60(%rsp), %eax          # 4-byte Reload
	movq	%rax, 456(%rsp)         # 8-byte Spill
	movl	64(%rsp), %eax          # 4-byte Reload
	movq	%rax, 464(%rsp)         # 8-byte Spill
	movl	68(%rsp), %eax          # 4-byte Reload
	movq	%rax, 448(%rsp)         # 8-byte Spill
	movl	72(%rsp), %eax          # 4-byte Reload
	movq	%rax, 360(%rsp)         # 8-byte Spill
	movl	76(%rsp), %eax          # 4-byte Reload
	movq	%rax, 392(%rsp)         # 8-byte Spill
	movl	80(%rsp), %eax          # 4-byte Reload
	movq	%rax, 400(%rsp)         # 8-byte Spill
	movl	84(%rsp), %eax          # 4-byte Reload
	movq	%rax, 352(%rsp)         # 8-byte Spill
	movl	88(%rsp), %eax          # 4-byte Reload
	movq	%rax, 408(%rsp)         # 8-byte Spill
	movl	92(%rsp), %eax          # 4-byte Reload
	movq	%rax, 416(%rsp)         # 8-byte Spill
	movl	96(%rsp), %eax          # 4-byte Reload
	movq	%rax, 384(%rsp)         # 8-byte Spill
	movl	100(%rsp), %eax         # 4-byte Reload
	movq	%rax, 368(%rsp)         # 8-byte Spill
	movl	104(%rsp), %eax         # 4-byte Reload
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movl	108(%rsp), %eax         # 4-byte Reload
	movq	%rax, 480(%rsp)         # 8-byte Spill
	movl	112(%rsp), %eax         # 4-byte Reload
	movq	%rax, 488(%rsp)         # 8-byte Spill
	movl	120(%rsp), %eax         # 4-byte Reload
	movq	%rax, 424(%rsp)         # 8-byte Spill
	movl	128(%rsp), %eax         # 4-byte Reload
	movq	%rax, 472(%rsp)         # 8-byte Spill
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	%r15, %r9
	movq	16(%rsp), %r10          # 8-byte Reload
	jmp	.LBB65_526
.LBB65_108:                             # %if.then625
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movq	stderr(%rip), %rdi
	movl	$.L.str.80, %esi
	xorl	%eax, %eax
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%r8, %rbx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r9, %r12
	movq	%r10, %rbp
	movq	%r15, %r14
	movq	%r11, %r15
	callq	fprintf
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbp, %r10
	movq	%r12, %r9
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	%rbx, %r8
	movq	152(%rsp), %rbx         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	jmp	.LBB65_109
.LBB65_182:                             # %for.cond
	cmpl	$16, %eax
	jge	.LBB65_193
# BB#183:
	movq	%rax, 320(%rsp)         # 8-byte Spill
.LBB65_184:                             # %sw.bb1095
	movl	$28, 8(%r13)
	movl	36(%r13), %ecx
	testl	%ecx, %ecx
	movq	320(%rsp), %rbx         # 8-byte Reload
	jg	.LBB65_192
# BB#185:                               # %if.end1112.lr.ph
	cmpl	$0, "PinFlag-108."(%rip)
	jne	.LBB65_187
# BB#186:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_224, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbx
	movq	%r10, %rbp
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbp, %r10
	movq	%rbx, %r9
	movq	320(%rsp), %rbx         # 8-byte Reload
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-108."(%rip)
	.align	16, 0x90
.LBB65_187:                             # %if.end1112
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_188
# BB#189:                               # %if.end1118
                                        #   in Loop: Header=BB65_187 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, 36(%r13)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_191
# BB#190:                               # %if.then1141
                                        #   in Loop: Header=BB65_187 Depth=1
	incl	16(%rax)
.LBB65_191:                             # %while.body1098.backedge
                                        #   in Loop: Header=BB65_187 Depth=1
	movl	36(%r13), %ecx
	testl	%ecx, %ecx
	jle	.LBB65_187
.LBB65_192:                             # %if.then1102
	movl	32(%r13), %edx
	decl	%ecx
	movl	%ecx, 36(%r13)
	movslq	%ebx, %rax
	btl	%ecx, %edx
	setb	%cl
	movb	%cl, 3452(%r13,%rax)
	incl	%eax
	jmp	.LBB65_182
.LBB65_193:                             # %for.body1160.preheader
	pxor	%xmm0, %xmm0
	movdqu	%xmm0, 3436(%r13)
	movdqu	%xmm0, 3420(%r13)
	movdqu	%xmm0, 3404(%r13)
	movdqu	%xmm0, 3388(%r13)
	movdqu	%xmm0, 3372(%r13)
	movdqu	%xmm0, 3356(%r13)
	movdqu	%xmm0, 3340(%r13)
	movdqu	%xmm0, 3324(%r13)
	movdqu	%xmm0, 3308(%r13)
	movdqu	%xmm0, 3292(%r13)
	movdqu	%xmm0, 3276(%r13)
	movdqu	%xmm0, 3260(%r13)
	movdqu	%xmm0, 3244(%r13)
	movdqu	%xmm0, 3228(%r13)
	movdqu	%xmm0, 3212(%r13)
	movdqu	%xmm0, 3196(%r13)
	xorl	%eax, %eax
	jmp	.LBB65_194
.LBB65_188:
	movq	%rbx, 320(%rsp)         # 8-byte Spill
	jmp	.LBB65_617
.LBB65_194:                             # %for.cond1166
	cmpl	$15, %eax
	jg	.LBB65_208
# BB#195:                               # %for.body1169
	movslq	%eax, %rcx
	movq	%rax, 320(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	cmpb	$0, 3452(%r13,%rcx)
	jne	.LBB65_196
	jmp	.LBB65_207
.LBB65_208:                             # %for.end1247
	movl	$0, 3192(%r13)
	cmpl	$0, "PinFlag-142."(%rip)
	jne	.LBB65_210
# BB#209:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_225, %edi
	movl	$127, %esi
	movl	$11, %edx
	movl	$32, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%rax, 320(%rsp)         # 8-byte Spill
	movq	%r9, %rbx
	movq	%r10, %rbp
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbp, %r10
	movq	%rbx, %r9
	movq	320(%rsp), %rax         # 8-byte Reload
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-142."(%rip)
.LBB65_210:
	movq	%rax, 320(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	.align	16, 0x90
.LBB65_211:                             # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	cmpb	$0, 3196(%r13,%rcx)
	je	.LBB65_213
# BB#212:                               # %if.then.i
                                        #   in Loop: Header=BB65_211 Depth=1
	cltq
	movb	%cl, 3468(%r13,%rax)
	movl	3192(%r13), %eax
	incl	%eax
	movl	%eax, 3192(%r13)
.LBB65_213:                             # %for.inc.i
                                        #   in Loop: Header=BB65_211 Depth=1
	cmpb	$0, 3197(%r13,%rcx)
	je	.LBB65_215
# BB#214:                               # %if.then.i.1
                                        #   in Loop: Header=BB65_211 Depth=1
	cltq
	leal	1(%rcx), %edx
	movb	%dl, 3468(%r13,%rax)
	movl	3192(%r13), %eax
	incl	%eax
	movl	%eax, 3192(%r13)
.LBB65_215:                             # %for.inc.i.1
                                        #   in Loop: Header=BB65_211 Depth=1
	addq	$2, %rcx
	cmpq	$256, %rcx              # imm = 0x100
	jne	.LBB65_211
# BB#216:                               # %makeMaps_d.exit
	movl	$-4, %ebp
	testl	%eax, %eax
	je	.LBB65_617
# BB#217:                               # %if.end1251
	addl	$2, %eax
	movq	%rax, 488(%rsp)         # 8-byte Spill
.LBB65_218:                             # %sw.bb1254
	movl	$30, 8(%r13)
	leaq	36(%r13), %rbx
	movl	36(%r13), %ecx
	cmpl	$2, %ecx
	jg	.LBB65_225
# BB#219:                               # %if.end1270.lr.ph
	cmpl	$0, "PinFlag-141."(%rip)
	jne	.LBB65_221
# BB#220:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_226, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r15, 152(%rsp)         # 8-byte Spill
	movq	%r8, %r15
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r10, %r12
	movq	%r11, %r14
	callq	Pin
	movq	%r14, %r11
	movq	%r12, %r10
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r15, %r8
	movq	152(%rsp), %r15         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-141."(%rip)
	.align	16, 0x90
.LBB65_221:                             # %if.end1270
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#222:                               # %if.end1276
                                        #   in Loop: Header=BB65_221 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, 36(%r13)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_224
# BB#223:                               # %if.then1299
                                        #   in Loop: Header=BB65_221 Depth=1
	incl	16(%rax)
.LBB65_224:                             # %while.body1257.backedge
                                        #   in Loop: Header=BB65_221 Depth=1
	movl	(%rbx), %ecx
	cmpl	$2, %ecx
	jle	.LBB65_221
.LBB65_225:                             # %if.then1261
	movl	32(%r13), %edx
	addl	$-3, %ecx
	shrl	%cl, %edx
	andl	$7, %edx
	movl	%ecx, 36(%r13)
	cmpl	$7, %edx
	ja	.LBB65_226
# BB#227:                               # %if.then1261
	movl	$-4, %ebp
	movl	$131, %eax
	btl	%edx, %eax
	movq	%rdx, 480(%rsp)         # 8-byte Spill
	jb	.LBB65_617
	jmp	.LBB65_229
.LBB65_226:
	movq	%rdx, 480(%rsp)         # 8-byte Spill
	jmp	.LBB65_229
.LBB65_196:                             # %for.cond1175
	cmpl	$15, %eax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	jg	.LBB65_207
.LBB65_197:                             # %sw.bb1179
	movl	$29, 8(%r13)
	movl	36(%r13), %eax
	testl	%eax, %eax
	jg	.LBB65_204
# BB#198:                               # %if.end1196.lr.ph
	cmpl	$0, "PinFlag-109."(%rip)
	jne	.LBB65_200
# BB#199:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_227, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbx
	movq	%r10, %rbp
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbp, %r10
	movq	%rbx, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-109."(%rip)
	.align	16, 0x90
.LBB65_200:                             # %if.end1196
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#201:                               # %if.end1202
                                        #   in Loop: Header=BB65_200 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, 36(%r13)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_203
# BB#202:                               # %if.then1225
                                        #   in Loop: Header=BB65_200 Depth=1
	incl	16(%rax)
.LBB65_203:                             # %while.body1182.backedge
                                        #   in Loop: Header=BB65_200 Depth=1
	movl	36(%r13), %eax
	testl	%eax, %eax
	jle	.LBB65_200
.LBB65_204:                             # %if.then1186
	movl	32(%r13), %ecx
	decl	%eax
	movl	%eax, 36(%r13)
	btl	%eax, %ecx
	movq	472(%rsp), %rcx         # 8-byte Reload
	jae	.LBB65_206
# BB#205:                               # %if.then1234
	movq	320(%rsp), %rax         # 8-byte Reload
	shll	$4, %eax
	addl	%ecx, %eax
	cltq
	movb	$1, 3196(%r13,%rax)
.LBB65_206:                             # %for.inc1241
	incl	%ecx
	movl	%ecx, %eax
	jmp	.LBB65_196
.LBB65_207:                             # %for.inc1245
	movq	320(%rsp), %rax         # 8-byte Reload
	incl	%eax
	jmp	.LBB65_194
.LBB65_237:                             # %for.cond1367
	movq	%r15, 152(%rsp)         # 8-byte Spill
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r11, 128(%rsp)         # 8-byte Spill
	movq	%r10, 16(%rsp)          # 8-byte Spill
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movq	%r9, 120(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movq	%rdx, %rsi
	cmpl	%esi, %eax
	jge	.LBB65_251
# BB#238:
	movl	%esi, %ecx
	movq	%rcx, 440(%rsp)         # 8-byte Spill
	xorl	%ecx, %ecx
	movq	%rcx, 472(%rsp)         # 8-byte Spill
	movq	%rax, 320(%rsp)         # 8-byte Spill
.LBB65_239:                             # %sw.bb1373.preheader
	movl	36(%r13), %ebx
	cmpl	$0, "PinFlag-110."(%rip)
	jne	.LBB65_241
# BB#240:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_228, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$25, %ecx
	movq	%r15, 152(%rsp)         # 8-byte Spill
	movq	%r8, %r15
	xorl	%r8d, %r8d
	movq	%r9, %rbp
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r10, %r12
	movq	%r11, %r14
	callq	Pin
	movq	%r14, %r11
	movq	%r12, %r10
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r15, %r8
	movq	152(%rsp), %r15         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-110."(%rip)
.LBB65_241:                             # %sw.bb1373
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_244 Depth 2
	movl	$32, 8(%r13)
	testl	%ebx, %ebx
	jg	.LBB65_248
# BB#242:                               # %if.end1390.preheader
                                        #   in Loop: Header=BB65_241 Depth=1
	cmpl	$0, "PinFlag-110.0"(%rip)
	jne	.LBB65_244
# BB#243:                               #   in Loop: Header=BB65_241 Depth=1
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_229, %edi
	movl	$1, %esi
	movl	$74, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbx
	movq	%r10, %rbp
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbp, %r10
	movq	%rbx, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-110.0"(%rip)
	.align	16, 0x90
.LBB65_244:                             # %if.end1390
                                        #   Parent Loop BB65_241 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#245:                               # %if.end1396
                                        #   in Loop: Header=BB65_244 Depth=2
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, 36(%r13)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_247
# BB#246:                               # %if.then1419
                                        #   in Loop: Header=BB65_244 Depth=2
	incl	16(%rax)
.LBB65_247:                             # %while.body1376.backedge
                                        #   in Loop: Header=BB65_244 Depth=2
	movl	36(%r13), %ebx
	testl	%ebx, %ebx
	jle	.LBB65_244
.LBB65_248:                             # %if.then1380
                                        #   in Loop: Header=BB65_241 Depth=1
	movl	32(%r13), %eax
	decl	%ebx
	movl	%ebx, 36(%r13)
	btl	%ebx, %eax
	jae	.LBB65_250
# BB#249:                               # %if.end1429
                                        #   in Loop: Header=BB65_241 Depth=1
	movq	472(%rsp), %rcx         # 8-byte Reload
	incl	%ecx
	movq	%rcx, 472(%rsp)         # 8-byte Spill
	movl	$-4, %ebp
	movq	480(%rsp), %rax         # 8-byte Reload
	cmpl	%eax, %ecx
	jl	.LBB65_241
	jmp	.LBB65_617
.LBB65_251:                             # %for.end1441
	movq	480(%rsp), %rdx         # 8-byte Reload
	testl	%edx, %edx
	jle	.LBB65_254
# BB#252:
	movb	$1, %al
.LBB65_253:                             # %for.body1448
                                        # =>This Inner Loop Header: Depth=1
	movzbl	%al, %ecx
	decb	%al
	movzbl	%al, %eax
	movb	%al, 530(%rsp,%rax)
	movb	%cl, %al
	incb	%al
	cmpl	%edx, %ecx
	jl	.LBB65_253
.LBB65_254:                             # %for.cond1454.preheader
	xorl	%eax, %eax
	testl	%esi, %esi
	movq	%rsi, 160(%rsp)         # 8-byte Spill
	movl	$0, %esi
	jle	.LBB65_270
# BB#255:                               # %for.body1457.preheader
	movq	%r14, 32(%rsp)          # 8-byte Spill
	xorl	%ebx, %ebx
	cmpl	$0, "PinFlag-138."(%rip)
	movq	160(%rsp), %rsi         # 8-byte Reload
	jne	.LBB65_257
# BB#256:
	leal	-1(%rsi), %eax
	movslq	%eax, %rsi
	xorl	%ebx, %ebx
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_230, %edi
	movl	$38, %edx
	movl	$44, %ecx
	movq	%r15, 152(%rsp)         # 8-byte Spill
	movq	%r8, %r15
	xorl	%r8d, %r8d
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r9, %r12
	movq	%r10, %r14
	movq	%r11, %rbp
	callq	Pin
	movq	160(%rsp), %rsi         # 8-byte Reload
	movq	%rbp, %r11
	movq	%r14, %r10
	movq	%r12, %r9
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	%r15, %r8
	movq	152(%rsp), %r15         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movl	$1, "PinFlag-138."(%rip)
.LBB65_257:                             # %for.body1457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_262 Depth 2
                                        #     Child Loop BB65_267 Depth 2
	movzbl	25886(%r13,%rbx), %ebp
	testq	%rbp, %rbp
	movb	530(%rsp,%rbp), %r14b
	je	.LBB65_268
# BB#258:                               # %while.body1467.preheader
                                        #   in Loop: Header=BB65_257 Depth=1
	movb	%bpl, %r15b
	decb	%r15b
	testb	$7, %bpl
	je	.LBB65_263
# BB#259:                               # %while.body1467.prol.preheader
                                        #   in Loop: Header=BB65_257 Depth=1
	cmpl	$0, "PinFlag-138.0"(%rip)
	jne	.LBB65_261
# BB#260:                               #   in Loop: Header=BB65_257 Depth=1
	movb	%bpl, %al
	andb	$7, %al
	decb	%al
	movq	%rsi, %r12
	movsbq	%al, %rsi
	movl	$.L__unnamed_231, %edi
	movl	$6, %edx
	movl	$10, %ecx
	movl	$1, %r8d
	callq	Pin
	movq	%r12, %rsi
	movq	128(%rsp), %r11         # 8-byte Reload
	movq	16(%rsp), %r10          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movl	$1, "PinFlag-138.0"(%rip)
.LBB65_261:                             #   in Loop: Header=BB65_257 Depth=1
	movb	%bpl, %al
	andb	$7, %al
	negb	%al
	.align	16, 0x90
.LBB65_262:                             # %while.body1467.prol
                                        #   Parent Loop BB65_257 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movb	529(%rsp,%rbp), %cl
	movb	%cl, 530(%rsp,%rbp)
	decq	%rbp
	incb	%al
	jne	.LBB65_262
.LBB65_263:                             # %while.body1467.preheader.split
                                        #   in Loop: Header=BB65_257 Depth=1
	movzbl	%r15b, %eax
	cmpl	$7, %eax
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	152(%rsp), %r15         # 8-byte Reload
	jb	.LBB65_268
# BB#264:                               # %while.body1467.preheader.split.split
                                        #   in Loop: Header=BB65_257 Depth=1
	cmpl	$0, "PinFlag-138.1"(%rip)
	jne	.LBB65_266
# BB#265:                               #   in Loop: Header=BB65_257 Depth=1
	movl	$.L__unnamed_232, %edi
	movl	$1, %esi
	movl	$720, %edx              # imm = 0x2D0
	movl	$44, %ecx
	movl	$1, %r8d
	movq	%r9, %r12
	movq	%r10, %r15
	callq	Pin
	movq	160(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %r11         # 8-byte Reload
	movq	%r15, %r10
	movq	152(%rsp), %r15         # 8-byte Reload
	movq	%r12, %r9
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movl	$1, "PinFlag-138.1"(%rip)
.LBB65_266:                             #   in Loop: Header=BB65_257 Depth=1
	leaq	530(%rsp,%rbp), %rax
	addl	$-7, %ebp
	movb	$-7, %cl
	subb	%bpl, %cl
	.align	16, 0x90
.LBB65_267:                             # %while.body1467
                                        #   Parent Loop BB65_257 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movb	-1(%rax), %dl
	movb	%dl, (%rax)
	movb	-2(%rax), %dl
	movb	%dl, -1(%rax)
	movb	-3(%rax), %dl
	movb	%dl, -2(%rax)
	movb	-4(%rax), %dl
	movb	%dl, -3(%rax)
	movb	-5(%rax), %dl
	movb	%dl, -4(%rax)
	movb	-6(%rax), %dl
	movb	%dl, -5(%rax)
	movb	-7(%rax), %dl
	movb	%dl, -6(%rax)
	movb	-8(%rax), %dl
	movb	%dl, -7(%rax)
	leaq	-8(%rax), %rax
	addb	$8, %cl
	jne	.LBB65_267
.LBB65_268:                             # %while.end1475
                                        #   in Loop: Header=BB65_257 Depth=1
	movb	%r14b, 530(%rsp)
	movb	%r14b, 7884(%r13,%rbx)
	incq	%rbx
	cmpl	%esi, %ebx
	jne	.LBB65_257
# BB#269:
	movq	%rsi, 160(%rsp)         # 8-byte Spill
	movq	32(%rsp), %r14          # 8-byte Reload
	movq	480(%rsp), %rdx         # 8-byte Reload
	xorl	%eax, %eax
	jmp	.LBB65_270
.LBB65_250:                             # %while.end1435
	movq	320(%rsp), %rax         # 8-byte Reload
	cltq
	movq	472(%rsp), %rcx         # 8-byte Reload
	movb	%cl, 25886(%r13,%rax)
	incl	%eax
	movq	440(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, %edx
	jmp	.LBB65_237
.LBB65_270:                             # %for.cond1482
	movl	%edx, %ebx
	cmpl	%edx, %eax
	jge	.LBB65_292
# BB#271:
	movq	%rax, 424(%rsp)         # 8-byte Spill
	movq	%rsi, 320(%rsp)         # 8-byte Spill
	movq	%rdx, 480(%rsp)         # 8-byte Spill
	movq	160(%rsp), %rax         # 8-byte Reload
	movq	%rax, 440(%rsp)         # 8-byte Spill
.LBB65_272:                             # %sw.bb1486
	movl	$33, 8(%r13)
	movl	36(%r13), %ecx
	cmpl	$4, %ecx
	jg	.LBB65_279
# BB#273:                               # %if.end1503.lr.ph
	cmpl	$0, "PinFlag-113."(%rip)
	jne	.LBB65_275
# BB#274:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_233, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbx
	movq	%r10, %rbp
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbp, %r10
	movq	%rbx, %r9
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-113."(%rip)
	.align	16, 0x90
.LBB65_275:                             # %if.end1503
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#276:                               # %if.end1509
                                        #   in Loop: Header=BB65_275 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, 36(%r13)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_278
# BB#277:                               # %if.then1532
                                        #   in Loop: Header=BB65_275 Depth=1
	incl	16(%rax)
.LBB65_278:                             # %while.body1489.backedge
                                        #   in Loop: Header=BB65_275 Depth=1
	movl	36(%r13), %ecx
	cmpl	$4, %ecx
	jle	.LBB65_275
.LBB65_279:                             # %if.then1493
	movl	32(%r13), %eax
	addl	$-5, %ecx
	shrl	%cl, %eax
	andl	$31, %eax
	movl	%ecx, 36(%r13)
	xorl	%esi, %esi
	jmp	.LBB65_280
.LBB65_292:                             # %for.cond1682.preheader
	movq	%r11, 128(%rsp)         # 8-byte Spill
	movq	%r10, 16(%rsp)          # 8-byte Spill
	movq	%r9, 120(%rsp)          # 8-byte Spill
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	xorl	%ecx, %ecx
	testl	%edx, %edx
	movq	%rdx, 480(%rsp)         # 8-byte Spill
	movq	312(%rsp), %rbp         # 8-byte Reload
	movq	288(%rsp), %rax         # 8-byte Reload
	jle	.LBB65_299
# BB#293:                               # %for.cond1686.preheader.lr.ph
	movq	488(%rsp), %rax         # 8-byte Reload
	testl	%eax, %eax
	jle	.LBB65_294
# BB#303:                               # %for.body1689.lr.ph.us.preheader
	movq	%rbx, 352(%rsp)         # 8-byte Spill
	movq	%r15, 152(%rsp)         # 8-byte Spill
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r14, 32(%rsp)          # 8-byte Spill
	leal	-1(%rax), %r12d
	leaq	1(%r12), %rax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	movabsq	$8589934584, %rbx       # imm = 0x1FFFFFFF8
	andq	%rbx, %rax
	movq	%rax, 400(%rsp)         # 8-byte Spill
	leaq	-8(%rax), %rbp
	cmpl	$0, "PinFlag-136."(%rip)
	jne	.LBB65_305
# BB#304:
	movq	480(%rsp), %rax         # 8-byte Reload
	leal	-1(%rax), %eax
	movslq	%eax, %rsi
	movl	$.L__unnamed_234, %edi
	movl	$3, %edx
	movl	$67, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movl	$1, "PinFlag-136."(%rip)
.LBB65_305:
	shrq	$3, %rbp
	movq	%rbp, 368(%rsp)         # 8-byte Spill
	incq	%r12
	andq	%rbx, %r12
	movq	%r12, 384(%rsp)         # 8-byte Spill
	leaq	43892(%r13), %rax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	leaq	43888(%r13), %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	xorl	%r14d, %r14d
.LBB65_306:                             # %for.body1689.lr.ph.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_316 Depth 2
                                        #     Child Loop BB65_311 Depth 2
	movl	$32, %ebx
	cmpq	$7, 424(%rsp)           # 8-byte Folded Reload
	ja	.LBB65_312
# BB#307:                               #   in Loop: Header=BB65_306 Depth=1
	xorl	%r15d, %r15d
	xorl	%ebp, %ebp
	movq	488(%rsp), %r8          # 8-byte Reload
	jmp	.LBB65_308
.LBB65_312:                             # %min.iters.checked
                                        #   in Loop: Header=BB65_306 Depth=1
	xorl	%r15d, %r15d
	cmpq	$0, 400(%rsp)           # 8-byte Folded Reload
	movl	$0, %ebp
	movq	488(%rsp), %r8          # 8-byte Reload
	je	.LBB65_308
# BB#313:                               # %vector.body.preheader
                                        #   in Loop: Header=BB65_306 Depth=1
	pxor	%xmm1, %xmm1
	cmpl	$0, "PinFlag-136.0"(%rip)
	jne	.LBB65_315
# BB#314:                               #   in Loop: Header=BB65_306 Depth=1
	movl	$.L__unnamed_235, %edi
	movl	$6, %edx
	movl	$24, %ecx
	movq	%r8, %rbx
	movl	$1, %r8d
	movq	368(%rsp), %rsi         # 8-byte Reload
	callq	Pin
	pxor	%xmm1, %xmm1
	movq	%rbx, %r8
	movl	$1, "PinFlag-136.0"(%rip)
.LBB65_315:                             # %vector.body
                                        #   in Loop: Header=BB65_306 Depth=1
	movq	416(%rsp), %rax         # 8-byte Reload
	movq	%r12, %rcx
	movdqa	.LCPI65_0(%rip), %xmm0  # xmm0 = [32,32,32,32]
	movdqa	%xmm0, %xmm9
	pxor	%xmm2, %xmm2
	pxor	%xmm8, %xmm8
	.align	16, 0x90
.LBB65_316:                             # %vector.body
                                        #   Parent Loop BB65_306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movd	-4(%rax), %xmm4         # xmm4 = mem[0],zero,zero,zero
	movd	(%rax), %xmm3           # xmm3 = mem[0],zero,zero,zero
	punpcklbw	%xmm8, %xmm4    # xmm4 = xmm4[0],xmm8[0],xmm4[1],xmm8[1],xmm4[2],xmm8[2],xmm4[3],xmm8[3],xmm4[4],xmm8[4],xmm4[5],xmm8[5],xmm4[6],xmm8[6],xmm4[7],xmm8[7]
	punpcklwd	%xmm8, %xmm4    # xmm4 = xmm4[0],xmm8[0],xmm4[1],xmm8[1],xmm4[2],xmm8[2],xmm4[3],xmm8[3]
	punpcklbw	%xmm8, %xmm3    # xmm3 = xmm3[0],xmm8[0],xmm3[1],xmm8[1],xmm3[2],xmm8[2],xmm3[3],xmm8[3],xmm3[4],xmm8[4],xmm3[5],xmm8[5],xmm3[6],xmm8[6],xmm3[7],xmm8[7]
	punpcklwd	%xmm8, %xmm3    # xmm3 = xmm3[0],xmm8[0],xmm3[1],xmm8[1],xmm3[2],xmm8[2],xmm3[3],xmm8[3]
	movdqa	%xmm4, %xmm5
	pcmpgtd	%xmm1, %xmm5
	movdqa	%xmm3, %xmm6
	pcmpgtd	%xmm2, %xmm6
	movdqa	%xmm4, %xmm7
	pand	%xmm5, %xmm7
	pandn	%xmm1, %xmm5
	movdqa	%xmm5, %xmm1
	por	%xmm7, %xmm1
	movdqa	%xmm3, %xmm5
	pand	%xmm6, %xmm5
	pandn	%xmm2, %xmm6
	movdqa	%xmm6, %xmm2
	por	%xmm5, %xmm2
	movdqa	%xmm9, %xmm5
	pcmpgtd	%xmm4, %xmm5
	movdqa	%xmm0, %xmm6
	pcmpgtd	%xmm3, %xmm6
	pand	%xmm5, %xmm4
	pandn	%xmm9, %xmm5
	movdqa	%xmm5, %xmm9
	por	%xmm4, %xmm9
	pand	%xmm6, %xmm3
	pandn	%xmm0, %xmm6
	movdqa	%xmm6, %xmm0
	por	%xmm3, %xmm0
	addq	$8, %rax
	addq	$-8, %rcx
	jne	.LBB65_316
# BB#317:                               # %middle.block
                                        #   in Loop: Header=BB65_306 Depth=1
	movdqa	%xmm1, %xmm3
	pcmpgtd	%xmm2, %xmm3
	pand	%xmm3, %xmm1
	pandn	%xmm2, %xmm3
	por	%xmm1, %xmm3
	pshufd	$78, %xmm3, %xmm2       # xmm2 = xmm3[2,3,0,1]
	movdqa	%xmm3, %xmm4
	pcmpgtd	%xmm2, %xmm4
	pand	%xmm4, %xmm3
	pandn	%xmm2, %xmm4
	por	%xmm3, %xmm4
	pshufd	$229, %xmm4, %xmm2      # xmm2 = xmm4[1,1,2,3]
	movd	%xmm4, %eax
	pcmpgtd	%xmm2, %xmm4
	movdqa	%xmm4, 496(%rsp)
	testb	$1, 496(%rsp)
	movd	%xmm2, %ebp
	cmovnel	%eax, %ebp
	movdqa	%xmm0, %xmm2
	pcmpgtd	%xmm9, %xmm2
	pand	%xmm2, %xmm9
	pandn	%xmm0, %xmm2
	por	%xmm9, %xmm2
	pshufd	$78, %xmm2, %xmm0       # xmm0 = xmm2[2,3,0,1]
	movdqa	%xmm0, %xmm1
	pcmpgtd	%xmm2, %xmm1
	pand	%xmm1, %xmm2
	pandn	%xmm0, %xmm1
	por	%xmm2, %xmm1
	pshufd	$229, %xmm1, %xmm0      # xmm0 = xmm1[1,1,2,3]
	movd	%xmm0, %eax
	pcmpgtd	%xmm1, %xmm0
	movdqa	%xmm0, 512(%rsp)
	movd	%xmm1, %ebx
	testb	$1, 512(%rsp)
	cmovel	%eax, %ebx
	movq	400(%rsp), %r15         # 8-byte Reload
	cmpq	%r15, 424(%rsp)         # 8-byte Folded Reload
	je	.LBB65_318
.LBB65_308:                             # %for.body1689.us.preheader
                                        #   in Loop: Header=BB65_306 Depth=1
	cmpl	$0, "PinFlag-136.1"(%rip)
	jne	.LBB65_310
# BB#309:                               #   in Loop: Header=BB65_306 Depth=1
	leal	1(%r15), %eax
	movl	%r8d, %ecx
	subl	%eax, %ecx
	movslq	%ecx, %rsi
	movl	$.L__unnamed_236, %edi
	xorl	%edx, %edx
	movl	$14, %ecx
	movq	%r8, %r12
	movl	$1, %r8d
	callq	Pin
	movq	%r12, %r8
	movq	384(%rsp), %r12         # 8-byte Reload
	movl	$1, "PinFlag-136.1"(%rip)
.LBB65_310:                             #   in Loop: Header=BB65_306 Depth=1
	movl	%r8d, %eax
	subl	%r15d, %eax
	addq	440(%rsp), %r15         # 8-byte Folded Reload
	.align	16, 0x90
.LBB65_311:                             # %for.body1689.us
                                        #   Parent Loop BB65_306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	(%r15), %ecx
	cmpl	%ebp, %ecx
	cmovgel	%ecx, %ebp
	cmpl	%ebx, %ecx
	cmovlel	%ecx, %ebx
	incq	%r15
	decl	%eax
	jne	.LBB65_311
.LBB65_318:                             # %for.cond1686.for.end1724_crit_edge.us
                                        #   in Loop: Header=BB65_306 Depth=1
	movq	%r8, 488(%rsp)          # 8-byte Spill
	imulq	$1032, %r14, %rax       # imm = 0x408
	leaq	45436(%r13,%rax), %rdi
	leaq	51628(%r13,%rax), %rsi
	leaq	57820(%r13,%rax), %rdx
	imulq	$258, %r14, %rax        # imm = 0x102
	leaq	43888(%r13,%rax), %rcx
	movl	%r8d, (%rsp)
	movl	%ebx, %r8d
	movl	%ebp, %r9d
	callq	BZ2_hbCreateDecodeTables
	movl	%ebx, 64012(%r13,%r14,4)
	incq	%r14
	addq	$258, 416(%rsp)         # 8-byte Folded Spill
                                        # imm = 0x102
	addq	$258, 440(%rsp)         # 8-byte Folded Spill
                                        # imm = 0x102
	movq	480(%rsp), %rax         # 8-byte Reload
	cmpl	%eax, %r14d
	jne	.LBB65_306
# BB#319:                               # %for.end1742.loopexit
	movq	352(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %rax         # 8-byte Reload
	movq	312(%rsp), %rbp         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	152(%rsp), %r15         # 8-byte Reload
	jmp	.LBB65_299
.LBB65_294:                             # %for.end1724.preheader
	movq	%rbx, 352(%rsp)         # 8-byte Spill
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%rax, %r12
	movq	%r15, 152(%rsp)         # 8-byte Spill
	movq	%r14, 32(%rsp)          # 8-byte Spill
	cmpl	$0, "PinFlag-316."(%rip)
	jne	.LBB65_296
# BB#295:
	movq	480(%rsp), %rax         # 8-byte Reload
	leal	-1(%rax), %eax
	movslq	%eax, %rsi
	movl	$.L__unnamed_237, %edi
	xorl	%edx, %edx
	movl	$12, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movl	$1, "PinFlag-316."(%rip)
.LBB65_296:
	movl	$43888, %r14d           # imm = 0xAB70
	xorl	%ebp, %ebp
	xorl	%ebx, %ebx
	movq	352(%rsp), %r15         # 8-byte Reload
.LBB65_297:                             # %for.end1724
                                        # =>This Inner Loop Header: Depth=1
	leaq	(%r13,%r14), %rcx
	leaq	57820(%r13,%rbp), %rdx
	leaq	51628(%r13,%rbp), %rsi
	leaq	45436(%r13,%rbp), %rdi
	movl	%r12d, (%rsp)
	movl	$32, %r8d
	xorl	%r9d, %r9d
	callq	BZ2_hbCreateDecodeTables
	movl	$32, 64012(%r13,%rbx,4)
	incq	%rbx
	addq	$258, %r14              # imm = 0x102
	addq	$1032, %rbp             # imm = 0x408
	cmpl	%ebx, %r15d
	jne	.LBB65_297
# BB#298:                               # %for.end1742.loopexit7106
	movl	%r15d, %ecx
	movq	32(%rsp), %r14          # 8-byte Reload
	movq	152(%rsp), %r15         # 8-byte Reload
	movq	312(%rsp), %rbp         # 8-byte Reload
	movq	288(%rsp), %rax         # 8-byte Reload
	movq	144(%rsp), %r12         # 8-byte Reload
.LBB65_299:                             # %for.end1742
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r14, %r12
	movq	%rcx, 424(%rsp)         # 8-byte Spill
	movq	%rax, 288(%rsp)         # 8-byte Spill
	movl	3192(%r13), %r14d
	leaq	68(%r13), %rdi
	imull	$100000, 40(%r13), %eax # imm = 0x186A0
	movq	%rax, 352(%rsp)         # 8-byte Spill
	xorl	%ebx, %ebx
	xorl	%esi, %esi
	movl	$1024, %edx             # imm = 0x400
	callq	memset
	incl	%r14d
	movq	%r14, 368(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	.align	16, 0x90
.LBB65_300:                             # %for.cond1763.preheader
                                        # =>This Inner Loop Header: Depth=1
	leal	255(%rbx), %ecx
	movb	%cl, 7819(%r13,%rbx)
	leal	254(%rbx), %ecx
	movb	%cl, 7818(%r13,%rbx)
	leal	253(%rbx), %ecx
	movb	%cl, 7817(%r13,%rbx)
	leal	252(%rbx), %ecx
	movb	%cl, 7816(%r13,%rbx)
	leal	251(%rbx), %ecx
	movb	%cl, 7815(%r13,%rbx)
	leal	250(%rbx), %ecx
	movb	%cl, 7814(%r13,%rbx)
	leal	249(%rbx), %ecx
	movb	%cl, 7813(%r13,%rbx)
	leal	248(%rbx), %ecx
	movb	%cl, 7812(%r13,%rbx)
	leal	247(%rbx), %ecx
	movb	%cl, 7811(%r13,%rbx)
	leal	246(%rbx), %ecx
	movb	%cl, 7810(%r13,%rbx)
	leal	245(%rbx), %ecx
	movb	%cl, 7809(%r13,%rbx)
	leal	244(%rbx), %ecx
	movb	%cl, 7808(%r13,%rbx)
	leal	243(%rbx), %ecx
	movb	%cl, 7807(%r13,%rbx)
	leal	242(%rbx), %ecx
	movb	%cl, 7806(%r13,%rbx)
	leal	241(%rbx), %ecx
	movb	%cl, 7805(%r13,%rbx)
	leal	240(%rbx), %ecx
	movb	%cl, 7804(%r13,%rbx)
	leal	4080(%rbx), %ecx
	movl	%ecx, 7880(%r13,%rax,4)
	leaq	-1(%rax), %rcx
	addq	$15, %rax
	addq	$-16, %rbx
	testq	%rax, %rax
	movq	%rcx, %rax
	jg	.LBB65_300
# BB#301:                               # %if.then1784
	movq	%rbp, 312(%rsp)         # 8-byte Spill
	movq	160(%rsp), %rsi         # 8-byte Reload
	testl	%esi, %esi
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	16(%rsp), %r10          # 8-byte Reload
	movq	128(%rsp), %r11         # 8-byte Reload
	movq	%r12, %r14
	jle	.LBB65_302
# BB#332:                               # %if.end1789
	movzbl	7884(%r13), %eax
	movq	%rax, 344(%rsp)         # 8-byte Spill
	movl	64012(%r13,%rax,4), %edx
	movq	%rdx, 376(%rsp)         # 8-byte Spill
	imulq	$1032, %rax, %rax       # imm = 0x408
	leaq	45436(%r13,%rax), %rcx
	movq	%rcx, 296(%rsp)         # 8-byte Spill
	leaq	57820(%r13,%rax), %rcx
	movq	%rcx, 272(%rsp)         # 8-byte Spill
	leaq	51628(%r13,%rax), %rax
	movq	%rax, 280(%rsp)         # 8-byte Spill
	movl	$256, %eax              # imm = 0x100
	movq	%rax, 320(%rsp)         # 8-byte Spill
	movl	$49, %eax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 400(%rsp)         # 8-byte Spill
	movq	%rdx, 464(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 384(%rsp)         # 8-byte Spill
	movl	%esi, %eax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movq	144(%rsp), %r12         # 8-byte Reload
.LBB65_333:                             # %sw.bb1811
	movl	$36, 8(%r13)
	movl	36(%r13), %eax
	movq	464(%rsp), %rbx         # 8-byte Reload
	cmpl	%ebx, %eax
	jge	.LBB65_341
# BB#334:                               # %if.end1830.lr.ph
	cmpl	$0, "PinFlag-134."(%rip)
	jne	.LBB65_336
# BB#335:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_238, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbx
	movq	%r10, %rbp
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbp, %r10
	movq	%rbx, %r9
	movq	464(%rsp), %rbx         # 8-byte Reload
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-134."(%rip)
.LBB65_336:                             # %if.end1830
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_337
# BB#338:                               # %if.end1836
                                        #   in Loop: Header=BB65_336 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, 36(%r13)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_340
# BB#339:                               # %if.then1859
                                        #   in Loop: Header=BB65_336 Depth=1
	incl	16(%rax)
.LBB65_340:                             # %while.body1814.backedge
                                        #   in Loop: Header=BB65_336 Depth=1
	movl	36(%r13), %eax
	cmpl	%ebx, %eax
	jl	.LBB65_336
.LBB65_341:                             # %if.then1818
	movl	32(%r13), %edx
	subl	%ebx, %eax
	movb	%al, %cl
	shrl	%cl, %edx
	movl	$1, %esi
	movb	%bl, %cl
	shll	%cl, %esi
	decl	%esi
	andl	%edx, %esi
	movl	%eax, 36(%r13)
	jmp	.LBB65_342
.LBB65_337:
	movq	%rbx, 464(%rsp)         # 8-byte Spill
	jmp	.LBB65_617
.LBB65_302:
	movl	$-4, %ebp
	movl	$256, %eax              # imm = 0x100
	movq	%rax, 320(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 400(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 384(%rsp)         # 8-byte Spill
	movl	%esi, %eax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movq	144(%rsp), %r12         # 8-byte Reload
	jmp	.LBB65_617
.LBB65_280:                             # %for.cond1538
	movq	480(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	cmpl	%ecx, %esi
	jge	.LBB65_331
# BB#281:
	movq	%rsi, 320(%rsp)         # 8-byte Spill
	movq	%rdx, 480(%rsp)         # 8-byte Spill
	jmp	.LBB65_282
.LBB65_331:                             # %for.inc1679
	movq	%rax, 448(%rsp)         # 8-byte Spill
	movq	424(%rsp), %rax         # 8-byte Reload
	incl	%eax
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 160(%rsp)         # 8-byte Spill
	jmp	.LBB65_270
.LBB65_282:                             # %while.body1543
	movq	%rax, 448(%rsp)         # 8-byte Spill
	leal	-1(%rax), %eax
	movl	$-4, %ebp
	cmpl	$19, %eax
	ja	.LBB65_617
.LBB65_283:                             # %sw.bb1551
	movl	$34, 8(%r13)
	leaq	36(%r13), %rbx
	movl	36(%r13), %eax
	testl	%eax, %eax
	jg	.LBB65_290
# BB#284:                               # %if.end1569.lr.ph
	cmpl	$0, "PinFlag-112."(%rip)
	jne	.LBB65_286
# BB#285:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_239, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r15, 152(%rsp)         # 8-byte Spill
	movq	%r8, %r15
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r10, %r12
	movq	%r11, %r14
	callq	Pin
	movq	%r14, %r11
	movq	%r12, %r10
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r15, %r8
	movq	152(%rsp), %r15         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-112."(%rip)
.LBB65_286:                             # %if.end1569
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#287:                               # %if.end1575
                                        #   in Loop: Header=BB65_286 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, 36(%r13)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_289
# BB#288:                               # %if.then1598
                                        #   in Loop: Header=BB65_286 Depth=1
	incl	16(%rax)
.LBB65_289:                             # %while.body1554.backedge
                                        #   in Loop: Header=BB65_286 Depth=1
	movl	(%rbx), %eax
	testl	%eax, %eax
	jle	.LBB65_286
.LBB65_290:                             # %if.then1558
	movl	32(%r13), %ecx
	decl	%eax
	movl	%eax, 36(%r13)
	btl	%eax, %ecx
	jae	.LBB65_291
.LBB65_321:                             # %sw.bb1609
	movl	$35, 8(%r13)
	testl	%eax, %eax
	jg	.LBB65_328
# BB#322:                               # %if.end1627.lr.ph
	cmpl	$0, "PinFlag-111."(%rip)
	jne	.LBB65_324
# BB#323:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_240, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r15, 152(%rsp)         # 8-byte Spill
	movq	%r8, %r15
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r10, %r12
	movq	%r11, %r14
	callq	Pin
	movq	%r14, %r11
	movq	%r12, %r10
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r15, %r8
	movq	152(%rsp), %r15         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-111."(%rip)
.LBB65_324:                             # %if.end1627
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#325:                               # %if.end1633
                                        #   in Loop: Header=BB65_324 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, 36(%r13)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_327
# BB#326:                               # %if.then1656
                                        #   in Loop: Header=BB65_324 Depth=1
	incl	16(%rax)
.LBB65_327:                             # %while.body1612.backedge
                                        #   in Loop: Header=BB65_324 Depth=1
	movl	(%rbx), %eax
	testl	%eax, %eax
	jle	.LBB65_324
.LBB65_328:                             # %if.then1616
	movl	32(%r13), %ecx
	decl	%eax
	movl	%eax, 36(%r13)
	btl	%eax, %ecx
	jae	.LBB65_329
# BB#330:                               # %if.else1667
	movq	448(%rsp), %rax         # 8-byte Reload
	decl	%eax
	jmp	.LBB65_282
.LBB65_291:                             # %while.end1670
	movq	320(%rsp), %rsi         # 8-byte Reload
	movslq	%esi, %rsi
	movq	424(%rsp), %rax         # 8-byte Reload
	cltq
	imulq	$258, %rax, %rax        # imm = 0x102
	addq	%r13, %rax
	movq	448(%rsp), %rcx         # 8-byte Reload
	movb	%cl, 43888(%rsi,%rax)
	movq	%rcx, %rax
	incl	%esi
	jmp	.LBB65_280
.LBB65_329:                             # %if.then1665
	movq	448(%rsp), %rax         # 8-byte Reload
	incl	%eax
	jmp	.LBB65_282
.LBB65_342:                             # %while.body1866
	movl	$-4, %ebp
	cmpl	$20, %ebx
	jg	.LBB65_343
# BB#344:                               # %if.end1870
	movslq	%ebx, %rcx
	movq	296(%rsp), %rdx         # 8-byte Reload
	cmpl	(%rdx,%rcx,4), %esi
	jle	.LBB65_354
# BB#345:                               # %if.end1876
	movq	%rsi, 456(%rsp)         # 8-byte Spill
	incl	%ebx
	movq	%rbx, 464(%rsp)         # 8-byte Spill
	leaq	36(%r13), %rbx
.LBB65_346:                             # %sw.bb1878
	movl	$37, 8(%r13)
	testl	%eax, %eax
	jg	.LBB65_353
# BB#347:                               # %if.end1895.lr.ph
	cmpl	$0, "PinFlag-114."(%rip)
	jne	.LBB65_349
# BB#348:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_241, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r15, 152(%rsp)         # 8-byte Spill
	movq	%r8, %r15
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r10, %r12
	movq	%r11, %r14
	callq	Pin
	movq	%r14, %r11
	movq	%r12, %r10
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r15, %r8
	movq	152(%rsp), %r15         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-114."(%rip)
.LBB65_349:                             # %if.end1895
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#350:                               # %if.end1901
                                        #   in Loop: Header=BB65_349 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, 36(%r13)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_352
# BB#351:                               # %if.then1924
                                        #   in Loop: Header=BB65_349 Depth=1
	incl	16(%rax)
.LBB65_352:                             # %while.body1881.backedge
                                        #   in Loop: Header=BB65_349 Depth=1
	movl	(%rbx), %eax
	testl	%eax, %eax
	jle	.LBB65_349
.LBB65_353:                             # %if.then1885
	movl	32(%r13), %edx
	decl	%eax
	movb	%al, %cl
	shrl	%cl, %edx
	andl	$1, %edx
	movq	%rdx, 432(%rsp)         # 8-byte Spill
	movl	%eax, 36(%r13)
	movq	456(%rsp), %rsi         # 8-byte Reload
	leal	(%rdx,%rsi,2), %esi
	movq	464(%rsp), %rbx         # 8-byte Reload
	jmp	.LBB65_342
.LBB65_343:
	movq	%rbx, 464(%rsp)         # 8-byte Spill
	movq	%rsi, 456(%rsp)         # 8-byte Spill
.LBB65_617:                             # %save_state_and_return
	movq	288(%rsp), %rax         # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, (%rax)
	movq	248(%rsp), %rax         # 8-byte Reload
	movq	472(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, (%rax)
	movq	240(%rsp), %rax         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, (%rax)
	movq	256(%rsp), %rax         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, (%rax)
	movq	168(%rsp), %rax         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, (%rax)
	movq	264(%rsp), %rax         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, (%rax)
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, (%rax)
	movq	384(%rsp), %rax         # 8-byte Reload
	movl	%eax, (%r15)
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	416(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, (%rax)
	movq	408(%rsp), %rax         # 8-byte Reload
	movl	%eax, (%r12)
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	352(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, (%rax)
	movq	400(%rsp), %rax         # 8-byte Reload
	movl	%eax, (%r11)
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	392(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, (%rax)
	movq	304(%rsp), %rax         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, (%rax)
	movq	208(%rsp), %rax         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, (%rax)
	movq	336(%rsp), %rax         # 8-byte Reload
	movl	%eax, (%r14)
	movq	216(%rsp), %rax         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, (%rax)
	movq	456(%rsp), %rax         # 8-byte Reload
	movl	%eax, (%r9)
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, (%rax)
	movq	344(%rsp), %rax         # 8-byte Reload
	movl	%eax, (%r8)
	movq	232(%rsp), %rax         # 8-byte Reload
	movq	376(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, (%rax)
	movq	296(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rdi)
	movq	280(%rsp), %rax         # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movq	272(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%r10)
	movl	%ebp, %eax
	addq	$536, %rsp              # imm = 0x218
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB65_354:                             # %while.end1932
	movq	280(%rsp), %rax         # 8-byte Reload
	movslq	(%rax,%rcx,4), %rcx
	movslq	%esi, %rax
	subq	%rcx, %rax
	cmpl	$257, %eax              # imm = 0x101
	ja	.LBB65_343
# BB#355:                               # %if.end1945
	movq	272(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx,%rax,4), %ecx
.LBB65_356:                             # %while.body1952
	movq	%rbx, 464(%rsp)         # 8-byte Spill
	movq	%rsi, 456(%rsp)         # 8-byte Spill
	movq	368(%rsp), %rax         # 8-byte Reload
	cmpl	%eax, %ecx
	movq	400(%rsp), %rdx         # 8-byte Reload
	jne	.LBB65_357
# BB#476:                               # %while.end2572
	movl	56(%r13), %eax
	movl	$-4, %ebp
	testl	%eax, %eax
	js	.LBB65_477
# BB#478:                               # %while.end2572
	cmpl	%edx, %eax
	jge	.LBB65_477
# BB#479:                               # %if.end2581
	leaq	1096(%r13), %rdx
	movl	$0, 1096(%r13)
	movq	$-1024, %rax            # imm = 0xFFFFFFFFFFFFFC00
.LBB65_480:                             # %vector.body7058
                                        # =>This Inner Loop Header: Depth=1
	movups	1092(%r13,%rax), %xmm0
	movups	%xmm0, 2124(%r13,%rax)
	movups	1108(%r13,%rax), %xmm0
	movups	%xmm0, 2140(%r13,%rax)
	movups	1124(%r13,%rax), %xmm0
	movups	%xmm0, 2156(%r13,%rax)
	movdqu	1140(%r13,%rax), %xmm0
	movdqu	%xmm0, 2172(%r13,%rax)
	addq	$64, %rax
	jne	.LBB65_480
# BB#481:                               # %for.body2600.preheader
	movq	%rdx, 368(%rsp)         # 8-byte Spill
	movl	(%rdx), %ebx
	cmpl	$0, "PinFlag-120."(%rip)
	jne	.LBB65_483
# BB#482:
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_242, %edi
	movl	$63, %esi
	movl	$4, %edx
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	movl	$24, %ecx
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movl	$1, %r8d
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r9, %r12
	movq	%r10, %r14
	movq	%r15, 152(%rsp)         # 8-byte Spill
	movq	%r11, %r15
	callq	Pin
	movq	408(%rsp), %rcx         # 8-byte Reload
	movq	%r15, %r11
	movq	152(%rsp), %r15         # 8-byte Reload
	movq	%r14, %r10
	movq	%r12, %r9
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movl	$1, "PinFlag-120."(%rip)
.LBB65_483:
	xorl	%eax, %eax
.LBB65_484:                             # %for.body2600
                                        # =>This Inner Loop Header: Depth=1
	addl	1100(%r13,%rax,4), %ebx
	movl	%ebx, 1100(%r13,%rax,4)
	addl	1104(%r13,%rax,4), %ebx
	movl	%ebx, 1104(%r13,%rax,4)
	addl	1108(%r13,%rax,4), %ebx
	movl	%ebx, 1108(%r13,%rax,4)
	addl	1112(%r13,%rax,4), %ebx
	movl	%ebx, 1112(%r13,%rax,4)
	addq	$4, %rax
	cmpq	$256, %rax              # imm = 0x100
	jne	.LBB65_484
# BB#485:                               # %for.body2615.preheader
	xorl	%edx, %edx
	movq	400(%rsp), %rbx         # 8-byte Reload
.LBB65_486:                             # %for.body2615
                                        # =>This Inner Loop Header: Depth=1
	movl	1096(%r13,%rdx,4), %eax
	testl	%eax, %eax
	js	.LBB65_612
# BB#487:                               # %for.body2615
                                        #   in Loop: Header=BB65_486 Depth=1
	cmpl	%ebx, %eax
	jg	.LBB65_612
# BB#488:                               # %for.inc2629
                                        #   in Loop: Header=BB65_486 Depth=1
	incq	%rdx
	cmpq	$257, %rdx              # imm = 0x101
	jl	.LBB65_486
# BB#489:                               # %for.end2631
	movl	$0, 16(%r13)
	movb	$0, 12(%r13)
	movl	$-1, 3184(%r13)
	movl	$2, 8(%r13)
	cmpl	$2, 52(%r13)
	jge	.LBB65_490
.LBB65_491:                             # %if.end2638
	cmpb	$0, 44(%r13)
	je	.LBB65_500
# BB#492:                               # %vector.body7071.preheader
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movq	$-1024, %rax            # imm = 0xFFFFFFFFFFFFFC00
.LBB65_493:                             # %vector.body7071
                                        # =>This Inner Loop Header: Depth=1
	movups	2120(%r13,%rax), %xmm0
	movups	%xmm0, 3148(%r13,%rax)
	movups	2136(%r13,%rax), %xmm0
	movups	%xmm0, 3164(%r13,%rax)
	movups	2152(%r13,%rax), %xmm0
	movups	%xmm0, 3180(%r13,%rax)
	movups	2168(%r13,%rax), %xmm0
	movups	%xmm0, 3196(%r13,%rax)
	movups	2184(%r13,%rax), %xmm0
	movups	%xmm0, 3212(%r13,%rax)
	movups	2200(%r13,%rax), %xmm0
	movups	%xmm0, 3228(%r13,%rax)
	movups	2216(%r13,%rax), %xmm0
	movups	%xmm0, 3244(%r13,%rax)
	movdqu	2232(%r13,%rax), %xmm0
	movdqu	%xmm0, 3260(%r13,%rax)
	addq	$128, %rax
	jne	.LBB65_493
# BB#494:                               # %for.body2645
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movl	2120(%r13), %eax
	movl	%eax, 3148(%r13)
	testl	%ebx, %ebx
	movq	%rbx, 400(%rsp)         # 8-byte Spill
	jle	.LBB65_513
# BB#495:                               # %for.body2657.preheader
	cmpl	$0, "PinFlag-117."(%rip)
	jne	.LBB65_497
# BB#496:
	movq	400(%rsp), %rax         # 8-byte Reload
	leal	-1(%rax), %eax
	movslq	%eax, %rsi
	movl	$.L__unnamed_243, %edi
	movl	$31, %edx
	movl	$41, %ecx
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%r15, %r14
	movq	%r10, %r15
	movq	%r11, %rbx
	callq	Pin
	movq	%rbx, %r11
	movq	%r15, %r10
	movq	%r14, %r15
	movq	%rbp, %r9
	movq	24(%rsp), %r8           # 8-byte Reload
	movl	$1, "PinFlag-117."(%rip)
.LBB65_497:
	movq	400(%rsp), %rax         # 8-byte Reload
	movl	%eax, %eax
	xorl	%ecx, %ecx
.LBB65_498:                             # %for.body2657
                                        # =>This Inner Loop Header: Depth=1
	movq	3160(%r13), %rsi
	movzbl	(%rsi,%rcx,2), %edx
	movw	2124(%r13,%rdx,4), %di
	movw	%di, (%rsi,%rcx,2)
	movl	%ecx, %esi
	sarl	%esi
	movslq	%esi, %rsi
	movq	3168(%r13), %rdi
	movzbl	(%rdi,%rsi), %ebp
	testb	$1, %cl
	jne	.LBB65_511
# BB#499:                               # %if.then2673
                                        #   in Loop: Header=BB65_498 Depth=1
	andl	$240, %ebp
	movl	2124(%r13,%rdx,4), %ebx
	sarl	$16, %ebx
	orl	%ebp, %ebx
	jmp	.LBB65_512
.LBB65_511:                             # %if.else2690
                                        #   in Loop: Header=BB65_498 Depth=1
	andl	$15, %ebp
	movl	2124(%r13,%rdx,4), %ebx
	sarl	$16, %ebx
	shll	$4, %ebx
	orl	%ebp, %ebx
.LBB65_512:                             # %if.end2708
                                        #   in Loop: Header=BB65_498 Depth=1
	movb	%bl, (%rdi,%rsi)
	incl	2124(%r13,%rdx,4)
	incq	%rcx
	cmpl	%ecx, %eax
	jne	.LBB65_498
.LBB65_513:                             # %for.end2715
	movslq	56(%r13), %rbx
	movq	3160(%r13), %rbp
	movq	3168(%r13), %r14
	movzwl	(%rbp,%rbx,2), %eax
	movl	%ebx, %ecx
	sarl	%ecx
	movslq	%ecx, %rcx
	movzbl	(%r14,%rcx), %edx
	leal	(,%rbx,4), %ecx
	andb	$4, %cl
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%eax, %edx
	movq	%rdx, 472(%rsp)         # 8-byte Spill
	cmpl	$0, "PinFlag-116."(%rip)
	je	.LBB65_515
# BB#514:
	movq	%r10, 16(%rsp)          # 8-byte Spill
	movq	%r12, 144(%rsp)         # 8-byte Spill
	jmp	.LBB65_516
.LBB65_357:                             # %if.end1956
	movl	%ecx, %eax
	orl	$1, %eax
	cmpl	$1, %eax
	jne	.LBB65_410
# BB#358:
	movl	$-1, %eax
	movq	%rax, 392(%rsp)         # 8-byte Spill
	movl	$1, %eax
	movq	456(%rsp), %rsi         # 8-byte Reload
	movq	464(%rsp), %rbx         # 8-byte Reload
	jmp	.LBB65_359
.LBB65_410:                             # %if.else2197
	movl	$-4, %ebp
	movq	352(%rsp), %rax         # 8-byte Reload
	cmpl	%eax, %edx
	jge	.LBB65_411
# BB#412:                               # %if.end2201
	movq	%r15, 152(%rsp)         # 8-byte Spill
	movq	%r14, 32(%rsp)          # 8-byte Spill
	leal	-1(%rcx), %r15d
	cmpl	$15, %r15d
	ja	.LBB65_430
# BB#413:                               # %if.then2215
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	movl	7820(%r13), %r14d
	leal	(%r14,%r15), %eax
	movb	3724(%r13,%rax), %al
	movb	%al, 160(%rsp)          # 1-byte Spill
	cmpl	$4, %r15d
	jb	.LBB65_418
# BB#414:                               # %while.body2225.preheader
	movq	408(%rsp), %rax         # 8-byte Reload
	leal	3(%rax), %r15d
	leal	-5(%rax), %esi
	shrl	$2, %esi
	cmpl	$0, "PinFlag-130."(%rip)
	jne	.LBB65_416
# BB#415:
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_244, %edi
	movl	$4, %edx
	movl	$27, %ecx
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movl	$1, %r8d
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r9, %r12
	movq	%r10, %rbx
	movq	%r11, 128(%rsp)         # 8-byte Spill
	callq	Pin
	movq	128(%rsp), %r11         # 8-byte Reload
	movq	%rbx, %r10
	movq	%r12, %r9
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movl	$1, "PinFlag-130."(%rip)
	movq	408(%rsp), %rax         # 8-byte Reload
.LBB65_416:                             # %while.body2225
                                        # =>This Inner Loop Header: Depth=1
	leal	-2(%r14,%rax), %ecx
	movslq	%ecx, %rcx
	movb	3724(%r13,%rcx), %dl
	leal	-1(%r14,%rax), %esi
	movslq	%esi, %rsi
	movb	%dl, 3724(%r13,%rsi)
	leal	-3(%r14,%rax), %edx
	movslq	%edx, %rdx
	movb	3724(%r13,%rdx), %bl
	movb	%bl, 3724(%r13,%rcx)
	leal	-4(%r14,%rax), %ecx
	movslq	%ecx, %rcx
	movb	3724(%r13,%rcx), %bl
	movb	%bl, 3724(%r13,%rdx)
	leal	-5(%r14,%rax), %edx
	movslq	%edx, %rdx
	movb	3724(%r13,%rdx), %dl
	movb	%dl, 3724(%r13,%rcx)
	leal	-4(%rax), %ecx
	addl	$-5, %eax
	cmpl	$3, %eax
	movl	%ecx, %eax
	ja	.LBB65_416
# BB#417:                               # %while.cond2261.preheader.loopexit
	andl	$3, %r15d
.LBB65_418:                             # %while.cond2261.preheader
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r11, 128(%rsp)         # 8-byte Spill
	movq	%r10, 16(%rsp)          # 8-byte Spill
	movq	%r9, 120(%rsp)          # 8-byte Spill
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movslq	%r14d, %rax
	movq	%rax, 112(%rsp)         # 8-byte Spill
	testl	%r15d, %r15d
	je	.LBB65_429
# BB#419:                               # %while.body2264.preheader
	movl	%r15d, %r12d
	leal	-1(%r15), %ebx
	testb	$3, %r15b
	je	.LBB65_424
# BB#420:                               # %while.body2264.prol.preheader
	andl	$3, %r15d
	cmpl	$0, "PinFlag-129."(%rip)
	jne	.LBB65_422
# BB#421:
	leal	-1(%r15), %eax
	movslq	%eax, %rsi
	movl	$.L__unnamed_245, %edi
	movl	$1, %edx
	movl	$15, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-129."(%rip)
.LBB65_422:
	leaq	-1(%r14), %rax
	negl	%r15d
.LBB65_423:                             # %while.body2264.prol
                                        # =>This Inner Loop Header: Depth=1
	leal	(%rax,%r12), %ecx
	movb	3724(%r13,%rcx), %cl
	leal	(%r14,%r12), %edx
	movb	%cl, 3724(%r13,%rdx)
	decq	%r12
	incl	%r15d
	jne	.LBB65_423
.LBB65_424:                             # %while.body2264.preheader.split
	cmpl	$3, %ebx
	jb	.LBB65_429
# BB#425:                               # %while.body2264.preheader.split.split
	cmpl	$0, "PinFlag-128."(%rip)
	jne	.LBB65_427
# BB#426:
	movl	$.L__unnamed_246, %edi
	movl	$1, %esi
	movl	$4, %edx
	movl	$43, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-128."(%rip)
.LBB65_427:
	leal	-3(%r12), %ecx
	leal	-3(%r12,%r14), %ebx
	leal	-4(%r12,%r14), %r10d
	leal	-2(%r12,%r14), %r11d
	leal	-3(%r12,%r14), %r15d
	leal	-1(%r12,%r14), %r8d
	leal	-2(%r12,%r14), %r9d
	movl	%r12d, %edx
	addl	%r14d, %edx
	leal	-1(%r12,%r14), %r14d
	xorl	%esi, %esi
.LBB65_428:                             # %while.body2264
                                        # =>This Inner Loop Header: Depth=1
	leal	(%r14,%rsi), %edi
	movb	3724(%r13,%rdi), %al
	leal	(%rdx,%rsi), %edi
	movb	%al, 3724(%r13,%rdi)
	leal	(%r9,%rsi), %eax
	movb	3724(%r13,%rax), %al
	leal	(%r8,%rsi), %edi
	movb	%al, 3724(%r13,%rdi)
	leal	(%r15,%rsi), %eax
	movb	3724(%r13,%rax), %al
	leal	(%r11,%rsi), %edi
	movb	%al, 3724(%r13,%rdi)
	leal	(%r10,%rsi), %eax
	movb	3724(%r13,%rax), %al
	leal	(%rbx,%rsi), %edi
	movb	%al, 3724(%r13,%rdi)
	leal	-4(%rcx,%rsi), %eax
	leal	-4(%rsi), %esi
	cmpl	$-3, %eax
	jne	.LBB65_428
.LBB65_429:                             # %while.end2275
	movb	160(%rsp), %dl          # 1-byte Reload
	movq	112(%rsp), %rax         # 8-byte Reload
	movb	%dl, 3724(%r13,%rax)
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movq	16(%rsp), %r10          # 8-byte Reload
	movq	128(%rsp), %r11         # 8-byte Reload
	jmp	.LBB65_442
.LBB65_612:                             # %save_state_and_return.loopexit5247
	movq	%rdx, 320(%rsp)         # 8-byte Spill
.LBB65_477:
	movl	%ecx, %eax
	movq	%rax, 368(%rsp)         # 8-byte Spill
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	jmp	.LBB65_617
.LBB65_411:
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	jmp	.LBB65_617
.LBB65_430:                             # %if.else2279
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movl	%r15d, %r12d
	shrl	$4, %r12d
	movl	7820(%r13,%r12,4), %ebx
	movl	%r15d, %eax
	andl	$15, %eax
	addl	%ebx, %eax
	movl	%r15d, %r14d
	andl	$15, %r14d
	cltq
	movb	3724(%r13,%rax), %dl
	je	.LBB65_431
# BB#432:                               # %while.body2293.preheader
	movb	%dl, 160(%rsp)          # 1-byte Spill
	addl	%ebx, %r14d
	cmpl	$0, "PinFlag-133."(%rip)
	jne	.LBB65_434
# BB#433:
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_247, %edi
	movl	$1, %esi
	movl	$1, %edx
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	movl	$12, %ecx
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movl	$1, %r8d
	movq	%r9, 120(%rsp)          # 8-byte Spill
	movq	%r10, 16(%rsp)          # 8-byte Spill
	movq	%r11, 128(%rsp)         # 8-byte Spill
	callq	Pin
	movq	408(%rsp), %rcx         # 8-byte Reload
	movq	128(%rsp), %r11         # 8-byte Reload
	movq	16(%rsp), %r10          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movl	$1, "PinFlag-133."(%rip)
.LBB65_434:
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	movslq	%r14d, %rax
	leal	-1(%rcx), %ecx
	andl	$15, %ecx
	leal	-1(%rbx,%rcx), %ecx
	movslq	%ecx, %rcx
.LBB65_435:                             # %while.body2293
                                        # =>This Inner Loop Header: Depth=1
	movb	3724(%r13,%rcx), %dl
	movb	%dl, 3724(%r13,%rax)
	movl	7820(%r13,%r12,4), %ebx
	decq	%rax
	decq	%rcx
	cmpl	%ebx, %eax
	jg	.LBB65_435
# BB#436:                               # %while.end2302
	incl	%ebx
	movl	%ebx, 7820(%r13,%r12,4)
	testl	%r12d, %r12d
	movq	32(%rsp), %r14          # 8-byte Reload
	movb	160(%rsp), %dl          # 1-byte Reload
	jne	.LBB65_437
	jmp	.LBB65_441
.LBB65_500:                             # %for.cond2873.preheader
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 320(%rsp)         # 8-byte Spill
	testl	%ebx, %ebx
	movq	%rbx, 400(%rsp)         # 8-byte Spill
	jle	.LBB65_509
# BB#501:                               # %for.body2876.preheader
	xorl	%ebx, %ebx
	movq	400(%rsp), %rax         # 8-byte Reload
	testb	$1, %al
	je	.LBB65_503
# BB#502:                               # %for.body2876.prol
	movq	3152(%r13), %rax
	movzbl	(%rax), %eax
	incl	1096(%r13,%rax,4)
	movl	$1, %ebx
.LBB65_503:                             # %for.body2876.preheader.split
	movq	400(%rsp), %rax         # 8-byte Reload
	cmpl	$1, %eax
	movq	%rax, 320(%rsp)         # 8-byte Spill
	je	.LBB65_509
# BB#504:                               # %for.body2876.preheader.split.split
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	cmpl	$0, "PinFlag-115."(%rip)
	jne	.LBB65_506
# BB#505:
	movl	$.L__unnamed_248, %edi
	movl	$1, %esi
	movl	$45, %edx
	movl	$40, %ecx
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%r10, %r14
	movq	%r15, 152(%rsp)         # 8-byte Spill
	movq	%r12, %r15
	movq	%r11, %r12
	callq	Pin
	movq	%r12, %r11
	movq	%r15, %r12
	movq	152(%rsp), %r15         # 8-byte Reload
	movq	%r14, %r10
	movq	%rbp, %r9
	movq	24(%rsp), %r8           # 8-byte Reload
	movl	$1, "PinFlag-115."(%rip)
.LBB65_506:
	movq	400(%rsp), %rax         # 8-byte Reload
	movl	%eax, %eax
	movl	%ebx, %ecx
	shll	$8, %ecx
	leal	256(%rcx), %edx
.LBB65_507:                             # %for.body2876
                                        # =>This Inner Loop Header: Depth=1
	movq	3152(%r13), %rsi
	movzbl	(%rsi,%rbx,4), %edi
	movslq	1096(%r13,%rdi,4), %rbp
	orl	%ecx, (%rsi,%rbp,4)
	incl	1096(%r13,%rdi,4)
	movq	3152(%r13), %rsi
	movzbl	4(%rsi,%rbx,4), %edi
	movslq	1096(%r13,%rdi,4), %rbp
	orl	%edx, (%rsi,%rbp,4)
	incl	1096(%r13,%rdi,4)
	addq	$2, %rbx
	addl	$512, %edx              # imm = 0x200
	addl	$512, %ecx              # imm = 0x200
	cmpl	%ebx, %eax
	jne	.LBB65_507
# BB#508:
	movq	400(%rsp), %rax         # 8-byte Reload
	movq	%rax, 320(%rsp)         # 8-byte Spill
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
.LBB65_509:                             # %for.end2896
	movslq	56(%r13), %rcx
	movq	3152(%r13), %rax
	movl	(%rax,%rcx,4), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%r13)
	movl	$0, 1092(%r13)
	cmpb	$0, 20(%r13)
	je	.LBB65_528
# BB#510:                               # %if.end2939
	movq	$0, 24(%r13)
	movl	%ecx, %ecx
	movl	(%rax,%rcx,4), %eax
	movzbl	%al, %ecx
	movl	%ecx, 64(%r13)
	shrl	$8, %eax
	movl	%eax, 60(%r13)
	movl	$1, 1092(%r13)
	movl	BZ2_rNums(%rip), %eax
	movl	$1, 28(%r13)
	decl	%eax
	movl	%eax, 24(%r13)
	cmpl	$1, %eax
	sete	%al
	movzbl	%al, %eax
	xorl	%ecx, %eax
	movl	%eax, 64(%r13)
	jmp	.LBB65_529
.LBB65_515:
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_249, %edi
	movl	$1, %esi
	movl	$7, %edx
	movl	$46, %ecx
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movl	$1, %r8d
	movq	%r15, 152(%rsp)         # 8-byte Spill
	movq	%r9, %r15
	movq	%r10, 16(%rsp)          # 8-byte Spill
	movq	%r11, 128(%rsp)         # 8-byte Spill
	callq	Pin
	movq	128(%rsp), %r11         # 8-byte Reload
	movq	%r15, %r9
	movq	152(%rsp), %r15         # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movl	$1, "PinFlag-116."(%rip)
	jmp	.LBB65_516
.LBB65_520:                             # %if.end2787.do.body2732_crit_edge
                                        #   in Loop: Header=BB65_516 Depth=1
	movq	3160(%r13), %rbp
	movq	3168(%r13), %r14
	movl	%eax, %ebx
.LBB65_516:                             # %do.body2732
                                        # =>This Inner Loop Header: Depth=1
	movq	472(%rsp), %rax         # 8-byte Reload
	movslq	%eax, %rdi
	movq	%rax, %r12
	movzwl	(%rbp,%rdi,2), %r10d
	movl	%edi, %ecx
	sarl	%ecx
	movslq	%ecx, %rdx
	movzbl	(%r14,%rdx), %eax
	leal	(,%rdi,4), %ecx
	andb	$4, %cl
	shrl	%cl, %eax
	andl	$15, %eax
	shll	$16, %eax
	movw	%bx, (%rbp,%rdi,2)
	movq	3168(%r13), %rcx
	movzbl	(%rcx,%rdx), %esi
	testb	$1, %dil
	jne	.LBB65_518
# BB#517:                               # %if.then2758
                                        #   in Loop: Header=BB65_516 Depth=1
	andl	$240, %esi
	sarl	$16, %ebx
	orl	%esi, %ebx
	jmp	.LBB65_519
.LBB65_518:                             # %if.else2772
                                        #   in Loop: Header=BB65_516 Depth=1
	andl	$15, %esi
	sarl	$16, %ebx
	shll	$4, %ebx
	orl	%esi, %ebx
.LBB65_519:                             # %if.end2787
                                        #   in Loop: Header=BB65_516 Depth=1
	orl	%r10d, %eax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	movb	%bl, (%rcx,%rdx)
	movq	%r12, %rax
	cmpl	56(%r13), %eax
	jne	.LBB65_520
# BB#521:                               # %do.end2792
	movq	%r15, 152(%rsp)         # 8-byte Spill
	movq	%r11, %r12
	movq	16(%rsp), %r15          # 8-byte Reload
	movq	%r9, %r14
	movq	%rax, %rdi
	movq	%r8, %rbx
	movl	%edi, 60(%r13)
	movl	$0, 1092(%r13)
	cmpb	$0, 20(%r13)
	je	.LBB65_527
# BB#522:                               # %if.then2796
	movq	$0, 24(%r13)
	movq	%rdi, 320(%rsp)         # 8-byte Spill
	movq	368(%rsp), %rsi         # 8-byte Reload
	callq	BZ2_indexIntoF
	movl	%eax, 64(%r13)
	movl	60(%r13), %edx
	movq	3160(%r13), %rcx
	movzwl	(%rcx,%rdx,2), %esi
	leal	(,%rdx,4), %ecx
	shrl	%edx
	movq	3168(%r13), %rdi
	movzbl	(%rdi,%rdx), %edx
	andb	$4, %cl
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%esi, %edx
	movl	%edx, 60(%r13)
	incl	1092(%r13)
	movq	24(%r13), %rcx
	testl	%ecx, %ecx
	jne	.LBB65_524
# BB#523:                               # %if.then2824
	movq	%rcx, %rdx
	shrq	$32, %rdx
	sarq	$32, %rcx
	movl	BZ2_rNums(,%rcx,4), %ecx
	movl	%ecx, 24(%r13)
	incl	%edx
	xorl	%esi, %esi
	cmpl	$512, %edx              # imm = 0x200
	cmovnel	%edx, %esi
	movl	%esi, 28(%r13)
.LBB65_524:                             # %if.end2837
	decl	%ecx
	movl	%ecx, 24(%r13)
	cmpl	$1, %ecx
	sete	%cl
	movzbl	%cl, %ecx
	xorl	%eax, %ecx
	movl	%ecx, 64(%r13)
	jmp	.LBB65_525
.LBB65_527:                             # %if.else2844
	movq	%rdi, 320(%rsp)         # 8-byte Spill
	movq	368(%rsp), %rsi         # 8-byte Reload
	callq	BZ2_indexIntoF
	movl	%eax, 64(%r13)
	movl	60(%r13), %eax
	movq	3160(%r13), %rcx
	movzwl	(%rcx,%rax,2), %edx
	leal	(,%rax,4), %ecx
	shrl	%eax
	movq	3168(%r13), %rsi
	movzbl	(%rsi,%rax), %eax
	andb	$4, %cl
	shrl	%cl, %eax
	andl	$15, %eax
	shll	$16, %eax
	orl	%edx, %eax
	movl	%eax, 60(%r13)
	incl	1092(%r13)
.LBB65_525:                             # %save_state_and_return
	xorl	%ebp, %ebp
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, 368(%rsp)         # 8-byte Spill
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	%rbx, %r8
	movq	%r14, %r9
	movq	32(%rsp), %r14          # 8-byte Reload
	movq	%r15, %r10
.LBB65_526:                             # %save_state_and_return
	movq	%r12, %r11
	movq	144(%rsp), %r12         # 8-byte Reload
	jmp	.LBB65_616
.LBB65_431:                             # %while.end2302.thread
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	incl	%ebx
	movl	%ebx, 7820(%r13,%r12,4)
	movq	32(%rsp), %r14          # 8-byte Reload
.LBB65_437:                             # %while.body2310.preheader
	movslq	%ebx, %rax
	leaq	-1(%rax), %rcx
	movl	%ecx, 7820(%r13,%r12,4)
	movslq	7816(%r13,%r12,4), %rcx
	movb	3739(%rcx,%r13), %cl
	movb	%cl, 3723(%r13,%rax)
	cmpl	$32, %r15d
	jb	.LBB65_441
# BB#438:                               # %while.body2310.while.body2310_crit_edge.preheader
	movq	408(%rsp), %rax         # 8-byte Reload
	leal	-1(%rax), %ebx
	shrl	$4, %ebx
	movq	%rbx, %rax
	negq	%rax
	cmpq	$-3, %rax
	movq	$-2, %rsi
	cmovgq	%rax, %rsi
	cmpl	$0, "PinFlag-132."(%rip)
	jne	.LBB65_440
# BB#439:
	addq	%rbx, %rsi
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_250, %edi
	movb	%dl, 160(%rsp)          # 1-byte Spill
	movl	$4, %edx
	movl	$18, %ecx
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movl	$1, %r8d
	movq	%r9, %r12
	movq	%r10, %r14
	movq	%r11, %r15
	callq	Pin
	movb	160(%rsp), %dl          # 1-byte Reload
	movq	%r15, %r11
	movq	%r14, %r10
	movq	%r12, %r9
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-132."(%rip)
.LBB65_440:                             # %while.body2310.while.body2310_crit_edge
                                        # =>This Inner Loop Header: Depth=1
	movslq	7816(%r13,%rbx,4), %rax
	leaq	-1(%rax), %rcx
	movl	%ecx, 7816(%r13,%rbx,4)
	movslq	7812(%r13,%rbx,4), %rcx
	movb	3739(%rcx,%r13), %cl
	movb	%cl, 3723(%r13,%rax)
	decq	%rbx
	cmpq	$1, %rbx
	jg	.LBB65_440
.LBB65_441:                             # %while.end2331
	movslq	7820(%r13), %rax
	leaq	-1(%rax), %rcx
	movl	%ecx, 7820(%r13)
	movb	%dl, 3723(%r13,%rax)
	cmpl	$0, 7820(%r13)
	je	.LBB65_443
.LBB65_442:
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	152(%rsp), %r15         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	jmp	.LBB65_447
.LBB65_443:                             # %for.cond2349.preheader.preheader
	movb	%dl, 160(%rsp)          # 1-byte Spill
	movl	$1970, %eax             # imm = 0x7B2
	movl	$7819, %ecx             # imm = 0x1E8B
	cmpl	$0, "PinFlag-131."(%rip)
	jne	.LBB65_445
# BB#444:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_251, %edi
	movl	$15, %esi
	movl	$528, %edx              # imm = 0x210
	movl	$136, %ecx
	movq	%r8, %r15
	movl	$1, %r8d
	movq	%r9, %r12
	movq	%r10, %rbx
	movq	%r11, %r14
	callq	Pin
	movq	%r14, %r11
	movq	%rbx, %r10
	movq	%r12, %r9
	movq	%r15, %r8
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-131."(%rip)
	movl	$1970, %eax             # imm = 0x7B2
	movl	$7819, %ecx             # imm = 0x1E8B
.LBB65_445:                             # %for.cond2349.preheader
                                        # =>This Inner Loop Header: Depth=1
	movslq	(%r13,%rax,4), %rdx
	movb	3739(%rdx,%r13), %dl
	movb	%dl, (%r13,%rcx)
	movslq	(%r13,%rax,4), %rdx
	movb	3738(%rdx,%r13), %dl
	movb	%dl, -1(%r13,%rcx)
	movslq	(%r13,%rax,4), %rdx
	movb	3737(%rdx,%r13), %dl
	movb	%dl, -2(%r13,%rcx)
	movslq	(%r13,%rax,4), %rdx
	movb	3736(%rdx,%r13), %dl
	movb	%dl, -3(%r13,%rcx)
	movslq	(%r13,%rax,4), %rdx
	movb	3735(%rdx,%r13), %dl
	movb	%dl, -4(%r13,%rcx)
	movslq	(%r13,%rax,4), %rdx
	movb	3734(%rdx,%r13), %dl
	movb	%dl, -5(%r13,%rcx)
	movslq	(%r13,%rax,4), %rdx
	movb	3733(%rdx,%r13), %dl
	movb	%dl, -6(%r13,%rcx)
	movslq	(%r13,%rax,4), %rdx
	movb	3732(%rdx,%r13), %dl
	movb	%dl, -7(%r13,%rcx)
	movslq	(%r13,%rax,4), %rdx
	movb	3731(%rdx,%r13), %dl
	movb	%dl, -8(%r13,%rcx)
	movslq	(%r13,%rax,4), %rdx
	movb	3730(%rdx,%r13), %dl
	movb	%dl, -9(%r13,%rcx)
	movslq	(%r13,%rax,4), %rdx
	movb	3729(%rdx,%r13), %dl
	movb	%dl, -10(%r13,%rcx)
	movslq	(%r13,%rax,4), %rdx
	movb	3728(%rdx,%r13), %dl
	movb	%dl, -11(%r13,%rcx)
	movslq	(%r13,%rax,4), %rdx
	movb	3727(%rdx,%r13), %dl
	movb	%dl, -12(%r13,%rcx)
	movslq	(%r13,%rax,4), %rdx
	movb	3726(%rdx,%r13), %dl
	movb	%dl, -13(%r13,%rcx)
	movslq	(%r13,%rax,4), %rdx
	movb	3725(%rdx,%r13), %dl
	movb	%dl, -14(%r13,%rcx)
	movslq	(%r13,%rax,4), %rdx
	movb	3724(%r13,%rdx), %dl
	movb	%dl, -15(%r13,%rcx)
	leal	-3739(%rcx), %edx
	movl	%edx, (%r13,%rax,4)
	leaq	-1(%rax), %rdx
	addq	$-1955, %rax            # imm = 0xFFFFFFFFFFFFF85D
	addq	$-16, %rcx
	testq	%rax, %rax
	movq	%rdx, %rax
	jg	.LBB65_445
# BB#446:
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	152(%rsp), %r15         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movb	160(%rsp), %dl          # 1-byte Reload
.LBB65_447:                             # %if.end2375
	movzbl	%dl, %eax
	movzbl	3468(%r13,%rax), %ecx
	incl	68(%r13,%rcx,4)
	cmpb	$0, 44(%r13)
	movzbl	3468(%r13,%rax), %eax
	je	.LBB65_449
# BB#448:                               # %if.then2385
	movslq	%esi, %rcx
	movq	3160(%r13), %rdx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB65_450
.LBB65_449:                             # %if.else2393
	movzwl	%ax, %eax
	movslq	%esi, %rcx
	movq	3152(%r13), %rdx
	movl	%eax, (%rdx,%rcx,4)
.LBB65_450:                             # %if.end2401
	incl	%esi
	movq	416(%rsp), %rax         # 8-byte Reload
	testl	%eax, %eax
	je	.LBB65_452
# BB#451:
	movq	%rsi, 400(%rsp)         # 8-byte Spill
	movq	416(%rsp), %rax         # 8-byte Reload
	jmp	.LBB65_455
.LBB65_452:                             # %if.then2405
	movq	%rsi, 400(%rsp)         # 8-byte Spill
	movq	384(%rsp), %rcx         # 8-byte Reload
	movslq	%ecx, %rcx
	incq	%rcx
	xorl	%eax, %eax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	movq	440(%rsp), %rax         # 8-byte Reload
	cmpl	%eax, %ecx
	jge	.LBB65_453
# BB#454:                               # %if.end2410
	movq	%rcx, 384(%rsp)         # 8-byte Spill
	movzbl	7884(%r13,%rcx), %ecx
	movq	%rcx, 344(%rsp)         # 8-byte Spill
	movl	64012(%r13,%rcx,4), %eax
	movq	%rax, 376(%rsp)         # 8-byte Spill
	imulq	$1032, %rcx, %rax       # imm = 0x408
	leaq	45436(%r13,%rax), %rcx
	movq	%rcx, 296(%rsp)         # 8-byte Spill
	leaq	57820(%r13,%rax), %rcx
	movq	%rcx, 272(%rsp)         # 8-byte Spill
	leaq	51628(%r13,%rax), %rax
	movq	%rax, 280(%rsp)         # 8-byte Spill
	movl	$50, %eax
.LBB65_455:                             # %if.end2430
	decl	%eax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	movq	376(%rsp), %rax         # 8-byte Reload
	movq	%rax, 464(%rsp)         # 8-byte Spill
.LBB65_456:                             # %sw.bb2432
	movl	$40, 8(%r13)
	movl	36(%r13), %eax
	movq	464(%rsp), %rbx         # 8-byte Reload
	cmpl	%ebx, %eax
	jge	.LBB65_464
# BB#457:                               # %if.end2451.lr.ph
	cmpl	$0, "PinFlag-127."(%rip)
	jne	.LBB65_459
# BB#458:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_252, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbx
	movq	%r10, %rbp
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbp, %r10
	movq	%rbx, %r9
	movq	464(%rsp), %rbx         # 8-byte Reload
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-127."(%rip)
.LBB65_459:                             # %if.end2451
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_460
# BB#461:                               # %if.end2457
                                        #   in Loop: Header=BB65_459 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, 36(%r13)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_463
# BB#462:                               # %if.then2480
                                        #   in Loop: Header=BB65_459 Depth=1
	incl	16(%rax)
.LBB65_463:                             # %while.body2435.backedge
                                        #   in Loop: Header=BB65_459 Depth=1
	movl	36(%r13), %eax
	cmpl	%ebx, %eax
	jl	.LBB65_459
.LBB65_464:                             # %if.then2439
	movl	32(%r13), %edx
	subl	%ebx, %eax
	movb	%al, %cl
	shrl	%cl, %edx
	movl	$1, %esi
	movb	%bl, %cl
	shll	%cl, %esi
	decl	%esi
	andl	%edx, %esi
	movl	%eax, 36(%r13)
	jmp	.LBB65_465
.LBB65_460:
	movq	%rbx, 464(%rsp)         # 8-byte Spill
	jmp	.LBB65_617
.LBB65_453:
	movq	%rcx, 384(%rsp)         # 8-byte Spill
	jmp	.LBB65_617
.LBB65_528:                             # %if.else2948
	movl	%ecx, %ecx
	movl	(%rax,%rcx,4), %eax
	movzbl	%al, %ecx
	movl	%ecx, 64(%r13)
	shrl	$8, %eax
	movl	%eax, 60(%r13)
	movl	$1, 1092(%r13)
.LBB65_529:                             # %save_state_and_return
	xorl	%ebp, %ebp
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, 368(%rsp)         # 8-byte Spill
	jmp	.LBB65_617
.LBB65_490:                             # %if.then2636
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	movq	stderr(%rip), %rcx
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L.str.1.81, %edi
	movl	$6, %esi
	movl	$1, %edx
	movq	%r8, %rbp
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r9, %r12
	movq	%r15, 152(%rsp)         # 8-byte Spill
	movq	%r10, %r15
	movq	%rbx, %r14
	movq	%r11, %rbx
	callq	fwrite
	movq	408(%rsp), %rcx         # 8-byte Reload
	movq	%rbx, %r11
	movq	%r14, %rbx
	movq	%r15, %r10
	movq	152(%rsp), %r15         # 8-byte Reload
	movq	%r12, %r9
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	%rbp, %r8
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	jmp	.LBB65_491
.LBB65_359:                             # %do.body
	movq	416(%rsp), %rbp         # 8-byte Reload
	cmpl	$1, %ecx
	je	.LBB65_362
# BB#360:                               # %do.body
	testl	%ecx, %ecx
	jne	.LBB65_364
# BB#361:                               # %if.then1965
	movq	392(%rsp), %rdx         # 8-byte Reload
	addl	%eax, %edx
	jmp	.LBB65_363
.LBB65_362:                             # %if.then1971
	movq	392(%rsp), %rdx         # 8-byte Reload
	leal	(%rdx,%rax,2), %edx
.LBB65_363:                             # %if.end1975
	movq	%rdx, 392(%rsp)         # 8-byte Spill
.LBB65_364:                             # %if.end1975
	movq	%rsi, 456(%rsp)         # 8-byte Spill
	addl	%eax, %eax
	testl	%ebp, %ebp
	je	.LBB65_366
# BB#365:
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	movq	%rax, 360(%rsp)         # 8-byte Spill
	jmp	.LBB65_369
.LBB65_366:                             # %if.then1979
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	movq	%rax, 360(%rsp)         # 8-byte Spill
	movq	384(%rsp), %rax         # 8-byte Reload
	cltq
	incq	%rax
	movq	440(%rsp), %rcx         # 8-byte Reload
	cmpl	%ecx, %eax
	jge	.LBB65_367
# BB#368:                               # %if.end1984
	movq	%rax, 384(%rsp)         # 8-byte Spill
	movzbl	7884(%r13,%rax), %ecx
	movq	%rcx, 344(%rsp)         # 8-byte Spill
	movl	64012(%r13,%rcx,4), %eax
	movq	%rax, 376(%rsp)         # 8-byte Spill
	imulq	$1032, %rcx, %rax       # imm = 0x408
	leaq	45436(%r13,%rax), %rcx
	movq	%rcx, 296(%rsp)         # 8-byte Spill
	leaq	57820(%r13,%rax), %rcx
	movq	%rcx, 272(%rsp)         # 8-byte Spill
	leaq	51628(%r13,%rax), %rax
	movq	%rax, 280(%rsp)         # 8-byte Spill
	movl	$50, %ebp
.LBB65_369:                             # %if.end2004
	decl	%ebp
	movq	%rbp, 416(%rsp)         # 8-byte Spill
	movq	376(%rsp), %rax         # 8-byte Reload
	movq	%rax, 464(%rsp)         # 8-byte Spill
.LBB65_370:                             # %sw.bb2006
	movl	$38, 8(%r13)
	movl	36(%r13), %eax
	movq	464(%rsp), %rbx         # 8-byte Reload
	cmpl	%ebx, %eax
	jge	.LBB65_378
# BB#371:                               # %if.end2025.lr.ph
	cmpl	$0, "PinFlag-125."(%rip)
	jne	.LBB65_373
# BB#372:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_253, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movl	$1, %r8d
	movq	%r9, %rbx
	movq	%r10, %rbp
	movq	%r15, %r14
	movq	%r11, %r15
	callq	Pin
	movq	%r15, %r11
	movq	%r14, %r15
	movq	%rbp, %r10
	movq	%rbx, %r9
	movq	464(%rsp), %rbx         # 8-byte Reload
	movq	%r12, %r8
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-125."(%rip)
.LBB65_373:                             # %if.end2025
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_374
# BB#375:                               # %if.end2031
                                        #   in Loop: Header=BB65_373 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, 36(%r13)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_377
# BB#376:                               # %if.then2054
                                        #   in Loop: Header=BB65_373 Depth=1
	incl	16(%rax)
.LBB65_377:                             # %while.body2009.backedge
                                        #   in Loop: Header=BB65_373 Depth=1
	movl	36(%r13), %eax
	cmpl	%ebx, %eax
	jl	.LBB65_373
.LBB65_378:                             # %if.then2013
	movl	32(%r13), %edx
	subl	%ebx, %eax
	movb	%al, %cl
	shrl	%cl, %edx
	movl	$1, %esi
	movb	%bl, %cl
	shll	%cl, %esi
	decl	%esi
	andl	%edx, %esi
	movl	%eax, 36(%r13)
	jmp	.LBB65_379
.LBB65_374:
	movq	%rbx, 464(%rsp)         # 8-byte Spill
	jmp	.LBB65_617
.LBB65_367:
	movq	%rax, 384(%rsp)         # 8-byte Spill
	movq	%rbx, 464(%rsp)         # 8-byte Spill
	movl	$-4, %ebp
	xorl	%eax, %eax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	jmp	.LBB65_617
.LBB65_379:                             # %while.body2061
	movl	$-4, %ebp
	cmpl	$20, %ebx
	jg	.LBB65_343
# BB#380:                               # %if.end2065
	movslq	%ebx, %rcx
	movq	296(%rsp), %rdx         # 8-byte Reload
	cmpl	(%rdx,%rcx,4), %esi
	jle	.LBB65_390
# BB#381:                               # %if.end2071
	movq	%rsi, 456(%rsp)         # 8-byte Spill
	incl	%ebx
	movq	%rbx, 464(%rsp)         # 8-byte Spill
	leaq	36(%r13), %rbx
.LBB65_382:                             # %sw.bb2073
	movl	$39, 8(%r13)
	testl	%eax, %eax
	jg	.LBB65_389
# BB#383:                               # %if.end2090.lr.ph
	cmpl	$0, "PinFlag-122."(%rip)
	jne	.LBB65_385
# BB#384:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_254, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r15, 152(%rsp)         # 8-byte Spill
	movq	%r8, %r15
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r10, %r12
	movq	%r11, %r14
	callq	Pin
	movq	%r14, %r11
	movq	%r12, %r10
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r15, %r8
	movq	152(%rsp), %r15         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-122."(%rip)
.LBB65_385:                             # %if.end2090
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#386:                               # %if.end2096
                                        #   in Loop: Header=BB65_385 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, 36(%r13)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_388
# BB#387:                               # %if.then2119
                                        #   in Loop: Header=BB65_385 Depth=1
	incl	16(%rax)
.LBB65_388:                             # %while.body2076.backedge
                                        #   in Loop: Header=BB65_385 Depth=1
	movl	(%rbx), %eax
	testl	%eax, %eax
	jle	.LBB65_385
.LBB65_389:                             # %if.then2080
	movl	32(%r13), %edx
	decl	%eax
	movb	%al, %cl
	shrl	%cl, %edx
	andl	$1, %edx
	movq	%rdx, 432(%rsp)         # 8-byte Spill
	movl	%eax, 36(%r13)
	movq	456(%rsp), %rsi         # 8-byte Reload
	leal	(%rdx,%rsi,2), %esi
	movq	464(%rsp), %rbx         # 8-byte Reload
	jmp	.LBB65_379
.LBB65_390:                             # %while.end2127
	movq	280(%rsp), %rax         # 8-byte Reload
	movslq	(%rax,%rcx,4), %rcx
	movslq	%esi, %rax
	subq	%rcx, %rax
	cmpl	$257, %eax              # imm = 0x101
	ja	.LBB65_343
# BB#391:                               # %if.end2140
	movq	272(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx,%rax,4), %ecx
	movl	%ecx, %eax
	orl	$1, %eax
	cmpl	$1, %eax
	jne	.LBB65_393
# BB#392:
	movq	360(%rsp), %rax         # 8-byte Reload
	jmp	.LBB65_359
.LBB65_393:                             # %do.end
	movq	%rbx, 464(%rsp)         # 8-byte Spill
	movq	%rsi, 456(%rsp)         # 8-byte Spill
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	392(%rsp), %rdx         # 8-byte Reload
	leal	1(%rdx), %ebx
	movslq	7820(%r13), %rax
	movzbl	3724(%r13,%rax), %eax
	movzbl	3468(%r13,%rax), %r14d
	addl	%ebx, 68(%r13,%r14,4)
	cmpb	$0, 44(%r13)
	je	.LBB65_403
# BB#394:                               # %while.cond2165.preheader
	testl	%edx, %edx
	js	.LBB65_395
# BB#397:                               # %while.body2168.lr.ph
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	movq	%r15, 152(%rsp)         # 8-byte Spill
	movq	400(%rsp), %rax         # 8-byte Reload
	cltq
	movq	%rax, 400(%rsp)         # 8-byte Spill
	movq	352(%rsp), %rax         # 8-byte Reload
	movslq	%eax, %r15
	cmpl	$0, "PinFlag-124."(%rip)
	jne	.LBB65_399
# BB#398:
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_255, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$13, %ecx
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movl	$1, %r8d
	movq	%r9, 120(%rsp)          # 8-byte Spill
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r10, %r12
	movq	%r11, 128(%rsp)         # 8-byte Spill
	callq	Pin
	movq	128(%rsp), %r11         # 8-byte Reload
	movq	%r12, %r10
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movl	$1, "PinFlag-124."(%rip)
.LBB65_399:                             # %while.body2168
	movq	400(%rsp), %rcx         # 8-byte Reload
.LBB65_400:                             # %while.body2168
                                        # =>This Inner Loop Header: Depth=1
	cmpq	%r15, %rcx
	jge	.LBB65_614
# BB#401:                               # %if.end2172
                                        #   in Loop: Header=BB65_400 Depth=1
	movq	3160(%r13), %rax
	movw	%r14w, (%rax,%rcx,2)
	leal	-1(%rbx), %eax
	incq	%rcx
	cmpl	$1, %ebx
	movl	%eax, %ebx
	jg	.LBB65_400
# BB#402:
	movq	%rcx, 400(%rsp)         # 8-byte Spill
	movq	%rax, 392(%rsp)         # 8-byte Spill
	movq	32(%rsp), %r14          # 8-byte Reload
	movq	152(%rsp), %r15         # 8-byte Reload
	movq	456(%rsp), %rsi         # 8-byte Reload
	movq	408(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %rbx         # 8-byte Reload
	jmp	.LBB65_356
.LBB65_403:                             # %while.cond2181.preheader
	testl	%edx, %edx
	js	.LBB65_395
# BB#404:                               # %while.body2184.lr.ph
	movq	%r15, 152(%rsp)         # 8-byte Spill
	movzwl	%r14w, %r14d
	movq	400(%rsp), %rax         # 8-byte Reload
	cltq
	movq	%rax, 400(%rsp)         # 8-byte Spill
	movq	352(%rsp), %rax         # 8-byte Reload
	movslq	%eax, %r15
	cmpl	$0, "PinFlag-123."(%rip)
	jne	.LBB65_406
# BB#405:
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_256, %edi
	movl	$1, %esi
	movl	$1, %edx
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	movl	$13, %ecx
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movl	$1, %r8d
	movq	%r9, 120(%rsp)          # 8-byte Spill
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r10, %r12
	movq	%r11, 128(%rsp)         # 8-byte Spill
	callq	Pin
	movq	408(%rsp), %rcx         # 8-byte Reload
	movq	128(%rsp), %r11         # 8-byte Reload
	movq	%r12, %r10
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movl	$1, "PinFlag-123."(%rip)
.LBB65_406:                             # %while.body2184
	movq	400(%rsp), %rdx         # 8-byte Reload
.LBB65_407:                             # %while.body2184
                                        # =>This Inner Loop Header: Depth=1
	cmpq	%r15, %rdx
	jge	.LBB65_613
# BB#408:                               # %if.end2188
                                        #   in Loop: Header=BB65_407 Depth=1
	movq	3152(%r13), %rax
	movl	%r14d, (%rax,%rdx,4)
	leal	-1(%rbx), %eax
	incq	%rdx
	cmpl	$1, %ebx
	movl	%eax, %ebx
	jg	.LBB65_407
# BB#409:
	movq	%rdx, 400(%rsp)         # 8-byte Spill
	movq	%rax, 392(%rsp)         # 8-byte Spill
	movq	32(%rsp), %r14          # 8-byte Reload
	movq	152(%rsp), %r15         # 8-byte Reload
	jmp	.LBB65_396
.LBB65_395:
	movq	%rbx, 392(%rsp)         # 8-byte Spill
	movq	32(%rsp), %r14          # 8-byte Reload
.LBB65_396:                             # %while.body1952
	movq	456(%rsp), %rsi         # 8-byte Reload
	movq	464(%rsp), %rbx         # 8-byte Reload
	jmp	.LBB65_356
.LBB65_614:                             # %save_state_and_return.loopexit5250
	movq	%rcx, 400(%rsp)         # 8-byte Spill
	jmp	.LBB65_615
.LBB65_613:                             # %save_state_and_return.loopexit5249
	movq	%rdx, 400(%rsp)         # 8-byte Spill
	movq	%rcx, 408(%rsp)         # 8-byte Spill
.LBB65_615:                             # %save_state_and_return
	movq	%rbx, 392(%rsp)         # 8-byte Spill
	movq	32(%rsp), %r14          # 8-byte Reload
	jmp	.LBB65_616
.LBB65_465:                             # %while.body2487
	movl	$-4, %ebp
	cmpl	$20, %ebx
	jg	.LBB65_343
# BB#466:                               # %if.end2491
	movslq	%ebx, %rcx
	movq	296(%rsp), %rdx         # 8-byte Reload
	cmpl	(%rdx,%rcx,4), %esi
	jle	.LBB65_354
# BB#467:                               # %if.end2497
	movq	%rsi, 456(%rsp)         # 8-byte Spill
	incl	%ebx
	movq	%rbx, 464(%rsp)         # 8-byte Spill
	leaq	36(%r13), %rbx
.LBB65_468:                             # %sw.bb2499
	movl	$41, 8(%r13)
	testl	%eax, %eax
	jg	.LBB65_475
# BB#469:                               # %if.end2516.lr.ph
	cmpl	$0, "PinFlag-126."(%rip)
	jne	.LBB65_471
# BB#470:
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	$.L__unnamed_257, %edi
	movl	$1, %esi
	movl	$23, %edx
	movl	$44, %ecx
	movq	%r15, 152(%rsp)         # 8-byte Spill
	movq	%r8, %r15
	movl	$1, %r8d
	movq	%r9, %rbp
	movq	%r12, 144(%rsp)         # 8-byte Spill
	movq	%r10, %r12
	movq	%r11, %r14
	callq	Pin
	movq	%r14, %r11
	movq	%r12, %r10
	movq	144(%rsp), %r12         # 8-byte Reload
	movq	%rbp, %r9
	movq	%r15, %r8
	movq	152(%rsp), %r15         # 8-byte Reload
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	movl	$1, "PinFlag-126."(%rip)
.LBB65_471:                             # %if.end2516
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	xorl	%ebp, %ebp
	cmpl	$0, 8(%rax)
	je	.LBB65_617
# BB#472:                               # %if.end2522
                                        #   in Loop: Header=BB65_471 Depth=1
	movq	32(%r13), %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	movq	(%rax), %rsi
	movzbl	(%rsi), %esi
	orl	%edx, %esi
	movl	%esi, 32(%r13)
	shrq	$32, %rcx
	addl	$8, %ecx
	movl	%ecx, 36(%r13)
	incq	(%rax)
	movq	(%r13), %rax
	decl	8(%rax)
	movq	(%r13), %rax
	incl	12(%rax)
	movq	(%r13), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB65_474
# BB#473:                               # %if.then2545
                                        #   in Loop: Header=BB65_471 Depth=1
	incl	16(%rax)
.LBB65_474:                             # %while.body2502.backedge
                                        #   in Loop: Header=BB65_471 Depth=1
	movl	(%rbx), %eax
	testl	%eax, %eax
	jle	.LBB65_471
.LBB65_475:                             # %if.then2506
	movl	32(%r13), %edx
	decl	%eax
	movb	%al, %cl
	shrl	%cl, %edx
	andl	$1, %edx
	movq	%rdx, 432(%rsp)         # 8-byte Spill
	movl	%eax, 36(%r13)
	movq	456(%rsp), %rsi         # 8-byte Reload
	leal	(%rdx,%rsi,2), %esi
	movq	464(%rsp), %rbx         # 8-byte Reload
	jmp	.LBB65_465
.Lfunc_end65:
	.size	BZ2_decompress, .Lfunc_end65-BZ2_decompress
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI65_0:
	.quad	.LBB65_18
	.quad	.LBB65_28
	.quad	.LBB65_37
	.quad	.LBB65_6
	.quad	.LBB65_62
	.quad	.LBB65_71
	.quad	.LBB65_80
	.quad	.LBB65_89
	.quad	.LBB65_98
	.quad	.LBB65_7
	.quad	.LBB65_118
	.quad	.LBB65_127
	.quad	.LBB65_136
	.quad	.LBB65_145
	.quad	.LBB65_154
	.quad	.LBB65_163
	.quad	.LBB65_172
	.quad	.LBB65_184
	.quad	.LBB65_197
	.quad	.LBB65_218
	.quad	.LBB65_228
	.quad	.LBB65_239
	.quad	.LBB65_272
	.quad	.LBB65_283
	.quad	.LBB65_320
	.quad	.LBB65_333
	.quad	.LBB65_9
	.quad	.LBB65_370
	.quad	.LBB65_10
	.quad	.LBB65_456
	.quad	.LBB65_11
	.quad	.LBB65_530
	.quad	.LBB65_539
	.quad	.LBB65_548
	.quad	.LBB65_557
	.quad	.LBB65_566
	.quad	.LBB65_8
	.quad	.LBB65_584
	.quad	.LBB65_593
	.quad	.LBB65_602

	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI66_0:
	.long	256                     # 0x100
	.long	256                     # 0x100
	.long	256                     # 0x100
	.long	256                     # 0x100
	.text
	.globl	BZ2_hbMakeCodeLengths
	.align	16, 0x90
	.type	BZ2_hbMakeCodeLengths,@function
BZ2_hbMakeCodeLengths:                  # @BZ2_hbMakeCodeLengths
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp433:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp434:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp435:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp436:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp437:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp438:
	.cfi_def_cfa_offset 56
	subq	$5336, %rsp             # imm = 0x14D8
.Ltmp439:
	.cfi_def_cfa_offset 5392
.Ltmp440:
	.cfi_offset %rbx, -56
.Ltmp441:
	.cfi_offset %r12, -48
.Ltmp442:
	.cfi_offset %r13, -40
.Ltmp443:
	.cfi_offset %r14, -32
.Ltmp444:
	.cfi_offset %r15, -24
.Ltmp445:
	.cfi_offset %rbp, -16
	movl	%edx, %r14d
	movq	%r14, 88(%rsp)          # 8-byte Spill
	movq	%rdi, 152(%rsp)         # 8-byte Spill
	movabsq	$8589934584, %r9        # imm = 0x1FFFFFFF8
	testl	%r14d, %r14d
	jle	.LBB66_11
# BB#1:                                 # %for.body.preheader
	leal	-1(%r14), %eax
	leaq	1(%rax), %rdx
	xorl	%edi, %edi
	cmpq	$7, %rdx
	jbe	.LBB66_2
# BB#4:                                 # %min.iters.checked
	xorl	%edi, %edi
	movq	%rdx, %r8
	andq	%r9, %r8
	je	.LBB66_2
# BB#5:                                 # %vector.body.preheader
	leaq	1(%rax), %rdi
	andq	%r9, %rdi
	addq	$-8, %rdi
	movq	%rdi, %rbx
	shrq	$3, %rbx
	xorl	%ebp, %ebp
	btq	$3, %rdi
	jb	.LBB66_7
# BB#6:                                 # %vector.body.prol
	movdqu	(%rsi), %xmm0
	movdqu	16(%rsi), %xmm1
	pxor	%xmm2, %xmm2
	movdqa	%xmm0, %xmm3
	pcmpeqd	%xmm2, %xmm3
	pcmpeqd	%xmm1, %xmm2
	pslld	$8, %xmm0
	pslld	$8, %xmm1
	movdqa	.LCPI66_0(%rip), %xmm4  # xmm4 = [256,256,256,256]
	movdqa	%xmm4, %xmm5
	pand	%xmm3, %xmm5
	pandn	%xmm0, %xmm3
	por	%xmm5, %xmm3
	pand	%xmm2, %xmm4
	pandn	%xmm1, %xmm2
	por	%xmm4, %xmm2
	movdqu	%xmm3, 2228(%rsp)
	movdqu	%xmm2, 2244(%rsp)
	movl	$8, %ebp
.LBB66_7:                               # %vector.body.preheader.split
	testq	%rbx, %rbx
	je	.LBB66_10
# BB#8:                                 # %vector.body.preheader.split.split
	incq	%rax
	andq	%r9, %rax
	subq	%rbp, %rax
	leaq	2276(%rsp,%rbp,4), %rdi
	leaq	48(%rsi,%rbp,4), %rbp
	pxor	%xmm0, %xmm0
	movdqa	.LCPI66_0(%rip), %xmm1  # xmm1 = [256,256,256,256]
	.align	16, 0x90
.LBB66_9:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	movdqu	-48(%rbp), %xmm2
	movdqu	-32(%rbp), %xmm3
	movdqa	%xmm2, %xmm4
	pcmpeqd	%xmm0, %xmm4
	movdqa	%xmm3, %xmm5
	pcmpeqd	%xmm0, %xmm5
	pslld	$8, %xmm2
	pslld	$8, %xmm3
	movdqa	%xmm1, %xmm6
	pand	%xmm4, %xmm6
	pandn	%xmm2, %xmm4
	por	%xmm6, %xmm4
	movdqa	%xmm1, %xmm2
	pand	%xmm5, %xmm2
	pandn	%xmm3, %xmm5
	por	%xmm2, %xmm5
	movdqu	%xmm4, -48(%rdi)
	movdqu	%xmm5, -32(%rdi)
	movdqu	-16(%rbp), %xmm2
	movdqu	(%rbp), %xmm3
	movdqa	%xmm2, %xmm4
	pcmpeqd	%xmm0, %xmm4
	movdqa	%xmm3, %xmm5
	pcmpeqd	%xmm0, %xmm5
	pslld	$8, %xmm2
	pslld	$8, %xmm3
	movdqa	%xmm1, %xmm6
	pand	%xmm4, %xmm6
	pandn	%xmm2, %xmm4
	por	%xmm6, %xmm4
	movdqa	%xmm1, %xmm2
	pand	%xmm5, %xmm2
	pandn	%xmm3, %xmm5
	por	%xmm2, %xmm5
	movdqu	%xmm4, -16(%rdi)
	movdqu	%xmm5, (%rdi)
	addq	$64, %rdi
	addq	$64, %rbp
	addq	$-16, %rax
	jne	.LBB66_9
.LBB66_10:                              # %middle.block
	cmpq	%r8, %rdx
	movq	%r8, %rdi
	je	.LBB66_11
.LBB66_2:                               # %for.body.preheader456
	movl	%r14d, %eax
	subl	%edi, %eax
	leaq	2228(%rsp,%rdi,4), %rbx
	leaq	(%rsi,%rdi,4), %rdx
	movl	$256, %esi              # imm = 0x100
	.align	16, 0x90
.LBB66_3:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movl	(%rdx), %ebp
	movl	%ebp, %edi
	shll	$8, %edi
	testl	%ebp, %ebp
	cmovel	%esi, %edi
	movl	%edi, (%rbx)
	addq	$4, %rbx
	addq	$4, %rdx
	decl	%eax
	jne	.LBB66_3
.LBB66_11:                              # %while.body.preheader
	testl	%r14d, %r14d
	movl	$0, 4288(%rsp)
	movl	$0, 2224(%rsp)
	movl	$-2, 160(%rsp)
	jle	.LBB66_92
# BB#12:                                # %for.body11.preheader.lr.ph
	movl	%ecx, 84(%rsp)          # 4-byte Spill
	leal	-1(%r14), %ebp
	leaq	1(%rbp), %rax
	movq	%rax, 64(%rsp)          # 8-byte Spill
	movq	%rax, %rcx
	andq	%r9, %rcx
	movslq	%r14d, %r13
	movq	%r13, %rax
	negq	%rax
	cmpq	$-3, %rax
	movq	$-2, %rbx
	cmovgq	%rax, %rbx
	leaq	-8(%rcx), %r15
	cmpl	$0, "PinFlag-161."(%rip)
	jne	.LBB66_14
# BB#13:
	movl	$.L__unnamed_258, %edi
	movl	$1, %esi
	movl	$134, %edx
	movq	%rcx, %r12
	movl	$114, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movabsq	$8589934584, %r9        # imm = 0x1FFFFFFF8
	movq	%r12, %rcx
	movl	$1, "PinFlag-161."(%rip)
.LBB66_14:
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	leal	1(%r14), %edx
	movl	%edx, 124(%rsp)         # 4-byte Spill
	movslq	%r14d, %rdx
	movq	%rdx, 56(%rsp)          # 8-byte Spill
	leal	-1(%r14,%r14), %edx
	movl	%edx, 48(%rsp)          # 4-byte Spill
	movl	%r14d, %edx
	andl	$1, %edx
	movl	%edx, 52(%rsp)          # 4-byte Spill
	orq	$1, %rcx
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	addq	%r13, %rbx
	movq	%rbx, 16(%rsp)          # 8-byte Spill
	shrq	$3, %r15
	movq	%r15, 8(%rsp)           # 8-byte Spill
	leaq	1(%rbp), %rax
	movq	%rbp, 72(%rsp)          # 8-byte Spill
	andq	%r9, %rax
	movq	%rax, 32(%rsp)          # 8-byte Spill
	xorl	%r14d, %r14d
	movl	$1, %r15d
	movdqa	.LCPI66_0(%rip), %xmm4  # xmm4 = [256,256,256,256]
	.align	16, 0x90
.LBB66_16:                              # %for.body11
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_19 Depth 2
                                        #     Child Loop BB66_26 Depth 2
                                        #       Child Loop BB66_29 Depth 3
                                        #       Child Loop BB66_39 Depth 3
                                        #       Child Loop BB66_49 Depth 3
                                        #     Child Loop BB66_60 Depth 2
                                        #     Child Loop BB66_65 Depth 2
                                        #       Child Loop BB66_68 Depth 3
                                        #       Child Loop BB66_72 Depth 3
                                        #     Child Loop BB66_84 Depth 2
                                        #     Child Loop BB66_89 Depth 2
	movl	$-1, 160(%rsp,%r15,4)
	leaq	4292(%rsp,%r14,4), %r13
	movl	%r15d, 4292(%rsp,%r14,4)
	incq	%r14
	movl	2224(%rsp,%r15,4), %r12d
	movl	%r14d, %ebp
	sarl	%ebp
	movslq	%ebp, %rax
	movslq	4288(%rsp,%rax,4), %rbx
	cmpl	2224(%rsp,%rbx,4), %r12d
	jge	.LBB66_20
# BB#17:                                # %while.body27.preheader
                                        #   in Loop: Header=BB66_16 Depth=1
	cmpl	$0, "PinFlag-161.0"(%rip)
	jne	.LBB66_19
# BB#18:                                #   in Loop: Header=BB66_16 Depth=1
	movl	$.L__unnamed_259, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$15, %ecx
	movl	$1, %r8d
	callq	Pin
	movdqa	.LCPI66_0(%rip), %xmm4  # xmm4 = [256,256,256,256]
	movl	$1, "PinFlag-161.0"(%rip)
	.align	16, 0x90
.LBB66_19:                              # %while.body27
                                        #   Parent Loop BB66_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	%ebx, (%r13)
	movslq	%ebp, %rax
	sarl	%ebp
	movslq	%ebp, %rcx
	movslq	4288(%rsp,%rcx,4), %rbx
	cmpl	2224(%rsp,%rbx,4), %r12d
	leaq	4288(%rsp,%rax,4), %r13
	jl	.LBB66_19
.LBB66_20:                              # %while.end
                                        #   in Loop: Header=BB66_16 Depth=1
	movl	%r15d, (%r13)
	incq	%r15
	movq	88(%rsp), %rbx          # 8-byte Reload
	cmpl	%ebx, %r14d
	jne	.LBB66_16
# BB#21:                                # %for.end38
                                        #   in Loop: Header=BB66_16 Depth=1
	cmpl	$260, %ebx              # imm = 0x104
	jge	.LBB66_22
# BB#23:                                # %while.cond40.preheader
                                        #   in Loop: Header=BB66_16 Depth=1
	cmpl	$2, %ebx
	movl	%ebx, %eax
	jl	.LBB66_52
	jmp	.LBB66_24
	.align	16, 0x90
.LBB66_22:                              # %while.cond40.preheader.thread
                                        #   in Loop: Header=BB66_16 Depth=1
	movl	$2001, %edi             # imm = 0x7D1
	callq	BZ2_bz__AssertH__fail
	movdqa	.LCPI66_0(%rip), %xmm4  # xmm4 = [256,256,256,256]
.LBB66_24:                              # %while.body42.preheader
                                        #   in Loop: Header=BB66_16 Depth=1
	cmpl	$0, "PinFlag-161.1"(%rip)
	movq	56(%rsp), %rsi          # 8-byte Reload
	movl	%ebx, %r9d
	jne	.LBB66_26
# BB#25:                                #   in Loop: Header=BB66_16 Depth=1
	movl	$.L__unnamed_260, %edi
	movl	$1114, %edx             # imm = 0x45A
	movl	$98, %ecx
	xorl	%r8d, %r8d
	movq	16(%rsp), %rsi          # 8-byte Reload
	callq	Pin
	movdqa	.LCPI66_0(%rip), %xmm4  # xmm4 = [256,256,256,256]
	movl	$1, "PinFlag-161.1"(%rip)
	movq	56(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rax          # 8-byte Reload
	movl	%eax, %r9d
	.align	16, 0x90
.LBB66_26:                              # %while.body42
                                        #   Parent Loop BB66_16 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_29 Depth 3
                                        #       Child Loop BB66_39 Depth 3
                                        #       Child Loop BB66_49 Depth 3
	movslq	4292(%rsp), %rdi
	movl	4288(%rsp,%rsi,4), %r14d
	movl	%r14d, 4292(%rsp)
	leaq	-1(%rsi), %r8
	movl	$1, %r13d
	cmpq	$3, %rsi
	movl	$1, %eax
	jl	.LBB66_35
# BB#27:                                # %if.end59.lr.ph
                                        #   in Loop: Header=BB66_26 Depth=2
	movslq	%r14d, %rax
	movl	2224(%rsp,%rax,4), %r12d
	movl	$1, %ebp
	movl	$2, %ebx
	cmpl	$0, "PinFlag-161.10"(%rip)
	jne	.LBB66_29
# BB#28:                                #   in Loop: Header=BB66_26 Depth=2
	movq	%rdi, 96(%rsp)          # 8-byte Spill
	movl	$.L__unnamed_261, %edi
	movq	%rsi, 104(%rsp)         # 8-byte Spill
	movl	$1, %esi
	movl	$162, %edx
	movl	$36, %ecx
	movq	%r8, 112(%rsp)          # 8-byte Spill
	movl	$1, %r8d
	movq	%r9, %r15
	callq	Pin
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	%r15, %r9
	movq	112(%rsp), %r8          # 8-byte Reload
	movdqa	.LCPI66_0(%rip), %xmm4  # xmm4 = [256,256,256,256]
	movl	$1, "PinFlag-161.10"(%rip)
	.align	16, 0x90
.LBB66_29:                              # %if.end59
                                        #   Parent Loop BB66_16 Depth=1
                                        #     Parent Loop BB66_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movslq	%ebx, %rcx
	cmpq	%r8, %rcx
	jge	.LBB66_31
# BB#30:                                # %land.lhs.true
                                        #   in Loop: Header=BB66_29 Depth=3
	movl	%ecx, %eax
	orl	$1, %eax
	movslq	%eax, %rdx
	movslq	4288(%rsp,%rdx,4), %rdx
	movl	2224(%rsp,%rdx,4), %edx
	movslq	4288(%rsp,%rcx,4), %rcx
	cmpl	2224(%rsp,%rcx,4), %edx
	jl	.LBB66_32
.LBB66_31:                              # %select.false
                                        #   in Loop: Header=BB66_29 Depth=3
	movl	%ebx, %eax
.LBB66_32:                              # %if.end73
                                        #   in Loop: Header=BB66_29 Depth=3
	movslq	%eax, %rcx
	movslq	4288(%rsp,%rcx,4), %rcx
	cmpl	2224(%rsp,%rcx,4), %r12d
	jl	.LBB66_33
# BB#34:                                # %if.end82
                                        #   in Loop: Header=BB66_29 Depth=3
	movslq	%ebp, %rdx
	movl	%ecx, 4288(%rsp,%rdx,4)
	leal	(%rax,%rax), %ebx
	movslq	%ebx, %rcx
	cmpq	%rsi, %rcx
	movl	%eax, %ebp
	jl	.LBB66_29
	jmp	.LBB66_35
	.align	16, 0x90
.LBB66_33:                              #   in Loop: Header=BB66_26 Depth=2
	movl	%ebp, %eax
.LBB66_35:                              # %while.end87
                                        #   in Loop: Header=BB66_26 Depth=2
	cltq
	movl	%r14d, 4288(%rsp,%rax,4)
	movslq	4292(%rsp), %rdx
	leaq	4288(%rsp,%r8,4), %r15
	movl	4284(%rsp,%rsi,4), %ebp
	movl	%ebp, 4292(%rsp)
	addq	$-2, %rsi
	cmpq	$2, %rsi
	jl	.LBB66_45
# BB#36:                                # %if.end108.lr.ph
                                        #   in Loop: Header=BB66_26 Depth=2
	movq	%rdx, 128(%rsp)         # 8-byte Spill
	movq	%r9, %r13
	movslq	%ebp, %rax
	movl	2224(%rsp,%rax,4), %ebx
	movl	$1, %r14d
	movl	$2, %r12d
	cmpl	$0, "PinFlag-161.11"(%rip)
	jne	.LBB66_38
# BB#37:                                #   in Loop: Header=BB66_26 Depth=2
	movq	%rdi, 96(%rsp)          # 8-byte Spill
	movl	$.L__unnamed_262, %edi
	movq	%rsi, 104(%rsp)         # 8-byte Spill
	movl	$1, %esi
	movl	$162, %edx
	movl	$36, %ecx
	movq	%r8, 112(%rsp)          # 8-byte Spill
	movl	$1, %r8d
	callq	Pin
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movdqa	.LCPI66_0(%rip), %xmm4  # xmm4 = [256,256,256,256]
	movl	$1, "PinFlag-161.11"(%rip)
.LBB66_38:                              # %if.end108
                                        #   in Loop: Header=BB66_26 Depth=2
	movq	%r13, %r9
	movq	128(%rsp), %rdx         # 8-byte Reload
	.align	16, 0x90
.LBB66_39:                              # %if.end108
                                        #   Parent Loop BB66_16 Depth=1
                                        #     Parent Loop BB66_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movslq	%r12d, %rax
	cmpq	%rsi, %rax
	jge	.LBB66_41
# BB#40:                                # %land.lhs.true110
                                        #   in Loop: Header=BB66_39 Depth=3
	movl	%eax, %r13d
	orl	$1, %r13d
	movslq	%r13d, %rcx
	movslq	4288(%rsp,%rcx,4), %rcx
	movl	2224(%rsp,%rcx,4), %ecx
	movslq	4288(%rsp,%rax,4), %rax
	cmpl	2224(%rsp,%rax,4), %ecx
	jl	.LBB66_42
.LBB66_41:                              # %select.false61
                                        #   in Loop: Header=BB66_39 Depth=3
	movl	%r12d, %r13d
.LBB66_42:                              # %if.end123
                                        #   in Loop: Header=BB66_39 Depth=3
	movslq	%r13d, %rax
	movslq	4288(%rsp,%rax,4), %rax
	cmpl	2224(%rsp,%rax,4), %ebx
	jl	.LBB66_43
# BB#44:                                # %if.end132
                                        #   in Loop: Header=BB66_39 Depth=3
	movslq	%r14d, %rcx
	movl	%eax, 4288(%rsp,%rcx,4)
	leal	(%r13,%r13), %r12d
	movslq	%r12d, %rax
	cmpq	%rsi, %rax
	movl	%r13d, %r14d
	jle	.LBB66_39
	jmp	.LBB66_45
	.align	16, 0x90
.LBB66_43:                              #   in Loop: Header=BB66_26 Depth=2
	movl	%r14d, %r13d
.LBB66_45:                              # %while.end137
                                        #   in Loop: Header=BB66_26 Depth=2
	movslq	%r13d, %rax
	movl	%ebp, 4288(%rsp,%rax,4)
	leal	1(%r9), %r14d
	movl	%r14d, 160(%rsp,%rdx,4)
	movl	%r14d, 160(%rsp,%rdi,4)
	movl	2224(%rsp,%rdi,4), %eax
	movl	%eax, %ecx
	andl	$-256, %ecx
	movl	2224(%rsp,%rdx,4), %edx
	movl	%edx, %esi
	andl	$-256, %esi
	addl	%ecx, %esi
	movzbl	%al, %ecx
	movzbl	%dl, %edi
	cmpl	%edi, %ecx
	cmovbel	%edx, %eax
	movzbl	%al, %r12d
	incl	%r12d
	orl	%esi, %r12d
	movslq	%r9d, %rax
	movl	%r12d, 2228(%rsp,%rax,4)
	movl	$-1, 164(%rsp,%rax,4)
	movl	%r14d, (%r15)
	movl	%r8d, %ebx
	sarl	%ebx
	movslq	%ebx, %rax
	movslq	4288(%rsp,%rax,4), %rbp
	cmpl	2224(%rsp,%rbp,4), %r12d
	jge	.LBB66_50
# BB#46:                                # %while.body191.preheader
                                        #   in Loop: Header=BB66_26 Depth=2
	movq	%r8, %r13
	cmpl	$0, "PinFlag-161.12"(%rip)
	jne	.LBB66_48
# BB#47:                                #   in Loop: Header=BB66_26 Depth=2
	movl	$.L__unnamed_263, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$15, %ecx
	movl	$1, %r8d
	callq	Pin
	movdqa	.LCPI66_0(%rip), %xmm4  # xmm4 = [256,256,256,256]
	movl	$1, "PinFlag-161.12"(%rip)
.LBB66_48:                              # %while.body191
                                        #   in Loop: Header=BB66_26 Depth=2
	movq	%r13, %r8
	.align	16, 0x90
.LBB66_49:                              # %while.body191
                                        #   Parent Loop BB66_16 Depth=1
                                        #     Parent Loop BB66_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	%ebp, (%r15)
	movslq	%ebx, %rax
	sarl	%ebx
	movslq	%ebx, %rcx
	movslq	4288(%rsp,%rcx,4), %rbp
	cmpl	2224(%rsp,%rbp,4), %r12d
	leaq	4288(%rsp,%rax,4), %r15
	jl	.LBB66_49
.LBB66_50:                              # %while.end198
                                        #   in Loop: Header=BB66_26 Depth=2
	movl	%r14d, (%r15)
	cmpq	$1, %r8
	movq	%r8, %rsi
	movl	%r14d, %r9d
	jg	.LBB66_26
# BB#51:                                #   in Loop: Header=BB66_16 Depth=1
	movl	48(%rsp), %eax          # 4-byte Reload
	movq	88(%rsp), %rbx          # 8-byte Reload
.LBB66_52:                              # %while.end201
                                        #   in Loop: Header=BB66_16 Depth=1
	cmpl	$516, %eax              # imm = 0x204
	jl	.LBB66_54
# BB#53:                                # %if.then203
                                        #   in Loop: Header=BB66_16 Depth=1
	movl	$2002, %edi             # imm = 0x7D2
	callq	BZ2_bz__AssertH__fail
	movdqa	.LCPI66_0(%rip), %xmm4  # xmm4 = [256,256,256,256]
.LBB66_54:                              # %for.cond205.preheader
                                        #   in Loop: Header=BB66_16 Depth=1
	testl	%ebx, %ebx
	jle	.LBB66_91
# BB#55:                                # %while.cond208.preheader.preheader
                                        #   in Loop: Header=BB66_16 Depth=1
	cmpl	$0, 52(%rsp)            # 4-byte Folded Reload
	jne	.LBB66_57
# BB#56:                                #   in Loop: Header=BB66_16 Depth=1
	xorl	%r14d, %r14d
                                        # implicit-def: %AL
	movl	$1, %r15d
	movl	84(%rsp), %r13d         # 4-byte Reload
	movq	72(%rsp), %rcx          # 8-byte Reload
	jmp	.LBB66_62
	.align	16, 0x90
.LBB66_57:                              # %while.cond208.preheader.prol
                                        #   in Loop: Header=BB66_16 Depth=1
	movl	$1, %ebp
	movl	$-1, %ebx
	cmpl	$0, "PinFlag-161.2"(%rip)
	jne	.LBB66_59
# BB#58:                                #   in Loop: Header=BB66_16 Depth=1
	movl	$.L__unnamed_264, %edi
	movq	$-1, %rsi
	xorl	%edx, %edx
	movl	$8, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-161.2"(%rip)
.LBB66_59:                              # %while.cond208.prol
                                        #   in Loop: Header=BB66_16 Depth=1
	movl	84(%rsp), %r13d         # 4-byte Reload
	movq	72(%rsp), %rcx          # 8-byte Reload
	.align	16, 0x90
.LBB66_60:                              # %while.cond208.prol
                                        #   Parent Loop BB66_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	%ebp, %rax
	movl	160(%rsp,%rax,4), %ebp
	incl	%ebx
	testl	%ebp, %ebp
	jns	.LBB66_60
# BB#61:                                # %while.end216.prol
                                        #   in Loop: Header=BB66_16 Depth=1
	movq	152(%rsp), %rax         # 8-byte Reload
	movb	%bl, (%rax)
	cmpl	%r13d, %ebx
	setg	%al
	movl	$2, %r15d
	movb	%al, %r14b
	movdqa	.LCPI66_0(%rip), %xmm4  # xmm4 = [256,256,256,256]
.LBB66_62:                              # %while.cond208.preheader.preheader.split
                                        #   in Loop: Header=BB66_16 Depth=1
	movq	%rcx, 72(%rsp)          # 8-byte Spill
	testl	%ecx, %ecx
	je	.LBB66_78
# BB#63:                                # %while.cond208.preheader.preheader.split.split
                                        #   in Loop: Header=BB66_16 Depth=1
	cmpl	$0, "PinFlag-161.3"(%rip)
	jne	.LBB66_65
# BB#64:                                #   in Loop: Header=BB66_16 Depth=1
	movl	$.L__unnamed_265, %edi
	movl	$1, %esi
	movl	$10, %edx
	movl	$38, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movl	$1, "PinFlag-161.3"(%rip)
	.align	16, 0x90
.LBB66_65:                              # %while.cond208.preheader
                                        #   Parent Loop BB66_16 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_68 Depth 3
                                        #       Child Loop BB66_72 Depth 3
	movl	$-1, %r12d
	cmpl	$0, "PinFlag-161.30"(%rip)
	jne	.LBB66_67
# BB#66:                                #   in Loop: Header=BB66_65 Depth=2
	movl	$.L__unnamed_266, %edi
	movq	$-1, %rsi
	xorl	%edx, %edx
	movl	$8, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-161.30"(%rip)
.LBB66_67:                              # %while.cond208
                                        #   in Loop: Header=BB66_65 Depth=2
	movl	%r15d, %eax
	.align	16, 0x90
.LBB66_68:                              # %while.cond208
                                        #   Parent Loop BB66_16 Depth=1
                                        #     Parent Loop BB66_65 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cltq
	movl	160(%rsp,%rax,4), %eax
	incl	%r12d
	testl	%eax, %eax
	jns	.LBB66_68
# BB#69:                                # %while.end216
                                        #   in Loop: Header=BB66_65 Depth=2
	movq	152(%rsp), %rax         # 8-byte Reload
	movb	%r12b, -1(%r15,%rax)
	leal	1(%r15), %ebx
	movl	$-1, %ebp
	cmpl	$0, "PinFlag-161.31"(%rip)
	jne	.LBB66_71
# BB#70:                                #   in Loop: Header=BB66_65 Depth=2
	movl	$.L__unnamed_267, %edi
	movq	$-1, %rsi
	xorl	%edx, %edx
	movl	$8, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-161.31"(%rip)
.LBB66_71:                              # %while.cond208.1
                                        #   in Loop: Header=BB66_65 Depth=2
	movdqa	.LCPI66_0(%rip), %xmm4  # xmm4 = [256,256,256,256]
	.align	16, 0x90
.LBB66_72:                              # %while.cond208.1
                                        #   Parent Loop BB66_16 Depth=1
                                        #     Parent Loop BB66_65 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movslq	%ebx, %rax
	movl	160(%rsp,%rax,4), %ebx
	incl	%ebp
	testl	%ebx, %ebx
	jns	.LBB66_72
# BB#73:                                # %while.end216.1
                                        #   in Loop: Header=BB66_65 Depth=2
	cmpl	%r13d, %r12d
	movq	152(%rsp), %rax         # 8-byte Reload
	movb	%bpl, (%rax,%r15)
	movb	$1, %al
	movb	$1, %cl
	jg	.LBB66_75
# BB#74:                                # %while.end216.1
                                        #   in Loop: Header=BB66_65 Depth=2
	movb	%r14b, %cl
.LBB66_75:                              # %while.end216.1
                                        #   in Loop: Header=BB66_65 Depth=2
	cmpl	%r13d, %ebp
	jg	.LBB66_77
# BB#76:                                # %while.end216.1
                                        #   in Loop: Header=BB66_65 Depth=2
	movb	%cl, %al
.LBB66_77:                              # %while.end216.1
                                        #   in Loop: Header=BB66_65 Depth=2
	addq	$2, %r15
	cmpl	124(%rsp), %r15d        # 4-byte Folded Reload
	movb	%al, %r14b
	jne	.LBB66_65
.LBB66_78:                              # %for.end225
                                        #   in Loop: Header=BB66_16 Depth=1
	movl	%r13d, 84(%rsp)         # 4-byte Spill
	testb	%al, %al
	movq	88(%rsp), %rbp          # 8-byte Reload
	je	.LBB66_91
# BB#79:                                # %for.cond228.preheader
                                        #   in Loop: Header=BB66_16 Depth=1
	testl	%ebp, %ebp
	jle	.LBB66_90
# BB#80:                                # %for.body231.preheader
                                        #   in Loop: Header=BB66_16 Depth=1
	cmpq	$8, 64(%rsp)            # 8-byte Folded Reload
	movl	$1, %ebx
	jb	.LBB66_86
# BB#81:                                # %min.iters.checked438
                                        #   in Loop: Header=BB66_16 Depth=1
	cmpq	$0, 40(%rsp)            # 8-byte Folded Reload
	movl	$1, %ebx
	je	.LBB66_86
# BB#82:                                # %vector.body434.preheader
                                        #   in Loop: Header=BB66_16 Depth=1
	cmpl	$0, "PinFlag-161.4"(%rip)
	leaq	2228(%rsp), %rax
	movq	32(%rsp), %rcx          # 8-byte Reload
	jne	.LBB66_84
# BB#83:                                #   in Loop: Header=BB66_16 Depth=1
	movl	$.L__unnamed_268, %edi
	movl	$8, %edx
	movl	$23, %ecx
	movl	$1, %r8d
	movq	8(%rsp), %rsi           # 8-byte Reload
	callq	Pin
	movdqa	.LCPI66_0(%rip), %xmm4  # xmm4 = [256,256,256,256]
	movl	$1, "PinFlag-161.4"(%rip)
	leaq	2228(%rsp), %rax
	movq	32(%rsp), %rcx          # 8-byte Reload
	.align	16, 0x90
.LBB66_84:                              # %vector.body434
                                        #   Parent Loop BB66_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movdqu	(%rax), %xmm0
	movdqu	16(%rax), %xmm1
	movdqa	%xmm0, %xmm2
	psrad	$8, %xmm2
	movdqa	%xmm1, %xmm3
	psrad	$8, %xmm3
	psrld	$31, %xmm0
	paddd	%xmm2, %xmm0
	psrad	$1, %xmm0
	psrld	$31, %xmm1
	paddd	%xmm3, %xmm1
	psrad	$1, %xmm1
	pslld	$8, %xmm0
	pslld	$8, %xmm1
	paddd	%xmm4, %xmm0
	paddd	%xmm4, %xmm1
	movdqu	%xmm0, (%rax)
	movdqu	%xmm1, 16(%rax)
	addq	$32, %rax
	addq	$-8, %rcx
	jne	.LBB66_84
# BB#85:                                # %middle.block435
                                        #   in Loop: Header=BB66_16 Depth=1
	movq	40(%rsp), %rax          # 8-byte Reload
	cmpq	%rax, 64(%rsp)          # 8-byte Folded Reload
	movq	24(%rsp), %rbx          # 8-byte Reload
	je	.LBB66_15
	.align	16, 0x90
.LBB66_86:                              # %for.body231.preheader455
                                        #   in Loop: Header=BB66_16 Depth=1
	cmpl	$0, "PinFlag-161.5"(%rip)
	jne	.LBB66_88
# BB#87:                                #   in Loop: Header=BB66_16 Depth=1
	leal	1(%rbx), %eax
	movl	124(%rsp), %ecx         # 4-byte Reload
	subl	%eax, %ecx
	movslq	%ecx, %rsi
	movl	$.L__unnamed_269, %edi
	movl	$6, %edx
	movl	$12, %ecx
	movl	$1, %r8d
	callq	Pin
	movdqa	.LCPI66_0(%rip), %xmm4  # xmm4 = [256,256,256,256]
	movl	$1, "PinFlag-161.5"(%rip)
.LBB66_88:                              #   in Loop: Header=BB66_16 Depth=1
	movl	124(%rsp), %eax         # 4-byte Reload
	subl	%ebx, %eax
	leaq	2224(%rsp,%rbx,4), %rcx
	.align	16, 0x90
.LBB66_89:                              # %for.body231
                                        #   Parent Loop BB66_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	(%rcx), %edx
	movl	%edx, %esi
	sarl	$8, %esi
	shrl	$31, %edx
	addl	%esi, %edx
	andl	$-2, %edx
	shll	$7, %edx
	addl	$256, %edx              # imm = 0x100
	movl	%edx, (%rcx)
	addq	$4, %rcx
	decl	%eax
	jne	.LBB66_89
.LBB66_15:                              # %while.body.loopexit
                                        #   in Loop: Header=BB66_16 Depth=1
	testl	%ebp, %ebp
	movl	$0, 4288(%rsp)
	movl	$0, 2224(%rsp)
	movl	$-2, 160(%rsp)
	movl	$1, %r15d
	movl	$0, %r14d
	jg	.LBB66_16
.LBB66_91:                              # %while.end242.loopexit
	movl	$161, %edi
	callq	UnPin
	movl	$0, "PinFlag-161.0"(%rip)
	movl	$0, "PinFlag-161.10"(%rip)
	movl	$0, "PinFlag-161.11"(%rip)
	movl	$0, "PinFlag-161.12"(%rip)
	movl	$0, "PinFlag-161.1"(%rip)
	movl	$0, "PinFlag-161.2"(%rip)
	movl	$0, "PinFlag-161.30"(%rip)
	movl	$0, "PinFlag-161.31"(%rip)
	movl	$0, "PinFlag-161.3"(%rip)
	movl	$0, "PinFlag-161.4"(%rip)
	movl	$0, "PinFlag-161.5"(%rip)
	movl	$0, "PinFlag-161."(%rip)
	movl	$161, %edi
	callq	UnPin
	movl	$0, "PinFlag-161.0"(%rip)
	movl	$0, "PinFlag-161.10"(%rip)
	movl	$0, "PinFlag-161.11"(%rip)
	movl	$0, "PinFlag-161.12"(%rip)
	movl	$0, "PinFlag-161.1"(%rip)
	movl	$0, "PinFlag-161.2"(%rip)
	movl	$0, "PinFlag-161.30"(%rip)
	movl	$0, "PinFlag-161.31"(%rip)
	movl	$0, "PinFlag-161.3"(%rip)
	movl	$0, "PinFlag-161.4"(%rip)
	movl	$0, "PinFlag-161.5"(%rip)
	movl	$0, "PinFlag-161."(%rip)
	jmp	.LBB66_92
.LBB66_90:                              # %while.end242.critedge
	movl	$0, 4288(%rsp)
	movl	$0, 2224(%rsp)
	movl	$-2, 160(%rsp)
.LBB66_92:                              # %while.end242
	addq	$5336, %rsp             # imm = 0x14D8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end66:
	.size	BZ2_hbMakeCodeLengths, .Lfunc_end66-BZ2_hbMakeCodeLengths
	.cfi_endproc

	.globl	BZ2_hbAssignCodes
	.align	16, 0x90
	.type	BZ2_hbAssignCodes,@function
BZ2_hbAssignCodes:                      # @BZ2_hbAssignCodes
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp446:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp447:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp448:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp449:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp450:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp451:
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
.Ltmp452:
	.cfi_def_cfa_offset 80
.Ltmp453:
	.cfi_offset %rbx, -56
.Ltmp454:
	.cfi_offset %r12, -48
.Ltmp455:
	.cfi_offset %r13, -40
.Ltmp456:
	.cfi_offset %r14, -32
.Ltmp457:
	.cfi_offset %r15, -24
.Ltmp458:
	.cfi_offset %rbp, -16
	movl	%r8d, %ebx
	movl	%ebx, 12(%rsp)          # 4-byte Spill
	movl	%ecx, %r15d
	movl	%r15d, 8(%rsp)          # 4-byte Spill
	movl	%edx, %ebp
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	cmpl	%r15d, %ebp
	jg	.LBB67_13
# BB#1:                                 # %entry
	testl	%ebx, %ebx
	jle	.LBB67_13
# BB#2:                                 # %for.body3.lr.ph.us.preheader
	cmpl	%ebp, %r15d
	movl	%ebp, %eax
	cmovgel	%r15d, %eax
	cmpl	$0, "PinFlag-164."(%rip)
	jne	.LBB67_4
# BB#3:
	subl	%ebp, %eax
	movq	%rsi, %r14
	movslq	%eax, %rsi
	movl	$.L__unnamed_270, %edi
	movl	$4, %edx
	movl	$30, %ecx
	xorl	%r8d, %r8d
	callq	Pin
	movq	%r14, %rsi
	movl	$1, "PinFlag-164."(%rip)
.LBB67_4:
	movl	%ebx, %edi
	andl	$1, %edi
	movl	%edi, 4(%rsp)           # 4-byte Spill
	movq	16(%rsp), %rax          # 8-byte Reload
	leaq	4(%rax), %r8
	leaq	1(%rsi), %r13
	xorl	%r12d, %r12d
	.align	16, 0x90
.LBB67_5:                               # %for.body3.lr.ph.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_7 Depth 2
	testl	%edi, %edi
	jne	.LBB67_14
# BB#6:                                 #   in Loop: Header=BB67_5 Depth=1
	xorl	%r14d, %r14d
	jmp	.LBB67_17
	.align	16, 0x90
.LBB67_14:                              # %for.body3.us.prol
                                        #   in Loop: Header=BB67_5 Depth=1
	movzbl	(%rsi), %eax
	cmpl	%ebp, %eax
	jne	.LBB67_16
# BB#15:                                # %if.then.us.prol
                                        #   in Loop: Header=BB67_5 Depth=1
	movq	16(%rsp), %rax          # 8-byte Reload
	movl	%r12d, (%rax)
	orl	$1, %r12d
.LBB67_16:                              # %for.body3.lr.ph.us.split
                                        #   in Loop: Header=BB67_5 Depth=1
	movl	$1, %r14d
.LBB67_17:                              # %for.body3.lr.ph.us.split
                                        #   in Loop: Header=BB67_5 Depth=1
	cmpl	$1, %ebx
	je	.LBB67_12
# BB#18:                                # %for.body3.lr.ph.us.split.split
                                        #   in Loop: Header=BB67_5 Depth=1
	cmpl	$0, "PinFlag-164.0"(%rip)
	jne	.LBB67_20
# BB#19:                                #   in Loop: Header=BB67_5 Depth=1
	movl	$.L__unnamed_271, %edi
	movq	%rsi, %r15
	movl	$1, %esi
	movl	$12, %edx
	movl	$27, %ecx
	movq	%r8, %rbx
	movl	$1, %r8d
	callq	Pin
	movq	%rbx, %r8
	movl	4(%rsp), %edi           # 4-byte Reload
	movl	12(%rsp), %ebx          # 4-byte Reload
	movq	%r15, %rsi
	movl	8(%rsp), %r15d          # 4-byte Reload
	movl	$1, "PinFlag-164.0"(%rip)
.LBB67_20:                              #   in Loop: Header=BB67_5 Depth=1
	movl	%ebx, %eax
	subl	%r14d, %eax
	leaq	(%r8,%r14,4), %rcx
	addq	%r13, %r14
	.align	16, 0x90
.LBB67_7:                               # %for.body3.us
                                        #   Parent Loop BB67_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	-1(%r14), %edx
	cmpl	%ebp, %edx
	jne	.LBB67_9
# BB#8:                                 # %if.then.us
                                        #   in Loop: Header=BB67_7 Depth=2
	movl	%r12d, -4(%rcx)
	incl	%r12d
.LBB67_9:                               # %for.inc.us
                                        #   in Loop: Header=BB67_7 Depth=2
	movzbl	(%r14), %edx
	cmpl	%ebp, %edx
	jne	.LBB67_11
# BB#10:                                # %if.then.us.1
                                        #   in Loop: Header=BB67_7 Depth=2
	movl	%r12d, (%rcx)
	incl	%r12d
.LBB67_11:                              # %for.inc.us.1
                                        #   in Loop: Header=BB67_7 Depth=2
	addq	$8, %rcx
	addq	$2, %r14
	addl	$-2, %eax
	jne	.LBB67_7
.LBB67_12:                              # %for.cond1.for.end_crit_edge.us
                                        #   in Loop: Header=BB67_5 Depth=1
	addl	%r12d, %r12d
	cmpl	%r15d, %ebp
	leal	1(%rbp), %eax
	movl	%eax, %ebp
	jl	.LBB67_5
.LBB67_13:                              # %for.end11
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end67:
	.size	BZ2_hbAssignCodes, .Lfunc_end67-BZ2_hbAssignCodes
	.cfi_endproc

	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI68_0:
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.text
	.globl	BZ2_hbCreateDecodeTables
	.align	16, 0x90
	.type	BZ2_hbCreateDecodeTables,@function
BZ2_hbCreateDecodeTables:               # @BZ2_hbCreateDecodeTables
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp459:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp460:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp461:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp462:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp463:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp464:
	.cfi_def_cfa_offset 56
	subq	$248, %rsp
.Ltmp465:
	.cfi_def_cfa_offset 304
.Ltmp466:
	.cfi_offset %rbx, -56
.Ltmp467:
	.cfi_offset %r12, -48
.Ltmp468:
	.cfi_offset %r13, -40
.Ltmp469:
	.cfi_offset %r14, -32
.Ltmp470:
	.cfi_offset %r15, -24
.Ltmp471:
	.cfi_offset %rbp, -16
	movq	%r8, 232(%rsp)          # 8-byte Spill
	movq	%rcx, %rbx
	movq	%rbx, 240(%rsp)         # 8-byte Spill
	movq	%rdx, %rbp
	movq	%rsi, 216(%rsp)         # 8-byte Spill
	movq	%rdi, 208(%rsp)         # 8-byte Spill
	movl	304(%rsp), %r12d
	cmpl	%r9d, %r8d
	jg	.LBB68_17
# BB#1:                                 # %for.cond1.preheader.lr.ph
	testl	%r12d, %r12d
	jle	.LBB68_26
# BB#2:                                 # %for.body3.lr.ph.us.preheader
	movl	%r12d, %edi
	andl	$1, %edi
	movl	%edi, 224(%rsp)         # 4-byte Spill
	movq	232(%rsp), %rcx         # 8-byte Reload
	cmpl	%ecx, %r9d
	movl	%ecx, %eax
	cmovgel	%r9d, %eax
	xorl	%r13d, %r13d
	cmpl	$0, "PinFlag-169."(%rip)
	movl	%ecx, %r14d
	jne	.LBB68_4
# BB#3:
	movq	232(%rsp), %r14         # 8-byte Reload
	subl	%r14d, %eax
	movslq	%eax, %rsi
	xorl	%r13d, %r13d
	movl	%edi, 224(%rsp)         # 4-byte Spill
	movl	$.L__unnamed_272, %edi
	movl	$5, %edx
	movl	$31, %ecx
	xorl	%r8d, %r8d
	movq	%r9, %r15
	callq	Pin
	movl	224(%rsp), %edi         # 4-byte Reload
	movq	%r15, %r9
	movl	$1, "PinFlag-169."(%rip)
	.align	16, 0x90
.LBB68_4:                               # %for.body3.lr.ph.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_11 Depth 2
	xorl	%r15d, %r15d
	testl	%edi, %edi
	je	.LBB68_7
# BB#5:                                 # %for.body3.us.prol
                                        #   in Loop: Header=BB68_4 Depth=1
	movzbl	(%rbx), %eax
	movl	$1, %r15d
	cmpl	%r14d, %eax
	jne	.LBB68_7
# BB#6:                                 # %if.then.us.prol
                                        #   in Loop: Header=BB68_4 Depth=1
	movslq	%r13d, %r13
	movl	$0, (%rbp,%r13,4)
	incl	%r13d
	movl	$1, %r15d
.LBB68_7:                               # %for.body3.lr.ph.us.split
                                        #   in Loop: Header=BB68_4 Depth=1
	cmpl	$1, %r12d
	je	.LBB68_16
# BB#8:                                 # %for.body3.lr.ph.us.split.split
                                        #   in Loop: Header=BB68_4 Depth=1
	cmpl	$0, "PinFlag-169.0"(%rip)
	jne	.LBB68_10
# BB#9:                                 #   in Loop: Header=BB68_4 Depth=1
	movl	$.L__unnamed_273, %edi
	movl	$1, %esi
	movl	$12, %edx
	movl	$31, %ecx
	movl	$1, %r8d
	movq	%r9, %rbx
	callq	Pin
	movl	224(%rsp), %edi         # 4-byte Reload
	movq	%rbx, %r9
	movq	240(%rsp), %rbx         # 8-byte Reload
	movl	$1, "PinFlag-169.0"(%rip)
.LBB68_10:                              #   in Loop: Header=BB68_4 Depth=1
	movl	%r12d, %eax
	subl	%r15d, %eax
	leaq	1(%rbx,%r15), %rcx
	incq	%r15
	xorl	%edx, %edx
	.align	16, 0x90
.LBB68_11:                              # %for.body3.us
                                        #   Parent Loop BB68_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	-1(%rcx,%rdx), %esi
	cmpl	%r14d, %esi
	jne	.LBB68_13
# BB#12:                                # %if.then.us
                                        #   in Loop: Header=BB68_11 Depth=2
	movslq	%r13d, %r13
	leal	-1(%r15,%rdx), %esi
	movl	%esi, (%rbp,%r13,4)
	incl	%r13d
.LBB68_13:                              # %for.inc.us
                                        #   in Loop: Header=BB68_11 Depth=2
	movzbl	(%rcx,%rdx), %esi
	cmpl	%r14d, %esi
	jne	.LBB68_15
# BB#14:                                # %if.then.us.1
                                        #   in Loop: Header=BB68_11 Depth=2
	movslq	%r13d, %r13
	leal	(%r15,%rdx), %esi
	movl	%esi, (%rbp,%r13,4)
	incl	%r13d
.LBB68_15:                              # %for.inc.us.1
                                        #   in Loop: Header=BB68_11 Depth=2
	addq	$2, %rdx
	cmpl	%edx, %eax
	jne	.LBB68_11
.LBB68_16:                              # %for.cond1.for.inc9_crit_edge.us
                                        #   in Loop: Header=BB68_4 Depth=1
	cmpl	%r9d, %r14d
	leal	1(%r14), %eax
	movl	%eax, %r14d
	jl	.LBB68_4
.LBB68_17:                              # %for.body15.preheader
	pxor	%xmm0, %xmm0
	movq	216(%rsp), %rbp         # 8-byte Reload
	movdqu	%xmm0, 76(%rbp)
	movdqu	%xmm0, 64(%rbp)
	movdqu	%xmm0, 48(%rbp)
	movdqu	%xmm0, 32(%rbp)
	movdqu	%xmm0, 16(%rbp)
	movdqu	%xmm0, (%rbp)
	testl	%r12d, %r12d
	jle	.LBB68_27
# BB#18:                                # %for.body24.preheader
	movq	%r9, 32(%rsp)           # 8-byte Spill
	xorl	%r15d, %r15d
	testb	$1, %r12b
	je	.LBB68_20
# BB#19:                                # %for.body24.prol
	movzbl	(%rbx), %eax
	incl	4(%rbp,%rax,4)
	movl	$1, %r15d
.LBB68_20:                              # %for.body24.preheader.split
	cmpl	$1, %r12d
	je	.LBB68_25
# BB#21:                                # %for.body24.preheader.split.split
	cmpl	$0, "PinFlag-168."(%rip)
	jne	.LBB68_23
# BB#22:
	movl	$.L__unnamed_274, %edi
	movl	$1, %esi
	movl	$10, %edx
	movl	$22, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-168."(%rip)
.LBB68_23:
	subl	%r15d, %r12d
	leaq	1(%r15,%rbx), %rax
	.align	16, 0x90
.LBB68_24:                              # %for.body24
                                        # =>This Inner Loop Header: Depth=1
	movzbl	-1(%rax), %ecx
	incl	4(%rbp,%rcx,4)
	movzbl	(%rax), %ecx
	incl	4(%rbp,%rcx,4)
	addq	$2, %rax
	addl	$-2, %r12d
	jne	.LBB68_24
.LBB68_25:                              # %for.body37.preheader.loopexit
	leaq	4(%rbp), %rax
	movq	%rax, 88(%rsp)          # 8-byte Spill
	movl	4(%rbp), %esi
	movl	8(%rbp), %eax
	movl	%eax, 40(%rsp)          # 4-byte Spill
	leaq	8(%rbp), %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	leaq	12(%rbp), %rax
	movq	%rax, 224(%rsp)         # 8-byte Spill
	movl	12(%rbp), %eax
	movl	%eax, 4(%rsp)           # 4-byte Spill
	leaq	16(%rbp), %rax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movl	16(%rbp), %edx
	leaq	20(%rbp), %rax
	movq	%rax, 192(%rsp)         # 8-byte Spill
	movl	20(%rbp), %eax
	movl	%eax, 12(%rsp)          # 4-byte Spill
	leaq	24(%rbp), %rax
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movl	24(%rbp), %eax
	movl	%eax, 16(%rsp)          # 4-byte Spill
	leaq	28(%rbp), %rax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	movl	28(%rbp), %ecx
	leaq	32(%rbp), %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	movl	32(%rbp), %eax
	movl	%eax, 24(%rsp)          # 4-byte Spill
	leaq	36(%rbp), %rax
	movq	%rax, 160(%rsp)         # 8-byte Spill
	movl	36(%rbp), %eax
	movl	%eax, 28(%rsp)          # 4-byte Spill
	leaq	40(%rbp), %rax
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movl	40(%rbp), %r15d
	leaq	44(%rbp), %rax
	movq	%rax, 144(%rsp)         # 8-byte Spill
	movl	44(%rbp), %edi
	leaq	48(%rbp), %rax
	movq	%rax, 136(%rsp)         # 8-byte Spill
	movl	48(%rbp), %eax
	movl	%eax, (%rsp)            # 4-byte Spill
	leaq	52(%rbp), %rax
	movq	%rax, 128(%rsp)         # 8-byte Spill
	movl	52(%rbp), %eax
	movl	%eax, 8(%rsp)           # 4-byte Spill
	leaq	56(%rbp), %rax
	movq	%rax, 120(%rsp)         # 8-byte Spill
	movl	56(%rbp), %eax
	movl	%eax, 20(%rsp)          # 4-byte Spill
	leaq	60(%rbp), %rax
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movl	60(%rbp), %r14d
	leaq	64(%rbp), %rbx
	movq	%rbx, 104(%rsp)         # 8-byte Spill
	movl	64(%rbp), %r13d
	leaq	68(%rbp), %rbx
	movq	%rbx, 96(%rsp)          # 8-byte Spill
	movl	68(%rbp), %r12d
	leaq	72(%rbp), %rbx
	movq	%rbx, 80(%rsp)          # 8-byte Spill
	movl	72(%rbp), %r11d
	leaq	76(%rbp), %rbx
	movq	%rbx, 72(%rsp)          # 8-byte Spill
	movl	76(%rbp), %r10d
	leaq	80(%rbp), %rbx
	movq	%rbx, 64(%rsp)          # 8-byte Spill
	movl	80(%rbp), %r9d
	leaq	84(%rbp), %rbx
	movq	%rbx, 56(%rsp)          # 8-byte Spill
	movl	84(%rbp), %r8d
	leaq	88(%rbp), %rbx
	movq	%rbx, 48(%rsp)          # 8-byte Spill
	movl	88(%rbp), %ebx
	movl	%ebx, 44(%rsp)          # 4-byte Spill
	jmp	.LBB68_28
.LBB68_26:                              # %for.body15.preheader.thread
	pxor	%xmm0, %xmm0
	movq	216(%rsp), %rbp         # 8-byte Reload
	movdqu	%xmm0, 76(%rbp)
	movdqu	%xmm0, 64(%rbp)
	movdqu	%xmm0, 48(%rbp)
	movdqu	%xmm0, 32(%rbp)
	movdqu	%xmm0, 16(%rbp)
	movdqu	%xmm0, (%rbp)
.LBB68_27:                              # %for.body15.preheader.for.body37.preheader_crit_edge
	movq	%r9, 32(%rsp)           # 8-byte Spill
	leaq	4(%rbp), %rax
	movq	%rax, 88(%rsp)          # 8-byte Spill
	leaq	8(%rbp), %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	leaq	12(%rbp), %rax
	movq	%rax, 224(%rsp)         # 8-byte Spill
	leaq	16(%rbp), %rax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	leaq	20(%rbp), %rax
	movq	%rax, 192(%rsp)         # 8-byte Spill
	leaq	24(%rbp), %rax
	movq	%rax, 184(%rsp)         # 8-byte Spill
	leaq	28(%rbp), %rax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	leaq	32(%rbp), %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	leaq	36(%rbp), %rax
	movq	%rax, 160(%rsp)         # 8-byte Spill
	leaq	40(%rbp), %rax
	movq	%rax, 152(%rsp)         # 8-byte Spill
	leaq	44(%rbp), %rax
	movq	%rax, 144(%rsp)         # 8-byte Spill
	leaq	48(%rbp), %rax
	movq	%rax, 136(%rsp)         # 8-byte Spill
	leaq	52(%rbp), %rax
	movq	%rax, 128(%rsp)         # 8-byte Spill
	leaq	56(%rbp), %rax
	movq	%rax, 120(%rsp)         # 8-byte Spill
	leaq	60(%rbp), %rax
	movq	%rax, 112(%rsp)         # 8-byte Spill
	leaq	64(%rbp), %rax
	movq	%rax, 104(%rsp)         # 8-byte Spill
	leaq	68(%rbp), %rax
	movq	%rax, 96(%rsp)          # 8-byte Spill
	leaq	72(%rbp), %rax
	movq	%rax, 80(%rsp)          # 8-byte Spill
	leaq	76(%rbp), %rax
	movq	%rax, 72(%rsp)          # 8-byte Spill
	leaq	80(%rbp), %rax
	movq	%rax, 64(%rsp)          # 8-byte Spill
	leaq	84(%rbp), %rax
	movq	%rax, 56(%rsp)          # 8-byte Spill
	leaq	88(%rbp), %rax
	movq	%rax, 48(%rsp)          # 8-byte Spill
	movl	$0, 44(%rsp)            # 4-byte Folded Spill
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	xorl	%r10d, %r10d
	xorl	%r11d, %r11d
	xorl	%r12d, %r12d
	xorl	%r13d, %r13d
	xorl	%r14d, %r14d
	movl	$0, 20(%rsp)            # 4-byte Folded Spill
	movl	$0, 8(%rsp)             # 4-byte Folded Spill
	movl	$0, (%rsp)              # 4-byte Folded Spill
	xorl	%edi, %edi
	xorl	%r15d, %r15d
	movl	$0, 28(%rsp)            # 4-byte Folded Spill
	movl	$0, 24(%rsp)            # 4-byte Folded Spill
	xorl	%ecx, %ecx
	movl	$0, 16(%rsp)            # 4-byte Folded Spill
	movl	$0, 12(%rsp)            # 4-byte Folded Spill
	xorl	%edx, %edx
	movl	$0, 4(%rsp)             # 4-byte Folded Spill
	movl	$0, 40(%rsp)            # 4-byte Folded Spill
	xorl	%esi, %esi
.LBB68_28:                              # %for.body37.preheader
	movq	88(%rsp), %rbx          # 8-byte Reload
	movl	%esi, (%rbx)
	movl	40(%rsp), %eax          # 4-byte Reload
	addl	%esi, %eax
	movq	240(%rsp), %rbx         # 8-byte Reload
	movl	%eax, (%rbx)
	movl	4(%rsp), %esi           # 4-byte Reload
	addl	%eax, %esi
	movq	224(%rsp), %rbx         # 8-byte Reload
	movl	%esi, (%rbx)
	addl	%esi, %edx
	movq	200(%rsp), %rbx         # 8-byte Reload
	movl	%edx, (%rbx)
	movl	%edx, %eax
	movl	12(%rsp), %edx          # 4-byte Reload
	addl	%eax, %edx
	movq	192(%rsp), %rbx         # 8-byte Reload
	movl	%edx, (%rbx)
	movl	16(%rsp), %eax          # 4-byte Reload
	addl	%edx, %eax
	movq	184(%rsp), %rbx         # 8-byte Reload
	movl	%eax, (%rbx)
	addl	%eax, %ecx
	movq	176(%rsp), %rbx         # 8-byte Reload
	movl	%ecx, (%rbx)
	movl	%ecx, %eax
	movl	24(%rsp), %ecx          # 4-byte Reload
	addl	%eax, %ecx
	movq	168(%rsp), %rbx         # 8-byte Reload
	movl	%ecx, (%rbx)
	movl	28(%rsp), %eax          # 4-byte Reload
	addl	%ecx, %eax
	movq	160(%rsp), %rbx         # 8-byte Reload
	movl	%eax, (%rbx)
	addl	%eax, %r15d
	movq	152(%rsp), %rbx         # 8-byte Reload
	movl	%r15d, (%rbx)
	addl	%r15d, %edi
	movq	144(%rsp), %rbx         # 8-byte Reload
	movl	%edi, (%rbx)
	movl	(%rsp), %eax            # 4-byte Reload
	addl	%edi, %eax
	movq	136(%rsp), %rdi         # 8-byte Reload
	movl	%eax, (%rdi)
	movl	8(%rsp), %ecx           # 4-byte Reload
	addl	%eax, %ecx
	movq	128(%rsp), %rsi         # 8-byte Reload
	movl	%ecx, (%rsi)
	movl	20(%rsp), %eax          # 4-byte Reload
	addl	%ecx, %eax
	movq	120(%rsp), %rdx         # 8-byte Reload
	movl	%eax, (%rdx)
	addl	%eax, %r14d
	movq	112(%rsp), %rcx         # 8-byte Reload
	movl	%r14d, (%rcx)
	addl	%r14d, %r13d
	movq	104(%rsp), %rax         # 8-byte Reload
	movl	%r13d, (%rax)
	addl	%r13d, %r12d
	movq	96(%rsp), %rax          # 8-byte Reload
	movl	%r12d, (%rax)
	addl	%r12d, %r11d
	movq	80(%rsp), %rax          # 8-byte Reload
	movl	%r11d, (%rax)
	addl	%r11d, %r10d
	movq	72(%rsp), %rax          # 8-byte Reload
	movl	%r10d, (%rax)
	addl	%r10d, %r9d
	movq	64(%rsp), %rax          # 8-byte Reload
	movl	%r9d, (%rax)
	addl	%r9d, %r8d
	movq	56(%rsp), %rax          # 8-byte Reload
	movl	%r8d, (%rax)
	movl	44(%rsp), %ecx          # 4-byte Reload
	addl	%r8d, %ecx
	movq	48(%rsp), %rax          # 8-byte Reload
	movl	%ecx, (%rax)
	movq	232(%rsp), %r12         # 8-byte Reload
	movq	32(%rsp), %rax          # 8-byte Reload
	cmpl	%eax, %r12d
	movq	%rax, %r14
	pxor	%xmm0, %xmm0
	movq	208(%rsp), %r13         # 8-byte Reload
	movdqu	%xmm0, 76(%r13)
	movdqu	%xmm0, 64(%r13)
	movdqu	%xmm0, 48(%r13)
	movdqu	%xmm0, 32(%r13)
	movdqu	%xmm0, 16(%r13)
	movdqu	%xmm0, (%r13)
	jg	.LBB68_33
# BB#29:                                # %for.body58.preheader
	movslq	%r14d, %r15
	movslq	%r12d, %rbx
	cmpq	%rbx, %r15
	movq	%rbx, %rsi
	cmovgeq	%r15, %rsi
	cmpl	$0, "PinFlag-167."(%rip)
	jne	.LBB68_31
# BB#30:
	subq	%rbx, %rsi
	movl	$.L__unnamed_275, %edi
	movl	$1, %edx
	movl	$18, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-167."(%rip)
.LBB68_31:
	decq	%rbx
	leal	1(%r12), %eax
	cltq
	shlq	$2, %rax
	xorl	%ecx, %ecx
	.align	16, 0x90
.LBB68_32:                              # %for.body58
                                        # =>This Inner Loop Header: Depth=1
	movl	(%rbp,%rax), %edx
	subl	4(%rbp,%rbx,4), %edx
	leal	-1(%rdx,%rcx), %esi
	leal	(%rdx,%rcx), %ecx
	movl	%esi, 4(%r13,%rbx,4)
	addl	%ecx, %ecx
	incq	%rbx
	addq	$4, %rax
	cmpq	%r15, %rbx
	jl	.LBB68_32
.LBB68_33:                              # %for.cond73.preheader
	movq	%r14, %rbx
	cmpl	%ebx, %r12d
	jge	.LBB68_53
# BB#34:                                # %for.body76.preheader
	movq	%rbp, %rax
	movslq	%r12d, %r14
	leal	-1(%rbx), %ebp
	subl	%r12d, %ebp
	leaq	1(%rbp), %r15
	cmpq	$7, %r15
	jbe	.LBB68_35
# BB#43:                                # %min.iters.checked
	movq	%r13, %rdx
	movabsq	$8589934584, %r13       # imm = 0x1FFFFFFF8
	movq	%r15, %r12
	andq	%r13, %r12
	je	.LBB68_44
# BB#45:                                # %vector.memcheck
	movq	%rax, %rdi
	leaq	4(%rdi,%r14,4), %rcx
	leaq	(%rbp,%r14), %rax
	movq	%rdx, %rsi
	leaq	(%rsi,%rax,4), %rdx
	cmpq	%rdx, %rcx
	ja	.LBB68_48
# BB#46:                                # %vector.memcheck
	leaq	4(%rdi,%rax,4), %rax
	leaq	(%rsi,%r14,4), %rcx
	cmpq	%rax, %rcx
	ja	.LBB68_48
# BB#47:
	movq	%rsi, %r13
	movq	%rdi, %rbp
	jmp	.LBB68_36
.LBB68_44:
	movq	%rdx, %r13
.LBB68_35:
	movq	%rax, %rbp
.LBB68_36:                              # %for.body76.preheader239
	leal	1(%rbx), %ecx
	leal	1(%r14), %eax
	subl	%eax, %ecx
	testb	$1, %cl
	je	.LBB68_38
# BB#37:                                # %for.body76.prol
	movl	(%r13,%r14,4), %ecx
	leal	2(%rcx,%rcx), %ecx
	subl	4(%rbp,%r14,4), %ecx
	movl	%ecx, 4(%rbp,%r14,4)
	incq	%r14
.LBB68_38:                              # %for.body76.preheader239.split
	cmpl	%ebx, %eax
	je	.LBB68_53
# BB#39:                                # %for.body76.preheader239.split.split
	cmpl	$0, "PinFlag-165."(%rip)
	jne	.LBB68_41
# BB#40:
	movl	$.L__unnamed_276, %edi
	movl	$1, %esi
	movl	$2, %edx
	movl	$22, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-165."(%rip)
.LBB68_41:
	subl	%r14d, %ebx
	leaq	8(%rbp,%r14,4), %rax
	leaq	4(%r13,%r14,4), %rcx
	.align	16, 0x90
.LBB68_42:                              # %for.body76
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rcx), %edx
	leal	2(%rdx,%rdx), %edx
	subl	-4(%rax), %edx
	movl	%edx, -4(%rax)
	movl	(%rcx), %edx
	leal	2(%rdx,%rdx), %edx
	subl	(%rax), %edx
	movl	%edx, (%rax)
	addq	$8, %rax
	addq	$8, %rcx
	addl	$-2, %ebx
	jne	.LBB68_42
.LBB68_53:                              # %for.end89
	addq	$248, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB68_48:                              # %vector.body.preheader
	cmpl	$0, "PinFlag-166."(%rip)
	jne	.LBB68_50
# BB#49:
	leaq	1(%rbp), %rsi
	andq	%r13, %rsi
	addq	$-8, %rsi
	shrq	$3, %rsi
	movl	$.L__unnamed_277, %edi
	movl	$2, %edx
	movl	$28, %ecx
	movl	$1, %r8d
	callq	Pin
	movl	$1, "PinFlag-166."(%rip)
.LBB68_50:
	addq	%r12, %r14
	incq	%rbp
	andq	%r13, %rbp
	movq	232(%rsp), %rax         # 8-byte Reload
	movslq	%eax, %rcx
	movq	216(%rsp), %rax         # 8-byte Reload
	leaq	4(%rax,%rcx,4), %rax
	movq	208(%rsp), %r13         # 8-byte Reload
	leaq	16(%r13,%rcx,4), %rcx
	movdqa	.LCPI68_0(%rip), %xmm0  # xmm0 = [2,2,2,2]
	.align	16, 0x90
.LBB68_51:                              # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	movdqu	-16(%rcx), %xmm1
	movdqu	(%rcx), %xmm2
	paddd	%xmm1, %xmm1
	paddd	%xmm2, %xmm2
	paddd	%xmm0, %xmm1
	paddd	%xmm0, %xmm2
	movdqu	(%rax), %xmm3
	movdqu	16(%rax), %xmm4
	psubd	%xmm3, %xmm1
	psubd	%xmm4, %xmm2
	movdqu	%xmm1, (%rax)
	movdqu	%xmm2, 16(%rax)
	addq	$32, %rax
	addq	$32, %rcx
	addq	$-8, %rbp
	jne	.LBB68_51
# BB#52:                                # %middle.block
	cmpq	%r12, %r15
	movq	216(%rsp), %rbp         # 8-byte Reload
	jne	.LBB68_36
	jmp	.LBB68_53
.Lfunc_end68:
	.size	BZ2_hbCreateDecodeTables, .Lfunc_end68-BZ2_hbCreateDecodeTables
	.cfi_endproc

	.type	dbglvl,@object          # @dbglvl
	.data
	.globl	dbglvl
	.align	4
dbglvl:
	.long	4                       # 0x4
	.size	dbglvl, 4

	.type	seedi,@object           # @seedi
	.comm	seedi,8,8
	.type	spec_fd,@object         # @spec_fd
	.comm	spec_fd,72,16
	.type	.Lstr.34,@object        # @str.34
	.section	.rodata.str1.1,"aMS",@progbits,1
.Lstr.34:
	.asciz	"spec_init"
	.size	.Lstr.34, 10

	.type	.Lstr,@object           # @str
	.section	.rodata.str1.16,"aMS",@progbits,1
	.align	16
.Lstr:
	.asciz	"spec_init: Error mallocing memory!"
	.size	.Lstr, 35

	.type	.Lstr.36,@object        # @str.36
	.section	.rodata.str1.1,"aMS",@progbits,1
.Lstr.36:
	.asciz	"Creating Chunks"
	.size	.Lstr.36, 16

	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"Creating Chunk %d\n"
	.size	.L.str.3, 19

	.type	.Lstr.35,@object        # @str.35
	.section	.rodata.str1.16,"aMS",@progbits,1
	.align	16
.Lstr.35:
	.asciz	"Filling input file"
	.size	.Lstr.35, 19

	.type	.L.str.5,@object        # @.str.5
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.5:
	.asciz	"Can't open file %s: %s\n"
	.size	.L.str.5, 24

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"Error reading from %s: %s\n"
	.size	.L.str.6, 27

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"Duplicating %d bytes\n"
	.size	.L.str.7, 22

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"spec_read: %d, %p, %d = "
	.size	.L.str.8, 25

	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	"spec_read: fd=%d, > MAX_SPEC_FD!\n"
	.size	.L.str.9, 34

	.type	.Lstr.39,@object        # @str.39
.Lstr.39:
	.asciz	"EOF"
	.size	.Lstr.39, 4

	.type	.L.str.11,@object       # @.str.11
.L.str.11:
	.asciz	"%d\n"
	.size	.L.str.11, 4

	.type	.L.str.12,@object       # @.str.12
.L.str.12:
	.asciz	"spec_fread: %p, (%d x %d) fd %d ="
	.size	.L.str.12, 34

	.type	.L.str.13,@object       # @.str.13
.L.str.13:
	.asciz	"spec_fread: fd=%d, > MAX_SPEC_FD!\n"
	.size	.L.str.13, 35

	.type	.L.str.14,@object       # @.str.14
.L.str.14:
	.asciz	"spec_getc: %d = "
	.size	.L.str.14, 17

	.type	.L.str.15,@object       # @.str.15
.L.str.15:
	.asciz	"spec_ungetc: %d = "
	.size	.L.str.15, 19

	.type	.L.str.16,@object       # @.str.16
.L.str.16:
	.asciz	"spec_ungetc: pos %d <= 0\n"
	.size	.L.str.16, 26

	.type	.L.str.17,@object       # @.str.17
.L.str.17:
	.asciz	"spec_ungetc: can't unget something that wasn't what was in the buffer!\n"
	.size	.L.str.17, 72

	.type	.L.str.18,@object       # @.str.18
.L.str.18:
	.asciz	"spec_write: %d, %p, %d = "
	.size	.L.str.18, 26

	.type	.L.str.19,@object       # @.str.19
.L.str.19:
	.asciz	"spec_write: fd=%d, > MAX_SPEC_FD!\n"
	.size	.L.str.19, 35

	.type	.L.str.20,@object       # @.str.20
.L.str.20:
	.asciz	"spec_fwrite: %p, %d, %d, %d = "
	.size	.L.str.20, 31

	.type	.L.str.21,@object       # @.str.21
.L.str.21:
	.asciz	"spec_fwrite: fd=%d, > MAX_SPEC_FD!\n"
	.size	.L.str.21, 36

	.type	.L.str.22,@object       # @.str.22
.L.str.22:
	.asciz	"spec_putc: %d, %d = "
	.size	.L.str.22, 21

	.type	.L.str.23,@object       # @.str.23
.L.str.23:
	.asciz	"input.combined"
	.size	.L.str.23, 15

	.type	.Lstr.43,@object        # @str.43
	.section	.rodata.str1.16,"aMS",@progbits,1
	.align	16
.Lstr.43:
	.asciz	"Loading Input Data"
	.size	.Lstr.43, 19

	.type	.L.str.25,@object       # @.str.25
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.25:
	.asciz	"Input data %d bytes in length\n"
	.size	.L.str.25, 31

	.type	.Lstr.42,@object        # @str.42
	.section	.rodata.str1.16,"aMS",@progbits,1
	.align	16
.Lstr.42:
	.asciz	"main: Error mallocing memory!"
	.size	.Lstr.42, 30

	.type	.L.str.27,@object       # @.str.27
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.27:
	.asciz	"Compressing Input Data, level %d\n"
	.size	.L.str.27, 34

	.type	.L.str.28,@object       # @.str.28
.L.str.28:
	.asciz	"Compressed data %d bytes in length\n"
	.size	.L.str.28, 36

	.type	.Lstr.41,@object        # @str.41
	.section	.rodata.str1.16,"aMS",@progbits,1
	.align	16
.Lstr.41:
	.asciz	"Uncompressing Data"
	.size	.Lstr.41, 19

	.type	.L.str.30,@object       # @.str.30
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.30:
	.asciz	"Uncompressed data %d bytes in length\n"
	.size	.L.str.30, 38

	.type	.Lstr.40,@object        # @str.40
	.section	.rodata.str1.16,"aMS",@progbits,1
	.align	16
.Lstr.40:
	.asciz	"Uncompressed data compared correctly"
	.size	.Lstr.40, 37

	.type	.L.str.31,@object       # @.str.31
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.31:
	.asciz	"Tested %dMB buffer: Miscompared!!\n"
	.size	.L.str.31, 35

	.type	.L.str.33,@object       # @.str.33
.L.str.33:
	.asciz	"Tested %dMB buffer: OK!\n"
	.size	.L.str.33, 25

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"        bucket sorting ...\n"
	.size	.L.str.2, 28

	.type	.L.str.3.1,@object      # @.str.3.1
.L.str.3.1:
	.asciz	"        depth %6d has "
	.size	.L.str.3.1, 23

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"%6d unresolved strings\n"
	.size	.L.str.4, 24

	.type	.L.str.5.2,@object      # @.str.5.2
.L.str.5.2:
	.asciz	"        reconstructing block ...\n"
	.size	.L.str.5.2, 34

	.type	.L.str.6.3,@object      # @.str.6.3
.L.str.6.3:
	.asciz	"        main sort initialise ...\n"
	.size	.L.str.6.3, 34

	.type	.L.str.7.4,@object      # @.str.7.4
.L.str.7.4:
	.asciz	"        qsort [0x%x, 0x%x]   done %d   this %d\n"
	.size	.L.str.7.4, 48

	.type	incs,@object            # @incs
	.section	.rodata,"a",@progbits
	.align	16
incs:
	.long	1                       # 0x1
	.long	4                       # 0x4
	.long	13                      # 0xd
	.long	40                      # 0x28
	.long	121                     # 0x79
	.long	364                     # 0x16c
	.long	1093                    # 0x445
	.long	3280                    # 0xcd0
	.long	9841                    # 0x2671
	.long	29524                   # 0x7354
	.long	88573                   # 0x159fd
	.long	265720                  # 0x40df8
	.long	797161                  # 0xc29e9
	.long	2391484                 # 0x247dbc
	.size	incs, 56

	.type	.L.str.8.5,@object      # @.str.8.5
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.8.5:
	.asciz	"        %d pointers, %d sorted, %d scanned\n"
	.size	.L.str.8.5, 44

	.type	.L.str,@object          # @.str
.L.str:
	.asciz	"      %d work, %d block, ratio %5.2f\n"
	.size	.L.str, 38

	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"    too repetitive; using fallback sorting algorithm\n"
	.size	.L.str.1, 54

	.type	blockSize100k,@object   # @blockSize100k
	.comm	blockSize100k,4,4
	.type	verbosity,@object       # @verbosity
	.comm	verbosity,4,4
	.type	workFactor,@object      # @workFactor
	.comm	workFactor,4,4
	.type	outputHandleJustInCase,@object # @outputHandleJustInCase
	.comm	outputHandleJustInCase,4,4
	.type	smallMode,@object       # @smallMode
	.comm	smallMode,1,1
	.type	forceOverwrite,@object  # @forceOverwrite
	.comm	forceOverwrite,1,1
	.type	noisy,@object           # @noisy
	.comm	noisy,1,1
	.type	progName,@object        # @progName
	.comm	progName,8,8
	.type	inName,@object          # @inName
	.comm	inName,1034,16
	.type	keepInputFiles,@object  # @keepInputFiles
	.comm	keepInputFiles,1,1
	.type	deleteOutputOnInterrupt,@object # @deleteOutputOnInterrupt
	.comm	deleteOutputOnInterrupt,1,1
	.type	testFailsExist,@object  # @testFailsExist
	.comm	testFailsExist,1,1
	.type	unzFailsExist,@object   # @unzFailsExist
	.comm	unzFailsExist,1,1
	.type	numFileNames,@object    # @numFileNames
	.comm	numFileNames,4,4
	.type	numFilesProcessed,@object # @numFilesProcessed
	.comm	numFilesProcessed,4,4
	.type	exitValue,@object       # @exitValue
	.comm	exitValue,4,4
	.type	opMode,@object          # @opMode
	.comm	opMode,4,4
	.type	srcMode,@object         # @srcMode
	.comm	srcMode,4,4
	.type	longestFileName,@object # @longestFileName
	.comm	longestFileName,4,4
	.type	outName,@object         # @outName
	.comm	outName,1034,16
	.type	tmpName,@object         # @tmpName
	.comm	tmpName,1034,16
	.type	progNameReally,@object  # @progNameReally
	.comm	progNameReally,1034,16
	.type	.L.str.1.16,@object     # @.str.1.16
.L.str.1.16:
	.asciz	" no data compressed.\n"
	.size	.L.str.1.16, 22

	.type	.L.str.2.17,@object     # @.str.2.17
.L.str.2.17:
	.asciz	"%6.3f:1, %6.3f bits/byte, %5.2f%% saved, %s in, %s out.\n"
	.size	.L.str.2.17, 57

	.type	.L.str.17.18,@object    # @.str.17.18
.L.str.17.18:
	.asciz	"bzip2: I'm not configured correctly for this platform!\n\tI require Int32, Int16 and Char to have sizes\n\tof 4, 2 and 1 bytes to run properly, and they don't.\n\tProbably you can fix this by defining them correctly,\n\tand recompiling.  Bye!\n"
	.size	.L.str.17.18, 236

	.type	.L.str.16.19,@object    # @.str.16.19
.L.str.16.19:
	.asciz	"\n%s: couldn't allocate enough memory\n"
	.size	.L.str.16.19, 38

	.type	.L.str.11.20,@object    # @.str.11.20
.L.str.11.20:
	.asciz	"\tInput file = %s, output file = %s\n"
	.size	.L.str.11.20, 36

	.type	.L.str.15.21,@object    # @.str.15.21
.L.str.15.21:
	.asciz	"\n%s: I/O or other error, bailing out.  Possible reason follows.\n"
	.size	.L.str.15.21, 65

	.type	.L.str.3.22,@object     # @.str.3.22
.L.str.3.22:
	.asciz	"compress:unexpected error"
	.size	.L.str.3.22, 26

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"\n%s: PANIC -- internal consistency error:\n\t%s\n\tThis is probably a BUG, but it may be in your COMPILER.  Please do not bother\n\tthe original author.\n"
	.size	.L.str.10, 148

	.type	.L.str.5.25,@object     # @.str.5.25
.L.str.5.25:
	.asciz	"decompress:bzReadGetUnused"
	.size	.L.str.5.25, 27

	.type	.L.str.6.26,@object     # @.str.6.26
.L.str.6.26:
	.asciz	"\n    "
	.size	.L.str.6.26, 6

	.type	.L.str.12.27,@object    # @.str.12.27
.L.str.12.27:
	.asciz	"\n%s: Data integrity error when decompressing.\n"
	.size	.L.str.12.27, 47

	.type	.L.str.13.28,@object    # @.str.13.28
.L.str.13.28:
	.asciz	"\nIt is possible that the compressed file(s) have become corrupted.\nYou can use the -tvv option to test integrity of such files.\n\nYou can use the `bzip2recover' program to attempt to recover\ndata from undamaged sections of corrupted files.\n\n"
	.size	.L.str.13.28, 241

	.type	.L.str.14.29,@object    # @.str.14.29
.L.str.14.29:
	.asciz	"\n%s: Compressed file ends unexpectedly;\n\tperhaps it is corrupted?  *Possible* reason follows.\n"
	.size	.L.str.14.29, 95

	.type	.L.str.7.30,@object     # @.str.7.30
.L.str.7.30:
	.asciz	"\n%s: %s: trailing garbage after EOF ignored\n"
	.size	.L.str.7.30, 45

	.type	.L.str.8.31,@object     # @.str.8.31
.L.str.8.31:
	.asciz	"decompress:unexpected error"
	.size	.L.str.8.31, 28

	.type	.L.str.34,@object       # @.str.34
.L.str.34:
	.asciz	"\n\nbzip2/libbzip2: internal error number %d.\nThis may be a bug in bzip2/libbzip2, %s.\nIt may also be a bug in your compiler.  Please do not bother the\noriginal author of bzip2 with a bug report for this.  He\ndoesn't know anything about bzip2 as it appears in CPU2006.\n\n"
	.size	.L.str.34, 269

	.type	.L.str.5.35,@object     # @.str.5.35
.L.str.5.35:
	.asciz	"1.0.3, 15-Feb-2005"
	.size	.L.str.5.35, 19

	.type	.L.str.1.36,@object     # @.str.1.36
.L.str.1.36:
	.asciz	"\n*** A special note about internal error number 1007 ***\n\nExperience suggests that a common cause of i.e. 1007\nis unreliable memory or other hardware.  The 1007 assertion\njust happens to cross-check the results of huge numbers of\nmemory reads/writes, and so acts (unintendedly) as a stress\ntest of your memory system.\n\nI suggest the following: try compressing the file again,\npossibly monitoring progress in detail with the -vv flag.\n\n* If the error cannot be reproduced, and/or happens at different\n  points in compression, you may have a flaky memory system.\n  Try a memory-test program.  I have used Memtest86\n  (www.memtest86.com).  At the time of writing it is free (GPLd).\n  Memtest86 tests memory much more thorougly than your BIOSs\n  power-on test, and may find failures that the BIOS doesn't.\n\n* If the error can be repeatably reproduced, this is a bug in\n  bzip2, and I would very much like to hear about it.  Please\n  let me know, and, ideally, save a copy of the file causing the\n  problem -- without which I will be unable to investigate it.\n\n"
	.size	.L.str.1.36, 1057

	.type	.L.str.2.37,@object     # @.str.2.37
.L.str.2.37:
	.asciz	" {0x%08x, 0x%08x}"
	.size	.L.str.2.37, 18

	.type	.L.str.4.38,@object     # @.str.4.38
.L.str.4.38:
	.asciz	"\n    combined CRCs: stored = 0x%08x, computed = 0x%08x"
	.size	.L.str.4.38, 55

	.type	bzerrorstrings,@object  # @bzerrorstrings
	.section	.rodata,"a",@progbits
	.align	16
bzerrorstrings:
	.quad	.L.str.10.53
	.quad	.L.str.11.54
	.quad	.L.str.12.55
	.quad	.L.str.13.56
	.quad	.L.str.14.57
	.quad	.L.str.15.58
	.quad	.L.str.16.59
	.quad	.L.str.17.60
	.quad	.L.str.18.61
	.quad	.L.str.19.62
	.quad	.L.str.20.63
	.quad	.L.str.20.63
	.quad	.L.str.20.63
	.quad	.L.str.20.63
	.quad	.L.str.20.63
	.quad	.L.str.20.63
	.size	bzerrorstrings, 128

	.type	.L.str.10.53,@object    # @.str.10.53
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.10.53:
	.asciz	"OK"
	.size	.L.str.10.53, 3

	.type	.L.str.11.54,@object    # @.str.11.54
.L.str.11.54:
	.asciz	"SEQUENCE_ERROR"
	.size	.L.str.11.54, 15

	.type	.L.str.12.55,@object    # @.str.12.55
.L.str.12.55:
	.asciz	"PARAM_ERROR"
	.size	.L.str.12.55, 12

	.type	.L.str.13.56,@object    # @.str.13.56
.L.str.13.56:
	.asciz	"MEM_ERROR"
	.size	.L.str.13.56, 10

	.type	.L.str.14.57,@object    # @.str.14.57
.L.str.14.57:
	.asciz	"DATA_ERROR"
	.size	.L.str.14.57, 11

	.type	.L.str.15.58,@object    # @.str.15.58
.L.str.15.58:
	.asciz	"DATA_ERROR_MAGIC"
	.size	.L.str.15.58, 17

	.type	.L.str.16.59,@object    # @.str.16.59
.L.str.16.59:
	.asciz	"IO_ERROR"
	.size	.L.str.16.59, 9

	.type	.L.str.17.60,@object    # @.str.17.60
.L.str.17.60:
	.asciz	"UNEXPECTED_EOF"
	.size	.L.str.17.60, 15

	.type	.L.str.18.61,@object    # @.str.18.61
.L.str.18.61:
	.asciz	"OUTBUFF_FULL"
	.size	.L.str.18.61, 13

	.type	.L.str.19.62,@object    # @.str.19.62
.L.str.19.62:
	.asciz	"CONFIG_ERROR"
	.size	.L.str.19.62, 13

	.type	.L.str.20.63,@object    # @.str.20.63
.L.str.20.63:
	.asciz	"???"
	.size	.L.str.20.63, 4

	.type	.L.str.66,@object       # @.str.66
.L.str.66:
	.asciz	"    block %d: crc = 0x%08x, combined CRC = 0x%08x, size = %d\n"
	.size	.L.str.66, 62

	.type	.L.str.2.67,@object     # @.str.2.67
.L.str.2.67:
	.asciz	"      %d in block, %d after MTF & 1-2 coding, %d+2 syms in use\n"
	.size	.L.str.2.67, 64

	.type	.L.str.3.68,@object     # @.str.3.68
.L.str.3.68:
	.asciz	"      initial group %d, [%d .. %d], has %d syms (%4.1f%%)\n"
	.size	.L.str.3.68, 59

	.type	.L.str.4.69,@object     # @.str.4.69
.L.str.4.69:
	.asciz	"      pass %d: size is %d, grp uses are "
	.size	.L.str.4.69, 41

	.type	.L.str.5.70,@object     # @.str.5.70
.L.str.5.70:
	.asciz	"%d "
	.size	.L.str.5.70, 4

	.type	.L.str.7.71,@object     # @.str.7.71
.L.str.7.71:
	.asciz	"      bytes: mapping %d, "
	.size	.L.str.7.71, 26

	.type	.L.str.8.72,@object     # @.str.8.72
.L.str.8.72:
	.asciz	"selectors %d, "
	.size	.L.str.8.72, 15

	.type	.L.str.9.73,@object     # @.str.9.73
.L.str.9.73:
	.asciz	"code lengths %d, "
	.size	.L.str.9.73, 18

	.type	.L.str.10.74,@object    # @.str.10.74
.L.str.10.74:
	.asciz	"codes %d\n"
	.size	.L.str.10.74, 10

	.type	.L.str.1.75,@object     # @.str.1.75
.L.str.1.75:
	.asciz	"    final combined CRC = 0x%08x\n   "
	.size	.L.str.1.75, 36

	.type	BZ2_crc32Table,@object  # @BZ2_crc32Table
	.data
	.globl	BZ2_crc32Table
	.align	16
BZ2_crc32Table:
	.long	0                       # 0x0
	.long	79764919                # 0x4c11db7
	.long	159529838               # 0x9823b6e
	.long	222504665               # 0xd4326d9
	.long	319059676               # 0x130476dc
	.long	398814059               # 0x17c56b6b
	.long	445009330               # 0x1a864db2
	.long	507990021               # 0x1e475005
	.long	638119352               # 0x2608edb8
	.long	583659535               # 0x22c9f00f
	.long	797628118               # 0x2f8ad6d6
	.long	726387553               # 0x2b4bcb61
	.long	890018660               # 0x350c9b64
	.long	835552979               # 0x31cd86d3
	.long	1015980042              # 0x3c8ea00a
	.long	944750013               # 0x384fbdbd
	.long	1276238704              # 0x4c11db70
	.long	1221641927              # 0x48d0c6c7
	.long	1167319070              # 0x4593e01e
	.long	1095957929              # 0x4152fda9
	.long	1595256236              # 0x5f15adac
	.long	1540665371              # 0x5bd4b01b
	.long	1452775106              # 0x569796c2
	.long	1381403509              # 0x52568b75
	.long	1780037320              # 0x6a1936c8
	.long	1859660671              # 0x6ed82b7f
	.long	1671105958              # 0x639b0da6
	.long	1733955601              # 0x675a1011
	.long	2031960084              # 0x791d4014
	.long	2111593891              # 0x7ddc5da3
	.long	1889500026              # 0x709f7b7a
	.long	1952343757              # 0x745e66cd
	.long	2552477408              # 0x9823b6e0
	.long	2632100695              # 0x9ce2ab57
	.long	2443283854              # 0x91a18d8e
	.long	2506133561              # 0x95609039
	.long	2334638140              # 0x8b27c03c
	.long	2414271883              # 0x8fe6dd8b
	.long	2191915858              # 0x82a5fb52
	.long	2254759653              # 0x8664e6e5
	.long	3190512472              # 0xbe2b5b58
	.long	3135915759              # 0xbaea46ef
	.long	3081330742              # 0xb7a96036
	.long	3009969537              # 0xb3687d81
	.long	2905550212              # 0xad2f2d84
	.long	2850959411              # 0xa9ee3033
	.long	2762807018              # 0xa4ad16ea
	.long	2691435357              # 0xa06c0b5d
	.long	3560074640              # 0xd4326d90
	.long	3505614887              # 0xd0f37027
	.long	3719321342              # 0xddb056fe
	.long	3648080713              # 0xd9714b49
	.long	3342211916              # 0xc7361b4c
	.long	3287746299              # 0xc3f706fb
	.long	3467911202              # 0xceb42022
	.long	3396681109              # 0xca753d95
	.long	4063920168              # 0xf23a8028
	.long	4143685023              # 0xf6fb9d9f
	.long	4223187782              # 0xfbb8bb46
	.long	4286162673              # 0xff79a6f1
	.long	3779000052              # 0xe13ef6f4
	.long	3858754371              # 0xe5ffeb43
	.long	3904687514              # 0xe8bccd9a
	.long	3967668269              # 0xec7dd02d
	.long	881225847               # 0x34867077
	.long	809987520               # 0x30476dc0
	.long	1023691545              # 0x3d044b19
	.long	969234094               # 0x39c556ae
	.long	662832811               # 0x278206ab
	.long	591600412               # 0x23431b1c
	.long	771767749               # 0x2e003dc5
	.long	717299826               # 0x2ac12072
	.long	311336399               # 0x128e9dcf
	.long	374308984               # 0x164f8078
	.long	453813921               # 0x1b0ca6a1
	.long	533576470               # 0x1fcdbb16
	.long	25881363                # 0x18aeb13
	.long	88864420                # 0x54bf6a4
	.long	134795389               # 0x808d07d
	.long	214552010               # 0xcc9cdca
	.long	2023205639              # 0x7897ab07
	.long	2086057648              # 0x7c56b6b0
	.long	1897238633              # 0x71159069
	.long	1976864222              # 0x75d48dde
	.long	1804852699              # 0x6b93dddb
	.long	1867694188              # 0x6f52c06c
	.long	1645340341              # 0x6211e6b5
	.long	1724971778              # 0x66d0fb02
	.long	1587496639              # 0x5e9f46bf
	.long	1516133128              # 0x5a5e5b08
	.long	1461550545              # 0x571d7dd1
	.long	1406951526              # 0x53dc6066
	.long	1302016099              # 0x4d9b3063
	.long	1230646740              # 0x495a2dd4
	.long	1142491917              # 0x44190b0d
	.long	1087903418              # 0x40d816ba
	.long	2896545431              # 0xaca5c697
	.long	2825181984              # 0xa864db20
	.long	2770861561              # 0xa527fdf9
	.long	2716262478              # 0xa1e6e04e
	.long	3215044683              # 0xbfa1b04b
	.long	3143675388              # 0xbb60adfc
	.long	3055782693              # 0xb6238b25
	.long	3001194130              # 0xb2e29692
	.long	2326604591              # 0x8aad2b2f
	.long	2389456536              # 0x8e6c3698
	.long	2200899649              # 0x832f1041
	.long	2280525302              # 0x87ee0df6
	.long	2578013683              # 0x99a95df3
	.long	2640855108              # 0x9d684044
	.long	2418763421              # 0x902b669d
	.long	2498394922              # 0x94ea7b2a
	.long	3769900519              # 0xe0b41de7
	.long	3832873040              # 0xe4750050
	.long	3912640137              # 0xe9362689
	.long	3992402750              # 0xedf73b3e
	.long	4088425275              # 0xf3b06b3b
	.long	4151408268              # 0xf771768c
	.long	4197601365              # 0xfa325055
	.long	4277358050              # 0xfef34de2
	.long	3334271071              # 0xc6bcf05f
	.long	3263032808              # 0xc27dede8
	.long	3476998961              # 0xcf3ecb31
	.long	3422541446              # 0xcbffd686
	.long	3585640067              # 0xd5b88683
	.long	3514407732              # 0xd1799b34
	.long	3694837229              # 0xdc3abded
	.long	3640369242              # 0xd8fba05a
	.long	1762451694              # 0x690ce0ee
	.long	1842216281              # 0x6dcdfd59
	.long	1619975040              # 0x608edb80
	.long	1682949687              # 0x644fc637
	.long	2047383090              # 0x7a089632
	.long	2127137669              # 0x7ec98b85
	.long	1938468188              # 0x738aad5c
	.long	2001449195              # 0x774bb0eb
	.long	1325665622              # 0x4f040d56
	.long	1271206113              # 0x4bc510e1
	.long	1183200824              # 0x46863638
	.long	1111960463              # 0x42472b8f
	.long	1543535498              # 0x5c007b8a
	.long	1489069629              # 0x58c1663d
	.long	1434599652              # 0x558240e4
	.long	1363369299              # 0x51435d53
	.long	622672798               # 0x251d3b9e
	.long	568075817               # 0x21dc2629
	.long	748617968               # 0x2c9f00f0
	.long	677256519               # 0x285e1d47
	.long	907627842               # 0x36194d42
	.long	853037301               # 0x32d850f5
	.long	1067152940              # 0x3f9b762c
	.long	995781531               # 0x3b5a6b9b
	.long	51762726                # 0x315d626
	.long	131386257               # 0x7d4cb91
	.long	177728840               # 0xa97ed48
	.long	240578815               # 0xe56f0ff
	.long	269590778               # 0x1011a0fa
	.long	349224269               # 0x14d0bd4d
	.long	429104020               # 0x19939b94
	.long	491947555               # 0x1d528623
	.long	4046411278              # 0xf12f560e
	.long	4126034873              # 0xf5ee4bb9
	.long	4172115296              # 0xf8ad6d60
	.long	4234965207              # 0xfc6c70d7
	.long	3794477266              # 0xe22b20d2
	.long	3874110821              # 0xe6ea3d65
	.long	3953728444              # 0xeba91bbc
	.long	4016571915              # 0xef68060b
	.long	3609705398              # 0xd727bbb6
	.long	3555108353              # 0xd3e6a601
	.long	3735388376              # 0xdea580d8
	.long	3664026991              # 0xda649d6f
	.long	3290680682              # 0xc423cd6a
	.long	3236090077              # 0xc0e2d0dd
	.long	3449943556              # 0xcda1f604
	.long	3378572211              # 0xc960ebb3
	.long	3174993278              # 0xbd3e8d7e
	.long	3120533705              # 0xb9ff90c9
	.long	3032266256              # 0xb4bcb610
	.long	2961025959              # 0xb07daba7
	.long	2923101090              # 0xae3afba2
	.long	2868635157              # 0xaafbe615
	.long	2813903052              # 0xa7b8c0cc
	.long	2742672763              # 0xa379dd7b
	.long	2604032198              # 0x9b3660c6
	.long	2683796849              # 0x9ff77d71
	.long	2461293480              # 0x92b45ba8
	.long	2524268063              # 0x9675461f
	.long	2284983834              # 0x8832161a
	.long	2364738477              # 0x8cf30bad
	.long	2175806836              # 0x81b02d74
	.long	2238787779              # 0x857130c3
	.long	1569362073              # 0x5d8a9099
	.long	1498123566              # 0x594b8d2e
	.long	1409854455              # 0x5408abf7
	.long	1355396672              # 0x50c9b640
	.long	1317987909              # 0x4e8ee645
	.long	1246755826              # 0x4a4ffbf2
	.long	1192025387              # 0x470cdd2b
	.long	1137557660              # 0x43cdc09c
	.long	2072149281              # 0x7b827d21
	.long	2135122070              # 0x7f436096
	.long	1912620623              # 0x7200464f
	.long	1992383480              # 0x76c15bf8
	.long	1753615357              # 0x68860bfd
	.long	1816598090              # 0x6c47164a
	.long	1627664531              # 0x61043093
	.long	1707420964              # 0x65c52d24
	.long	295390185               # 0x119b4be9
	.long	358241886               # 0x155a565e
	.long	404320391               # 0x18197087
	.long	483945776               # 0x1cd86d30
	.long	43990325                # 0x29f3d35
	.long	106832002               # 0x65e2082
	.long	186451547               # 0xb1d065b
	.long	266083308               # 0xfdc1bec
	.long	932423249               # 0x3793a651
	.long	861060070               # 0x3352bbe6
	.long	1041341759              # 0x3e119d3f
	.long	986742920               # 0x3ad08088
	.long	613929101               # 0x2497d08d
	.long	542559546               # 0x2056cd3a
	.long	756411363               # 0x2d15ebe3
	.long	701822548               # 0x29d4f654
	.long	3316196985              # 0xc5a92679
	.long	3244833742              # 0xc1683bce
	.long	3425377559              # 0xcc2b1d17
	.long	3370778784              # 0xc8ea00a0
	.long	3601682597              # 0xd6ad50a5
	.long	3530312978              # 0xd26c4d12
	.long	3744426955              # 0xdf2f6bcb
	.long	3689838204              # 0xdbee767c
	.long	3819031489              # 0xe3a1cbc1
	.long	3881883254              # 0xe760d676
	.long	3928223919              # 0xea23f0af
	.long	4007849240              # 0xeee2ed18
	.long	4037393693              # 0xf0a5bd1d
	.long	4100235434              # 0xf464a0aa
	.long	4180117107              # 0xf9278673
	.long	4259748804              # 0xfde69bc4
	.long	2310601993              # 0x89b8fd09
	.long	2373574846              # 0x8d79e0be
	.long	2151335527              # 0x803ac667
	.long	2231098320              # 0x84fbdbd0
	.long	2596047829              # 0x9abc8bd5
	.long	2659030626              # 0x9e7d9662
	.long	2470359227              # 0x933eb0bb
	.long	2550115596              # 0x97ffad0c
	.long	2947551409              # 0xafb010b1
	.long	2876312838              # 0xab710d06
	.long	2788305887              # 0xa6322bdf
	.long	2733848168              # 0xa2f33668
	.long	3165939309              # 0xbcb4666d
	.long	3094707162              # 0xb8757bda
	.long	3040238851              # 0xb5365d03
	.long	2985771188              # 0xb1f740b4
	.size	BZ2_crc32Table, 1024

	.type	.L.str.80,@object       # @.str.80
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.80:
	.asciz	"\n    [%d: huff+mtf "
	.size	.L.str.80, 20

	.type	.L.str.1.81,@object     # @.str.1.81
.L.str.1.81:
	.asciz	"rt+rld"
	.size	.L.str.1.81, 7

	.type	BZ2_rNums,@object       # @BZ2_rNums
	.data
	.globl	BZ2_rNums
	.align	16
BZ2_rNums:
	.long	619                     # 0x26b
	.long	720                     # 0x2d0
	.long	127                     # 0x7f
	.long	481                     # 0x1e1
	.long	931                     # 0x3a3
	.long	816                     # 0x330
	.long	813                     # 0x32d
	.long	233                     # 0xe9
	.long	566                     # 0x236
	.long	247                     # 0xf7
	.long	985                     # 0x3d9
	.long	724                     # 0x2d4
	.long	205                     # 0xcd
	.long	454                     # 0x1c6
	.long	863                     # 0x35f
	.long	491                     # 0x1eb
	.long	741                     # 0x2e5
	.long	242                     # 0xf2
	.long	949                     # 0x3b5
	.long	214                     # 0xd6
	.long	733                     # 0x2dd
	.long	859                     # 0x35b
	.long	335                     # 0x14f
	.long	708                     # 0x2c4
	.long	621                     # 0x26d
	.long	574                     # 0x23e
	.long	73                      # 0x49
	.long	654                     # 0x28e
	.long	730                     # 0x2da
	.long	472                     # 0x1d8
	.long	419                     # 0x1a3
	.long	436                     # 0x1b4
	.long	278                     # 0x116
	.long	496                     # 0x1f0
	.long	867                     # 0x363
	.long	210                     # 0xd2
	.long	399                     # 0x18f
	.long	680                     # 0x2a8
	.long	480                     # 0x1e0
	.long	51                      # 0x33
	.long	878                     # 0x36e
	.long	465                     # 0x1d1
	.long	811                     # 0x32b
	.long	169                     # 0xa9
	.long	869                     # 0x365
	.long	675                     # 0x2a3
	.long	611                     # 0x263
	.long	697                     # 0x2b9
	.long	867                     # 0x363
	.long	561                     # 0x231
	.long	862                     # 0x35e
	.long	687                     # 0x2af
	.long	507                     # 0x1fb
	.long	283                     # 0x11b
	.long	482                     # 0x1e2
	.long	129                     # 0x81
	.long	807                     # 0x327
	.long	591                     # 0x24f
	.long	733                     # 0x2dd
	.long	623                     # 0x26f
	.long	150                     # 0x96
	.long	238                     # 0xee
	.long	59                      # 0x3b
	.long	379                     # 0x17b
	.long	684                     # 0x2ac
	.long	877                     # 0x36d
	.long	625                     # 0x271
	.long	169                     # 0xa9
	.long	643                     # 0x283
	.long	105                     # 0x69
	.long	170                     # 0xaa
	.long	607                     # 0x25f
	.long	520                     # 0x208
	.long	932                     # 0x3a4
	.long	727                     # 0x2d7
	.long	476                     # 0x1dc
	.long	693                     # 0x2b5
	.long	425                     # 0x1a9
	.long	174                     # 0xae
	.long	647                     # 0x287
	.long	73                      # 0x49
	.long	122                     # 0x7a
	.long	335                     # 0x14f
	.long	530                     # 0x212
	.long	442                     # 0x1ba
	.long	853                     # 0x355
	.long	695                     # 0x2b7
	.long	249                     # 0xf9
	.long	445                     # 0x1bd
	.long	515                     # 0x203
	.long	909                     # 0x38d
	.long	545                     # 0x221
	.long	703                     # 0x2bf
	.long	919                     # 0x397
	.long	874                     # 0x36a
	.long	474                     # 0x1da
	.long	882                     # 0x372
	.long	500                     # 0x1f4
	.long	594                     # 0x252
	.long	612                     # 0x264
	.long	641                     # 0x281
	.long	801                     # 0x321
	.long	220                     # 0xdc
	.long	162                     # 0xa2
	.long	819                     # 0x333
	.long	984                     # 0x3d8
	.long	589                     # 0x24d
	.long	513                     # 0x201
	.long	495                     # 0x1ef
	.long	799                     # 0x31f
	.long	161                     # 0xa1
	.long	604                     # 0x25c
	.long	958                     # 0x3be
	.long	533                     # 0x215
	.long	221                     # 0xdd
	.long	400                     # 0x190
	.long	386                     # 0x182
	.long	867                     # 0x363
	.long	600                     # 0x258
	.long	782                     # 0x30e
	.long	382                     # 0x17e
	.long	596                     # 0x254
	.long	414                     # 0x19e
	.long	171                     # 0xab
	.long	516                     # 0x204
	.long	375                     # 0x177
	.long	682                     # 0x2aa
	.long	485                     # 0x1e5
	.long	911                     # 0x38f
	.long	276                     # 0x114
	.long	98                      # 0x62
	.long	553                     # 0x229
	.long	163                     # 0xa3
	.long	354                     # 0x162
	.long	666                     # 0x29a
	.long	933                     # 0x3a5
	.long	424                     # 0x1a8
	.long	341                     # 0x155
	.long	533                     # 0x215
	.long	870                     # 0x366
	.long	227                     # 0xe3
	.long	730                     # 0x2da
	.long	475                     # 0x1db
	.long	186                     # 0xba
	.long	263                     # 0x107
	.long	647                     # 0x287
	.long	537                     # 0x219
	.long	686                     # 0x2ae
	.long	600                     # 0x258
	.long	224                     # 0xe0
	.long	469                     # 0x1d5
	.long	68                      # 0x44
	.long	770                     # 0x302
	.long	919                     # 0x397
	.long	190                     # 0xbe
	.long	373                     # 0x175
	.long	294                     # 0x126
	.long	822                     # 0x336
	.long	808                     # 0x328
	.long	206                     # 0xce
	.long	184                     # 0xb8
	.long	943                     # 0x3af
	.long	795                     # 0x31b
	.long	384                     # 0x180
	.long	383                     # 0x17f
	.long	461                     # 0x1cd
	.long	404                     # 0x194
	.long	758                     # 0x2f6
	.long	839                     # 0x347
	.long	887                     # 0x377
	.long	715                     # 0x2cb
	.long	67                      # 0x43
	.long	618                     # 0x26a
	.long	276                     # 0x114
	.long	204                     # 0xcc
	.long	918                     # 0x396
	.long	873                     # 0x369
	.long	777                     # 0x309
	.long	604                     # 0x25c
	.long	560                     # 0x230
	.long	951                     # 0x3b7
	.long	160                     # 0xa0
	.long	578                     # 0x242
	.long	722                     # 0x2d2
	.long	79                      # 0x4f
	.long	804                     # 0x324
	.long	96                      # 0x60
	.long	409                     # 0x199
	.long	713                     # 0x2c9
	.long	940                     # 0x3ac
	.long	652                     # 0x28c
	.long	934                     # 0x3a6
	.long	970                     # 0x3ca
	.long	447                     # 0x1bf
	.long	318                     # 0x13e
	.long	353                     # 0x161
	.long	859                     # 0x35b
	.long	672                     # 0x2a0
	.long	112                     # 0x70
	.long	785                     # 0x311
	.long	645                     # 0x285
	.long	863                     # 0x35f
	.long	803                     # 0x323
	.long	350                     # 0x15e
	.long	139                     # 0x8b
	.long	93                      # 0x5d
	.long	354                     # 0x162
	.long	99                      # 0x63
	.long	820                     # 0x334
	.long	908                     # 0x38c
	.long	609                     # 0x261
	.long	772                     # 0x304
	.long	154                     # 0x9a
	.long	274                     # 0x112
	.long	580                     # 0x244
	.long	184                     # 0xb8
	.long	79                      # 0x4f
	.long	626                     # 0x272
	.long	630                     # 0x276
	.long	742                     # 0x2e6
	.long	653                     # 0x28d
	.long	282                     # 0x11a
	.long	762                     # 0x2fa
	.long	623                     # 0x26f
	.long	680                     # 0x2a8
	.long	81                      # 0x51
	.long	927                     # 0x39f
	.long	626                     # 0x272
	.long	789                     # 0x315
	.long	125                     # 0x7d
	.long	411                     # 0x19b
	.long	521                     # 0x209
	.long	938                     # 0x3aa
	.long	300                     # 0x12c
	.long	821                     # 0x335
	.long	78                      # 0x4e
	.long	343                     # 0x157
	.long	175                     # 0xaf
	.long	128                     # 0x80
	.long	250                     # 0xfa
	.long	170                     # 0xaa
	.long	774                     # 0x306
	.long	972                     # 0x3cc
	.long	275                     # 0x113
	.long	999                     # 0x3e7
	.long	639                     # 0x27f
	.long	495                     # 0x1ef
	.long	78                      # 0x4e
	.long	352                     # 0x160
	.long	126                     # 0x7e
	.long	857                     # 0x359
	.long	956                     # 0x3bc
	.long	358                     # 0x166
	.long	619                     # 0x26b
	.long	580                     # 0x244
	.long	124                     # 0x7c
	.long	737                     # 0x2e1
	.long	594                     # 0x252
	.long	701                     # 0x2bd
	.long	612                     # 0x264
	.long	669                     # 0x29d
	.long	112                     # 0x70
	.long	134                     # 0x86
	.long	694                     # 0x2b6
	.long	363                     # 0x16b
	.long	992                     # 0x3e0
	.long	809                     # 0x329
	.long	743                     # 0x2e7
	.long	168                     # 0xa8
	.long	974                     # 0x3ce
	.long	944                     # 0x3b0
	.long	375                     # 0x177
	.long	748                     # 0x2ec
	.long	52                      # 0x34
	.long	600                     # 0x258
	.long	747                     # 0x2eb
	.long	642                     # 0x282
	.long	182                     # 0xb6
	.long	862                     # 0x35e
	.long	81                      # 0x51
	.long	344                     # 0x158
	.long	805                     # 0x325
	.long	988                     # 0x3dc
	.long	739                     # 0x2e3
	.long	511                     # 0x1ff
	.long	655                     # 0x28f
	.long	814                     # 0x32e
	.long	334                     # 0x14e
	.long	249                     # 0xf9
	.long	515                     # 0x203
	.long	897                     # 0x381
	.long	955                     # 0x3bb
	.long	664                     # 0x298
	.long	981                     # 0x3d5
	.long	649                     # 0x289
	.long	113                     # 0x71
	.long	974                     # 0x3ce
	.long	459                     # 0x1cb
	.long	893                     # 0x37d
	.long	228                     # 0xe4
	.long	433                     # 0x1b1
	.long	837                     # 0x345
	.long	553                     # 0x229
	.long	268                     # 0x10c
	.long	926                     # 0x39e
	.long	240                     # 0xf0
	.long	102                     # 0x66
	.long	654                     # 0x28e
	.long	459                     # 0x1cb
	.long	51                      # 0x33
	.long	686                     # 0x2ae
	.long	754                     # 0x2f2
	.long	806                     # 0x326
	.long	760                     # 0x2f8
	.long	493                     # 0x1ed
	.long	403                     # 0x193
	.long	415                     # 0x19f
	.long	394                     # 0x18a
	.long	687                     # 0x2af
	.long	700                     # 0x2bc
	.long	946                     # 0x3b2
	.long	670                     # 0x29e
	.long	656                     # 0x290
	.long	610                     # 0x262
	.long	738                     # 0x2e2
	.long	392                     # 0x188
	.long	760                     # 0x2f8
	.long	799                     # 0x31f
	.long	887                     # 0x377
	.long	653                     # 0x28d
	.long	978                     # 0x3d2
	.long	321                     # 0x141
	.long	576                     # 0x240
	.long	617                     # 0x269
	.long	626                     # 0x272
	.long	502                     # 0x1f6
	.long	894                     # 0x37e
	.long	679                     # 0x2a7
	.long	243                     # 0xf3
	.long	440                     # 0x1b8
	.long	680                     # 0x2a8
	.long	879                     # 0x36f
	.long	194                     # 0xc2
	.long	572                     # 0x23c
	.long	640                     # 0x280
	.long	724                     # 0x2d4
	.long	926                     # 0x39e
	.long	56                      # 0x38
	.long	204                     # 0xcc
	.long	700                     # 0x2bc
	.long	707                     # 0x2c3
	.long	151                     # 0x97
	.long	457                     # 0x1c9
	.long	449                     # 0x1c1
	.long	797                     # 0x31d
	.long	195                     # 0xc3
	.long	791                     # 0x317
	.long	558                     # 0x22e
	.long	945                     # 0x3b1
	.long	679                     # 0x2a7
	.long	297                     # 0x129
	.long	59                      # 0x3b
	.long	87                      # 0x57
	.long	824                     # 0x338
	.long	713                     # 0x2c9
	.long	663                     # 0x297
	.long	412                     # 0x19c
	.long	693                     # 0x2b5
	.long	342                     # 0x156
	.long	606                     # 0x25e
	.long	134                     # 0x86
	.long	108                     # 0x6c
	.long	571                     # 0x23b
	.long	364                     # 0x16c
	.long	631                     # 0x277
	.long	212                     # 0xd4
	.long	174                     # 0xae
	.long	643                     # 0x283
	.long	304                     # 0x130
	.long	329                     # 0x149
	.long	343                     # 0x157
	.long	97                      # 0x61
	.long	430                     # 0x1ae
	.long	751                     # 0x2ef
	.long	497                     # 0x1f1
	.long	314                     # 0x13a
	.long	983                     # 0x3d7
	.long	374                     # 0x176
	.long	822                     # 0x336
	.long	928                     # 0x3a0
	.long	140                     # 0x8c
	.long	206                     # 0xce
	.long	73                      # 0x49
	.long	263                     # 0x107
	.long	980                     # 0x3d4
	.long	736                     # 0x2e0
	.long	876                     # 0x36c
	.long	478                     # 0x1de
	.long	430                     # 0x1ae
	.long	305                     # 0x131
	.long	170                     # 0xaa
	.long	514                     # 0x202
	.long	364                     # 0x16c
	.long	692                     # 0x2b4
	.long	829                     # 0x33d
	.long	82                      # 0x52
	.long	855                     # 0x357
	.long	953                     # 0x3b9
	.long	676                     # 0x2a4
	.long	246                     # 0xf6
	.long	369                     # 0x171
	.long	970                     # 0x3ca
	.long	294                     # 0x126
	.long	750                     # 0x2ee
	.long	807                     # 0x327
	.long	827                     # 0x33b
	.long	150                     # 0x96
	.long	790                     # 0x316
	.long	288                     # 0x120
	.long	923                     # 0x39b
	.long	804                     # 0x324
	.long	378                     # 0x17a
	.long	215                     # 0xd7
	.long	828                     # 0x33c
	.long	592                     # 0x250
	.long	281                     # 0x119
	.long	565                     # 0x235
	.long	555                     # 0x22b
	.long	710                     # 0x2c6
	.long	82                      # 0x52
	.long	896                     # 0x380
	.long	831                     # 0x33f
	.long	547                     # 0x223
	.long	261                     # 0x105
	.long	524                     # 0x20c
	.long	462                     # 0x1ce
	.long	293                     # 0x125
	.long	465                     # 0x1d1
	.long	502                     # 0x1f6
	.long	56                      # 0x38
	.long	661                     # 0x295
	.long	821                     # 0x335
	.long	976                     # 0x3d0
	.long	991                     # 0x3df
	.long	658                     # 0x292
	.long	869                     # 0x365
	.long	905                     # 0x389
	.long	758                     # 0x2f6
	.long	745                     # 0x2e9
	.long	193                     # 0xc1
	.long	768                     # 0x300
	.long	550                     # 0x226
	.long	608                     # 0x260
	.long	933                     # 0x3a5
	.long	378                     # 0x17a
	.long	286                     # 0x11e
	.long	215                     # 0xd7
	.long	979                     # 0x3d3
	.long	792                     # 0x318
	.long	961                     # 0x3c1
	.long	61                      # 0x3d
	.long	688                     # 0x2b0
	.long	793                     # 0x319
	.long	644                     # 0x284
	.long	986                     # 0x3da
	.long	403                     # 0x193
	.long	106                     # 0x6a
	.long	366                     # 0x16e
	.long	905                     # 0x389
	.long	644                     # 0x284
	.long	372                     # 0x174
	.long	567                     # 0x237
	.long	466                     # 0x1d2
	.long	434                     # 0x1b2
	.long	645                     # 0x285
	.long	210                     # 0xd2
	.long	389                     # 0x185
	.long	550                     # 0x226
	.long	919                     # 0x397
	.long	135                     # 0x87
	.long	780                     # 0x30c
	.long	773                     # 0x305
	.long	635                     # 0x27b
	.long	389                     # 0x185
	.long	707                     # 0x2c3
	.long	100                     # 0x64
	.long	626                     # 0x272
	.long	958                     # 0x3be
	.long	165                     # 0xa5
	.long	504                     # 0x1f8
	.long	920                     # 0x398
	.long	176                     # 0xb0
	.long	193                     # 0xc1
	.long	713                     # 0x2c9
	.long	857                     # 0x359
	.long	265                     # 0x109
	.long	203                     # 0xcb
	.long	50                      # 0x32
	.long	668                     # 0x29c
	.long	108                     # 0x6c
	.long	645                     # 0x285
	.long	990                     # 0x3de
	.long	626                     # 0x272
	.long	197                     # 0xc5
	.long	510                     # 0x1fe
	.long	357                     # 0x165
	.long	358                     # 0x166
	.long	850                     # 0x352
	.long	858                     # 0x35a
	.long	364                     # 0x16c
	.long	936                     # 0x3a8
	.long	638                     # 0x27e
	.size	BZ2_rNums, 2048

	.type	"PinFlag-0.",@object    # @PinFlag-0.
	.bss
	.globl	"PinFlag-0."
	.align	4
"PinFlag-0.":
	.long	0                       # 0x0
	.size	"PinFlag-0.", 4

	.type	.L__unnamed_6,@object   # @0
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_6:
	.asciz	"0."
	.size	.L__unnamed_6, 3

	.type	"PinFlag-1.",@object    # @PinFlag-1.
	.bss
	.globl	"PinFlag-1."
	.align	4
"PinFlag-1.":
	.long	0                       # 0x0
	.size	"PinFlag-1.", 4

	.type	.L__unnamed_5,@object   # @1
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_5:
	.asciz	"1."
	.size	.L__unnamed_5, 3

	.type	"PinFlag-2.",@object    # @PinFlag-2.
	.bss
	.globl	"PinFlag-2."
	.align	4
"PinFlag-2.":
	.long	0                       # 0x0
	.size	"PinFlag-2.", 4

	.type	.L__unnamed_4,@object   # @2
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_4:
	.asciz	"2."
	.size	.L__unnamed_4, 3

	.type	"PinFlag-3.",@object    # @PinFlag-3.
	.bss
	.globl	"PinFlag-3."
	.align	4
"PinFlag-3.":
	.long	0                       # 0x0
	.size	"PinFlag-3.", 4

	.type	.L__unnamed_3,@object   # @3
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_3:
	.asciz	"3."
	.size	.L__unnamed_3, 3

	.type	"PinFlag-4.",@object    # @PinFlag-4.
	.bss
	.globl	"PinFlag-4."
	.align	4
"PinFlag-4.":
	.long	0                       # 0x0
	.size	"PinFlag-4.", 4

	.type	.L__unnamed_2,@object   # @4
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_2:
	.asciz	"4."
	.size	.L__unnamed_2, 3

	.type	"PinFlag-5.",@object    # @PinFlag-5.
	.bss
	.globl	"PinFlag-5."
	.align	4
"PinFlag-5.":
	.long	0                       # 0x0
	.size	"PinFlag-5.", 4

	.type	.L__unnamed_1,@object   # @5
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_1:
	.asciz	"5."
	.size	.L__unnamed_1, 3

	.type	"PinFlag-14.000000",@object # @PinFlag-14.000000
	.bss
	.globl	"PinFlag-14.000000"
	.align	4
"PinFlag-14.000000":
	.long	0                       # 0x0
	.size	"PinFlag-14.000000", 4

	.type	.L__unnamed_32,@object  # @6
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_32:
	.asciz	"14.000000"
	.size	.L__unnamed_32, 10

	.type	"PinFlag-14.00000",@object # @PinFlag-14.00000
	.bss
	.globl	"PinFlag-14.00000"
	.align	4
"PinFlag-14.00000":
	.long	0                       # 0x0
	.size	"PinFlag-14.00000", 4

	.type	.L__unnamed_31,@object  # @7
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_31:
	.asciz	"14.00000"
	.size	.L__unnamed_31, 9

	.type	"PinFlag-14.000010",@object # @PinFlag-14.000010
	.bss
	.globl	"PinFlag-14.000010"
	.align	4
"PinFlag-14.000010":
	.long	0                       # 0x0
	.size	"PinFlag-14.000010", 4

	.type	.L__unnamed_34,@object  # @8
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_34:
	.asciz	"14.000010"
	.size	.L__unnamed_34, 10

	.type	"PinFlag-14.00001",@object # @PinFlag-14.00001
	.bss
	.globl	"PinFlag-14.00001"
	.align	4
"PinFlag-14.00001":
	.long	0                       # 0x0
	.size	"PinFlag-14.00001", 4

	.type	.L__unnamed_33,@object  # @9
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_33:
	.asciz	"14.00001"
	.size	.L__unnamed_33, 9

	.type	"PinFlag-14.0000",@object # @PinFlag-14.0000
	.bss
	.globl	"PinFlag-14.0000"
	.align	4
"PinFlag-14.0000":
	.long	0                       # 0x0
	.size	"PinFlag-14.0000", 4

	.type	.L__unnamed_30,@object  # @10
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_30:
	.asciz	"14.0000"
	.size	.L__unnamed_30, 8

	.type	"PinFlag-14.000",@object # @PinFlag-14.000
	.bss
	.globl	"PinFlag-14.000"
	.align	4
"PinFlag-14.000":
	.long	0                       # 0x0
	.size	"PinFlag-14.000", 4

	.type	.L__unnamed_29,@object  # @11
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_29:
	.asciz	"14.000"
	.size	.L__unnamed_29, 7

	.type	"PinFlag-14.001000",@object # @PinFlag-14.001000
	.bss
	.globl	"PinFlag-14.001000"
	.align	4
"PinFlag-14.001000":
	.long	0                       # 0x0
	.size	"PinFlag-14.001000", 4

	.type	.L__unnamed_26,@object  # @12
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_26:
	.asciz	"14.001000"
	.size	.L__unnamed_26, 10

	.type	"PinFlag-14.00100",@object # @PinFlag-14.00100
	.bss
	.globl	"PinFlag-14.00100"
	.align	4
"PinFlag-14.00100":
	.long	0                       # 0x0
	.size	"PinFlag-14.00100", 4

	.type	.L__unnamed_25,@object  # @13
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_25:
	.asciz	"14.00100"
	.size	.L__unnamed_25, 9

	.type	"PinFlag-14.001010",@object # @PinFlag-14.001010
	.bss
	.globl	"PinFlag-14.001010"
	.align	4
"PinFlag-14.001010":
	.long	0                       # 0x0
	.size	"PinFlag-14.001010", 4

	.type	.L__unnamed_28,@object  # @14
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_28:
	.asciz	"14.001010"
	.size	.L__unnamed_28, 10

	.type	"PinFlag-14.00101",@object # @PinFlag-14.00101
	.bss
	.globl	"PinFlag-14.00101"
	.align	4
"PinFlag-14.00101":
	.long	0                       # 0x0
	.size	"PinFlag-14.00101", 4

	.type	.L__unnamed_27,@object  # @15
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_27:
	.asciz	"14.00101"
	.size	.L__unnamed_27, 9

	.type	"PinFlag-14.0010",@object # @PinFlag-14.0010
	.bss
	.globl	"PinFlag-14.0010"
	.align	4
"PinFlag-14.0010":
	.long	0                       # 0x0
	.size	"PinFlag-14.0010", 4

	.type	.L__unnamed_24,@object  # @16
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_24:
	.asciz	"14.0010"
	.size	.L__unnamed_24, 8

	.type	"PinFlag-14.001",@object # @PinFlag-14.001
	.bss
	.globl	"PinFlag-14.001"
	.align	4
"PinFlag-14.001":
	.long	0                       # 0x0
	.size	"PinFlag-14.001", 4

	.type	.L__unnamed_23,@object  # @17
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_23:
	.asciz	"14.001"
	.size	.L__unnamed_23, 7

	.type	"PinFlag-14.002",@object # @PinFlag-14.002
	.bss
	.globl	"PinFlag-14.002"
	.align	4
"PinFlag-14.002":
	.long	0                       # 0x0
	.size	"PinFlag-14.002", 4

	.type	.L__unnamed_35,@object  # @18
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_35:
	.asciz	"14.002"
	.size	.L__unnamed_35, 7

	.type	"PinFlag-14.003",@object # @PinFlag-14.003
	.bss
	.globl	"PinFlag-14.003"
	.align	4
"PinFlag-14.003":
	.long	0                       # 0x0
	.size	"PinFlag-14.003", 4

	.type	.L__unnamed_36,@object  # @19
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_36:
	.asciz	"14.003"
	.size	.L__unnamed_36, 7

	.type	"PinFlag-14.004",@object # @PinFlag-14.004
	.bss
	.globl	"PinFlag-14.004"
	.align	4
"PinFlag-14.004":
	.long	0                       # 0x0
	.size	"PinFlag-14.004", 4

	.type	.L__unnamed_37,@object  # @20
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_37:
	.asciz	"14.004"
	.size	.L__unnamed_37, 7

	.type	"PinFlag-14.005",@object # @PinFlag-14.005
	.bss
	.globl	"PinFlag-14.005"
	.align	4
"PinFlag-14.005":
	.long	0                       # 0x0
	.size	"PinFlag-14.005", 4

	.type	.L__unnamed_38,@object  # @21
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_38:
	.asciz	"14.005"
	.size	.L__unnamed_38, 7

	.type	"PinFlag-14.006",@object # @PinFlag-14.006
	.bss
	.globl	"PinFlag-14.006"
	.align	4
"PinFlag-14.006":
	.long	0                       # 0x0
	.size	"PinFlag-14.006", 4

	.type	.L__unnamed_39,@object  # @22
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_39:
	.asciz	"14.006"
	.size	.L__unnamed_39, 7

	.type	"PinFlag-14.00700",@object # @PinFlag-14.00700
	.bss
	.globl	"PinFlag-14.00700"
	.align	4
"PinFlag-14.00700":
	.long	0                       # 0x0
	.size	"PinFlag-14.00700", 4

	.type	.L__unnamed_42,@object  # @23
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_42:
	.asciz	"14.00700"
	.size	.L__unnamed_42, 9

	.type	"PinFlag-14.00701",@object # @PinFlag-14.00701
	.bss
	.globl	"PinFlag-14.00701"
	.align	4
"PinFlag-14.00701":
	.long	0                       # 0x0
	.size	"PinFlag-14.00701", 4

	.type	.L__unnamed_43,@object  # @24
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_43:
	.asciz	"14.00701"
	.size	.L__unnamed_43, 9

	.type	"PinFlag-14.00702",@object # @PinFlag-14.00702
	.bss
	.globl	"PinFlag-14.00702"
	.align	4
"PinFlag-14.00702":
	.long	0                       # 0x0
	.size	"PinFlag-14.00702", 4

	.type	.L__unnamed_44,@object  # @25
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_44:
	.asciz	"14.00702"
	.size	.L__unnamed_44, 9

	.type	"PinFlag-14.0070",@object # @PinFlag-14.0070
	.bss
	.globl	"PinFlag-14.0070"
	.align	4
"PinFlag-14.0070":
	.long	0                       # 0x0
	.size	"PinFlag-14.0070", 4

	.type	.L__unnamed_41,@object  # @26
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_41:
	.asciz	"14.0070"
	.size	.L__unnamed_41, 8

	.type	"PinFlag-14.007",@object # @PinFlag-14.007
	.bss
	.globl	"PinFlag-14.007"
	.align	4
"PinFlag-14.007":
	.long	0                       # 0x0
	.size	"PinFlag-14.007", 4

	.type	.L__unnamed_40,@object  # @27
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_40:
	.asciz	"14.007"
	.size	.L__unnamed_40, 7

	.type	"PinFlag-14.00",@object # @PinFlag-14.00
	.bss
	.globl	"PinFlag-14.00"
	.align	4
"PinFlag-14.00":
	.long	0                       # 0x0
	.size	"PinFlag-14.00", 4

	.type	.L__unnamed_22,@object  # @28
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_22:
	.asciz	"14.00"
	.size	.L__unnamed_22, 6

	.type	"PinFlag-14.0",@object  # @PinFlag-14.0
	.bss
	.globl	"PinFlag-14.0"
	.align	4
"PinFlag-14.0":
	.long	0                       # 0x0
	.size	"PinFlag-14.0", 4

	.type	.L__unnamed_21,@object  # @29
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_21:
	.asciz	"14.0"
	.size	.L__unnamed_21, 5

	.type	"PinFlag-14.1",@object  # @PinFlag-14.1
	.bss
	.globl	"PinFlag-14.1"
	.align	4
"PinFlag-14.1":
	.long	0                       # 0x0
	.size	"PinFlag-14.1", 4

	.type	.L__unnamed_45,@object  # @30
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_45:
	.asciz	"14.1"
	.size	.L__unnamed_45, 5

	.type	"PinFlag-14.2",@object  # @PinFlag-14.2
	.bss
	.globl	"PinFlag-14.2"
	.align	4
"PinFlag-14.2":
	.long	0                       # 0x0
	.size	"PinFlag-14.2", 4

	.type	.L__unnamed_46,@object  # @31
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_46:
	.asciz	"14.2"
	.size	.L__unnamed_46, 5

	.type	"PinFlag-14.3",@object  # @PinFlag-14.3
	.bss
	.globl	"PinFlag-14.3"
	.align	4
"PinFlag-14.3":
	.long	0                       # 0x0
	.size	"PinFlag-14.3", 4

	.type	.L__unnamed_47,@object  # @32
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_47:
	.asciz	"14.3"
	.size	.L__unnamed_47, 5

	.type	"PinFlag-14.4",@object  # @PinFlag-14.4
	.bss
	.globl	"PinFlag-14.4"
	.align	4
"PinFlag-14.4":
	.long	0                       # 0x0
	.size	"PinFlag-14.4", 4

	.type	.L__unnamed_48,@object  # @33
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_48:
	.asciz	"14.4"
	.size	.L__unnamed_48, 5

	.type	"PinFlag-14.5",@object  # @PinFlag-14.5
	.bss
	.globl	"PinFlag-14.5"
	.align	4
"PinFlag-14.5":
	.long	0                       # 0x0
	.size	"PinFlag-14.5", 4

	.type	.L__unnamed_49,@object  # @34
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_49:
	.asciz	"14.5"
	.size	.L__unnamed_49, 5

	.type	"PinFlag-14.6",@object  # @PinFlag-14.6
	.bss
	.globl	"PinFlag-14.6"
	.align	4
"PinFlag-14.6":
	.long	0                       # 0x0
	.size	"PinFlag-14.6", 4

	.type	.L__unnamed_50,@object  # @35
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_50:
	.asciz	"14.6"
	.size	.L__unnamed_50, 5

	.type	"PinFlag-14.",@object   # @PinFlag-14.
	.bss
	.globl	"PinFlag-14."
	.align	4
"PinFlag-14.":
	.long	0                       # 0x0
	.size	"PinFlag-14.", 4

	.type	.L__unnamed_20,@object  # @36
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_20:
	.asciz	"14."
	.size	.L__unnamed_20, 4

	.type	"PinFlag-15.00",@object # @PinFlag-15.00
	.bss
	.globl	"PinFlag-15.00"
	.align	4
"PinFlag-15.00":
	.long	0                       # 0x0
	.size	"PinFlag-15.00", 4

	.type	.L__unnamed_19,@object  # @37
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_19:
	.asciz	"15.00"
	.size	.L__unnamed_19, 6

	.type	"PinFlag-15.0",@object  # @PinFlag-15.0
	.bss
	.globl	"PinFlag-15.0"
	.align	4
"PinFlag-15.0":
	.long	0                       # 0x0
	.size	"PinFlag-15.0", 4

	.type	.L__unnamed_18,@object  # @38
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_18:
	.asciz	"15.0"
	.size	.L__unnamed_18, 5

	.type	"PinFlag-15.",@object   # @PinFlag-15.
	.bss
	.globl	"PinFlag-15."
	.align	4
"PinFlag-15.":
	.long	0                       # 0x0
	.size	"PinFlag-15.", 4

	.type	.L__unnamed_17,@object  # @39
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_17:
	.asciz	"15."
	.size	.L__unnamed_17, 4

	.type	"PinFlag-17.",@object   # @PinFlag-17.
	.bss
	.globl	"PinFlag-17."
	.align	4
"PinFlag-17.":
	.long	0                       # 0x0
	.size	"PinFlag-17.", 4

	.type	.L__unnamed_16,@object  # @40
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_16:
	.asciz	"17."
	.size	.L__unnamed_16, 4

	.type	"PinFlag-18.",@object   # @PinFlag-18.
	.bss
	.globl	"PinFlag-18."
	.align	4
"PinFlag-18.":
	.long	0                       # 0x0
	.size	"PinFlag-18.", 4

	.type	.L__unnamed_15,@object  # @41
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_15:
	.asciz	"18."
	.size	.L__unnamed_15, 4

	.type	"PinFlag-19.",@object   # @PinFlag-19.
	.bss
	.globl	"PinFlag-19."
	.align	4
"PinFlag-19.":
	.long	0                       # 0x0
	.size	"PinFlag-19.", 4

	.type	.L__unnamed_14,@object  # @42
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_14:
	.asciz	"19."
	.size	.L__unnamed_14, 4

	.type	"PinFlag-20.",@object   # @PinFlag-20.
	.bss
	.globl	"PinFlag-20."
	.align	4
"PinFlag-20.":
	.long	0                       # 0x0
	.size	"PinFlag-20.", 4

	.type	.L__unnamed_13,@object  # @43
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_13:
	.asciz	"20."
	.size	.L__unnamed_13, 4

	.type	"PinFlag-21.",@object   # @PinFlag-21.
	.bss
	.globl	"PinFlag-21."
	.align	4
"PinFlag-21.":
	.long	0                       # 0x0
	.size	"PinFlag-21.", 4

	.type	.L__unnamed_12,@object  # @44
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_12:
	.asciz	"21."
	.size	.L__unnamed_12, 4

	.type	"PinFlag-22.",@object   # @PinFlag-22.
	.bss
	.globl	"PinFlag-22."
	.align	4
"PinFlag-22.":
	.long	0                       # 0x0
	.size	"PinFlag-22.", 4

	.type	.L__unnamed_11,@object  # @45
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_11:
	.asciz	"22."
	.size	.L__unnamed_11, 4

	.type	"PinFlag-23.",@object   # @PinFlag-23.
	.bss
	.globl	"PinFlag-23."
	.align	4
"PinFlag-23.":
	.long	0                       # 0x0
	.size	"PinFlag-23.", 4

	.type	.L__unnamed_10,@object  # @46
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_10:
	.asciz	"23."
	.size	.L__unnamed_10, 4

	.type	"PinFlag-24.0",@object  # @PinFlag-24.0
	.bss
	.globl	"PinFlag-24.0"
	.align	4
"PinFlag-24.0":
	.long	0                       # 0x0
	.size	"PinFlag-24.0", 4

	.type	.L__unnamed_83,@object  # @47
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_83:
	.asciz	"24.0"
	.size	.L__unnamed_83, 5

	.type	"PinFlag-24.1",@object  # @PinFlag-24.1
	.bss
	.globl	"PinFlag-24.1"
	.align	4
"PinFlag-24.1":
	.long	0                       # 0x0
	.size	"PinFlag-24.1", 4

	.type	.L__unnamed_84,@object  # @48
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_84:
	.asciz	"24.1"
	.size	.L__unnamed_84, 5

	.type	"PinFlag-24.",@object   # @PinFlag-24.
	.bss
	.globl	"PinFlag-24."
	.align	4
"PinFlag-24.":
	.long	0                       # 0x0
	.size	"PinFlag-24.", 4

	.type	.L__unnamed_82,@object  # @49
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_82:
	.asciz	"24."
	.size	.L__unnamed_82, 4

	.type	"PinFlag-26.0",@object  # @PinFlag-26.0
	.bss
	.globl	"PinFlag-26.0"
	.align	4
"PinFlag-26.0":
	.long	0                       # 0x0
	.size	"PinFlag-26.0", 4

	.type	.L__unnamed_58,@object  # @50
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_58:
	.asciz	"26.0"
	.size	.L__unnamed_58, 5

	.type	"PinFlag-26.100",@object # @PinFlag-26.100
	.bss
	.globl	"PinFlag-26.100"
	.align	4
"PinFlag-26.100":
	.long	0                       # 0x0
	.size	"PinFlag-26.100", 4

	.type	.L__unnamed_61,@object  # @51
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_61:
	.asciz	"26.100"
	.size	.L__unnamed_61, 7

	.type	"PinFlag-26.101",@object # @PinFlag-26.101
	.bss
	.globl	"PinFlag-26.101"
	.align	4
"PinFlag-26.101":
	.long	0                       # 0x0
	.size	"PinFlag-26.101", 4

	.type	.L__unnamed_62,@object  # @52
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_62:
	.asciz	"26.101"
	.size	.L__unnamed_62, 7

	.type	"PinFlag-26.102",@object # @PinFlag-26.102
	.bss
	.globl	"PinFlag-26.102"
	.align	4
"PinFlag-26.102":
	.long	0                       # 0x0
	.size	"PinFlag-26.102", 4

	.type	.L__unnamed_63,@object  # @53
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_63:
	.asciz	"26.102"
	.size	.L__unnamed_63, 7

	.type	"PinFlag-26.103",@object # @PinFlag-26.103
	.bss
	.globl	"PinFlag-26.103"
	.align	4
"PinFlag-26.103":
	.long	0                       # 0x0
	.size	"PinFlag-26.103", 4

	.type	.L__unnamed_64,@object  # @54
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_64:
	.asciz	"26.103"
	.size	.L__unnamed_64, 7

	.type	"PinFlag-26.104",@object # @PinFlag-26.104
	.bss
	.globl	"PinFlag-26.104"
	.align	4
"PinFlag-26.104":
	.long	0                       # 0x0
	.size	"PinFlag-26.104", 4

	.type	.L__unnamed_65,@object  # @55
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_65:
	.asciz	"26.104"
	.size	.L__unnamed_65, 7

	.type	"PinFlag-26.10",@object # @PinFlag-26.10
	.bss
	.globl	"PinFlag-26.10"
	.align	4
"PinFlag-26.10":
	.long	0                       # 0x0
	.size	"PinFlag-26.10", 4

	.type	.L__unnamed_60,@object  # @56
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_60:
	.asciz	"26.10"
	.size	.L__unnamed_60, 6

	.type	"PinFlag-26.11000",@object # @PinFlag-26.11000
	.bss
	.globl	"PinFlag-26.11000"
	.align	4
"PinFlag-26.11000":
	.long	0                       # 0x0
	.size	"PinFlag-26.11000", 4

	.type	.L__unnamed_70,@object  # @57
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_70:
	.asciz	"26.11000"
	.size	.L__unnamed_70, 9

	.type	"PinFlag-26.1100",@object # @PinFlag-26.1100
	.bss
	.globl	"PinFlag-26.1100"
	.align	4
"PinFlag-26.1100":
	.long	0                       # 0x0
	.size	"PinFlag-26.1100", 4

	.type	.L__unnamed_69,@object  # @58
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_69:
	.asciz	"26.1100"
	.size	.L__unnamed_69, 8

	.type	"PinFlag-26.11010",@object # @PinFlag-26.11010
	.bss
	.globl	"PinFlag-26.11010"
	.align	4
"PinFlag-26.11010":
	.long	0                       # 0x0
	.size	"PinFlag-26.11010", 4

	.type	.L__unnamed_72,@object  # @59
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_72:
	.asciz	"26.11010"
	.size	.L__unnamed_72, 9

	.type	"PinFlag-26.1101",@object # @PinFlag-26.1101
	.bss
	.globl	"PinFlag-26.1101"
	.align	4
"PinFlag-26.1101":
	.long	0                       # 0x0
	.size	"PinFlag-26.1101", 4

	.type	.L__unnamed_71,@object  # @60
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_71:
	.asciz	"26.1101"
	.size	.L__unnamed_71, 8

	.type	"PinFlag-26.110",@object # @PinFlag-26.110
	.bss
	.globl	"PinFlag-26.110"
	.align	4
"PinFlag-26.110":
	.long	0                       # 0x0
	.size	"PinFlag-26.110", 4

	.type	.L__unnamed_68,@object  # @61
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_68:
	.asciz	"26.110"
	.size	.L__unnamed_68, 7

	.type	"PinFlag-26.11100",@object # @PinFlag-26.11100
	.bss
	.globl	"PinFlag-26.11100"
	.align	4
"PinFlag-26.11100":
	.long	0                       # 0x0
	.size	"PinFlag-26.11100", 4

	.type	.L__unnamed_75,@object  # @62
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_75:
	.asciz	"26.11100"
	.size	.L__unnamed_75, 9

	.type	"PinFlag-26.1110",@object # @PinFlag-26.1110
	.bss
	.globl	"PinFlag-26.1110"
	.align	4
"PinFlag-26.1110":
	.long	0                       # 0x0
	.size	"PinFlag-26.1110", 4

	.type	.L__unnamed_74,@object  # @63
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_74:
	.asciz	"26.1110"
	.size	.L__unnamed_74, 8

	.type	"PinFlag-26.11110",@object # @PinFlag-26.11110
	.bss
	.globl	"PinFlag-26.11110"
	.align	4
"PinFlag-26.11110":
	.long	0                       # 0x0
	.size	"PinFlag-26.11110", 4

	.type	.L__unnamed_77,@object  # @64
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_77:
	.asciz	"26.11110"
	.size	.L__unnamed_77, 9

	.type	"PinFlag-26.1111",@object # @PinFlag-26.1111
	.bss
	.globl	"PinFlag-26.1111"
	.align	4
"PinFlag-26.1111":
	.long	0                       # 0x0
	.size	"PinFlag-26.1111", 4

	.type	.L__unnamed_76,@object  # @65
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_76:
	.asciz	"26.1111"
	.size	.L__unnamed_76, 8

	.type	"PinFlag-26.111",@object # @PinFlag-26.111
	.bss
	.globl	"PinFlag-26.111"
	.align	4
"PinFlag-26.111":
	.long	0                       # 0x0
	.size	"PinFlag-26.111", 4

	.type	.L__unnamed_73,@object  # @66
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_73:
	.asciz	"26.111"
	.size	.L__unnamed_73, 7

	.type	"PinFlag-26.112",@object # @PinFlag-26.112
	.bss
	.globl	"PinFlag-26.112"
	.align	4
"PinFlag-26.112":
	.long	0                       # 0x0
	.size	"PinFlag-26.112", 4

	.type	.L__unnamed_78,@object  # @67
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_78:
	.asciz	"26.112"
	.size	.L__unnamed_78, 7

	.type	"PinFlag-26.113",@object # @PinFlag-26.113
	.bss
	.globl	"PinFlag-26.113"
	.align	4
"PinFlag-26.113":
	.long	0                       # 0x0
	.size	"PinFlag-26.113", 4

	.type	.L__unnamed_79,@object  # @68
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_79:
	.asciz	"26.113"
	.size	.L__unnamed_79, 7

	.type	"PinFlag-26.114",@object # @PinFlag-26.114
	.bss
	.globl	"PinFlag-26.114"
	.align	4
"PinFlag-26.114":
	.long	0                       # 0x0
	.size	"PinFlag-26.114", 4

	.type	.L__unnamed_67,@object  # @69
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_67:
	.asciz	"26.114"
	.size	.L__unnamed_67, 7

	.type	"PinFlag-26.115",@object # @PinFlag-26.115
	.bss
	.globl	"PinFlag-26.115"
	.align	4
"PinFlag-26.115":
	.long	0                       # 0x0
	.size	"PinFlag-26.115", 4

	.type	.L__unnamed_80,@object  # @70
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_80:
	.asciz	"26.115"
	.size	.L__unnamed_80, 7

	.type	"PinFlag-26.11",@object # @PinFlag-26.11
	.bss
	.globl	"PinFlag-26.11"
	.align	4
"PinFlag-26.11":
	.long	0                       # 0x0
	.size	"PinFlag-26.11", 4

	.type	.L__unnamed_66,@object  # @71
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_66:
	.asciz	"26.11"
	.size	.L__unnamed_66, 6

	.type	"PinFlag-26.12",@object # @PinFlag-26.12
	.bss
	.globl	"PinFlag-26.12"
	.align	4
"PinFlag-26.12":
	.long	0                       # 0x0
	.size	"PinFlag-26.12", 4

	.type	.L__unnamed_81,@object  # @72
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_81:
	.asciz	"26.12"
	.size	.L__unnamed_81, 6

	.type	"PinFlag-26.1",@object  # @PinFlag-26.1
	.bss
	.globl	"PinFlag-26.1"
	.align	4
"PinFlag-26.1":
	.long	0                       # 0x0
	.size	"PinFlag-26.1", 4

	.type	.L__unnamed_59,@object  # @73
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_59:
	.asciz	"26.1"
	.size	.L__unnamed_59, 5

	.type	"PinFlag-26.",@object   # @PinFlag-26.
	.bss
	.globl	"PinFlag-26."
	.align	4
"PinFlag-26.":
	.long	0                       # 0x0
	.size	"PinFlag-26.", 4

	.type	.L__unnamed_57,@object  # @74
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_57:
	.asciz	"26."
	.size	.L__unnamed_57, 4

	.type	"PinFlag-27.",@object   # @PinFlag-27.
	.bss
	.globl	"PinFlag-27."
	.align	4
"PinFlag-27.":
	.long	0                       # 0x0
	.size	"PinFlag-27.", 4

	.type	.L__unnamed_56,@object  # @75
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_56:
	.asciz	"27."
	.size	.L__unnamed_56, 4

	.type	"PinFlag-28.",@object   # @PinFlag-28.
	.bss
	.globl	"PinFlag-28."
	.align	4
"PinFlag-28.":
	.long	0                       # 0x0
	.size	"PinFlag-28.", 4

	.type	.L__unnamed_55,@object  # @76
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_55:
	.asciz	"28."
	.size	.L__unnamed_55, 4

	.type	"PinFlag-29.",@object   # @PinFlag-29.
	.bss
	.globl	"PinFlag-29."
	.align	4
"PinFlag-29.":
	.long	0                       # 0x0
	.size	"PinFlag-29.", 4

	.type	.L__unnamed_54,@object  # @77
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_54:
	.asciz	"29."
	.size	.L__unnamed_54, 4

	.type	"PinFlag-30.",@object   # @PinFlag-30.
	.bss
	.globl	"PinFlag-30."
	.align	4
"PinFlag-30.":
	.long	0                       # 0x0
	.size	"PinFlag-30.", 4

	.type	.L__unnamed_53,@object  # @78
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_53:
	.asciz	"30."
	.size	.L__unnamed_53, 4

	.type	"PinFlag-31.",@object   # @PinFlag-31.
	.bss
	.globl	"PinFlag-31."
	.align	4
"PinFlag-31.":
	.long	0                       # 0x0
	.size	"PinFlag-31.", 4

	.type	.L__unnamed_52,@object  # @79
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_52:
	.asciz	"31."
	.size	.L__unnamed_52, 4

	.type	"PinFlag-32.",@object   # @PinFlag-32.
	.bss
	.globl	"PinFlag-32."
	.align	4
"PinFlag-32.":
	.long	0                       # 0x0
	.size	"PinFlag-32.", 4

	.type	.L__unnamed_51,@object  # @80
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_51:
	.asciz	"32."
	.size	.L__unnamed_51, 4

	.type	"PinFlag-33.",@object   # @PinFlag-33.
	.bss
	.globl	"PinFlag-33."
	.align	4
"PinFlag-33.":
	.long	0                       # 0x0
	.size	"PinFlag-33.", 4

	.type	.L__unnamed_85,@object  # @81
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_85:
	.asciz	"33."
	.size	.L__unnamed_85, 4

	.type	"PinFlag-39.0",@object  # @PinFlag-39.0
	.bss
	.globl	"PinFlag-39.0"
	.align	4
"PinFlag-39.0":
	.long	0                       # 0x0
	.size	"PinFlag-39.0", 4

	.type	.L__unnamed_88,@object  # @82
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_88:
	.asciz	"39.0"
	.size	.L__unnamed_88, 5

	.type	"PinFlag-39.1",@object  # @PinFlag-39.1
	.bss
	.globl	"PinFlag-39.1"
	.align	4
"PinFlag-39.1":
	.long	0                       # 0x0
	.size	"PinFlag-39.1", 4

	.type	.L__unnamed_89,@object  # @83
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_89:
	.asciz	"39.1"
	.size	.L__unnamed_89, 5

	.type	"PinFlag-39.2",@object  # @PinFlag-39.2
	.bss
	.globl	"PinFlag-39.2"
	.align	4
"PinFlag-39.2":
	.long	0                       # 0x0
	.size	"PinFlag-39.2", 4

	.type	.L__unnamed_90,@object  # @84
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_90:
	.asciz	"39.2"
	.size	.L__unnamed_90, 5

	.type	"PinFlag-39.3",@object  # @PinFlag-39.3
	.bss
	.globl	"PinFlag-39.3"
	.align	4
"PinFlag-39.3":
	.long	0                       # 0x0
	.size	"PinFlag-39.3", 4

	.type	.L__unnamed_91,@object  # @85
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_91:
	.asciz	"39.3"
	.size	.L__unnamed_91, 5

	.type	"PinFlag-39.",@object   # @PinFlag-39.
	.bss
	.globl	"PinFlag-39."
	.align	4
"PinFlag-39.":
	.long	0                       # 0x0
	.size	"PinFlag-39.", 4

	.type	.L__unnamed_87,@object  # @86
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_87:
	.asciz	"39."
	.size	.L__unnamed_87, 4

	.type	"PinFlag-43.0",@object  # @PinFlag-43.0
	.bss
	.globl	"PinFlag-43.0"
	.align	4
"PinFlag-43.0":
	.long	0                       # 0x0
	.size	"PinFlag-43.0", 4

	.type	.L__unnamed_93,@object  # @87
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_93:
	.asciz	"43.0"
	.size	.L__unnamed_93, 5

	.type	"PinFlag-43.1",@object  # @PinFlag-43.1
	.bss
	.globl	"PinFlag-43.1"
	.align	4
"PinFlag-43.1":
	.long	0                       # 0x0
	.size	"PinFlag-43.1", 4

	.type	.L__unnamed_95,@object  # @88
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_95:
	.asciz	"43.1"
	.size	.L__unnamed_95, 5

	.type	"PinFlag-43.2",@object  # @PinFlag-43.2
	.bss
	.globl	"PinFlag-43.2"
	.align	4
"PinFlag-43.2":
	.long	0                       # 0x0
	.size	"PinFlag-43.2", 4

	.type	.L__unnamed_94,@object  # @89
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_94:
	.asciz	"43.2"
	.size	.L__unnamed_94, 5

	.type	"PinFlag-43.",@object   # @PinFlag-43.
	.bss
	.globl	"PinFlag-43."
	.align	4
"PinFlag-43.":
	.long	0                       # 0x0
	.size	"PinFlag-43.", 4

	.type	.L__unnamed_92,@object  # @90
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_92:
	.asciz	"43."
	.size	.L__unnamed_92, 4

	.type	"PinFlag-44.",@object   # @PinFlag-44.
	.bss
	.globl	"PinFlag-44."
	.align	4
"PinFlag-44.":
	.long	0                       # 0x0
	.size	"PinFlag-44.", 4

	.type	.L__unnamed_96,@object  # @91
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_96:
	.asciz	"44."
	.size	.L__unnamed_96, 4

	.type	"PinFlag-45.",@object   # @PinFlag-45.
	.bss
	.globl	"PinFlag-45."
	.align	4
"PinFlag-45.":
	.long	0                       # 0x0
	.size	"PinFlag-45.", 4

	.type	.L__unnamed_97,@object  # @92
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_97:
	.asciz	"45."
	.size	.L__unnamed_97, 4

	.type	"PinFlag-47.00",@object # @PinFlag-47.00
	.bss
	.globl	"PinFlag-47.00"
	.align	4
"PinFlag-47.00":
	.long	0                       # 0x0
	.size	"PinFlag-47.00", 4

	.type	.L__unnamed_100,@object # @93
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_100:
	.asciz	"47.00"
	.size	.L__unnamed_100, 6

	.type	"PinFlag-47.01",@object # @PinFlag-47.01
	.bss
	.globl	"PinFlag-47.01"
	.align	4
"PinFlag-47.01":
	.long	0                       # 0x0
	.size	"PinFlag-47.01", 4

	.type	.L__unnamed_101,@object # @94
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_101:
	.asciz	"47.01"
	.size	.L__unnamed_101, 6

	.type	"PinFlag-47.02",@object # @PinFlag-47.02
	.bss
	.globl	"PinFlag-47.02"
	.align	4
"PinFlag-47.02":
	.long	0                       # 0x0
	.size	"PinFlag-47.02", 4

	.type	.L__unnamed_102,@object # @95
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_102:
	.asciz	"47.02"
	.size	.L__unnamed_102, 6

	.type	"PinFlag-47.03",@object # @PinFlag-47.03
	.bss
	.globl	"PinFlag-47.03"
	.align	4
"PinFlag-47.03":
	.long	0                       # 0x0
	.size	"PinFlag-47.03", 4

	.type	.L__unnamed_103,@object # @96
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_103:
	.asciz	"47.03"
	.size	.L__unnamed_103, 6

	.type	"PinFlag-47.04",@object # @PinFlag-47.04
	.bss
	.globl	"PinFlag-47.04"
	.align	4
"PinFlag-47.04":
	.long	0                       # 0x0
	.size	"PinFlag-47.04", 4

	.type	.L__unnamed_104,@object # @97
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_104:
	.asciz	"47.04"
	.size	.L__unnamed_104, 6

	.type	"PinFlag-47.0",@object  # @PinFlag-47.0
	.bss
	.globl	"PinFlag-47.0"
	.align	4
"PinFlag-47.0":
	.long	0                       # 0x0
	.size	"PinFlag-47.0", 4

	.type	.L__unnamed_99,@object  # @98
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_99:
	.asciz	"47.0"
	.size	.L__unnamed_99, 5

	.type	"PinFlag-47.10",@object # @PinFlag-47.10
	.bss
	.globl	"PinFlag-47.10"
	.align	4
"PinFlag-47.10":
	.long	0                       # 0x0
	.size	"PinFlag-47.10", 4

	.type	.L__unnamed_107,@object # @99
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_107:
	.asciz	"47.10"
	.size	.L__unnamed_107, 6

	.type	"PinFlag-47.11",@object # @PinFlag-47.11
	.bss
	.globl	"PinFlag-47.11"
	.align	4
"PinFlag-47.11":
	.long	0                       # 0x0
	.size	"PinFlag-47.11", 4

	.type	.L__unnamed_108,@object # @100
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_108:
	.asciz	"47.11"
	.size	.L__unnamed_108, 6

	.type	"PinFlag-47.12",@object # @PinFlag-47.12
	.bss
	.globl	"PinFlag-47.12"
	.align	4
"PinFlag-47.12":
	.long	0                       # 0x0
	.size	"PinFlag-47.12", 4

	.type	.L__unnamed_109,@object # @101
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_109:
	.asciz	"47.12"
	.size	.L__unnamed_109, 6

	.type	"PinFlag-47.13",@object # @PinFlag-47.13
	.bss
	.globl	"PinFlag-47.13"
	.align	4
"PinFlag-47.13":
	.long	0                       # 0x0
	.size	"PinFlag-47.13", 4

	.type	.L__unnamed_110,@object # @102
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_110:
	.asciz	"47.13"
	.size	.L__unnamed_110, 6

	.type	"PinFlag-47.14",@object # @PinFlag-47.14
	.bss
	.globl	"PinFlag-47.14"
	.align	4
"PinFlag-47.14":
	.long	0                       # 0x0
	.size	"PinFlag-47.14", 4

	.type	.L__unnamed_111,@object # @103
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_111:
	.asciz	"47.14"
	.size	.L__unnamed_111, 6

	.type	"PinFlag-47.1",@object  # @PinFlag-47.1
	.bss
	.globl	"PinFlag-47.1"
	.align	4
"PinFlag-47.1":
	.long	0                       # 0x0
	.size	"PinFlag-47.1", 4

	.type	.L__unnamed_106,@object # @104
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_106:
	.asciz	"47.1"
	.size	.L__unnamed_106, 5

	.type	"PinFlag-47.2",@object  # @PinFlag-47.2
	.bss
	.globl	"PinFlag-47.2"
	.align	4
"PinFlag-47.2":
	.long	0                       # 0x0
	.size	"PinFlag-47.2", 4

	.type	.L__unnamed_105,@object # @105
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_105:
	.asciz	"47.2"
	.size	.L__unnamed_105, 5

	.type	"PinFlag-47.30",@object # @PinFlag-47.30
	.bss
	.globl	"PinFlag-47.30"
	.align	4
"PinFlag-47.30":
	.long	0                       # 0x0
	.size	"PinFlag-47.30", 4

	.type	.L__unnamed_113,@object # @106
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_113:
	.asciz	"47.30"
	.size	.L__unnamed_113, 6

	.type	"PinFlag-47.3",@object  # @PinFlag-47.3
	.bss
	.globl	"PinFlag-47.3"
	.align	4
"PinFlag-47.3":
	.long	0                       # 0x0
	.size	"PinFlag-47.3", 4

	.type	.L__unnamed_112,@object # @107
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_112:
	.asciz	"47.3"
	.size	.L__unnamed_112, 5

	.type	"PinFlag-47.",@object   # @PinFlag-47.
	.bss
	.globl	"PinFlag-47."
	.align	4
"PinFlag-47.":
	.long	0                       # 0x0
	.size	"PinFlag-47.", 4

	.type	.L__unnamed_98,@object  # @108
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_98:
	.asciz	"47."
	.size	.L__unnamed_98, 4

	.type	"PinFlag-48.",@object   # @PinFlag-48.
	.bss
	.globl	"PinFlag-48."
	.align	4
"PinFlag-48.":
	.long	0                       # 0x0
	.size	"PinFlag-48.", 4

	.type	.L__unnamed_114,@object # @109
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_114:
	.asciz	"48."
	.size	.L__unnamed_114, 4

	.type	"PinFlag-49.0",@object  # @PinFlag-49.0
	.bss
	.globl	"PinFlag-49.0"
	.align	4
"PinFlag-49.0":
	.long	0                       # 0x0
	.size	"PinFlag-49.0", 4

	.type	.L__unnamed_116,@object # @110
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_116:
	.asciz	"49.0"
	.size	.L__unnamed_116, 5

	.type	"PinFlag-49.",@object   # @PinFlag-49.
	.bss
	.globl	"PinFlag-49."
	.align	4
"PinFlag-49.":
	.long	0                       # 0x0
	.size	"PinFlag-49.", 4

	.type	.L__unnamed_115,@object # @111
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_115:
	.asciz	"49."
	.size	.L__unnamed_115, 4

	.type	"PinFlag-50.",@object   # @PinFlag-50.
	.bss
	.globl	"PinFlag-50."
	.align	4
"PinFlag-50.":
	.long	0                       # 0x0
	.size	"PinFlag-50.", 4

	.type	.L__unnamed_117,@object # @112
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_117:
	.asciz	"50."
	.size	.L__unnamed_117, 4

	.type	"PinFlag-53.",@object   # @PinFlag-53.
	.bss
	.globl	"PinFlag-53."
	.align	4
"PinFlag-53.":
	.long	0                       # 0x0
	.size	"PinFlag-53.", 4

	.type	.L__unnamed_119,@object # @113
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_119:
	.asciz	"53."
	.size	.L__unnamed_119, 4

	.type	"PinFlag-55.",@object   # @PinFlag-55.
	.bss
	.globl	"PinFlag-55."
	.align	4
"PinFlag-55.":
	.long	0                       # 0x0
	.size	"PinFlag-55.", 4

	.type	.L__unnamed_141,@object # @114
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_141:
	.asciz	"55."
	.size	.L__unnamed_141, 4

	.type	"PinFlag-56.",@object   # @PinFlag-56.
	.bss
	.globl	"PinFlag-56."
	.align	4
"PinFlag-56.":
	.long	0                       # 0x0
	.size	"PinFlag-56.", 4

	.type	.L__unnamed_140,@object # @115
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_140:
	.asciz	"56."
	.size	.L__unnamed_140, 4

	.type	"PinFlag-57.",@object   # @PinFlag-57.
	.bss
	.globl	"PinFlag-57."
	.align	4
"PinFlag-57.":
	.long	0                       # 0x0
	.size	"PinFlag-57.", 4

	.type	.L__unnamed_139,@object # @116
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_139:
	.asciz	"57."
	.size	.L__unnamed_139, 4

	.type	"PinFlag-58.",@object   # @PinFlag-58.
	.bss
	.globl	"PinFlag-58."
	.align	4
"PinFlag-58.":
	.long	0                       # 0x0
	.size	"PinFlag-58.", 4

	.type	.L__unnamed_138,@object # @117
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_138:
	.asciz	"58."
	.size	.L__unnamed_138, 4

	.type	"PinFlag-59.",@object   # @PinFlag-59.
	.bss
	.globl	"PinFlag-59."
	.align	4
"PinFlag-59.":
	.long	0                       # 0x0
	.size	"PinFlag-59.", 4

	.type	.L__unnamed_137,@object # @118
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_137:
	.asciz	"59."
	.size	.L__unnamed_137, 4

	.type	"PinFlag-60.",@object   # @PinFlag-60.
	.bss
	.globl	"PinFlag-60."
	.align	4
"PinFlag-60.":
	.long	0                       # 0x0
	.size	"PinFlag-60.", 4

	.type	.L__unnamed_136,@object # @119
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_136:
	.asciz	"60."
	.size	.L__unnamed_136, 4

	.type	"PinFlag-61.",@object   # @PinFlag-61.
	.bss
	.globl	"PinFlag-61."
	.align	4
"PinFlag-61.":
	.long	0                       # 0x0
	.size	"PinFlag-61.", 4

	.type	.L__unnamed_135,@object # @120
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_135:
	.asciz	"61."
	.size	.L__unnamed_135, 4

	.type	"PinFlag-62.",@object   # @PinFlag-62.
	.bss
	.globl	"PinFlag-62."
	.align	4
"PinFlag-62.":
	.long	0                       # 0x0
	.size	"PinFlag-62.", 4

	.type	.L__unnamed_134,@object # @121
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_134:
	.asciz	"62."
	.size	.L__unnamed_134, 4

	.type	"PinFlag-63.0",@object  # @PinFlag-63.0
	.bss
	.globl	"PinFlag-63.0"
	.align	4
"PinFlag-63.0":
	.long	0                       # 0x0
	.size	"PinFlag-63.0", 4

	.type	.L__unnamed_132,@object # @122
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_132:
	.asciz	"63.0"
	.size	.L__unnamed_132, 5

	.type	"PinFlag-63.1",@object  # @PinFlag-63.1
	.bss
	.globl	"PinFlag-63.1"
	.align	4
"PinFlag-63.1":
	.long	0                       # 0x0
	.size	"PinFlag-63.1", 4

	.type	.L__unnamed_133,@object # @123
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_133:
	.asciz	"63.1"
	.size	.L__unnamed_133, 5

	.type	"PinFlag-63.",@object   # @PinFlag-63.
	.bss
	.globl	"PinFlag-63."
	.align	4
"PinFlag-63.":
	.long	0                       # 0x0
	.size	"PinFlag-63.", 4

	.type	.L__unnamed_131,@object # @124
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_131:
	.asciz	"63."
	.size	.L__unnamed_131, 4

	.type	"PinFlag-67.",@object   # @PinFlag-67.
	.bss
	.globl	"PinFlag-67."
	.align	4
"PinFlag-67.":
	.long	0                       # 0x0
	.size	"PinFlag-67.", 4

	.type	.L__unnamed_130,@object # @125
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_130:
	.asciz	"67."
	.size	.L__unnamed_130, 4

	.type	"PinFlag-68.",@object   # @PinFlag-68.
	.bss
	.globl	"PinFlag-68."
	.align	4
"PinFlag-68.":
	.long	0                       # 0x0
	.size	"PinFlag-68.", 4

	.type	.L__unnamed_129,@object # @126
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_129:
	.asciz	"68."
	.size	.L__unnamed_129, 4

	.type	"PinFlag-69.",@object   # @PinFlag-69.
	.bss
	.globl	"PinFlag-69."
	.align	4
"PinFlag-69.":
	.long	0                       # 0x0
	.size	"PinFlag-69.", 4

	.type	.L__unnamed_128,@object # @127
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_128:
	.asciz	"69."
	.size	.L__unnamed_128, 4

	.type	"PinFlag-70.",@object   # @PinFlag-70.
	.bss
	.globl	"PinFlag-70."
	.align	4
"PinFlag-70.":
	.long	0                       # 0x0
	.size	"PinFlag-70.", 4

	.type	.L__unnamed_127,@object # @128
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_127:
	.asciz	"70."
	.size	.L__unnamed_127, 4

	.type	"PinFlag-71.",@object   # @PinFlag-71.
	.bss
	.globl	"PinFlag-71."
	.align	4
"PinFlag-71.":
	.long	0                       # 0x0
	.size	"PinFlag-71.", 4

	.type	.L__unnamed_126,@object # @129
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_126:
	.asciz	"71."
	.size	.L__unnamed_126, 4

	.type	"PinFlag-72.",@object   # @PinFlag-72.
	.bss
	.globl	"PinFlag-72."
	.align	4
"PinFlag-72.":
	.long	0                       # 0x0
	.size	"PinFlag-72.", 4

	.type	.L__unnamed_125,@object # @130
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_125:
	.asciz	"72."
	.size	.L__unnamed_125, 4

	.type	"PinFlag-73.",@object   # @PinFlag-73.
	.bss
	.globl	"PinFlag-73."
	.align	4
"PinFlag-73.":
	.long	0                       # 0x0
	.size	"PinFlag-73.", 4

	.type	.L__unnamed_124,@object # @131
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_124:
	.asciz	"73."
	.size	.L__unnamed_124, 4

	.type	"PinFlag-74.",@object   # @PinFlag-74.
	.bss
	.globl	"PinFlag-74."
	.align	4
"PinFlag-74.":
	.long	0                       # 0x0
	.size	"PinFlag-74.", 4

	.type	.L__unnamed_123,@object # @132
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_123:
	.asciz	"74."
	.size	.L__unnamed_123, 4

	.type	"PinFlag-75.",@object   # @PinFlag-75.
	.bss
	.globl	"PinFlag-75."
	.align	4
"PinFlag-75.":
	.long	0                       # 0x0
	.size	"PinFlag-75.", 4

	.type	.L__unnamed_122,@object # @133
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_122:
	.asciz	"75."
	.size	.L__unnamed_122, 4

	.type	"PinFlag-76.",@object   # @PinFlag-76.
	.bss
	.globl	"PinFlag-76."
	.align	4
"PinFlag-76.":
	.long	0                       # 0x0
	.size	"PinFlag-76.", 4

	.type	.L__unnamed_121,@object # @134
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_121:
	.asciz	"76."
	.size	.L__unnamed_121, 4

	.type	"PinFlag-77.",@object   # @PinFlag-77.
	.bss
	.globl	"PinFlag-77."
	.align	4
"PinFlag-77.":
	.long	0                       # 0x0
	.size	"PinFlag-77.", 4

	.type	.L__unnamed_120,@object # @135
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_120:
	.asciz	"77."
	.size	.L__unnamed_120, 4

	.type	"PinFlag-78.",@object   # @PinFlag-78.
	.bss
	.globl	"PinFlag-78."
	.align	4
"PinFlag-78.":
	.long	0                       # 0x0
	.size	"PinFlag-78.", 4

	.type	.L__unnamed_145,@object # @136
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_145:
	.asciz	"78."
	.size	.L__unnamed_145, 4

	.type	"PinFlag-79.",@object   # @PinFlag-79.
	.bss
	.globl	"PinFlag-79."
	.align	4
"PinFlag-79.":
	.long	0                       # 0x0
	.size	"PinFlag-79.", 4

	.type	.L__unnamed_144,@object # @137
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_144:
	.asciz	"79."
	.size	.L__unnamed_144, 4

	.type	"PinFlag-80.",@object   # @PinFlag-80.
	.bss
	.globl	"PinFlag-80."
	.align	4
"PinFlag-80.":
	.long	0                       # 0x0
	.size	"PinFlag-80.", 4

	.type	.L__unnamed_143,@object # @138
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_143:
	.asciz	"80."
	.size	.L__unnamed_143, 4

	.type	"PinFlag-81.",@object   # @PinFlag-81.
	.bss
	.globl	"PinFlag-81."
	.align	4
"PinFlag-81.":
	.long	0                       # 0x0
	.size	"PinFlag-81.", 4

	.type	.L__unnamed_142,@object # @139
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_142:
	.asciz	"81."
	.size	.L__unnamed_142, 4

	.type	"PinFlag-82.00",@object # @PinFlag-82.00
	.bss
	.globl	"PinFlag-82.00"
	.align	4
"PinFlag-82.00":
	.long	0                       # 0x0
	.size	"PinFlag-82.00", 4

	.type	.L__unnamed_185,@object # @140
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_185:
	.asciz	"82.00"
	.size	.L__unnamed_185, 6

	.type	"PinFlag-82.0",@object  # @PinFlag-82.0
	.bss
	.globl	"PinFlag-82.0"
	.align	4
"PinFlag-82.0":
	.long	0                       # 0x0
	.size	"PinFlag-82.0", 4

	.type	.L__unnamed_184,@object # @141
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_184:
	.asciz	"82.0"
	.size	.L__unnamed_184, 5

	.type	"PinFlag-82.1",@object  # @PinFlag-82.1
	.bss
	.globl	"PinFlag-82.1"
	.align	4
"PinFlag-82.1":
	.long	0                       # 0x0
	.size	"PinFlag-82.1", 4

	.type	.L__unnamed_183,@object # @142
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_183:
	.asciz	"82.1"
	.size	.L__unnamed_183, 5

	.type	"PinFlag-82.2",@object  # @PinFlag-82.2
	.bss
	.globl	"PinFlag-82.2"
	.align	4
"PinFlag-82.2":
	.long	0                       # 0x0
	.size	"PinFlag-82.2", 4

	.type	.L__unnamed_186,@object # @143
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_186:
	.asciz	"82.2"
	.size	.L__unnamed_186, 5

	.type	"PinFlag-82.3",@object  # @PinFlag-82.3
	.bss
	.globl	"PinFlag-82.3"
	.align	4
"PinFlag-82.3":
	.long	0                       # 0x0
	.size	"PinFlag-82.3", 4

	.type	.L__unnamed_187,@object # @144
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_187:
	.asciz	"82.3"
	.size	.L__unnamed_187, 5

	.type	"PinFlag-82.4",@object  # @PinFlag-82.4
	.bss
	.globl	"PinFlag-82.4"
	.align	4
"PinFlag-82.4":
	.long	0                       # 0x0
	.size	"PinFlag-82.4", 4

	.type	.L__unnamed_188,@object # @145
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_188:
	.asciz	"82.4"
	.size	.L__unnamed_188, 5

	.type	"PinFlag-82.5",@object  # @PinFlag-82.5
	.bss
	.globl	"PinFlag-82.5"
	.align	4
"PinFlag-82.5":
	.long	0                       # 0x0
	.size	"PinFlag-82.5", 4

	.type	.L__unnamed_189,@object # @146
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_189:
	.asciz	"82.5"
	.size	.L__unnamed_189, 5

	.type	"PinFlag-82.6",@object  # @PinFlag-82.6
	.bss
	.globl	"PinFlag-82.6"
	.align	4
"PinFlag-82.6":
	.long	0                       # 0x0
	.size	"PinFlag-82.6", 4

	.type	.L__unnamed_190,@object # @147
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_190:
	.asciz	"82.6"
	.size	.L__unnamed_190, 5

	.type	"PinFlag-82.7",@object  # @PinFlag-82.7
	.bss
	.globl	"PinFlag-82.7"
	.align	4
"PinFlag-82.7":
	.long	0                       # 0x0
	.size	"PinFlag-82.7", 4

	.type	.L__unnamed_191,@object # @148
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_191:
	.asciz	"82.7"
	.size	.L__unnamed_191, 5

	.type	"PinFlag-82.8",@object  # @PinFlag-82.8
	.bss
	.globl	"PinFlag-82.8"
	.align	4
"PinFlag-82.8":
	.long	0                       # 0x0
	.size	"PinFlag-82.8", 4

	.type	.L__unnamed_192,@object # @149
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_192:
	.asciz	"82.8"
	.size	.L__unnamed_192, 5

	.type	"PinFlag-82.9",@object  # @PinFlag-82.9
	.bss
	.globl	"PinFlag-82.9"
	.align	4
"PinFlag-82.9":
	.long	0                       # 0x0
	.size	"PinFlag-82.9", 4

	.type	.L__unnamed_193,@object # @150
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_193:
	.asciz	"82.9"
	.size	.L__unnamed_193, 5

	.type	"PinFlag-82.10",@object # @PinFlag-82.10
	.bss
	.globl	"PinFlag-82.10"
	.align	4
"PinFlag-82.10":
	.long	0                       # 0x0
	.size	"PinFlag-82.10", 4

	.type	.L__unnamed_194,@object # @151
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_194:
	.asciz	"82.10"
	.size	.L__unnamed_194, 6

	.type	"PinFlag-82.",@object   # @PinFlag-82.
	.bss
	.globl	"PinFlag-82."
	.align	4
"PinFlag-82.":
	.long	0                       # 0x0
	.size	"PinFlag-82.", 4

	.type	.L__unnamed_182,@object # @152
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_182:
	.asciz	"82."
	.size	.L__unnamed_182, 4

	.type	"PinFlag-83.00",@object # @PinFlag-83.00
	.bss
	.globl	"PinFlag-83.00"
	.align	4
"PinFlag-83.00":
	.long	0                       # 0x0
	.size	"PinFlag-83.00", 4

	.type	.L__unnamed_179,@object # @153
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_179:
	.asciz	"83.00"
	.size	.L__unnamed_179, 6

	.type	"PinFlag-83.01",@object # @PinFlag-83.01
	.bss
	.globl	"PinFlag-83.01"
	.align	4
"PinFlag-83.01":
	.long	0                       # 0x0
	.size	"PinFlag-83.01", 4

	.type	.L__unnamed_180,@object # @154
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_180:
	.asciz	"83.01"
	.size	.L__unnamed_180, 6

	.type	"PinFlag-83.0",@object  # @PinFlag-83.0
	.bss
	.globl	"PinFlag-83.0"
	.align	4
"PinFlag-83.0":
	.long	0                       # 0x0
	.size	"PinFlag-83.0", 4

	.type	.L__unnamed_178,@object # @155
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_178:
	.asciz	"83.0"
	.size	.L__unnamed_178, 5

	.type	"PinFlag-83.",@object   # @PinFlag-83.
	.bss
	.globl	"PinFlag-83."
	.align	4
"PinFlag-83.":
	.long	0                       # 0x0
	.size	"PinFlag-83.", 4

	.type	.L__unnamed_177,@object # @156
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_177:
	.asciz	"83."
	.size	.L__unnamed_177, 4

	.type	"PinFlag-85.0",@object  # @PinFlag-85.0
	.bss
	.globl	"PinFlag-85.0"
	.align	4
"PinFlag-85.0":
	.long	0                       # 0x0
	.size	"PinFlag-85.0", 4

	.type	.L__unnamed_176,@object # @157
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_176:
	.asciz	"85.0"
	.size	.L__unnamed_176, 5

	.type	"PinFlag-85.",@object   # @PinFlag-85.
	.bss
	.globl	"PinFlag-85."
	.align	4
"PinFlag-85.":
	.long	0                       # 0x0
	.size	"PinFlag-85.", 4

	.type	.L__unnamed_175,@object # @158
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_175:
	.asciz	"85."
	.size	.L__unnamed_175, 4

	.type	"PinFlag-87.0",@object  # @PinFlag-87.0
	.bss
	.globl	"PinFlag-87.0"
	.align	4
"PinFlag-87.0":
	.long	0                       # 0x0
	.size	"PinFlag-87.0", 4

	.type	.L__unnamed_174,@object # @159
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_174:
	.asciz	"87.0"
	.size	.L__unnamed_174, 5

	.type	"PinFlag-87.",@object   # @PinFlag-87.
	.bss
	.globl	"PinFlag-87."
	.align	4
"PinFlag-87.":
	.long	0                       # 0x0
	.size	"PinFlag-87.", 4

	.type	.L__unnamed_173,@object # @160
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_173:
	.asciz	"87."
	.size	.L__unnamed_173, 4

	.type	"PinFlag-88.",@object   # @PinFlag-88.
	.bss
	.globl	"PinFlag-88."
	.align	4
"PinFlag-88.":
	.long	0                       # 0x0
	.size	"PinFlag-88.", 4

	.type	.L__unnamed_172,@object # @161
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_172:
	.asciz	"88."
	.size	.L__unnamed_172, 4

	.type	"PinFlag-89.0",@object  # @PinFlag-89.0
	.bss
	.globl	"PinFlag-89.0"
	.align	4
"PinFlag-89.0":
	.long	0                       # 0x0
	.size	"PinFlag-89.0", 4

	.type	.L__unnamed_169,@object # @162
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_169:
	.asciz	"89.0"
	.size	.L__unnamed_169, 5

	.type	"PinFlag-89.1",@object  # @PinFlag-89.1
	.bss
	.globl	"PinFlag-89.1"
	.align	4
"PinFlag-89.1":
	.long	0                       # 0x0
	.size	"PinFlag-89.1", 4

	.type	.L__unnamed_170,@object # @163
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_170:
	.asciz	"89.1"
	.size	.L__unnamed_170, 5

	.type	"PinFlag-89.",@object   # @PinFlag-89.
	.bss
	.globl	"PinFlag-89."
	.align	4
"PinFlag-89.":
	.long	0                       # 0x0
	.size	"PinFlag-89.", 4

	.type	.L__unnamed_168,@object # @164
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_168:
	.asciz	"89."
	.size	.L__unnamed_168, 4

	.type	"PinFlag-91.0",@object  # @PinFlag-91.0
	.bss
	.globl	"PinFlag-91.0"
	.align	4
"PinFlag-91.0":
	.long	0                       # 0x0
	.size	"PinFlag-91.0", 4

	.type	.L__unnamed_166,@object # @165
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_166:
	.asciz	"91.0"
	.size	.L__unnamed_166, 5

	.type	"PinFlag-91.1",@object  # @PinFlag-91.1
	.bss
	.globl	"PinFlag-91.1"
	.align	4
"PinFlag-91.1":
	.long	0                       # 0x0
	.size	"PinFlag-91.1", 4

	.type	.L__unnamed_167,@object # @166
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_167:
	.asciz	"91.1"
	.size	.L__unnamed_167, 5

	.type	"PinFlag-91.",@object   # @PinFlag-91.
	.bss
	.globl	"PinFlag-91."
	.align	4
"PinFlag-91.":
	.long	0                       # 0x0
	.size	"PinFlag-91.", 4

	.type	.L__unnamed_165,@object # @167
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_165:
	.asciz	"91."
	.size	.L__unnamed_165, 4

	.type	"PinFlag-92.",@object   # @PinFlag-92.
	.bss
	.globl	"PinFlag-92."
	.align	4
"PinFlag-92.":
	.long	0                       # 0x0
	.size	"PinFlag-92.", 4

	.type	.L__unnamed_164,@object # @168
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_164:
	.asciz	"92."
	.size	.L__unnamed_164, 4

	.type	"PinFlag-95.0",@object  # @PinFlag-95.0
	.bss
	.globl	"PinFlag-95.0"
	.align	4
"PinFlag-95.0":
	.long	0                       # 0x0
	.size	"PinFlag-95.0", 4

	.type	.L__unnamed_154,@object # @169
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_154:
	.asciz	"95.0"
	.size	.L__unnamed_154, 5

	.type	"PinFlag-95.1",@object  # @PinFlag-95.1
	.bss
	.globl	"PinFlag-95.1"
	.align	4
"PinFlag-95.1":
	.long	0                       # 0x0
	.size	"PinFlag-95.1", 4

	.type	.L__unnamed_155,@object # @170
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_155:
	.asciz	"95.1"
	.size	.L__unnamed_155, 5

	.type	"PinFlag-95.20",@object # @PinFlag-95.20
	.bss
	.globl	"PinFlag-95.20"
	.align	4
"PinFlag-95.20":
	.long	0                       # 0x0
	.size	"PinFlag-95.20", 4

	.type	.L__unnamed_157,@object # @171
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_157:
	.asciz	"95.20"
	.size	.L__unnamed_157, 6

	.type	"PinFlag-95.210",@object # @PinFlag-95.210
	.bss
	.globl	"PinFlag-95.210"
	.align	4
"PinFlag-95.210":
	.long	0                       # 0x0
	.size	"PinFlag-95.210", 4

	.type	.L__unnamed_159,@object # @172
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_159:
	.asciz	"95.210"
	.size	.L__unnamed_159, 7

	.type	"PinFlag-95.211",@object # @PinFlag-95.211
	.bss
	.globl	"PinFlag-95.211"
	.align	4
"PinFlag-95.211":
	.long	0                       # 0x0
	.size	"PinFlag-95.211", 4

	.type	.L__unnamed_160,@object # @173
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_160:
	.asciz	"95.211"
	.size	.L__unnamed_160, 7

	.type	"PinFlag-95.21",@object # @PinFlag-95.21
	.bss
	.globl	"PinFlag-95.21"
	.align	4
"PinFlag-95.21":
	.long	0                       # 0x0
	.size	"PinFlag-95.21", 4

	.type	.L__unnamed_158,@object # @174
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_158:
	.asciz	"95.21"
	.size	.L__unnamed_158, 6

	.type	"PinFlag-95.22",@object # @PinFlag-95.22
	.bss
	.globl	"PinFlag-95.22"
	.align	4
"PinFlag-95.22":
	.long	0                       # 0x0
	.size	"PinFlag-95.22", 4

	.type	.L__unnamed_161,@object # @175
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_161:
	.asciz	"95.22"
	.size	.L__unnamed_161, 6

	.type	"PinFlag-95.23",@object # @PinFlag-95.23
	.bss
	.globl	"PinFlag-95.23"
	.align	4
"PinFlag-95.23":
	.long	0                       # 0x0
	.size	"PinFlag-95.23", 4

	.type	.L__unnamed_162,@object # @176
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_162:
	.asciz	"95.23"
	.size	.L__unnamed_162, 6

	.type	"PinFlag-95.2",@object  # @PinFlag-95.2
	.bss
	.globl	"PinFlag-95.2"
	.align	4
"PinFlag-95.2":
	.long	0                       # 0x0
	.size	"PinFlag-95.2", 4

	.type	.L__unnamed_156,@object # @177
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_156:
	.asciz	"95.2"
	.size	.L__unnamed_156, 5

	.type	"PinFlag-95.3",@object  # @PinFlag-95.3
	.bss
	.globl	"PinFlag-95.3"
	.align	4
"PinFlag-95.3":
	.long	0                       # 0x0
	.size	"PinFlag-95.3", 4

	.type	.L__unnamed_153,@object # @178
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_153:
	.asciz	"95.3"
	.size	.L__unnamed_153, 5

	.type	"PinFlag-95.4",@object  # @PinFlag-95.4
	.bss
	.globl	"PinFlag-95.4"
	.align	4
"PinFlag-95.4":
	.long	0                       # 0x0
	.size	"PinFlag-95.4", 4

	.type	.L__unnamed_163,@object # @179
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_163:
	.asciz	"95.4"
	.size	.L__unnamed_163, 5

	.type	"PinFlag-95.",@object   # @PinFlag-95.
	.bss
	.globl	"PinFlag-95."
	.align	4
"PinFlag-95.":
	.long	0                       # 0x0
	.size	"PinFlag-95.", 4

	.type	.L__unnamed_152,@object # @180
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_152:
	.asciz	"95."
	.size	.L__unnamed_152, 4

	.type	"PinFlag-96.0",@object  # @PinFlag-96.0
	.bss
	.globl	"PinFlag-96.0"
	.align	4
"PinFlag-96.0":
	.long	0                       # 0x0
	.size	"PinFlag-96.0", 4

	.type	.L__unnamed_147,@object # @181
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_147:
	.asciz	"96.0"
	.size	.L__unnamed_147, 5

	.type	"PinFlag-96.1",@object  # @PinFlag-96.1
	.bss
	.globl	"PinFlag-96.1"
	.align	4
"PinFlag-96.1":
	.long	0                       # 0x0
	.size	"PinFlag-96.1", 4

	.type	.L__unnamed_148,@object # @182
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_148:
	.asciz	"96.1"
	.size	.L__unnamed_148, 5

	.type	"PinFlag-96.2",@object  # @PinFlag-96.2
	.bss
	.globl	"PinFlag-96.2"
	.align	4
"PinFlag-96.2":
	.long	0                       # 0x0
	.size	"PinFlag-96.2", 4

	.type	.L__unnamed_149,@object # @183
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_149:
	.asciz	"96.2"
	.size	.L__unnamed_149, 5

	.type	"PinFlag-96.",@object   # @PinFlag-96.
	.bss
	.globl	"PinFlag-96."
	.align	4
"PinFlag-96.":
	.long	0                       # 0x0
	.size	"PinFlag-96.", 4

	.type	.L__unnamed_146,@object # @184
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_146:
	.asciz	"96."
	.size	.L__unnamed_146, 4

	.type	"PinFlag-97.0",@object  # @PinFlag-97.0
	.bss
	.globl	"PinFlag-97.0"
	.align	4
"PinFlag-97.0":
	.long	0                       # 0x0
	.size	"PinFlag-97.0", 4

	.type	.L__unnamed_151,@object # @185
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_151:
	.asciz	"97.0"
	.size	.L__unnamed_151, 5

	.type	"PinFlag-97.",@object   # @PinFlag-97.
	.bss
	.globl	"PinFlag-97."
	.align	4
"PinFlag-97.":
	.long	0                       # 0x0
	.size	"PinFlag-97.", 4

	.type	.L__unnamed_150,@object # @186
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_150:
	.asciz	"97."
	.size	.L__unnamed_150, 4

	.type	"PinFlag-98.",@object   # @PinFlag-98.
	.bss
	.globl	"PinFlag-98."
	.align	4
"PinFlag-98.":
	.long	0                       # 0x0
	.size	"PinFlag-98.", 4

	.type	.L__unnamed_195,@object # @187
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_195:
	.asciz	"98."
	.size	.L__unnamed_195, 4

	.type	"PinFlag-99.",@object   # @PinFlag-99.
	.bss
	.globl	"PinFlag-99."
	.align	4
"PinFlag-99.":
	.long	0                       # 0x0
	.size	"PinFlag-99.", 4

	.type	.L__unnamed_223,@object # @188
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_223:
	.asciz	"99."
	.size	.L__unnamed_223, 4

	.type	"PinFlag-100.",@object  # @PinFlag-100.
	.bss
	.globl	"PinFlag-100."
	.align	4
"PinFlag-100.":
	.long	0                       # 0x0
	.size	"PinFlag-100.", 4

	.type	.L__unnamed_222,@object # @189
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_222:
	.asciz	"100."
	.size	.L__unnamed_222, 5

	.type	"PinFlag-101.",@object  # @PinFlag-101.
	.bss
	.globl	"PinFlag-101."
	.align	4
"PinFlag-101.":
	.long	0                       # 0x0
	.size	"PinFlag-101.", 4

	.type	.L__unnamed_221,@object # @190
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_221:
	.asciz	"101."
	.size	.L__unnamed_221, 5

	.type	"PinFlag-102.",@object  # @PinFlag-102.
	.bss
	.globl	"PinFlag-102."
	.align	4
"PinFlag-102.":
	.long	0                       # 0x0
	.size	"PinFlag-102.", 4

	.type	.L__unnamed_220,@object # @191
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_220:
	.asciz	"102."
	.size	.L__unnamed_220, 5

	.type	"PinFlag-103.",@object  # @PinFlag-103.
	.bss
	.globl	"PinFlag-103."
	.align	4
"PinFlag-103.":
	.long	0                       # 0x0
	.size	"PinFlag-103.", 4

	.type	.L__unnamed_219,@object # @192
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_219:
	.asciz	"103."
	.size	.L__unnamed_219, 5

	.type	"PinFlag-104.",@object  # @PinFlag-104.
	.bss
	.globl	"PinFlag-104."
	.align	4
"PinFlag-104.":
	.long	0                       # 0x0
	.size	"PinFlag-104.", 4

	.type	.L__unnamed_218,@object # @193
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_218:
	.asciz	"104."
	.size	.L__unnamed_218, 5

	.type	"PinFlag-105.",@object  # @PinFlag-105.
	.bss
	.globl	"PinFlag-105."
	.align	4
"PinFlag-105.":
	.long	0                       # 0x0
	.size	"PinFlag-105.", 4

	.type	.L__unnamed_217,@object # @194
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_217:
	.asciz	"105."
	.size	.L__unnamed_217, 5

	.type	"PinFlag-106.",@object  # @PinFlag-106.
	.bss
	.globl	"PinFlag-106."
	.align	4
"PinFlag-106.":
	.long	0                       # 0x0
	.size	"PinFlag-106.", 4

	.type	.L__unnamed_216,@object # @195
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_216:
	.asciz	"106."
	.size	.L__unnamed_216, 5

	.type	"PinFlag-107.",@object  # @PinFlag-107.
	.bss
	.globl	"PinFlag-107."
	.align	4
"PinFlag-107.":
	.long	0                       # 0x0
	.size	"PinFlag-107.", 4

	.type	.L__unnamed_215,@object # @196
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_215:
	.asciz	"107."
	.size	.L__unnamed_215, 5

	.type	"PinFlag-108.",@object  # @PinFlag-108.
	.bss
	.globl	"PinFlag-108."
	.align	4
"PinFlag-108.":
	.long	0                       # 0x0
	.size	"PinFlag-108.", 4

	.type	.L__unnamed_224,@object # @197
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_224:
	.asciz	"108."
	.size	.L__unnamed_224, 5

	.type	"PinFlag-109.",@object  # @PinFlag-109.
	.bss
	.globl	"PinFlag-109."
	.align	4
"PinFlag-109.":
	.long	0                       # 0x0
	.size	"PinFlag-109.", 4

	.type	.L__unnamed_227,@object # @198
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_227:
	.asciz	"109."
	.size	.L__unnamed_227, 5

	.type	"PinFlag-110.0",@object # @PinFlag-110.0
	.bss
	.globl	"PinFlag-110.0"
	.align	4
"PinFlag-110.0":
	.long	0                       # 0x0
	.size	"PinFlag-110.0", 4

	.type	.L__unnamed_229,@object # @199
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_229:
	.asciz	"110.0"
	.size	.L__unnamed_229, 6

	.type	"PinFlag-110.",@object  # @PinFlag-110.
	.bss
	.globl	"PinFlag-110."
	.align	4
"PinFlag-110.":
	.long	0                       # 0x0
	.size	"PinFlag-110.", 4

	.type	.L__unnamed_228,@object # @200
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_228:
	.asciz	"110."
	.size	.L__unnamed_228, 5

	.type	"PinFlag-111.",@object  # @PinFlag-111.
	.bss
	.globl	"PinFlag-111."
	.align	4
"PinFlag-111.":
	.long	0                       # 0x0
	.size	"PinFlag-111.", 4

	.type	.L__unnamed_240,@object # @201
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_240:
	.asciz	"111."
	.size	.L__unnamed_240, 5

	.type	"PinFlag-112.",@object  # @PinFlag-112.
	.bss
	.globl	"PinFlag-112."
	.align	4
"PinFlag-112.":
	.long	0                       # 0x0
	.size	"PinFlag-112.", 4

	.type	.L__unnamed_239,@object # @202
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_239:
	.asciz	"112."
	.size	.L__unnamed_239, 5

	.type	"PinFlag-113.",@object  # @PinFlag-113.
	.bss
	.globl	"PinFlag-113."
	.align	4
"PinFlag-113.":
	.long	0                       # 0x0
	.size	"PinFlag-113.", 4

	.type	.L__unnamed_233,@object # @203
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_233:
	.asciz	"113."
	.size	.L__unnamed_233, 5

	.type	"PinFlag-114.",@object  # @PinFlag-114.
	.bss
	.globl	"PinFlag-114."
	.align	4
"PinFlag-114.":
	.long	0                       # 0x0
	.size	"PinFlag-114.", 4

	.type	.L__unnamed_241,@object # @204
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_241:
	.asciz	"114."
	.size	.L__unnamed_241, 5

	.type	"PinFlag-115.",@object  # @PinFlag-115.
	.bss
	.globl	"PinFlag-115."
	.align	4
"PinFlag-115.":
	.long	0                       # 0x0
	.size	"PinFlag-115.", 4

	.type	.L__unnamed_248,@object # @205
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_248:
	.asciz	"115."
	.size	.L__unnamed_248, 5

	.type	"PinFlag-116.",@object  # @PinFlag-116.
	.bss
	.globl	"PinFlag-116."
	.align	4
"PinFlag-116.":
	.long	0                       # 0x0
	.size	"PinFlag-116.", 4

	.type	.L__unnamed_249,@object # @206
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_249:
	.asciz	"116."
	.size	.L__unnamed_249, 5

	.type	"PinFlag-117.",@object  # @PinFlag-117.
	.bss
	.globl	"PinFlag-117."
	.align	4
"PinFlag-117.":
	.long	0                       # 0x0
	.size	"PinFlag-117.", 4

	.type	.L__unnamed_243,@object # @207
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_243:
	.asciz	"117."
	.size	.L__unnamed_243, 5

	.type	"PinFlag-120.",@object  # @PinFlag-120.
	.bss
	.globl	"PinFlag-120."
	.align	4
"PinFlag-120.":
	.long	0                       # 0x0
	.size	"PinFlag-120.", 4

	.type	.L__unnamed_242,@object # @208
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_242:
	.asciz	"120."
	.size	.L__unnamed_242, 5

	.type	"PinFlag-122.",@object  # @PinFlag-122.
	.bss
	.globl	"PinFlag-122."
	.align	4
"PinFlag-122.":
	.long	0                       # 0x0
	.size	"PinFlag-122.", 4

	.type	.L__unnamed_254,@object # @209
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_254:
	.asciz	"122."
	.size	.L__unnamed_254, 5

	.type	"PinFlag-123.",@object  # @PinFlag-123.
	.bss
	.globl	"PinFlag-123."
	.align	4
"PinFlag-123.":
	.long	0                       # 0x0
	.size	"PinFlag-123.", 4

	.type	.L__unnamed_256,@object # @210
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_256:
	.asciz	"123."
	.size	.L__unnamed_256, 5

	.type	"PinFlag-124.",@object  # @PinFlag-124.
	.bss
	.globl	"PinFlag-124."
	.align	4
"PinFlag-124.":
	.long	0                       # 0x0
	.size	"PinFlag-124.", 4

	.type	.L__unnamed_255,@object # @211
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_255:
	.asciz	"124."
	.size	.L__unnamed_255, 5

	.type	"PinFlag-125.",@object  # @PinFlag-125.
	.bss
	.globl	"PinFlag-125."
	.align	4
"PinFlag-125.":
	.long	0                       # 0x0
	.size	"PinFlag-125.", 4

	.type	.L__unnamed_253,@object # @212
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_253:
	.asciz	"125."
	.size	.L__unnamed_253, 5

	.type	"PinFlag-126.",@object  # @PinFlag-126.
	.bss
	.globl	"PinFlag-126."
	.align	4
"PinFlag-126.":
	.long	0                       # 0x0
	.size	"PinFlag-126.", 4

	.type	.L__unnamed_257,@object # @213
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_257:
	.asciz	"126."
	.size	.L__unnamed_257, 5

	.type	"PinFlag-127.",@object  # @PinFlag-127.
	.bss
	.globl	"PinFlag-127."
	.align	4
"PinFlag-127.":
	.long	0                       # 0x0
	.size	"PinFlag-127.", 4

	.type	.L__unnamed_252,@object # @214
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_252:
	.asciz	"127."
	.size	.L__unnamed_252, 5

	.type	"PinFlag-128.",@object  # @PinFlag-128.
	.bss
	.globl	"PinFlag-128."
	.align	4
"PinFlag-128.":
	.long	0                       # 0x0
	.size	"PinFlag-128.", 4

	.type	.L__unnamed_246,@object # @215
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_246:
	.asciz	"128."
	.size	.L__unnamed_246, 5

	.type	"PinFlag-129.",@object  # @PinFlag-129.
	.bss
	.globl	"PinFlag-129."
	.align	4
"PinFlag-129.":
	.long	0                       # 0x0
	.size	"PinFlag-129.", 4

	.type	.L__unnamed_245,@object # @216
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_245:
	.asciz	"129."
	.size	.L__unnamed_245, 5

	.type	"PinFlag-130.",@object  # @PinFlag-130.
	.bss
	.globl	"PinFlag-130."
	.align	4
"PinFlag-130.":
	.long	0                       # 0x0
	.size	"PinFlag-130.", 4

	.type	.L__unnamed_244,@object # @217
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_244:
	.asciz	"130."
	.size	.L__unnamed_244, 5

	.type	"PinFlag-131.",@object  # @PinFlag-131.
	.bss
	.globl	"PinFlag-131."
	.align	4
"PinFlag-131.":
	.long	0                       # 0x0
	.size	"PinFlag-131.", 4

	.type	.L__unnamed_251,@object # @218
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_251:
	.asciz	"131."
	.size	.L__unnamed_251, 5

	.type	"PinFlag-132.",@object  # @PinFlag-132.
	.bss
	.globl	"PinFlag-132."
	.align	4
"PinFlag-132.":
	.long	0                       # 0x0
	.size	"PinFlag-132.", 4

	.type	.L__unnamed_250,@object # @219
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_250:
	.asciz	"132."
	.size	.L__unnamed_250, 5

	.type	"PinFlag-133.",@object  # @PinFlag-133.
	.bss
	.globl	"PinFlag-133."
	.align	4
"PinFlag-133.":
	.long	0                       # 0x0
	.size	"PinFlag-133.", 4

	.type	.L__unnamed_247,@object # @220
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_247:
	.asciz	"133."
	.size	.L__unnamed_247, 5

	.type	"PinFlag-134.",@object  # @PinFlag-134.
	.bss
	.globl	"PinFlag-134."
	.align	4
"PinFlag-134.":
	.long	0                       # 0x0
	.size	"PinFlag-134.", 4

	.type	.L__unnamed_238,@object # @221
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_238:
	.asciz	"134."
	.size	.L__unnamed_238, 5

	.type	"PinFlag-136.0",@object # @PinFlag-136.0
	.bss
	.globl	"PinFlag-136.0"
	.align	4
"PinFlag-136.0":
	.long	0                       # 0x0
	.size	"PinFlag-136.0", 4

	.type	.L__unnamed_235,@object # @222
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_235:
	.asciz	"136.0"
	.size	.L__unnamed_235, 6

	.type	"PinFlag-136.1",@object # @PinFlag-136.1
	.bss
	.globl	"PinFlag-136.1"
	.align	4
"PinFlag-136.1":
	.long	0                       # 0x0
	.size	"PinFlag-136.1", 4

	.type	.L__unnamed_236,@object # @223
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_236:
	.asciz	"136.1"
	.size	.L__unnamed_236, 6

	.type	"PinFlag-136.",@object  # @PinFlag-136.
	.bss
	.globl	"PinFlag-136."
	.align	4
"PinFlag-136.":
	.long	0                       # 0x0
	.size	"PinFlag-136.", 4

	.type	.L__unnamed_234,@object # @224
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_234:
	.asciz	"136."
	.size	.L__unnamed_234, 5

	.type	"PinFlag-138.0",@object # @PinFlag-138.0
	.bss
	.globl	"PinFlag-138.0"
	.align	4
"PinFlag-138.0":
	.long	0                       # 0x0
	.size	"PinFlag-138.0", 4

	.type	.L__unnamed_231,@object # @225
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_231:
	.asciz	"138.0"
	.size	.L__unnamed_231, 6

	.type	"PinFlag-138.1",@object # @PinFlag-138.1
	.bss
	.globl	"PinFlag-138.1"
	.align	4
"PinFlag-138.1":
	.long	0                       # 0x0
	.size	"PinFlag-138.1", 4

	.type	.L__unnamed_232,@object # @226
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_232:
	.asciz	"138.1"
	.size	.L__unnamed_232, 6

	.type	"PinFlag-138.",@object  # @PinFlag-138.
	.bss
	.globl	"PinFlag-138."
	.align	4
"PinFlag-138.":
	.long	0                       # 0x0
	.size	"PinFlag-138.", 4

	.type	.L__unnamed_230,@object # @227
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_230:
	.asciz	"138."
	.size	.L__unnamed_230, 5

	.type	"PinFlag-140.",@object  # @PinFlag-140.
	.bss
	.globl	"PinFlag-140."
	.align	4
"PinFlag-140.":
	.long	0                       # 0x0
	.size	"PinFlag-140.", 4

	.type	.L__unnamed_200,@object # @228
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_200:
	.asciz	"140."
	.size	.L__unnamed_200, 5

	.type	"PinFlag-141.",@object  # @PinFlag-141.
	.bss
	.globl	"PinFlag-141."
	.align	4
"PinFlag-141.":
	.long	0                       # 0x0
	.size	"PinFlag-141.", 4

	.type	.L__unnamed_226,@object # @229
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_226:
	.asciz	"141."
	.size	.L__unnamed_226, 5

	.type	"PinFlag-142.",@object  # @PinFlag-142.
	.bss
	.globl	"PinFlag-142."
	.align	4
"PinFlag-142.":
	.long	0                       # 0x0
	.size	"PinFlag-142.", 4

	.type	.L__unnamed_225,@object # @230
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_225:
	.asciz	"142."
	.size	.L__unnamed_225, 5

	.type	"PinFlag-143.",@object  # @PinFlag-143.
	.bss
	.globl	"PinFlag-143."
	.align	4
"PinFlag-143.":
	.long	0                       # 0x0
	.size	"PinFlag-143.", 4

	.type	.L__unnamed_214,@object # @231
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_214:
	.asciz	"143."
	.size	.L__unnamed_214, 5

	.type	"PinFlag-144.",@object  # @PinFlag-144.
	.bss
	.globl	"PinFlag-144."
	.align	4
"PinFlag-144.":
	.long	0                       # 0x0
	.size	"PinFlag-144.", 4

	.type	.L__unnamed_213,@object # @232
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_213:
	.asciz	"144."
	.size	.L__unnamed_213, 5

	.type	"PinFlag-145.",@object  # @PinFlag-145.
	.bss
	.globl	"PinFlag-145."
	.align	4
"PinFlag-145.":
	.long	0                       # 0x0
	.size	"PinFlag-145.", 4

	.type	.L__unnamed_212,@object # @233
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_212:
	.asciz	"145."
	.size	.L__unnamed_212, 5

	.type	"PinFlag-146.",@object  # @PinFlag-146.
	.bss
	.globl	"PinFlag-146."
	.align	4
"PinFlag-146.":
	.long	0                       # 0x0
	.size	"PinFlag-146.", 4

	.type	.L__unnamed_211,@object # @234
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_211:
	.asciz	"146."
	.size	.L__unnamed_211, 5

	.type	"PinFlag-147.",@object  # @PinFlag-147.
	.bss
	.globl	"PinFlag-147."
	.align	4
"PinFlag-147.":
	.long	0                       # 0x0
	.size	"PinFlag-147.", 4

	.type	.L__unnamed_210,@object # @235
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_210:
	.asciz	"147."
	.size	.L__unnamed_210, 5

	.type	"PinFlag-148.",@object  # @PinFlag-148.
	.bss
	.globl	"PinFlag-148."
	.align	4
"PinFlag-148.":
	.long	0                       # 0x0
	.size	"PinFlag-148.", 4

	.type	.L__unnamed_209,@object # @236
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_209:
	.asciz	"148."
	.size	.L__unnamed_209, 5

	.type	"PinFlag-149.",@object  # @PinFlag-149.
	.bss
	.globl	"PinFlag-149."
	.align	4
"PinFlag-149.":
	.long	0                       # 0x0
	.size	"PinFlag-149.", 4

	.type	.L__unnamed_208,@object # @237
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_208:
	.asciz	"149."
	.size	.L__unnamed_208, 5

	.type	"PinFlag-150.",@object  # @PinFlag-150.
	.bss
	.globl	"PinFlag-150."
	.align	4
"PinFlag-150.":
	.long	0                       # 0x0
	.size	"PinFlag-150.", 4

	.type	.L__unnamed_207,@object # @238
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_207:
	.asciz	"150."
	.size	.L__unnamed_207, 5

	.type	"PinFlag-151.",@object  # @PinFlag-151.
	.bss
	.globl	"PinFlag-151."
	.align	4
"PinFlag-151.":
	.long	0                       # 0x0
	.size	"PinFlag-151.", 4

	.type	.L__unnamed_206,@object # @239
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_206:
	.asciz	"151."
	.size	.L__unnamed_206, 5

	.type	"PinFlag-152.",@object  # @PinFlag-152.
	.bss
	.globl	"PinFlag-152."
	.align	4
"PinFlag-152.":
	.long	0                       # 0x0
	.size	"PinFlag-152.", 4

	.type	.L__unnamed_205,@object # @240
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_205:
	.asciz	"152."
	.size	.L__unnamed_205, 5

	.type	"PinFlag-153.",@object  # @PinFlag-153.
	.bss
	.globl	"PinFlag-153."
	.align	4
"PinFlag-153.":
	.long	0                       # 0x0
	.size	"PinFlag-153.", 4

	.type	.L__unnamed_204,@object # @241
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_204:
	.asciz	"153."
	.size	.L__unnamed_204, 5

	.type	"PinFlag-154.",@object  # @PinFlag-154.
	.bss
	.globl	"PinFlag-154."
	.align	4
"PinFlag-154.":
	.long	0                       # 0x0
	.size	"PinFlag-154.", 4

	.type	.L__unnamed_203,@object # @242
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_203:
	.asciz	"154."
	.size	.L__unnamed_203, 5

	.type	"PinFlag-155.",@object  # @PinFlag-155.
	.bss
	.globl	"PinFlag-155."
	.align	4
"PinFlag-155.":
	.long	0                       # 0x0
	.size	"PinFlag-155.", 4

	.type	.L__unnamed_202,@object # @243
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_202:
	.asciz	"155."
	.size	.L__unnamed_202, 5

	.type	"PinFlag-156.",@object  # @PinFlag-156.
	.bss
	.globl	"PinFlag-156."
	.align	4
"PinFlag-156.":
	.long	0                       # 0x0
	.size	"PinFlag-156.", 4

	.type	.L__unnamed_201,@object # @244
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_201:
	.asciz	"156."
	.size	.L__unnamed_201, 5

	.type	"PinFlag-157.",@object  # @PinFlag-157.
	.bss
	.globl	"PinFlag-157."
	.align	4
"PinFlag-157.":
	.long	0                       # 0x0
	.size	"PinFlag-157.", 4

	.type	.L__unnamed_199,@object # @245
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_199:
	.asciz	"157."
	.size	.L__unnamed_199, 5

	.type	"PinFlag-158.",@object  # @PinFlag-158.
	.bss
	.globl	"PinFlag-158."
	.align	4
"PinFlag-158.":
	.long	0                       # 0x0
	.size	"PinFlag-158.", 4

	.type	.L__unnamed_198,@object # @246
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_198:
	.asciz	"158."
	.size	.L__unnamed_198, 5

	.type	"PinFlag-159.",@object  # @PinFlag-159.
	.bss
	.globl	"PinFlag-159."
	.align	4
"PinFlag-159.":
	.long	0                       # 0x0
	.size	"PinFlag-159.", 4

	.type	.L__unnamed_197,@object # @247
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_197:
	.asciz	"159."
	.size	.L__unnamed_197, 5

	.type	"PinFlag-160.",@object  # @PinFlag-160.
	.bss
	.globl	"PinFlag-160."
	.align	4
"PinFlag-160.":
	.long	0                       # 0x0
	.size	"PinFlag-160.", 4

	.type	.L__unnamed_196,@object # @248
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_196:
	.asciz	"160."
	.size	.L__unnamed_196, 5

	.type	"PinFlag-161.0",@object # @PinFlag-161.0
	.bss
	.globl	"PinFlag-161.0"
	.align	4
"PinFlag-161.0":
	.long	0                       # 0x0
	.size	"PinFlag-161.0", 4

	.type	.L__unnamed_259,@object # @249
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_259:
	.asciz	"161.0"
	.size	.L__unnamed_259, 6

	.type	"PinFlag-161.10",@object # @PinFlag-161.10
	.bss
	.globl	"PinFlag-161.10"
	.align	4
"PinFlag-161.10":
	.long	0                       # 0x0
	.size	"PinFlag-161.10", 4

	.type	.L__unnamed_261,@object # @250
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_261:
	.asciz	"161.10"
	.size	.L__unnamed_261, 7

	.type	"PinFlag-161.11",@object # @PinFlag-161.11
	.bss
	.globl	"PinFlag-161.11"
	.align	4
"PinFlag-161.11":
	.long	0                       # 0x0
	.size	"PinFlag-161.11", 4

	.type	.L__unnamed_262,@object # @251
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_262:
	.asciz	"161.11"
	.size	.L__unnamed_262, 7

	.type	"PinFlag-161.12",@object # @PinFlag-161.12
	.bss
	.globl	"PinFlag-161.12"
	.align	4
"PinFlag-161.12":
	.long	0                       # 0x0
	.size	"PinFlag-161.12", 4

	.type	.L__unnamed_263,@object # @252
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_263:
	.asciz	"161.12"
	.size	.L__unnamed_263, 7

	.type	"PinFlag-161.1",@object # @PinFlag-161.1
	.bss
	.globl	"PinFlag-161.1"
	.align	4
"PinFlag-161.1":
	.long	0                       # 0x0
	.size	"PinFlag-161.1", 4

	.type	.L__unnamed_260,@object # @253
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_260:
	.asciz	"161.1"
	.size	.L__unnamed_260, 6

	.type	"PinFlag-161.2",@object # @PinFlag-161.2
	.bss
	.globl	"PinFlag-161.2"
	.align	4
"PinFlag-161.2":
	.long	0                       # 0x0
	.size	"PinFlag-161.2", 4

	.type	.L__unnamed_264,@object # @254
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_264:
	.asciz	"161.2"
	.size	.L__unnamed_264, 6

	.type	"PinFlag-161.30",@object # @PinFlag-161.30
	.bss
	.globl	"PinFlag-161.30"
	.align	4
"PinFlag-161.30":
	.long	0                       # 0x0
	.size	"PinFlag-161.30", 4

	.type	.L__unnamed_266,@object # @255
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_266:
	.asciz	"161.30"
	.size	.L__unnamed_266, 7

	.type	"PinFlag-161.31",@object # @PinFlag-161.31
	.bss
	.globl	"PinFlag-161.31"
	.align	4
"PinFlag-161.31":
	.long	0                       # 0x0
	.size	"PinFlag-161.31", 4

	.type	.L__unnamed_267,@object # @256
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_267:
	.asciz	"161.31"
	.size	.L__unnamed_267, 7

	.type	"PinFlag-161.3",@object # @PinFlag-161.3
	.bss
	.globl	"PinFlag-161.3"
	.align	4
"PinFlag-161.3":
	.long	0                       # 0x0
	.size	"PinFlag-161.3", 4

	.type	.L__unnamed_265,@object # @257
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_265:
	.asciz	"161.3"
	.size	.L__unnamed_265, 6

	.type	"PinFlag-161.4",@object # @PinFlag-161.4
	.bss
	.globl	"PinFlag-161.4"
	.align	4
"PinFlag-161.4":
	.long	0                       # 0x0
	.size	"PinFlag-161.4", 4

	.type	.L__unnamed_268,@object # @258
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_268:
	.asciz	"161.4"
	.size	.L__unnamed_268, 6

	.type	"PinFlag-161.5",@object # @PinFlag-161.5
	.bss
	.globl	"PinFlag-161.5"
	.align	4
"PinFlag-161.5":
	.long	0                       # 0x0
	.size	"PinFlag-161.5", 4

	.type	.L__unnamed_269,@object # @259
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_269:
	.asciz	"161.5"
	.size	.L__unnamed_269, 6

	.type	"PinFlag-161.",@object  # @PinFlag-161.
	.bss
	.globl	"PinFlag-161."
	.align	4
"PinFlag-161.":
	.long	0                       # 0x0
	.size	"PinFlag-161.", 4

	.type	.L__unnamed_258,@object # @260
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_258:
	.asciz	"161."
	.size	.L__unnamed_258, 5

	.type	"PinFlag-164.0",@object # @PinFlag-164.0
	.bss
	.globl	"PinFlag-164.0"
	.align	4
"PinFlag-164.0":
	.long	0                       # 0x0
	.size	"PinFlag-164.0", 4

	.type	.L__unnamed_271,@object # @261
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_271:
	.asciz	"164.0"
	.size	.L__unnamed_271, 6

	.type	"PinFlag-164.",@object  # @PinFlag-164.
	.bss
	.globl	"PinFlag-164."
	.align	4
"PinFlag-164.":
	.long	0                       # 0x0
	.size	"PinFlag-164.", 4

	.type	.L__unnamed_270,@object # @262
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_270:
	.asciz	"164."
	.size	.L__unnamed_270, 5

	.type	"PinFlag-165.",@object  # @PinFlag-165.
	.bss
	.globl	"PinFlag-165."
	.align	4
"PinFlag-165.":
	.long	0                       # 0x0
	.size	"PinFlag-165.", 4

	.type	.L__unnamed_276,@object # @263
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_276:
	.asciz	"165."
	.size	.L__unnamed_276, 5

	.type	"PinFlag-166.",@object  # @PinFlag-166.
	.bss
	.globl	"PinFlag-166."
	.align	4
"PinFlag-166.":
	.long	0                       # 0x0
	.size	"PinFlag-166.", 4

	.type	.L__unnamed_277,@object # @264
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_277:
	.asciz	"166."
	.size	.L__unnamed_277, 5

	.type	"PinFlag-167.",@object  # @PinFlag-167.
	.bss
	.globl	"PinFlag-167."
	.align	4
"PinFlag-167.":
	.long	0                       # 0x0
	.size	"PinFlag-167.", 4

	.type	.L__unnamed_275,@object # @265
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_275:
	.asciz	"167."
	.size	.L__unnamed_275, 5

	.type	"PinFlag-168.",@object  # @PinFlag-168.
	.bss
	.globl	"PinFlag-168."
	.align	4
"PinFlag-168.":
	.long	0                       # 0x0
	.size	"PinFlag-168.", 4

	.type	.L__unnamed_274,@object # @266
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_274:
	.asciz	"168."
	.size	.L__unnamed_274, 5

	.type	"PinFlag-169.0",@object # @PinFlag-169.0
	.bss
	.globl	"PinFlag-169.0"
	.align	4
"PinFlag-169.0":
	.long	0                       # 0x0
	.size	"PinFlag-169.0", 4

	.type	.L__unnamed_273,@object # @267
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_273:
	.asciz	"169.0"
	.size	.L__unnamed_273, 6

	.type	"PinFlag-169.",@object  # @PinFlag-169.
	.bss
	.globl	"PinFlag-169."
	.align	4
"PinFlag-169.":
	.long	0                       # 0x0
	.size	"PinFlag-169.", 4

	.type	.L__unnamed_272,@object # @268
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_272:
	.asciz	"169."
	.size	.L__unnamed_272, 5

	.type	"PinFlag-171.",@object  # @PinFlag-171.
	.bss
	.globl	"PinFlag-171."
	.align	4
"PinFlag-171.":
	.long	0                       # 0x0
	.size	"PinFlag-171.", 4

	.type	"PinFlag-172.",@object  # @PinFlag-172.
	.globl	"PinFlag-172."
	.align	4
"PinFlag-172.":
	.long	0                       # 0x0
	.size	"PinFlag-172.", 4

	.type	"PinFlag-173.",@object  # @PinFlag-173.
	.globl	"PinFlag-173."
	.align	4
"PinFlag-173.":
	.long	0                       # 0x0
	.size	"PinFlag-173.", 4

	.type	"PinFlag-174.",@object  # @PinFlag-174.
	.globl	"PinFlag-174."
	.align	4
"PinFlag-174.":
	.long	0                       # 0x0
	.size	"PinFlag-174.", 4

	.type	"PinFlag-175.",@object  # @PinFlag-175.
	.globl	"PinFlag-175."
	.align	4
"PinFlag-175.":
	.long	0                       # 0x0
	.size	"PinFlag-175.", 4

	.type	"PinFlag-176.",@object  # @PinFlag-176.
	.globl	"PinFlag-176."
	.align	4
"PinFlag-176.":
	.long	0                       # 0x0
	.size	"PinFlag-176.", 4

	.type	"PinFlag-177.",@object  # @PinFlag-177.
	.globl	"PinFlag-177."
	.align	4
"PinFlag-177.":
	.long	0                       # 0x0
	.size	"PinFlag-177.", 4

	.type	"PinFlag-178.",@object  # @PinFlag-178.
	.globl	"PinFlag-178."
	.align	4
"PinFlag-178.":
	.long	0                       # 0x0
	.size	"PinFlag-178.", 4

	.type	"PinFlag-179.",@object  # @PinFlag-179.
	.globl	"PinFlag-179."
	.align	4
"PinFlag-179.":
	.long	0                       # 0x0
	.size	"PinFlag-179.", 4

	.type	"PinFlag-180.",@object  # @PinFlag-180.
	.globl	"PinFlag-180."
	.align	4
"PinFlag-180.":
	.long	0                       # 0x0
	.size	"PinFlag-180.", 4

	.type	"PinFlag-181.",@object  # @PinFlag-181.
	.globl	"PinFlag-181."
	.align	4
"PinFlag-181.":
	.long	0                       # 0x0
	.size	"PinFlag-181.", 4

	.type	"PinFlag-182.",@object  # @PinFlag-182.
	.globl	"PinFlag-182."
	.align	4
"PinFlag-182.":
	.long	0                       # 0x0
	.size	"PinFlag-182.", 4

	.type	"PinFlag-183.",@object  # @PinFlag-183.
	.globl	"PinFlag-183."
	.align	4
"PinFlag-183.":
	.long	0                       # 0x0
	.size	"PinFlag-183.", 4

	.type	"PinFlag-184.",@object  # @PinFlag-184.
	.globl	"PinFlag-184."
	.align	4
"PinFlag-184.":
	.long	0                       # 0x0
	.size	"PinFlag-184.", 4

	.type	"PinFlag-185.",@object  # @PinFlag-185.
	.globl	"PinFlag-185."
	.align	4
"PinFlag-185.":
	.long	0                       # 0x0
	.size	"PinFlag-185.", 4

	.type	"PinFlag-186.",@object  # @PinFlag-186.
	.globl	"PinFlag-186."
	.align	4
"PinFlag-186.":
	.long	0                       # 0x0
	.size	"PinFlag-186.", 4

	.type	"PinFlag-187.",@object  # @PinFlag-187.
	.globl	"PinFlag-187."
	.align	4
"PinFlag-187.":
	.long	0                       # 0x0
	.size	"PinFlag-187.", 4

	.type	"PinFlag-188.",@object  # @PinFlag-188.
	.globl	"PinFlag-188."
	.align	4
"PinFlag-188.":
	.long	0                       # 0x0
	.size	"PinFlag-188.", 4

	.type	"PinFlag-189.",@object  # @PinFlag-189.
	.globl	"PinFlag-189."
	.align	4
"PinFlag-189.":
	.long	0                       # 0x0
	.size	"PinFlag-189.", 4

	.type	"PinFlag-190.",@object  # @PinFlag-190.
	.globl	"PinFlag-190."
	.align	4
"PinFlag-190.":
	.long	0                       # 0x0
	.size	"PinFlag-190.", 4

	.type	"PinFlag-191.",@object  # @PinFlag-191.
	.globl	"PinFlag-191."
	.align	4
"PinFlag-191.":
	.long	0                       # 0x0
	.size	"PinFlag-191.", 4

	.type	"PinFlag-192.",@object  # @PinFlag-192.
	.globl	"PinFlag-192."
	.align	4
"PinFlag-192.":
	.long	0                       # 0x0
	.size	"PinFlag-192.", 4

	.type	"PinFlag-193.",@object  # @PinFlag-193.
	.globl	"PinFlag-193."
	.align	4
"PinFlag-193.":
	.long	0                       # 0x0
	.size	"PinFlag-193.", 4

	.type	"PinFlag-194.",@object  # @PinFlag-194.
	.globl	"PinFlag-194."
	.align	4
"PinFlag-194.":
	.long	0                       # 0x0
	.size	"PinFlag-194.", 4

	.type	"PinFlag-195.",@object  # @PinFlag-195.
	.globl	"PinFlag-195."
	.align	4
"PinFlag-195.":
	.long	0                       # 0x0
	.size	"PinFlag-195.", 4

	.type	"PinFlag-196.",@object  # @PinFlag-196.
	.globl	"PinFlag-196."
	.align	4
"PinFlag-196.":
	.long	0                       # 0x0
	.size	"PinFlag-196.", 4

	.type	"PinFlag-197.",@object  # @PinFlag-197.
	.globl	"PinFlag-197."
	.align	4
"PinFlag-197.":
	.long	0                       # 0x0
	.size	"PinFlag-197.", 4

	.type	"PinFlag-198.",@object  # @PinFlag-198.
	.globl	"PinFlag-198."
	.align	4
"PinFlag-198.":
	.long	0                       # 0x0
	.size	"PinFlag-198.", 4

	.type	"PinFlag-199.",@object  # @PinFlag-199.
	.globl	"PinFlag-199."
	.align	4
"PinFlag-199.":
	.long	0                       # 0x0
	.size	"PinFlag-199.", 4

	.type	"PinFlag-200.",@object  # @PinFlag-200.
	.globl	"PinFlag-200."
	.align	4
"PinFlag-200.":
	.long	0                       # 0x0
	.size	"PinFlag-200.", 4

	.type	"PinFlag-201.",@object  # @PinFlag-201.
	.globl	"PinFlag-201."
	.align	4
"PinFlag-201.":
	.long	0                       # 0x0
	.size	"PinFlag-201.", 4

	.type	"PinFlag-202.",@object  # @PinFlag-202.
	.globl	"PinFlag-202."
	.align	4
"PinFlag-202.":
	.long	0                       # 0x0
	.size	"PinFlag-202.", 4

	.type	"PinFlag-203.",@object  # @PinFlag-203.
	.globl	"PinFlag-203."
	.align	4
"PinFlag-203.":
	.long	0                       # 0x0
	.size	"PinFlag-203.", 4

	.type	"PinFlag-204.",@object  # @PinFlag-204.
	.globl	"PinFlag-204."
	.align	4
"PinFlag-204.":
	.long	0                       # 0x0
	.size	"PinFlag-204.", 4

	.type	"PinFlag-205.",@object  # @PinFlag-205.
	.globl	"PinFlag-205."
	.align	4
"PinFlag-205.":
	.long	0                       # 0x0
	.size	"PinFlag-205.", 4

	.type	"PinFlag-206.",@object  # @PinFlag-206.
	.globl	"PinFlag-206."
	.align	4
"PinFlag-206.":
	.long	0                       # 0x0
	.size	"PinFlag-206.", 4

	.type	"PinFlag-207.",@object  # @PinFlag-207.
	.globl	"PinFlag-207."
	.align	4
"PinFlag-207.":
	.long	0                       # 0x0
	.size	"PinFlag-207.", 4

	.type	"PinFlag-208.",@object  # @PinFlag-208.
	.globl	"PinFlag-208."
	.align	4
"PinFlag-208.":
	.long	0                       # 0x0
	.size	"PinFlag-208.", 4

	.type	"PinFlag-209.",@object  # @PinFlag-209.
	.globl	"PinFlag-209."
	.align	4
"PinFlag-209.":
	.long	0                       # 0x0
	.size	"PinFlag-209.", 4

	.type	"PinFlag-210.",@object  # @PinFlag-210.
	.globl	"PinFlag-210."
	.align	4
"PinFlag-210.":
	.long	0                       # 0x0
	.size	"PinFlag-210.", 4

	.type	"PinFlag-211.",@object  # @PinFlag-211.
	.globl	"PinFlag-211."
	.align	4
"PinFlag-211.":
	.long	0                       # 0x0
	.size	"PinFlag-211.", 4

	.type	"PinFlag-212.",@object  # @PinFlag-212.
	.globl	"PinFlag-212."
	.align	4
"PinFlag-212.":
	.long	0                       # 0x0
	.size	"PinFlag-212.", 4

	.type	"PinFlag-213.",@object  # @PinFlag-213.
	.globl	"PinFlag-213."
	.align	4
"PinFlag-213.":
	.long	0                       # 0x0
	.size	"PinFlag-213.", 4

	.type	"PinFlag-214.",@object  # @PinFlag-214.
	.globl	"PinFlag-214."
	.align	4
"PinFlag-214.":
	.long	0                       # 0x0
	.size	"PinFlag-214.", 4

	.type	"PinFlag-215.",@object  # @PinFlag-215.
	.globl	"PinFlag-215."
	.align	4
"PinFlag-215.":
	.long	0                       # 0x0
	.size	"PinFlag-215.", 4

	.type	"PinFlag-216.",@object  # @PinFlag-216.
	.globl	"PinFlag-216."
	.align	4
"PinFlag-216.":
	.long	0                       # 0x0
	.size	"PinFlag-216.", 4

	.type	"PinFlag-217.",@object  # @PinFlag-217.
	.globl	"PinFlag-217."
	.align	4
"PinFlag-217.":
	.long	0                       # 0x0
	.size	"PinFlag-217.", 4

	.type	"PinFlag-218.",@object  # @PinFlag-218.
	.globl	"PinFlag-218."
	.align	4
"PinFlag-218.":
	.long	0                       # 0x0
	.size	"PinFlag-218.", 4

	.type	"PinFlag-219.",@object  # @PinFlag-219.
	.globl	"PinFlag-219."
	.align	4
"PinFlag-219.":
	.long	0                       # 0x0
	.size	"PinFlag-219.", 4

	.type	"PinFlag-220.",@object  # @PinFlag-220.
	.globl	"PinFlag-220."
	.align	4
"PinFlag-220.":
	.long	0                       # 0x0
	.size	"PinFlag-220.", 4

	.type	"PinFlag-221.",@object  # @PinFlag-221.
	.globl	"PinFlag-221."
	.align	4
"PinFlag-221.":
	.long	0                       # 0x0
	.size	"PinFlag-221.", 4

	.type	"PinFlag-222.",@object  # @PinFlag-222.
	.globl	"PinFlag-222."
	.align	4
"PinFlag-222.":
	.long	0                       # 0x0
	.size	"PinFlag-222.", 4

	.type	"PinFlag-223.",@object  # @PinFlag-223.
	.globl	"PinFlag-223."
	.align	4
"PinFlag-223.":
	.long	0                       # 0x0
	.size	"PinFlag-223.", 4

	.type	"PinFlag-224.",@object  # @PinFlag-224.
	.globl	"PinFlag-224."
	.align	4
"PinFlag-224.":
	.long	0                       # 0x0
	.size	"PinFlag-224.", 4

	.type	"PinFlag-225.",@object  # @PinFlag-225.
	.globl	"PinFlag-225."
	.align	4
"PinFlag-225.":
	.long	0                       # 0x0
	.size	"PinFlag-225.", 4

	.type	"PinFlag-226.",@object  # @PinFlag-226.
	.globl	"PinFlag-226."
	.align	4
"PinFlag-226.":
	.long	0                       # 0x0
	.size	"PinFlag-226.", 4

	.type	"PinFlag-227.",@object  # @PinFlag-227.
	.globl	"PinFlag-227."
	.align	4
"PinFlag-227.":
	.long	0                       # 0x0
	.size	"PinFlag-227.", 4

	.type	"PinFlag-228.",@object  # @PinFlag-228.
	.globl	"PinFlag-228."
	.align	4
"PinFlag-228.":
	.long	0                       # 0x0
	.size	"PinFlag-228.", 4

	.type	"PinFlag-229.",@object  # @PinFlag-229.
	.globl	"PinFlag-229."
	.align	4
"PinFlag-229.":
	.long	0                       # 0x0
	.size	"PinFlag-229.", 4

	.type	"PinFlag-230.",@object  # @PinFlag-230.
	.globl	"PinFlag-230."
	.align	4
"PinFlag-230.":
	.long	0                       # 0x0
	.size	"PinFlag-230.", 4

	.type	"PinFlag-231.",@object  # @PinFlag-231.
	.globl	"PinFlag-231."
	.align	4
"PinFlag-231.":
	.long	0                       # 0x0
	.size	"PinFlag-231.", 4

	.type	"PinFlag-232.",@object  # @PinFlag-232.
	.globl	"PinFlag-232."
	.align	4
"PinFlag-232.":
	.long	0                       # 0x0
	.size	"PinFlag-232.", 4

	.type	"PinFlag-233.",@object  # @PinFlag-233.
	.globl	"PinFlag-233."
	.align	4
"PinFlag-233.":
	.long	0                       # 0x0
	.size	"PinFlag-233.", 4

	.type	"PinFlag-234.",@object  # @PinFlag-234.
	.globl	"PinFlag-234."
	.align	4
"PinFlag-234.":
	.long	0                       # 0x0
	.size	"PinFlag-234.", 4

	.type	"PinFlag-235.",@object  # @PinFlag-235.
	.globl	"PinFlag-235."
	.align	4
"PinFlag-235.":
	.long	0                       # 0x0
	.size	"PinFlag-235.", 4

	.type	"PinFlag-236.",@object  # @PinFlag-236.
	.globl	"PinFlag-236."
	.align	4
"PinFlag-236.":
	.long	0                       # 0x0
	.size	"PinFlag-236.", 4

	.type	"PinFlag-237.",@object  # @PinFlag-237.
	.globl	"PinFlag-237."
	.align	4
"PinFlag-237.":
	.long	0                       # 0x0
	.size	"PinFlag-237.", 4

	.type	"PinFlag-238.",@object  # @PinFlag-238.
	.globl	"PinFlag-238."
	.align	4
"PinFlag-238.":
	.long	0                       # 0x0
	.size	"PinFlag-238.", 4

	.type	"PinFlag-239.",@object  # @PinFlag-239.
	.globl	"PinFlag-239."
	.align	4
"PinFlag-239.":
	.long	0                       # 0x0
	.size	"PinFlag-239.", 4

	.type	"PinFlag-240.",@object  # @PinFlag-240.
	.globl	"PinFlag-240."
	.align	4
"PinFlag-240.":
	.long	0                       # 0x0
	.size	"PinFlag-240.", 4

	.type	"PinFlag-241.",@object  # @PinFlag-241.
	.globl	"PinFlag-241."
	.align	4
"PinFlag-241.":
	.long	0                       # 0x0
	.size	"PinFlag-241.", 4

	.type	"PinFlag-242.",@object  # @PinFlag-242.
	.globl	"PinFlag-242."
	.align	4
"PinFlag-242.":
	.long	0                       # 0x0
	.size	"PinFlag-242.", 4

	.type	"PinFlag-243.",@object  # @PinFlag-243.
	.globl	"PinFlag-243."
	.align	4
"PinFlag-243.":
	.long	0                       # 0x0
	.size	"PinFlag-243.", 4

	.type	"PinFlag-244.",@object  # @PinFlag-244.
	.globl	"PinFlag-244."
	.align	4
"PinFlag-244.":
	.long	0                       # 0x0
	.size	"PinFlag-244.", 4

	.type	"PinFlag-245.",@object  # @PinFlag-245.
	.globl	"PinFlag-245."
	.align	4
"PinFlag-245.":
	.long	0                       # 0x0
	.size	"PinFlag-245.", 4

	.type	"PinFlag-246.",@object  # @PinFlag-246.
	.globl	"PinFlag-246."
	.align	4
"PinFlag-246.":
	.long	0                       # 0x0
	.size	"PinFlag-246.", 4

	.type	"PinFlag-247.",@object  # @PinFlag-247.
	.globl	"PinFlag-247."
	.align	4
"PinFlag-247.":
	.long	0                       # 0x0
	.size	"PinFlag-247.", 4

	.type	"PinFlag-248.",@object  # @PinFlag-248.
	.globl	"PinFlag-248."
	.align	4
"PinFlag-248.":
	.long	0                       # 0x0
	.size	"PinFlag-248.", 4

	.type	"PinFlag-249.",@object  # @PinFlag-249.
	.globl	"PinFlag-249."
	.align	4
"PinFlag-249.":
	.long	0                       # 0x0
	.size	"PinFlag-249.", 4

	.type	"PinFlag-250.",@object  # @PinFlag-250.
	.globl	"PinFlag-250."
	.align	4
"PinFlag-250.":
	.long	0                       # 0x0
	.size	"PinFlag-250.", 4

	.type	"PinFlag-251.",@object  # @PinFlag-251.
	.globl	"PinFlag-251."
	.align	4
"PinFlag-251.":
	.long	0                       # 0x0
	.size	"PinFlag-251.", 4

	.type	"PinFlag-252.",@object  # @PinFlag-252.
	.globl	"PinFlag-252."
	.align	4
"PinFlag-252.":
	.long	0                       # 0x0
	.size	"PinFlag-252.", 4

	.type	"PinFlag-253.",@object  # @PinFlag-253.
	.globl	"PinFlag-253."
	.align	4
"PinFlag-253.":
	.long	0                       # 0x0
	.size	"PinFlag-253.", 4

	.type	"PinFlag-254.",@object  # @PinFlag-254.
	.globl	"PinFlag-254."
	.align	4
"PinFlag-254.":
	.long	0                       # 0x0
	.size	"PinFlag-254.", 4

	.type	"PinFlag-255.",@object  # @PinFlag-255.
	.globl	"PinFlag-255."
	.align	4
"PinFlag-255.":
	.long	0                       # 0x0
	.size	"PinFlag-255.", 4

	.type	"PinFlag-256.",@object  # @PinFlag-256.
	.globl	"PinFlag-256."
	.align	4
"PinFlag-256.":
	.long	0                       # 0x0
	.size	"PinFlag-256.", 4

	.type	"PinFlag-257.",@object  # @PinFlag-257.
	.globl	"PinFlag-257."
	.align	4
"PinFlag-257.":
	.long	0                       # 0x0
	.size	"PinFlag-257.", 4

	.type	"PinFlag-258.",@object  # @PinFlag-258.
	.globl	"PinFlag-258."
	.align	4
"PinFlag-258.":
	.long	0                       # 0x0
	.size	"PinFlag-258.", 4

	.type	"PinFlag-259.",@object  # @PinFlag-259.
	.globl	"PinFlag-259."
	.align	4
"PinFlag-259.":
	.long	0                       # 0x0
	.size	"PinFlag-259.", 4

	.type	"PinFlag-260.",@object  # @PinFlag-260.
	.globl	"PinFlag-260."
	.align	4
"PinFlag-260.":
	.long	0                       # 0x0
	.size	"PinFlag-260.", 4

	.type	"PinFlag-261.",@object  # @PinFlag-261.
	.globl	"PinFlag-261."
	.align	4
"PinFlag-261.":
	.long	0                       # 0x0
	.size	"PinFlag-261.", 4

	.type	"PinFlag-262.",@object  # @PinFlag-262.
	.globl	"PinFlag-262."
	.align	4
"PinFlag-262.":
	.long	0                       # 0x0
	.size	"PinFlag-262.", 4

	.type	"PinFlag-263.",@object  # @PinFlag-263.
	.globl	"PinFlag-263."
	.align	4
"PinFlag-263.":
	.long	0                       # 0x0
	.size	"PinFlag-263.", 4

	.type	"PinFlag-264.",@object  # @PinFlag-264.
	.globl	"PinFlag-264."
	.align	4
"PinFlag-264.":
	.long	0                       # 0x0
	.size	"PinFlag-264.", 4

	.type	"PinFlag-265.",@object  # @PinFlag-265.
	.globl	"PinFlag-265."
	.align	4
"PinFlag-265.":
	.long	0                       # 0x0
	.size	"PinFlag-265.", 4

	.type	"PinFlag-266.",@object  # @PinFlag-266.
	.globl	"PinFlag-266."
	.align	4
"PinFlag-266.":
	.long	0                       # 0x0
	.size	"PinFlag-266.", 4

	.type	"PinFlag-267.",@object  # @PinFlag-267.
	.globl	"PinFlag-267."
	.align	4
"PinFlag-267.":
	.long	0                       # 0x0
	.size	"PinFlag-267.", 4

	.type	"PinFlag-268.",@object  # @PinFlag-268.
	.globl	"PinFlag-268."
	.align	4
"PinFlag-268.":
	.long	0                       # 0x0
	.size	"PinFlag-268.", 4

	.type	"PinFlag-269.",@object  # @PinFlag-269.
	.globl	"PinFlag-269."
	.align	4
"PinFlag-269.":
	.long	0                       # 0x0
	.size	"PinFlag-269.", 4

	.type	"PinFlag-270.",@object  # @PinFlag-270.
	.globl	"PinFlag-270."
	.align	4
"PinFlag-270.":
	.long	0                       # 0x0
	.size	"PinFlag-270.", 4

	.type	"PinFlag-271.",@object  # @PinFlag-271.
	.globl	"PinFlag-271."
	.align	4
"PinFlag-271.":
	.long	0                       # 0x0
	.size	"PinFlag-271.", 4

	.type	"PinFlag-272.",@object  # @PinFlag-272.
	.globl	"PinFlag-272."
	.align	4
"PinFlag-272.":
	.long	0                       # 0x0
	.size	"PinFlag-272.", 4

	.type	"PinFlag-273.",@object  # @PinFlag-273.
	.globl	"PinFlag-273."
	.align	4
"PinFlag-273.":
	.long	0                       # 0x0
	.size	"PinFlag-273.", 4

	.type	"PinFlag-274.",@object  # @PinFlag-274.
	.globl	"PinFlag-274."
	.align	4
"PinFlag-274.":
	.long	0                       # 0x0
	.size	"PinFlag-274.", 4

	.type	"PinFlag-275.",@object  # @PinFlag-275.
	.globl	"PinFlag-275."
	.align	4
"PinFlag-275.":
	.long	0                       # 0x0
	.size	"PinFlag-275.", 4

	.type	"PinFlag-276.",@object  # @PinFlag-276.
	.globl	"PinFlag-276."
	.align	4
"PinFlag-276.":
	.long	0                       # 0x0
	.size	"PinFlag-276.", 4

	.type	"PinFlag-277.",@object  # @PinFlag-277.
	.globl	"PinFlag-277."
	.align	4
"PinFlag-277.":
	.long	0                       # 0x0
	.size	"PinFlag-277.", 4

	.type	"PinFlag-278.",@object  # @PinFlag-278.
	.globl	"PinFlag-278."
	.align	4
"PinFlag-278.":
	.long	0                       # 0x0
	.size	"PinFlag-278.", 4

	.type	"PinFlag-279.",@object  # @PinFlag-279.
	.globl	"PinFlag-279."
	.align	4
"PinFlag-279.":
	.long	0                       # 0x0
	.size	"PinFlag-279.", 4

	.type	"PinFlag-280.",@object  # @PinFlag-280.
	.globl	"PinFlag-280."
	.align	4
"PinFlag-280.":
	.long	0                       # 0x0
	.size	"PinFlag-280.", 4

	.type	"PinFlag-281.",@object  # @PinFlag-281.
	.globl	"PinFlag-281."
	.align	4
"PinFlag-281.":
	.long	0                       # 0x0
	.size	"PinFlag-281.", 4

	.type	"PinFlag-282.",@object  # @PinFlag-282.
	.globl	"PinFlag-282."
	.align	4
"PinFlag-282.":
	.long	0                       # 0x0
	.size	"PinFlag-282.", 4

	.type	"PinFlag-283.",@object  # @PinFlag-283.
	.globl	"PinFlag-283."
	.align	4
"PinFlag-283.":
	.long	0                       # 0x0
	.size	"PinFlag-283.", 4

	.type	"PinFlag-284.",@object  # @PinFlag-284.
	.globl	"PinFlag-284."
	.align	4
"PinFlag-284.":
	.long	0                       # 0x0
	.size	"PinFlag-284.", 4

	.type	"PinFlag-285.",@object  # @PinFlag-285.
	.globl	"PinFlag-285."
	.align	4
"PinFlag-285.":
	.long	0                       # 0x0
	.size	"PinFlag-285.", 4

	.type	"PinFlag-286.",@object  # @PinFlag-286.
	.globl	"PinFlag-286."
	.align	4
"PinFlag-286.":
	.long	0                       # 0x0
	.size	"PinFlag-286.", 4

	.type	"PinFlag-287.",@object  # @PinFlag-287.
	.globl	"PinFlag-287."
	.align	4
"PinFlag-287.":
	.long	0                       # 0x0
	.size	"PinFlag-287.", 4

	.type	"PinFlag-288.",@object  # @PinFlag-288.
	.globl	"PinFlag-288."
	.align	4
"PinFlag-288.":
	.long	0                       # 0x0
	.size	"PinFlag-288.", 4

	.type	"PinFlag-289.",@object  # @PinFlag-289.
	.globl	"PinFlag-289."
	.align	4
"PinFlag-289.":
	.long	0                       # 0x0
	.size	"PinFlag-289.", 4

	.type	"PinFlag-290.",@object  # @PinFlag-290.
	.globl	"PinFlag-290."
	.align	4
"PinFlag-290.":
	.long	0                       # 0x0
	.size	"PinFlag-290.", 4

	.type	"PinFlag-291.",@object  # @PinFlag-291.
	.globl	"PinFlag-291."
	.align	4
"PinFlag-291.":
	.long	0                       # 0x0
	.size	"PinFlag-291.", 4

	.type	"PinFlag-292.",@object  # @PinFlag-292.
	.globl	"PinFlag-292."
	.align	4
"PinFlag-292.":
	.long	0                       # 0x0
	.size	"PinFlag-292.", 4

	.type	"PinFlag-293.",@object  # @PinFlag-293.
	.globl	"PinFlag-293."
	.align	4
"PinFlag-293.":
	.long	0                       # 0x0
	.size	"PinFlag-293.", 4

	.type	"PinFlag-294.",@object  # @PinFlag-294.
	.globl	"PinFlag-294."
	.align	4
"PinFlag-294.":
	.long	0                       # 0x0
	.size	"PinFlag-294.", 4

	.type	"PinFlag-295.",@object  # @PinFlag-295.
	.globl	"PinFlag-295."
	.align	4
"PinFlag-295.":
	.long	0                       # 0x0
	.size	"PinFlag-295.", 4

	.type	"PinFlag-296.",@object  # @PinFlag-296.
	.globl	"PinFlag-296."
	.align	4
"PinFlag-296.":
	.long	0                       # 0x0
	.size	"PinFlag-296.", 4

	.type	"PinFlag-297.",@object  # @PinFlag-297.
	.globl	"PinFlag-297."
	.align	4
"PinFlag-297.":
	.long	0                       # 0x0
	.size	"PinFlag-297.", 4

	.type	"PinFlag-298.",@object  # @PinFlag-298.
	.globl	"PinFlag-298."
	.align	4
"PinFlag-298.":
	.long	0                       # 0x0
	.size	"PinFlag-298.", 4

	.type	"PinFlag-299.",@object  # @PinFlag-299.
	.globl	"PinFlag-299."
	.align	4
"PinFlag-299.":
	.long	0                       # 0x0
	.size	"PinFlag-299.", 4

	.type	"PinFlag-300.",@object  # @PinFlag-300.
	.globl	"PinFlag-300."
	.align	4
"PinFlag-300.":
	.long	0                       # 0x0
	.size	"PinFlag-300.", 4

	.type	"PinFlag-301.",@object  # @PinFlag-301.
	.globl	"PinFlag-301."
	.align	4
"PinFlag-301.":
	.long	0                       # 0x0
	.size	"PinFlag-301.", 4

	.type	"PinFlag-302.",@object  # @PinFlag-302.
	.globl	"PinFlag-302."
	.align	4
"PinFlag-302.":
	.long	0                       # 0x0
	.size	"PinFlag-302.", 4

	.type	"PinFlag-303.",@object  # @PinFlag-303.
	.globl	"PinFlag-303."
	.align	4
"PinFlag-303.":
	.long	0                       # 0x0
	.size	"PinFlag-303.", 4

	.type	"PinFlag-304.",@object  # @PinFlag-304.
	.globl	"PinFlag-304."
	.align	4
"PinFlag-304.":
	.long	0                       # 0x0
	.size	"PinFlag-304.", 4

	.type	"PinFlag-305.",@object  # @PinFlag-305.
	.globl	"PinFlag-305."
	.align	4
"PinFlag-305.":
	.long	0                       # 0x0
	.size	"PinFlag-305.", 4

	.type	"PinFlag-306.",@object  # @PinFlag-306.
	.globl	"PinFlag-306."
	.align	4
"PinFlag-306.":
	.long	0                       # 0x0
	.size	"PinFlag-306.", 4

	.type	"PinFlag-307.",@object  # @PinFlag-307.
	.globl	"PinFlag-307."
	.align	4
"PinFlag-307.":
	.long	0                       # 0x0
	.size	"PinFlag-307.", 4

	.type	"PinFlag-308.",@object  # @PinFlag-308.
	.globl	"PinFlag-308."
	.align	4
"PinFlag-308.":
	.long	0                       # 0x0
	.size	"PinFlag-308.", 4

	.type	"PinFlag-309.",@object  # @PinFlag-309.
	.globl	"PinFlag-309."
	.align	4
"PinFlag-309.":
	.long	0                       # 0x0
	.size	"PinFlag-309.", 4

	.type	"PinFlag-310.",@object  # @PinFlag-310.
	.globl	"PinFlag-310."
	.align	4
"PinFlag-310.":
	.long	0                       # 0x0
	.size	"PinFlag-310.", 4

	.type	"PinFlag-311.",@object  # @PinFlag-311.
	.globl	"PinFlag-311."
	.align	4
"PinFlag-311.":
	.long	0                       # 0x0
	.size	"PinFlag-311.", 4

	.type	"PinFlag-312.",@object  # @PinFlag-312.
	.globl	"PinFlag-312."
	.align	4
"PinFlag-312.":
	.long	0                       # 0x0
	.size	"PinFlag-312.", 4

	.type	"PinFlag-313.",@object  # @PinFlag-313.
	.globl	"PinFlag-313."
	.align	4
"PinFlag-313.":
	.long	0                       # 0x0
	.size	"PinFlag-313.", 4

	.type	"PinFlag-314.",@object  # @PinFlag-314.
	.globl	"PinFlag-314."
	.align	4
"PinFlag-314.":
	.long	0                       # 0x0
	.size	"PinFlag-314.", 4

	.type	"PinFlag-315.",@object  # @PinFlag-315.
	.globl	"PinFlag-315."
	.align	4
"PinFlag-315.":
	.long	0                       # 0x0
	.size	"PinFlag-315.", 4

	.type	"PinFlag-316.",@object  # @PinFlag-316.
	.globl	"PinFlag-316."
	.align	4
"PinFlag-316.":
	.long	0                       # 0x0
	.size	"PinFlag-316.", 4

	.type	"PinFlag-318.0",@object # @PinFlag-318.0
	.globl	"PinFlag-318.0"
	.align	4
"PinFlag-318.0":
	.long	0                       # 0x0
	.size	"PinFlag-318.0", 4

	.type	.L__unnamed_8,@object   # @269
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_8:
	.asciz	"318.0"
	.size	.L__unnamed_8, 6

	.type	"PinFlag-318.",@object  # @PinFlag-318.
	.bss
	.globl	"PinFlag-318."
	.align	4
"PinFlag-318.":
	.long	0                       # 0x0
	.size	"PinFlag-318.", 4

	.type	.L__unnamed_7,@object   # @270
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_7:
	.asciz	"318."
	.size	.L__unnamed_7, 5

	.type	"PinFlag-319.",@object  # @PinFlag-319.
	.bss
	.globl	"PinFlag-319."
	.align	4
"PinFlag-319.":
	.long	0                       # 0x0
	.size	"PinFlag-319.", 4

	.type	.L__unnamed_9,@object   # @271
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_9:
	.asciz	"319."
	.size	.L__unnamed_9, 5

	.type	.L__unnamed_86,@object  # @272
.L__unnamed_86:
	.asciz	"312."
	.size	.L__unnamed_86, 5

	.type	.L__unnamed_118,@object # @273
.L__unnamed_118:
	.asciz	"315."
	.size	.L__unnamed_118, 5

	.type	.L__unnamed_181,@object # @274
.L__unnamed_181:
	.asciz	"225."
	.size	.L__unnamed_181, 5

	.type	.L__unnamed_171,@object # @275
.L__unnamed_171:
	.asciz	"313."
	.size	.L__unnamed_171, 5

	.type	.L__unnamed_237,@object # @276
.L__unnamed_237:
	.asciz	"316."
	.size	.L__unnamed_237, 5


	.ident	"clang version 3.8.0 (tags/RELEASE_380/final)"
	.ident	"clang version 3.8.0 (tags/RELEASE_380/final)"
	.ident	"clang version 3.8.0 (tags/RELEASE_380/final)"
	.ident	"clang version 3.8.0 (tags/RELEASE_380/final)"
	.ident	"clang version 3.8.0 (tags/RELEASE_380/final)"
	.ident	"clang version 3.8.0 (tags/RELEASE_380/final)"
	.ident	"clang version 3.8.0 (tags/RELEASE_380/final)"
	.ident	"clang version 3.8.0 (tags/RELEASE_380/final)"
	.ident	"clang version 3.8.0 (tags/RELEASE_380/final)"
	.section	".note.GNU-stack","",@progbits
